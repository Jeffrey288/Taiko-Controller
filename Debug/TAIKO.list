
TAIKO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016f0c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00019874  08017100  08017100  00027100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08030974  08030974  000502f8  2**0
                  CONTENTS
  4 .ARM          00000000  08030974  08030974  000502f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08030974  08030974  000502f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08030974  08030974  00040974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08030978  08030978  00040978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  0803097c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012dc  200002f8  08030c74  000502f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200015d4  08030c74  000515d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000502f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030507  00000000  00000000  00050321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006fd2  00000000  00000000  00080828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002928  00000000  00000000  00087800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002648  00000000  00000000  0008a128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249ea  00000000  00000000  0008c770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035089  00000000  00000000  000b115a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbd3a  00000000  00000000  000e61e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a1f1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000be40  00000000  00000000  001a1f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200002f8 	.word	0x200002f8
 800020c:	00000000 	.word	0x00000000
 8000210:	080170e4 	.word	0x080170e4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200002fc 	.word	0x200002fc
 800022c:	080170e4 	.word	0x080170e4

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <AddDrum>:

AudioTrack audio_tracks[MAX_TRACKS];
int num_tracks = 0;
int audio_dma_on = 0;

void AddDrum(DrumSound sound) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	AddTrack((AudioTrack) {
		.buff = drum_sounds[sound],
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <AddDrum+0x38>)
 8000b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	AddTrack((AudioTrack) {
 8000b7a:	60bb      	str	r3, [r7, #8]
		.length = drum_sound_lengths[sound],
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <AddDrum+0x3c>)
 8000b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
	AddTrack((AudioTrack) {
 8000b84:	81bb      	strh	r3, [r7, #12]
 8000b86:	2300      	movs	r3, #0
 8000b88:	81fb      	strh	r3, [r7, #14]
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b92:	f000 f809 	bl	8000ba8 <AddTrack>
		.pos = 0
	});
}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	080172a0 	.word	0x080172a0

08000ba8 <AddTrack>:

void AddTrack(AudioTrack track) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	463b      	mov	r3, r7
 8000bb0:	e883 0003 	stmia.w	r3, {r0, r1}
	if (num_tracks >= MAX_TRACKS) return;
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <AddTrack+0x3c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b09      	cmp	r3, #9
 8000bba:	dc0d      	bgt.n	8000bd8 <AddTrack+0x30>
	audio_tracks[num_tracks++] = track;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <AddTrack+0x3c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	1c5a      	adds	r2, r3, #1
 8000bc2:	4908      	ldr	r1, [pc, #32]	; (8000be4 <AddTrack+0x3c>)
 8000bc4:	600a      	str	r2, [r1, #0]
 8000bc6:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <AddTrack+0x40>)
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	4413      	add	r3, r2
 8000bcc:	463a      	mov	r2, r7
 8000bce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bd2:	e883 0003 	stmia.w	r3, {r0, r1}
 8000bd6:	e000      	b.n	8000bda <AddTrack+0x32>
	if (num_tracks >= MAX_TRACKS) return;
 8000bd8:	bf00      	nop
}
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	2000074c 	.word	0x2000074c
 8000be8:	200006fc 	.word	0x200006fc

08000bec <RemoveTrack>:

void RemoveTrack(uint16_t index) {
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]
	if (num_tracks <= 0) return;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <RemoveTrack+0x44>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	dd12      	ble.n	8000c24 <RemoveTrack+0x38>
	audio_tracks[index] = audio_tracks[--num_tracks];
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <RemoveTrack+0x44>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <RemoveTrack+0x44>)
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <RemoveTrack+0x44>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	4809      	ldr	r0, [pc, #36]	; (8000c34 <RemoveTrack+0x48>)
 8000c10:	4908      	ldr	r1, [pc, #32]	; (8000c34 <RemoveTrack+0x48>)
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	4403      	add	r3, r0
 8000c16:	00d2      	lsls	r2, r2, #3
 8000c18:	440a      	add	r2, r1
 8000c1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c1e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c22:	e000      	b.n	8000c26 <RemoveTrack+0x3a>
	if (num_tracks <= 0) return;
 8000c24:	bf00      	nop
}
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	2000074c 	.word	0x2000074c
 8000c34:	200006fc 	.word	0x200006fc

08000c38 <PrecomputeMix>:

void PrecomputeMix() {
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b087      	sub	sp, #28
 8000c3c:	af02      	add	r7, sp, #8

	if (num_tracks <= 0) {
 8000c3e:	4b55      	ldr	r3, [pc, #340]	; (8000d94 <PrecomputeMix+0x15c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	dc11      	bgt.n	8000c6a <PrecomputeMix+0x32>
		if (audio_dma_on) {
 8000c46:	4b54      	ldr	r3, [pc, #336]	; (8000d98 <PrecomputeMix+0x160>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d006      	beq.n	8000c5c <PrecomputeMix+0x24>
			HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4852      	ldr	r0, [pc, #328]	; (8000d9c <PrecomputeMix+0x164>)
 8000c52:	f002 ffb9 	bl	8003bc8 <HAL_DAC_Stop_DMA>
			audio_dma_on = 0;
 8000c56:	4b50      	ldr	r3, [pc, #320]	; (8000d98 <PrecomputeMix+0x160>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
		}
		memset(audio_buff, 0, AUDIO_BUFF_LENGTH * 2);
 8000c5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c60:	2100      	movs	r1, #0
 8000c62:	484f      	ldr	r0, [pc, #316]	; (8000da0 <PrecomputeMix+0x168>)
 8000c64:	f013 fc56 	bl	8014514 <memset>
			}
		}

	}

}
 8000c68:	e090      	b.n	8000d8c <PrecomputeMix+0x154>
		if (!audio_dma_on) {
 8000c6a:	4b4b      	ldr	r3, [pc, #300]	; (8000d98 <PrecomputeMix+0x160>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d126      	bne.n	8000cc0 <PrecomputeMix+0x88>
			HAL_TIM_Base_Stop(&htim2);
 8000c72:	484c      	ldr	r0, [pc, #304]	; (8000da4 <PrecomputeMix+0x16c>)
 8000c74:	f008 ff08 	bl	8009a88 <HAL_TIM_Base_Stop>
			HAL_TIM_Base_Stop(&htim4);
 8000c78:	484b      	ldr	r0, [pc, #300]	; (8000da8 <PrecomputeMix+0x170>)
 8000c7a:	f008 ff05 	bl	8009a88 <HAL_TIM_Base_Stop>
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)audio_buff, AUDIO_BUFF_LENGTH, DAC_ALIGN_12B_L);
 8000c7e:	2304      	movs	r3, #4
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c86:	4a46      	ldr	r2, [pc, #280]	; (8000da0 <PrecomputeMix+0x168>)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4844      	ldr	r0, [pc, #272]	; (8000d9c <PrecomputeMix+0x164>)
 8000c8c:	f002 feec 	bl	8003a68 <HAL_DAC_Start_DMA>
			TIM2->CNT = 0;
 8000c90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c94:	2200      	movs	r2, #0
 8000c96:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8000c98:	4b44      	ldr	r3, [pc, #272]	; (8000dac <PrecomputeMix+0x174>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim4);
 8000c9e:	4842      	ldr	r0, [pc, #264]	; (8000da8 <PrecomputeMix+0x170>)
 8000ca0:	f008 ff18 	bl	8009ad4 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start(&htim2);
 8000ca4:	483f      	ldr	r0, [pc, #252]	; (8000da4 <PrecomputeMix+0x16c>)
 8000ca6:	f008 fe97 	bl	80099d8 <HAL_TIM_Base_Start>
			__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8000caa:	4b3e      	ldr	r3, [pc, #248]	; (8000da4 <PrecomputeMix+0x16c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	4b3c      	ldr	r3, [pc, #240]	; (8000da4 <PrecomputeMix+0x16c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f042 0201 	orr.w	r2, r2, #1
 8000cb8:	60da      	str	r2, [r3, #12]
			audio_dma_on = 1;
 8000cba:	4b37      	ldr	r3, [pc, #220]	; (8000d98 <PrecomputeMix+0x160>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	e05e      	b.n	8000d84 <PrecomputeMix+0x14c>
			int32_t sum = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
			int j = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
			while (j < num_tracks) {
 8000cce:	e033      	b.n	8000d38 <PrecomputeMix+0x100>
				sum += audio_tracks[j].buff[audio_tracks[j].pos++] / 4;
 8000cd0:	4a37      	ldr	r2, [pc, #220]	; (8000db0 <PrecomputeMix+0x178>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8000cd8:	4a35      	ldr	r2, [pc, #212]	; (8000db0 <PrecomputeMix+0x178>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	4413      	add	r3, r2
 8000ce0:	88da      	ldrh	r2, [r3, #6]
 8000ce2:	1c53      	adds	r3, r2, #1
 8000ce4:	b29c      	uxth	r4, r3
 8000ce6:	4832      	ldr	r0, [pc, #200]	; (8000db0 <PrecomputeMix+0x178>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	4403      	add	r3, r0
 8000cee:	4620      	mov	r0, r4
 8000cf0:	80d8      	strh	r0, [r3, #6]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	da00      	bge.n	8000d02 <PrecomputeMix+0xca>
 8000d00:	3303      	adds	r3, #3
 8000d02:	109b      	asrs	r3, r3, #2
 8000d04:	b21b      	sxth	r3, r3
 8000d06:	461a      	mov	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	60bb      	str	r3, [r7, #8]
				if (audio_tracks[j].pos > audio_tracks[j].length) {
 8000d0e:	4a28      	ldr	r2, [pc, #160]	; (8000db0 <PrecomputeMix+0x178>)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4413      	add	r3, r2
 8000d16:	88da      	ldrh	r2, [r3, #6]
 8000d18:	4925      	ldr	r1, [pc, #148]	; (8000db0 <PrecomputeMix+0x178>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	440b      	add	r3, r1
 8000d20:	889b      	ldrh	r3, [r3, #4]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d905      	bls.n	8000d32 <PrecomputeMix+0xfa>
					RemoveTrack(j);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff5e 	bl	8000bec <RemoveTrack>
 8000d30:	e002      	b.n	8000d38 <PrecomputeMix+0x100>
					j++;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3301      	adds	r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
			while (j < num_tracks) {
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <PrecomputeMix+0x15c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	dbc6      	blt.n	8000cd0 <PrecomputeMix+0x98>
			if (sum < -32768) {
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000d48:	da05      	bge.n	8000d56 <PrecomputeMix+0x11e>
				audio_buff[i] = 0;
 8000d4a:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <PrecomputeMix+0x168>)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d54:	e013      	b.n	8000d7e <PrecomputeMix+0x146>
			} else if (sum > 32767) {
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d5c:	db06      	blt.n	8000d6c <PrecomputeMix+0x134>
				audio_buff[i] = 65535;
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <PrecomputeMix+0x168>)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d6a:	e008      	b.n	8000d7e <PrecomputeMix+0x146>
				audio_buff[i] = sum + 32768;
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000d74:	b299      	uxth	r1, r3
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <PrecomputeMix+0x168>)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3301      	adds	r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d8a:	db9c      	blt.n	8000cc6 <PrecomputeMix+0x8e>
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	2000074c 	.word	0x2000074c
 8000d98:	20000750 	.word	0x20000750
 8000d9c:	20000920 	.word	0x20000920
 8000da0:	20000314 	.word	0x20000314
 8000da4:	20000b44 	.word	0x20000b44
 8000da8:	20000bd4 	.word	0x20000bd4
 8000dac:	40000800 	.word	0x40000800
 8000db0:	200006fc 	.word	0x200006fc

08000db4 <ButtonPadInit>:
#include "button.h"

GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
void ButtonPadInit() {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2110      	movs	r1, #16
 8000dbc:	480a      	ldr	r0, [pc, #40]	; (8000de8 <ButtonPadInit+0x34>)
 8000dbe:	f003 fe6a 	bl	8004a96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	4808      	ldr	r0, [pc, #32]	; (8000de8 <ButtonPadInit+0x34>)
 8000dc8:	f003 fe65 	bl	8004a96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2140      	movs	r1, #64	; 0x40
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <ButtonPadInit+0x34>)
 8000dd2:	f003 fe60 	bl	8004a96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ddc:	4803      	ldr	r0, [pc, #12]	; (8000dec <ButtonPadInit+0x38>)
 8000dde:	f003 fe5a 	bl	8004a96 <HAL_GPIO_WritePin>
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40011800 	.word	0x40011800
 8000dec:	40011000 	.word	0x40011000

08000df0 <ButtonPadCallback>:

uint32_t previousMillis = 0;
uint32_t currentMillis = 0;
uint16_t keyPressed = 0;
int ButtonPadCallback(int GPIO_Pin) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	// See if it's falling or rising edge, may fail at times
	int callback_pin_value = HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, GPIO_Pin);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4807      	ldr	r0, [pc, #28]	; (8000e1c <ButtonPadCallback+0x2c>)
 8000e00:	f003 fe32 	bl	8004a68 <HAL_GPIO_ReadPin>
 8000e04:	4603      	mov	r3, r0
 8000e06:	60fb      	str	r3, [r7, #12]
	if (callback_pin_value == GPIO_PIN_RESET) {
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10a      	bne.n	8000e24 <ButtonPadCallback+0x34>
		previousMillis = HAL_GetTick();
 8000e0e:	f002 f9a1 	bl	8003154 <HAL_GetTick>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a02      	ldr	r2, [pc, #8]	; (8000e20 <ButtonPadCallback+0x30>)
 8000e16:	6013      	str	r3, [r2, #0]
		return 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e14c      	b.n	80010b6 <ButtonPadCallback+0x2c6>
 8000e1c:	40011800 	.word	0x40011800
 8000e20:	20000764 	.word	0x20000764
	}

	currentMillis = HAL_GetTick();
 8000e24:	f002 f996 	bl	8003154 <HAL_GetTick>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4aa5      	ldr	r2, [pc, #660]	; (80010c0 <ButtonPadCallback+0x2d0>)
 8000e2c:	6013      	str	r3, [r2, #0]
	keyPressed = 0;
 8000e2e:	4ba5      	ldr	r3, [pc, #660]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	801a      	strh	r2, [r3, #0]
	if (currentMillis - previousMillis > 20) {
 8000e34:	4ba2      	ldr	r3, [pc, #648]	; (80010c0 <ButtonPadCallback+0x2d0>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4ba3      	ldr	r3, [pc, #652]	; (80010c8 <ButtonPadCallback+0x2d8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b14      	cmp	r3, #20
 8000e40:	f240 8133 	bls.w	80010aa <ButtonPadCallback+0x2ba>

		// Change this if the R pins are not the same
		GPIO_InitStructPrivate.Pin = BTN_PAD_R1_PIN|BTN_PAD_R2_PIN|BTN_PAD_R3_PIN|BTN_PAD_R4_PIN;
 8000e44:	4ba1      	ldr	r3, [pc, #644]	; (80010cc <ButtonPadCallback+0x2dc>)
 8000e46:	220f      	movs	r2, #15
 8000e48:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000e4a:	4ba0      	ldr	r3, [pc, #640]	; (80010cc <ButtonPadCallback+0x2dc>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000e50:	4b9e      	ldr	r3, [pc, #632]	; (80010cc <ButtonPadCallback+0x2dc>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	4b9d      	ldr	r3, [pc, #628]	; (80010cc <ButtonPadCallback+0x2dc>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(BTN_PAD_R1_PORT, &GPIO_InitStructPrivate);
 8000e5c:	499b      	ldr	r1, [pc, #620]	; (80010cc <ButtonPadCallback+0x2dc>)
 8000e5e:	489c      	ldr	r0, [pc, #624]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000e60:	f003 fc6e 	bl	8004740 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 8000e64:	2201      	movs	r2, #1
 8000e66:	2110      	movs	r1, #16
 8000e68:	4899      	ldr	r0, [pc, #612]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000e6a:	f003 fe14 	bl	8004a96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2120      	movs	r1, #32
 8000e72:	4897      	ldr	r0, [pc, #604]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000e74:	f003 fe0f 	bl	8004a96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2140      	movs	r1, #64	; 0x40
 8000e7c:	4894      	ldr	r0, [pc, #592]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000e7e:	f003 fe0a 	bl	8004a96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e88:	4892      	ldr	r0, [pc, #584]	; (80010d4 <ButtonPadCallback+0x2e4>)
 8000e8a:	f003 fe04 	bl	8004a96 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 16;
 8000e8e:	2101      	movs	r1, #1
 8000e90:	488f      	ldr	r0, [pc, #572]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000e92:	f003 fde9 	bl	8004a68 <HAL_GPIO_ReadPin>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d005      	beq.n	8000ea8 <ButtonPadCallback+0xb8>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d102      	bne.n	8000ea8 <ButtonPadCallback+0xb8>
 8000ea2:	4b88      	ldr	r3, [pc, #544]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000ea4:	2210      	movs	r2, #16
 8000ea6:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 15;
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	4889      	ldr	r0, [pc, #548]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000eac:	f003 fddc 	bl	8004a68 <HAL_GPIO_ReadPin>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d005      	beq.n	8000ec2 <ButtonPadCallback+0xd2>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d102      	bne.n	8000ec2 <ButtonPadCallback+0xd2>
 8000ebc:	4b81      	ldr	r3, [pc, #516]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 14;
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	4882      	ldr	r0, [pc, #520]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000ec6:	f003 fdcf 	bl	8004a68 <HAL_GPIO_ReadPin>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d005      	beq.n	8000edc <ButtonPadCallback+0xec>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d102      	bne.n	8000edc <ButtonPadCallback+0xec>
 8000ed6:	4b7b      	ldr	r3, [pc, #492]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000ed8:	220e      	movs	r2, #14
 8000eda:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 13;
 8000edc:	2108      	movs	r1, #8
 8000ede:	487c      	ldr	r0, [pc, #496]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000ee0:	f003 fdc2 	bl	8004a68 <HAL_GPIO_ReadPin>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d005      	beq.n	8000ef6 <ButtonPadCallback+0x106>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b08      	cmp	r3, #8
 8000eee:	d102      	bne.n	8000ef6 <ButtonPadCallback+0x106>
 8000ef0:	4b74      	ldr	r3, [pc, #464]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000ef2:	220d      	movs	r2, #13
 8000ef4:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2110      	movs	r1, #16
 8000efa:	4875      	ldr	r0, [pc, #468]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000efc:	f003 fdcb 	bl	8004a96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2120      	movs	r1, #32
 8000f04:	4872      	ldr	r0, [pc, #456]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000f06:	f003 fdc6 	bl	8004a96 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 12;
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	4870      	ldr	r0, [pc, #448]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000f0e:	f003 fdab 	bl	8004a68 <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d005      	beq.n	8000f24 <ButtonPadCallback+0x134>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d102      	bne.n	8000f24 <ButtonPadCallback+0x134>
 8000f1e:	4b69      	ldr	r3, [pc, #420]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000f20:	220c      	movs	r2, #12
 8000f22:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 11;
 8000f24:	2102      	movs	r1, #2
 8000f26:	486a      	ldr	r0, [pc, #424]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000f28:	f003 fd9e 	bl	8004a68 <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d005      	beq.n	8000f3e <ButtonPadCallback+0x14e>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d102      	bne.n	8000f3e <ButtonPadCallback+0x14e>
 8000f38:	4b62      	ldr	r3, [pc, #392]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000f3a:	220b      	movs	r2, #11
 8000f3c:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 10;
 8000f3e:	2104      	movs	r1, #4
 8000f40:	4863      	ldr	r0, [pc, #396]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000f42:	f003 fd91 	bl	8004a68 <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d005      	beq.n	8000f58 <ButtonPadCallback+0x168>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	d102      	bne.n	8000f58 <ButtonPadCallback+0x168>
 8000f52:	4b5c      	ldr	r3, [pc, #368]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000f54:	220a      	movs	r2, #10
 8000f56:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 9;
 8000f58:	2108      	movs	r1, #8
 8000f5a:	485d      	ldr	r0, [pc, #372]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000f5c:	f003 fd84 	bl	8004a68 <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d005      	beq.n	8000f72 <ButtonPadCallback+0x182>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d102      	bne.n	8000f72 <ButtonPadCallback+0x182>
 8000f6c:	4b55      	ldr	r3, [pc, #340]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000f6e:	2209      	movs	r2, #9
 8000f70:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2120      	movs	r1, #32
 8000f76:	4856      	ldr	r0, [pc, #344]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000f78:	f003 fd8d 	bl	8004a96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2140      	movs	r1, #64	; 0x40
 8000f80:	4853      	ldr	r0, [pc, #332]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000f82:	f003 fd88 	bl	8004a96 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 8;
 8000f86:	2101      	movs	r1, #1
 8000f88:	4851      	ldr	r0, [pc, #324]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000f8a:	f003 fd6d 	bl	8004a68 <HAL_GPIO_ReadPin>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <ButtonPadCallback+0x1b0>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d102      	bne.n	8000fa0 <ButtonPadCallback+0x1b0>
 8000f9a:	4b4a      	ldr	r3, [pc, #296]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000f9c:	2208      	movs	r2, #8
 8000f9e:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 7;
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	484b      	ldr	r0, [pc, #300]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000fa4:	f003 fd60 	bl	8004a68 <HAL_GPIO_ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d005      	beq.n	8000fba <ButtonPadCallback+0x1ca>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d102      	bne.n	8000fba <ButtonPadCallback+0x1ca>
 8000fb4:	4b43      	ldr	r3, [pc, #268]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000fb6:	2207      	movs	r2, #7
 8000fb8:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 6;
 8000fba:	2104      	movs	r1, #4
 8000fbc:	4844      	ldr	r0, [pc, #272]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000fbe:	f003 fd53 	bl	8004a68 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d005      	beq.n	8000fd4 <ButtonPadCallback+0x1e4>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	d102      	bne.n	8000fd4 <ButtonPadCallback+0x1e4>
 8000fce:	4b3d      	ldr	r3, [pc, #244]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000fd0:	2206      	movs	r2, #6
 8000fd2:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 5;
 8000fd4:	2108      	movs	r1, #8
 8000fd6:	483e      	ldr	r0, [pc, #248]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000fd8:	f003 fd46 	bl	8004a68 <HAL_GPIO_ReadPin>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d005      	beq.n	8000fee <ButtonPadCallback+0x1fe>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b08      	cmp	r3, #8
 8000fe6:	d102      	bne.n	8000fee <ButtonPadCallback+0x1fe>
 8000fe8:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000fea:	2205      	movs	r2, #5
 8000fec:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2140      	movs	r1, #64	; 0x40
 8000ff2:	4837      	ldr	r0, [pc, #220]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000ff4:	f003 fd4f 	bl	8004a96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ffe:	4835      	ldr	r0, [pc, #212]	; (80010d4 <ButtonPadCallback+0x2e4>)
 8001000:	f003 fd49 	bl	8004a96 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 4;
 8001004:	2101      	movs	r1, #1
 8001006:	4832      	ldr	r0, [pc, #200]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8001008:	f003 fd2e 	bl	8004a68 <HAL_GPIO_ReadPin>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <ButtonPadCallback+0x22e>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d102      	bne.n	800101e <ButtonPadCallback+0x22e>
 8001018:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <ButtonPadCallback+0x2d4>)
 800101a:	2204      	movs	r2, #4
 800101c:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 3;
 800101e:	2102      	movs	r1, #2
 8001020:	482b      	ldr	r0, [pc, #172]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8001022:	f003 fd21 	bl	8004a68 <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <ButtonPadCallback+0x248>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d102      	bne.n	8001038 <ButtonPadCallback+0x248>
 8001032:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8001034:	2203      	movs	r2, #3
 8001036:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 2;
 8001038:	2104      	movs	r1, #4
 800103a:	4825      	ldr	r0, [pc, #148]	; (80010d0 <ButtonPadCallback+0x2e0>)
 800103c:	f003 fd14 	bl	8004a68 <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d005      	beq.n	8001052 <ButtonPadCallback+0x262>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b04      	cmp	r3, #4
 800104a:	d102      	bne.n	8001052 <ButtonPadCallback+0x262>
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <ButtonPadCallback+0x2d4>)
 800104e:	2202      	movs	r2, #2
 8001050:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 1;
 8001052:	2108      	movs	r1, #8
 8001054:	481e      	ldr	r0, [pc, #120]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8001056:	f003 fd07 	bl	8004a68 <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <ButtonPadCallback+0x27c>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b08      	cmp	r3, #8
 8001064:	d102      	bne.n	800106c <ButtonPadCallback+0x27c>
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8001068:	2201      	movs	r2, #1
 800106a:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	2110      	movs	r1, #16
 8001070:	4817      	ldr	r0, [pc, #92]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8001072:	f003 fd10 	bl	8004a96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 8001076:	2201      	movs	r2, #1
 8001078:	2120      	movs	r1, #32
 800107a:	4815      	ldr	r0, [pc, #84]	; (80010d0 <ButtonPadCallback+0x2e0>)
 800107c:	f003 fd0b 	bl	8004a96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 8001080:	2201      	movs	r2, #1
 8001082:	2140      	movs	r1, #64	; 0x40
 8001084:	4812      	ldr	r0, [pc, #72]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8001086:	f003 fd06 	bl	8004a96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 800108a:	2201      	movs	r2, #1
 800108c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001090:	4810      	ldr	r0, [pc, #64]	; (80010d4 <ButtonPadCallback+0x2e4>)
 8001092:	f003 fd00 	bl	8004a96 <HAL_GPIO_WritePin>

		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <ButtonPadCallback+0x2dc>)
 8001098:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <ButtonPadCallback+0x2e8>)
 800109a:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <ButtonPadCallback+0x2dc>)
 800109e:	2202      	movs	r2, #2
 80010a0:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(BTN_PAD_R1_PORT, &GPIO_InitStructPrivate);
 80010a2:	490a      	ldr	r1, [pc, #40]	; (80010cc <ButtonPadCallback+0x2dc>)
 80010a4:	480a      	ldr	r0, [pc, #40]	; (80010d0 <ButtonPadCallback+0x2e0>)
 80010a6:	f003 fb4b 	bl	8004740 <HAL_GPIO_Init>
	}

	previousMillis = currentMillis;
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <ButtonPadCallback+0x2d0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <ButtonPadCallback+0x2d8>)
 80010b0:	6013      	str	r3, [r2, #0]
	return keyPressed;
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <ButtonPadCallback+0x2d4>)
 80010b4:	881b      	ldrh	r3, [r3, #0]

}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000768 	.word	0x20000768
 80010c4:	2000076c 	.word	0x2000076c
 80010c8:	20000764 	.word	0x20000764
 80010cc:	20000754 	.word	0x20000754
 80010d0:	40011800 	.word	0x40011800
 80010d4:	40011000 	.word	0x40011000
 80010d8:	10310000 	.word	0x10310000

080010dc <DrumThreshWrite>:
	}
	f_close(&file);

}

void DrumThreshWrite() {
 80010dc:	b580      	push	{r7, lr}
 80010de:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 80010e2:	af00      	add	r7, sp, #0
	FIL file;
	int temp;
	FRESULT fresult = f_open(&file, "drum.cfg", FA_READ | FA_WRITE);
 80010e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e8:	2203      	movs	r2, #3
 80010ea:	4952      	ldr	r1, [pc, #328]	; (8001234 <DrumThreshWrite+0x158>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f010 fa95 	bl	801161c <f_open>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	if (fresult == FR_OK) {
 80010f8:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d13c      	bne.n	800117a <DrumThreshWrite+0x9e>
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001100:	4b4d      	ldr	r3, [pc, #308]	; (8001238 <DrumThreshWrite+0x15c>)
 8001102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001104:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001108:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	4b4a      	ldr	r3, [pc, #296]	; (8001238 <DrumThreshWrite+0x15c>)
 8001110:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001112:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001116:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	4b46      	ldr	r3, [pc, #280]	; (8001238 <DrumThreshWrite+0x15c>)
 800111e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001122:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001126:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	4b42      	ldr	r3, [pc, #264]	; (8001238 <DrumThreshWrite+0x15c>)
 800112e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001132:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001136:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800113a:	60da      	str	r2, [r3, #12]
				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 800113c:	4b3e      	ldr	r3, [pc, #248]	; (8001238 <DrumThreshWrite+0x15c>)
 800113e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001140:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <DrumThreshWrite+0x15c>)
 8001142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001144:	441a      	add	r2, r3
 8001146:	4b3c      	ldr	r3, [pc, #240]	; (8001238 <DrumThreshWrite+0x15c>)
 8001148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114c:	441a      	add	r2, r3
 800114e:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <DrumThreshWrite+0x15c>)
 8001150:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001154:	441a      	add	r2, r3
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001156:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800115a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800115e:	611a      	str	r2, [r3, #16]
		fresult = f_write(&file, buff, 5 * 4, &temp);
 8001160:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001164:	f107 0118 	add.w	r1, r7, #24
 8001168:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800116c:	2214      	movs	r2, #20
 800116e:	f010 fcda 	bl	8011b26 <f_write>
 8001172:	4603      	mov	r3, r0
 8001174:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 8001178:	e051      	b.n	800121e <DrumThreshWrite+0x142>
	} else if (fresult == FR_NO_FILE) {
 800117a:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800117e:	2b04      	cmp	r3, #4
 8001180:	d145      	bne.n	800120e <DrumThreshWrite+0x132>
		fresult = f_open(&file, "drum.cfg", FA_WRITE | FA_CREATE_NEW);
 8001182:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001186:	2206      	movs	r2, #6
 8001188:	492a      	ldr	r1, [pc, #168]	; (8001234 <DrumThreshWrite+0x158>)
 800118a:	4618      	mov	r0, r3
 800118c:	f010 fa46 	bl	801161c <f_open>
 8001190:	4603      	mov	r3, r0
 8001192:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001196:	4b28      	ldr	r3, [pc, #160]	; (8001238 <DrumThreshWrite+0x15c>)
 8001198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800119a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800119e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <DrumThreshWrite+0x15c>)
 80011a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80011ac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <DrumThreshWrite+0x15c>)
 80011b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80011b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80011bc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <DrumThreshWrite+0x15c>)
 80011c4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80011c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80011cc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80011d0:	60da      	str	r2, [r3, #12]
				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <DrumThreshWrite+0x15c>)
 80011d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <DrumThreshWrite+0x15c>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	441a      	add	r2, r3
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <DrumThreshWrite+0x15c>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e2:	441a      	add	r2, r3
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <DrumThreshWrite+0x15c>)
 80011e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80011ea:	441a      	add	r2, r3
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 80011ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80011f0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80011f4:	611a      	str	r2, [r3, #16]
		fresult = f_write(&file, buff, 5 * 4, &temp);
 80011f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011fa:	1d39      	adds	r1, r7, #4
 80011fc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001200:	2214      	movs	r2, #20
 8001202:	f010 fc90 	bl	8011b26 <f_write>
 8001206:	4603      	mov	r3, r0
 8001208:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 800120c:	e007      	b.n	800121e <DrumThreshWrite+0x142>
	} else {
		LCD_Print(0, 19, "Error: f_open (%d)", fresult); while (1);
 800120e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <DrumThreshWrite+0x160>)
 8001214:	2113      	movs	r1, #19
 8001216:	2000      	movs	r0, #0
 8001218:	f000 fcaa 	bl	8001b70 <LCD_Print>
 800121c:	e7fe      	b.n	800121c <DrumThreshWrite+0x140>
	}
	f_close(&file);
 800121e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001222:	4618      	mov	r0, r3
 8001224:	f010 ff3f 	bl	80120a6 <f_close>
}
 8001228:	bf00      	nop
 800122a:	f507 7718 	add.w	r7, r7, #608	; 0x260
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	08017100 	.word	0x08017100
 8001238:	20000780 	.word	0x20000780
 800123c:	08017154 	.word	0x08017154

08001240 <DrumUpdate>:
	}
	free(values);

}

void DrumUpdate(uint16_t activations) { // actiavtions: bitwise representation
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	80fb      	strh	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124a:	b672      	cpsid	i
}
 800124c:	bf00      	nop

	__disable_irq();

	int i = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
	DrumStruct* drum = drums;
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <DrumUpdate+0xbc>)
 8001254:	60bb      	str	r3, [r7, #8]
	for (; i < 4; i++, drum++) {
 8001256:	e048      	b.n	80012ea <DrumUpdate+0xaa>
		if (*(drum->sensor_value_pt) > drum->sensor_thresh || ((activations >> i) & 1)) {
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001262:	429a      	cmp	r2, r3
 8001264:	d807      	bhi.n	8001276 <DrumUpdate+0x36>
 8001266:	88fa      	ldrh	r2, [r7, #6]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	fa42 f303 	asr.w	r3, r2, r3
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d011      	beq.n	800129a <DrumUpdate+0x5a>
			if (drum->state == DRUM_IDLE) {
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	7a1b      	ldrb	r3, [r3, #8]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d104      	bne.n	8001288 <DrumUpdate+0x48>
				AddDrum(drum->sound); // play the sound
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	785b      	ldrb	r3, [r3, #1]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fc70 	bl	8000b68 <AddDrum>
			}
			drum->state = DRUM_HIT;
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	2201      	movs	r2, #1
 800128c:	721a      	strb	r2, [r3, #8]
			drum->last_tick = HAL_GetTick();
 800128e:	f001 ff61 	bl	8003154 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	e011      	b.n	80012be <DrumUpdate+0x7e>
		} else {
			if (drum->state != DRUM_IDLE) {
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	7a1b      	ldrb	r3, [r3, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00d      	beq.n	80012be <DrumUpdate+0x7e>
				drum->state = DRUM_COOLDOWN;
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	2202      	movs	r2, #2
 80012a6:	721a      	strb	r2, [r3, #8]
				if (/* drum->state == DRUM_COOLDOWN
					&& */HAL_GetTick() - drum->last_tick > DRUM_COOLDOWN_LENGTH) {
 80012a8:	f001 ff54 	bl	8003154 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	1ad3      	subs	r3, r2, r3
				if (/* drum->state == DRUM_COOLDOWN
 80012b4:	2b14      	cmp	r3, #20
 80012b6:	d902      	bls.n	80012be <DrumUpdate+0x7e>
					drum->state = DRUM_IDLE;
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2200      	movs	r2, #0
 80012bc:	721a      	strb	r2, [r3, #8]
				}
			}
		}

		if (*(drum->sensor_value_pt) > drum_max_val[i]) {
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	490e      	ldr	r1, [pc, #56]	; (8001300 <DrumUpdate+0xc0>)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d906      	bls.n	80012de <DrumUpdate+0x9e>
			drum_max_val[i] = *(drum->sensor_value_pt);
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	490a      	ldr	r1, [pc, #40]	; (8001300 <DrumUpdate+0xc0>)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (; i < 4; i++, drum++) {
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3301      	adds	r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	3330      	adds	r3, #48	; 0x30
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	ddb3      	ble.n	8001258 <DrumUpdate+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 80012f0:	b662      	cpsie	i
}
 80012f2:	bf00      	nop
		}
	}

	__enable_irq();
}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000780 	.word	0x20000780
 8001300:	20000840 	.word	0x20000840

08001304 <ButtonPad_DrumCalibration>:

//	LCD_Print(0, (*r)++, "%3d", drums[0].state);

}

void ButtonPad_DrumCalibration(int keyPressed) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	switch (keyPressed) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	2b07      	cmp	r3, #7
 8001312:	d866      	bhi.n	80013e2 <ButtonPad_DrumCalibration+0xde>
 8001314:	a201      	add	r2, pc, #4	; (adr r2, 800131c <ButtonPad_DrumCalibration+0x18>)
 8001316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131a:	bf00      	nop
 800131c:	0800133d 	.word	0x0800133d
 8001320:	08001345 	.word	0x08001345
 8001324:	0800134d 	.word	0x0800134d
 8001328:	08001355 	.word	0x08001355
 800132c:	0800135d 	.word	0x0800135d
 8001330:	0800138f 	.word	0x0800138f
 8001334:	080013c1 	.word	0x080013c1
 8001338:	080013dd 	.word	0x080013dd
		case 1: AddDrum(DRUM_DON); break;
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff fc13 	bl	8000b68 <AddDrum>
 8001342:	e04e      	b.n	80013e2 <ButtonPad_DrumCalibration+0xde>
		case 2: AddDrum(DRUM_KA); break;
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff fc0f 	bl	8000b68 <AddDrum>
 800134a:	e04a      	b.n	80013e2 <ButtonPad_DrumCalibration+0xde>
		case 3: DrumUpdate(1); break;
 800134c:	2001      	movs	r0, #1
 800134e:	f7ff ff77 	bl	8001240 <DrumUpdate>
 8001352:	e046      	b.n	80013e2 <ButtonPad_DrumCalibration+0xde>
		case 4: DrumUpdate(2); break;
 8001354:	2002      	movs	r0, #2
 8001356:	f7ff ff73 	bl	8001240 <DrumUpdate>
 800135a:	e042      	b.n	80013e2 <ButtonPad_DrumCalibration+0xde>
		case 5: drums[drum_calibrate_number].sensor_thresh += 10; break;
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <ButtonPad_DrumCalibration+0xe8>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <ButtonPad_DrumCalibration+0xec>)
 8001364:	460b      	mov	r3, r1
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	440b      	add	r3, r1
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	4413      	add	r3, r2
 800136e:	3328      	adds	r3, #40	; 0x28
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a1e      	ldr	r2, [pc, #120]	; (80013ec <ButtonPad_DrumCalibration+0xe8>)
 8001374:	8812      	ldrh	r2, [r2, #0]
 8001376:	4610      	mov	r0, r2
 8001378:	f103 020a 	add.w	r2, r3, #10
 800137c:	491c      	ldr	r1, [pc, #112]	; (80013f0 <ButtonPad_DrumCalibration+0xec>)
 800137e:	4603      	mov	r3, r0
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4403      	add	r3, r0
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	440b      	add	r3, r1
 8001388:	3328      	adds	r3, #40	; 0x28
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	e029      	b.n	80013e2 <ButtonPad_DrumCalibration+0xde>
		case 6: drums[drum_calibrate_number].sensor_thresh -= 10; break;
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <ButtonPad_DrumCalibration+0xe8>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	4619      	mov	r1, r3
 8001394:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <ButtonPad_DrumCalibration+0xec>)
 8001396:	460b      	mov	r3, r1
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	440b      	add	r3, r1
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	4413      	add	r3, r2
 80013a0:	3328      	adds	r3, #40	; 0x28
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a11      	ldr	r2, [pc, #68]	; (80013ec <ButtonPad_DrumCalibration+0xe8>)
 80013a6:	8812      	ldrh	r2, [r2, #0]
 80013a8:	4610      	mov	r0, r2
 80013aa:	f1a3 020a 	sub.w	r2, r3, #10
 80013ae:	4910      	ldr	r1, [pc, #64]	; (80013f0 <ButtonPad_DrumCalibration+0xec>)
 80013b0:	4603      	mov	r3, r0
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4403      	add	r3, r0
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	440b      	add	r3, r1
 80013ba:	3328      	adds	r3, #40	; 0x28
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e010      	b.n	80013e2 <ButtonPad_DrumCalibration+0xde>
		case 7: drum_calibrate_number = (drum_calibrate_number + 1) % NUM_DRUMS; break;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <ButtonPad_DrumCalibration+0xe8>)
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	425a      	negs	r2, r3
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	f002 0203 	and.w	r2, r2, #3
 80013d0:	bf58      	it	pl
 80013d2:	4253      	negpl	r3, r2
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <ButtonPad_DrumCalibration+0xe8>)
 80013d8:	801a      	strh	r2, [r3, #0]
 80013da:	e002      	b.n	80013e2 <ButtonPad_DrumCalibration+0xde>
		case 8: DrumThreshWrite(); break;
 80013dc:	f7ff fe7e 	bl	80010dc <DrumThreshWrite>
 80013e0:	bf00      	nop
	}
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000850 	.word	0x20000850
 80013f0:	20000780 	.word	0x20000780

080013f4 <ILI9341_Send_Command>:
static void ILI9341_Send_Command(unsigned char command);
static void ILI9341_Send_Burst(unsigned short color, unsigned long len);
static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size);


static inline void ILI9341_Send_Command(unsigned char command) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001404:	4808      	ldr	r0, [pc, #32]	; (8001428 <ILI9341_Send_Command+0x34>)
 8001406:	f003 fb46 	bl	8004a96 <HAL_GPIO_WritePin>
	DC_COMMAND;
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <ILI9341_Send_Command+0x34>)
 8001412:	f003 fb40 	bl	8004a96 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f95d 	bl	80016d8 <ILI9341_SPI_Send>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40010c00 	.word	0x40010c00

0800142c <ILI9341_Send_Data>:

static inline void ILI9341_Send_Data(unsigned char data) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800143c:	4808      	ldr	r0, [pc, #32]	; (8001460 <ILI9341_Send_Data+0x34>)
 800143e:	f003 fb2a 	bl	8004a96 <HAL_GPIO_WritePin>
	DC_DATA;
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <ILI9341_Send_Data+0x34>)
 800144a:	f003 fb24 	bl	8004a96 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data);
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	4618      	mov	r0, r3
 8001452:	f000 f941 	bl	80016d8 <ILI9341_SPI_Send>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40010c00 	.word	0x40010c00

08001464 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	ILI9341_SPI_Init();
 8001468:	f000 f900 	bl	800166c <ILI9341_SPI_Init>

	/* Reset The Screen */
	ILI9341_Reset();
 800146c:	f000 f958 	bl	8001720 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 8001470:	2001      	movs	r0, #1
 8001472:	f7ff ffbf 	bl	80013f4 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 8001476:	20cb      	movs	r0, #203	; 0xcb
 8001478:	f7ff ffbc 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 800147c:	2039      	movs	r0, #57	; 0x39
 800147e:	f7ff ffd5 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 8001482:	202c      	movs	r0, #44	; 0x2c
 8001484:	f7ff ffd2 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff ffcf 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 800148e:	2034      	movs	r0, #52	; 0x34
 8001490:	f7ff ffcc 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8001494:	2002      	movs	r0, #2
 8001496:	f7ff ffc9 	bl	800142c <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800149a:	20cf      	movs	r0, #207	; 0xcf
 800149c:	f7ff ffaa 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff ffc3 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 80014a6:	20c1      	movs	r0, #193	; 0xc1
 80014a8:	f7ff ffc0 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 80014ac:	2030      	movs	r0, #48	; 0x30
 80014ae:	f7ff ffbd 	bl	800142c <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 80014b2:	20e8      	movs	r0, #232	; 0xe8
 80014b4:	f7ff ff9e 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 80014b8:	2085      	movs	r0, #133	; 0x85
 80014ba:	f7ff ffb7 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80014be:	2000      	movs	r0, #0
 80014c0:	f7ff ffb4 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 80014c4:	2078      	movs	r0, #120	; 0x78
 80014c6:	f7ff ffb1 	bl	800142c <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 80014ca:	20ea      	movs	r0, #234	; 0xea
 80014cc:	f7ff ff92 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff ffab 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff ffa8 	bl	800142c <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 80014dc:	20ed      	movs	r0, #237	; 0xed
 80014de:	f7ff ff89 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 80014e2:	2064      	movs	r0, #100	; 0x64
 80014e4:	f7ff ffa2 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80014e8:	2003      	movs	r0, #3
 80014ea:	f7ff ff9f 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 80014ee:	2012      	movs	r0, #18
 80014f0:	f7ff ff9c 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 80014f4:	2081      	movs	r0, #129	; 0x81
 80014f6:	f7ff ff99 	bl	800142c <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 80014fa:	20f7      	movs	r0, #247	; 0xf7
 80014fc:	f7ff ff7a 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8001500:	2020      	movs	r0, #32
 8001502:	f7ff ff93 	bl	800142c <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 8001506:	20c0      	movs	r0, #192	; 0xc0
 8001508:	f7ff ff74 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800150c:	2010      	movs	r0, #16
 800150e:	f7ff ff8d 	bl	800142c <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8001512:	20c1      	movs	r0, #193	; 0xc1
 8001514:	f7ff ff6e 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8001518:	2010      	movs	r0, #16
 800151a:	f7ff ff87 	bl	800142c <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 800151e:	20c5      	movs	r0, #197	; 0xc5
 8001520:	f7ff ff68 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8001524:	203e      	movs	r0, #62	; 0x3e
 8001526:	f7ff ff81 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800152a:	2028      	movs	r0, #40	; 0x28
 800152c:	f7ff ff7e 	bl	800142c <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 8001530:	20c7      	movs	r0, #199	; 0xc7
 8001532:	f7ff ff5f 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 8001536:	2086      	movs	r0, #134	; 0x86
 8001538:	f7ff ff78 	bl	800142c <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 800153c:	2036      	movs	r0, #54	; 0x36
 800153e:	f7ff ff59 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 8001542:	2048      	movs	r0, #72	; 0x48
 8001544:	f7ff ff72 	bl	800142c <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 8001548:	203a      	movs	r0, #58	; 0x3a
 800154a:	f7ff ff53 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 800154e:	2055      	movs	r0, #85	; 0x55
 8001550:	f7ff ff6c 	bl	800142c <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8001554:	20b1      	movs	r0, #177	; 0xb1
 8001556:	f7ff ff4d 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800155a:	2000      	movs	r0, #0
 800155c:	f7ff ff66 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8001560:	2018      	movs	r0, #24
 8001562:	f7ff ff63 	bl	800142c <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8001566:	20b6      	movs	r0, #182	; 0xb6
 8001568:	f7ff ff44 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 800156c:	2008      	movs	r0, #8
 800156e:	f7ff ff5d 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 8001572:	2082      	movs	r0, #130	; 0x82
 8001574:	f7ff ff5a 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8001578:	2027      	movs	r0, #39	; 0x27
 800157a:	f7ff ff57 	bl	800142c <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 800157e:	20f2      	movs	r0, #242	; 0xf2
 8001580:	f7ff ff38 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff ff51 	bl	800142c <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 800158a:	2026      	movs	r0, #38	; 0x26
 800158c:	f7ff ff32 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8001590:	2001      	movs	r0, #1
 8001592:	f7ff ff4b 	bl	800142c <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8001596:	20e0      	movs	r0, #224	; 0xe0
 8001598:	f7ff ff2c 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 800159c:	200f      	movs	r0, #15
 800159e:	f7ff ff45 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80015a2:	2031      	movs	r0, #49	; 0x31
 80015a4:	f7ff ff42 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 80015a8:	202b      	movs	r0, #43	; 0x2b
 80015aa:	f7ff ff3f 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80015ae:	200c      	movs	r0, #12
 80015b0:	f7ff ff3c 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80015b4:	200e      	movs	r0, #14
 80015b6:	f7ff ff39 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80015ba:	2008      	movs	r0, #8
 80015bc:	f7ff ff36 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 80015c0:	204e      	movs	r0, #78	; 0x4e
 80015c2:	f7ff ff33 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 80015c6:	20f1      	movs	r0, #241	; 0xf1
 80015c8:	f7ff ff30 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 80015cc:	2037      	movs	r0, #55	; 0x37
 80015ce:	f7ff ff2d 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80015d2:	2007      	movs	r0, #7
 80015d4:	f7ff ff2a 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 80015d8:	2010      	movs	r0, #16
 80015da:	f7ff ff27 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80015de:	2003      	movs	r0, #3
 80015e0:	f7ff ff24 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80015e4:	200e      	movs	r0, #14
 80015e6:	f7ff ff21 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 80015ea:	2009      	movs	r0, #9
 80015ec:	f7ff ff1e 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80015f0:	2000      	movs	r0, #0
 80015f2:	f7ff ff1b 	bl	800142c <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 80015f6:	20e1      	movs	r0, #225	; 0xe1
 80015f8:	f7ff fefc 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff ff15 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8001602:	200e      	movs	r0, #14
 8001604:	f7ff ff12 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 8001608:	2014      	movs	r0, #20
 800160a:	f7ff ff0f 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800160e:	2003      	movs	r0, #3
 8001610:	f7ff ff0c 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8001614:	2011      	movs	r0, #17
 8001616:	f7ff ff09 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800161a:	2007      	movs	r0, #7
 800161c:	f7ff ff06 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8001620:	2031      	movs	r0, #49	; 0x31
 8001622:	f7ff ff03 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8001626:	20c1      	movs	r0, #193	; 0xc1
 8001628:	f7ff ff00 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 800162c:	2048      	movs	r0, #72	; 0x48
 800162e:	f7ff fefd 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8001632:	2008      	movs	r0, #8
 8001634:	f7ff fefa 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8001638:	200f      	movs	r0, #15
 800163a:	f7ff fef7 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800163e:	200c      	movs	r0, #12
 8001640:	f7ff fef4 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8001644:	2031      	movs	r0, #49	; 0x31
 8001646:	f7ff fef1 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 800164a:	2036      	movs	r0, #54	; 0x36
 800164c:	f7ff feee 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8001650:	200f      	movs	r0, #15
 8001652:	f7ff feeb 	bl	800142c <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 8001656:	2011      	movs	r0, #17
 8001658:	f7ff fecc 	bl	80013f4 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 800165c:	2029      	movs	r0, #41	; 0x29
 800165e:	f7ff fec9 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 8001662:	202c      	movs	r0, #44	; 0x2c
 8001664:	f7ff fee2 	bl	800142c <ILI9341_Send_Data>
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}

0800166c <ILI9341_SPI_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init()
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	lcd_spi.Instance 				= SPI2;
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <ILI9341_SPI_Init+0x68>)
 8001674:	601a      	str	r2, [r3, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 8001678:	f44f 7282 	mov.w	r2, #260	; 0x104
 800167c:	605a      	str	r2, [r3, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 8001698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169c:	619a      	str	r2, [r3, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	61da      	str	r2, [r3, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	621a      	str	r2, [r3, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 80016b8:	220a      	movs	r2, #10
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK) {
 80016bc:	4804      	ldr	r0, [pc, #16]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 80016be:	f007 fece 	bl	800945e <HAL_SPI_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <ILI9341_SPI_Init+0x60>
		Error_Handler();
 80016c8:	f001 f860 	bl	800278c <Error_Handler>
	}
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000854 	.word	0x20000854
 80016d4:	40003800 	.word	0x40003800

080016d8 <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(unsigned char data)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 80016e2:	1df9      	adds	r1, r7, #7
 80016e4:	2301      	movs	r3, #1
 80016e6:	2201      	movs	r2, #1
 80016e8:	4803      	ldr	r0, [pc, #12]	; (80016f8 <ILI9341_SPI_Send+0x20>)
 80016ea:	f007 ff3c 	bl	8009566 <HAL_SPI_Transmit>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000854 	.word	0x20000854

080016fc <ILI9341_SPI_Send_Multiple>:
{
	HAL_SPI_Transmit(&lcd_spi, &data, 2, 1);
}

void ILI9341_SPI_Send_Multiple(uint8_t* data, int size)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&lcd_spi, data, size, 10);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b29a      	uxth	r2, r3
 800170a:	230a      	movs	r3, #10
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4803      	ldr	r0, [pc, #12]	; (800171c <ILI9341_SPI_Send_Multiple+0x20>)
 8001710:	f007 ff29 	bl	8009566 <HAL_SPI_Transmit>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000854 	.word	0x20000854

08001720 <ILI9341_Reset>:

void ILI9341_Reset() {
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	RESET_ON;
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172a:	4810      	ldr	r0, [pc, #64]	; (800176c <ILI9341_Reset+0x4c>)
 800172c:	f003 f9b3 	bl	8004a96 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001730:	2032      	movs	r0, #50	; 0x32
 8001732:	f001 fd19 	bl	8003168 <HAL_Delay>
	RESET_OFF;
 8001736:	2201      	movs	r2, #1
 8001738:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800173c:	480b      	ldr	r0, [pc, #44]	; (800176c <ILI9341_Reset+0x4c>)
 800173e:	f003 f9aa 	bl	8004a96 <HAL_GPIO_WritePin>
	CS_ON;
 8001742:	2200      	movs	r2, #0
 8001744:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001748:	4808      	ldr	r0, [pc, #32]	; (800176c <ILI9341_Reset+0x4c>)
 800174a:	f003 f9a4 	bl	8004a96 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800174e:	2032      	movs	r0, #50	; 0x32
 8001750:	f001 fd0a 	bl	8003168 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8001754:	2001      	movs	r0, #1
 8001756:	f7ff fe4d 	bl	80013f4 <ILI9341_Send_Command>
	CS_OFF;
 800175a:	2201      	movs	r2, #1
 800175c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <ILI9341_Reset+0x4c>)
 8001762:	f003 f998 	bl	8004a96 <HAL_GPIO_WritePin>
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40010c00 	.word	0x40010c00

08001770 <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 800177a:	2036      	movs	r0, #54	; 0x36
 800177c:	f7ff fe3a 	bl	80013f4 <ILI9341_Send_Command>
	switch (rotation) {
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2b03      	cmp	r3, #3
 8001784:	d836      	bhi.n	80017f4 <ILI9341_Set_Rotation+0x84>
 8001786:	a201      	add	r2, pc, #4	; (adr r2, 800178c <ILI9341_Set_Rotation+0x1c>)
 8001788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178c:	0800179d 	.word	0x0800179d
 8001790:	080017b3 	.word	0x080017b3
 8001794:	080017c9 	.word	0x080017c9
 8001798:	080017df 	.word	0x080017df
	case 0:
		ILI9341_Send_Data(0x48);
 800179c:	2048      	movs	r0, #72	; 0x48
 800179e:	f7ff fe45 	bl	800142c <ILI9341_Send_Data>
		X_SIZE = 240;
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <ILI9341_Set_Rotation+0x8c>)
 80017a4:	22f0      	movs	r2, #240	; 0xf0
 80017a6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80017a8:	4b15      	ldr	r3, [pc, #84]	; (8001800 <ILI9341_Set_Rotation+0x90>)
 80017aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017ae:	601a      	str	r2, [r3, #0]
		break;
 80017b0:	e020      	b.n	80017f4 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 80017b2:	2028      	movs	r0, #40	; 0x28
 80017b4:	f7ff fe3a 	bl	800142c <ILI9341_Send_Data>
		X_SIZE = 320;
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <ILI9341_Set_Rotation+0x8c>)
 80017ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <ILI9341_Set_Rotation+0x90>)
 80017c2:	22f0      	movs	r2, #240	; 0xf0
 80017c4:	601a      	str	r2, [r3, #0]
		break;
 80017c6:	e015      	b.n	80017f4 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80017c8:	2088      	movs	r0, #136	; 0x88
 80017ca:	f7ff fe2f 	bl	800142c <ILI9341_Send_Data>
		X_SIZE = 240;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <ILI9341_Set_Rotation+0x8c>)
 80017d0:	22f0      	movs	r2, #240	; 0xf0
 80017d2:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <ILI9341_Set_Rotation+0x90>)
 80017d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017da:	601a      	str	r2, [r3, #0]
		break;
 80017dc:	e00a      	b.n	80017f4 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80017de:	20e8      	movs	r0, #232	; 0xe8
 80017e0:	f7ff fe24 	bl	800142c <ILI9341_Send_Data>
		X_SIZE = 320;
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <ILI9341_Set_Rotation+0x8c>)
 80017e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017ea:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <ILI9341_Set_Rotation+0x90>)
 80017ee:	22f0      	movs	r2, #240	; 0xf0
 80017f0:	601a      	str	r2, [r3, #0]
		break;
 80017f2:	bf00      	nop
	}
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000008 	.word	0x20000008
 8001800:	2000000c 	.word	0x2000000c

08001804 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001816:	4817      	ldr	r0, [pc, #92]	; (8001874 <ILI9341_SPI_Send_32+0x70>)
 8001818:	f003 f93d 	bl	8004a96 <HAL_GPIO_WritePin>
	DC_COMMAND;
 800181c:	2200      	movs	r2, #0
 800181e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <ILI9341_SPI_Send_32+0x70>)
 8001824:	f003 f937 	bl	8004a96 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ff54 	bl	80016d8 <ILI9341_SPI_Send>

	DC_DATA;
 8001830:	2201      	movs	r2, #1
 8001832:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001836:	480f      	ldr	r0, [pc, #60]	; (8001874 <ILI9341_SPI_Send_32+0x70>)
 8001838:	f003 f92d 	bl	8004a96 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	0e1b      	lsrs	r3, r3, #24
 8001840:	b2db      	uxtb	r3, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff48 	bl	80016d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	0c1b      	lsrs	r3, r3, #16
 800184c:	b2db      	uxtb	r3, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff42 	bl	80016d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	0a1b      	lsrs	r3, r3, #8
 8001858:	b2db      	uxtb	r3, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff3c 	bl	80016d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff37 	bl	80016d8 <ILI9341_SPI_Send>

}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40010c00 	.word	0x40010c00

08001878 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	617b      	str	r3, [r7, #20]
	t <<= 16;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	041b      	lsls	r3, r3, #16
 800188e:	617b      	str	r3, [r7, #20]
	t |= x2;
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4313      	orrs	r3, r2
 8001896:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8001898:	6979      	ldr	r1, [r7, #20]
 800189a:	202a      	movs	r0, #42	; 0x2a
 800189c:	f7ff ffb2 	bl	8001804 <ILI9341_SPI_Send_32>
	t = y1;
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	617b      	str	r3, [r7, #20]
	t <<= 16;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	041b      	lsls	r3, r3, #16
 80018a8:	617b      	str	r3, [r7, #20]
	t |= y2;
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 80018b2:	6979      	ldr	r1, [r7, #20]
 80018b4:	202b      	movs	r0, #43	; 0x2b
 80018b6:	f7ff ffa5 	bl	8001804 <ILI9341_SPI_Send_32>
}
 80018ba:	bf00      	nop
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <LCD_OpenWindow>:
	ILI9341_SPI_Send(data);
	ILI9341_SPI_Send(data);
}

void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{
 80018c2:	b590      	push	{r4, r7, lr}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4604      	mov	r4, r0
 80018ca:	4608      	mov	r0, r1
 80018cc:	4611      	mov	r1, r2
 80018ce:	461a      	mov	r2, r3
 80018d0:	4623      	mov	r3, r4
 80018d2:	80fb      	strh	r3, [r7, #6]
 80018d4:	4603      	mov	r3, r0
 80018d6:	80bb      	strh	r3, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
 80018dc:	4613      	mov	r3, r2
 80018de:	803b      	strh	r3, [r7, #0]
	ILI9341_Set_Address(usCOLUMN, usPAGE, usCOLUMN + usWidth - 1, usPAGE + usHeight - 1);
 80018e0:	88f8      	ldrh	r0, [r7, #6]
 80018e2:	88b9      	ldrh	r1, [r7, #4]
 80018e4:	88fa      	ldrh	r2, [r7, #6]
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	4413      	add	r3, r2
 80018ea:	3b01      	subs	r3, #1
 80018ec:	461c      	mov	r4, r3
 80018ee:	88ba      	ldrh	r2, [r7, #4]
 80018f0:	883b      	ldrh	r3, [r7, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	3b01      	subs	r3, #1
 80018f6:	4622      	mov	r2, r4
 80018f8:	f7ff ffbe 	bl	8001878 <ILI9341_Set_Address>
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bd90      	pop	{r4, r7, pc}

08001904 <LCD_FillWindow>:

void LCD_FillWindow ( uint32_t usPoint, uint16_t usColor )
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );
 8001914:	202c      	movs	r0, #44	; 0x2c
 8001916:	f7ff fd6d 	bl	80013f4 <ILI9341_Send_Command>

	CS_ON;
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001920:	482a      	ldr	r0, [pc, #168]	; (80019cc <LCD_FillWindow+0xc8>)
 8001922:	f003 f8b8 	bl	8004a96 <HAL_GPIO_WritePin>
	DC_DATA;
 8001926:	2201      	movs	r2, #1
 8001928:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800192c:	4827      	ldr	r0, [pc, #156]	; (80019cc <LCD_FillWindow+0xc8>)
 800192e:	f003 f8b2 	bl	8004a96 <HAL_GPIO_WritePin>

	int chunk_size = usPoint / 10;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a26      	ldr	r2, [pc, #152]	; (80019d0 <LCD_FillWindow+0xcc>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	08db      	lsrs	r3, r3, #3
 800193c:	61fb      	str	r3, [r7, #28]
	if (chunk_size < 64) chunk_size = 64;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	2b3f      	cmp	r3, #63	; 0x3f
 8001942:	dc01      	bgt.n	8001948 <LCD_FillWindow+0x44>
 8001944:	2340      	movs	r3, #64	; 0x40
 8001946:	61fb      	str	r3, [r7, #28]
	if (chunk_size > 240) chunk_size = 240;
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	2bf0      	cmp	r3, #240	; 0xf0
 800194c:	dd01      	ble.n	8001952 <LCD_FillWindow+0x4e>
 800194e:	23f0      	movs	r3, #240	; 0xf0
 8001950:	61fb      	str	r3, [r7, #28]
	unsigned int revertedColor = (usColor >> 8) | ((usColor & 0x00ff) << 8);
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	b29b      	uxth	r3, r3
 8001958:	461a      	mov	r2, r3
 800195a:	887b      	ldrh	r3, [r7, #2]
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	b29b      	uxth	r3, r3
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
	uint16_t* array = (uint16_t*) malloc(chunk_size * sizeof(uint16_t));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4618      	mov	r0, r3
 800196a:	f012 fdb5 	bl	80144d8 <malloc>
 800196e:	4603      	mov	r3, r0
 8001970:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < chunk_size; i++) {
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	e009      	b.n	800198c <LCD_FillWindow+0x88>
		array[i] = revertedColor;
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	b292      	uxth	r2, r2
 8001984:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < chunk_size; i++) {
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	3301      	adds	r3, #1
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	429a      	cmp	r2, r3
 8001992:	dbf1      	blt.n	8001978 <LCD_FillWindow+0x74>
	}

	while (usPoint > chunk_size) {
 8001994:	e009      	b.n	80019aa <LCD_FillWindow+0xa6>
		ILI9341_SPI_Send_Multiple(array, chunk_size * 2);
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4619      	mov	r1, r3
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f7ff fead 	bl	80016fc <ILI9341_SPI_Send_Multiple>
		usPoint -= chunk_size;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	607b      	str	r3, [r7, #4]
	while (usPoint > chunk_size) {
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d8f1      	bhi.n	8001996 <LCD_FillWindow+0x92>
	}
	ILI9341_SPI_Send_Multiple(array, usPoint * 2);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4619      	mov	r1, r3
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f7ff fe9f 	bl	80016fc <ILI9341_SPI_Send_Multiple>

	free(array);
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f012 fd92 	bl	80144e8 <free>

//	for ( i = 0; i < usPoint; i ++ ) {
//		ILI9341_SPI_SendU16(revertedColor);
//	}

}
 80019c4:	bf00      	nop
 80019c6:	3720      	adds	r7, #32
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40010c00 	.word	0x40010c00
 80019d0:	cccccccd 	.word	0xcccccccd

080019d4 <LCD_DrawFilledRectangle>:

void LCD_DrawFilledRectangle ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4604      	mov	r4, r0
 80019dc:	4608      	mov	r0, r1
 80019de:	4611      	mov	r1, r2
 80019e0:	461a      	mov	r2, r3
 80019e2:	4623      	mov	r3, r4
 80019e4:	80fb      	strh	r3, [r7, #6]
 80019e6:	4603      	mov	r3, r0
 80019e8:	80bb      	strh	r3, [r7, #4]
 80019ea:	460b      	mov	r3, r1
 80019ec:	807b      	strh	r3, [r7, #2]
 80019ee:	4613      	mov	r3, r2
 80019f0:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80019f2:	883b      	ldrh	r3, [r7, #0]
 80019f4:	887a      	ldrh	r2, [r7, #2]
 80019f6:	88b9      	ldrh	r1, [r7, #4]
 80019f8:	88f8      	ldrh	r0, [r7, #6]
 80019fa:	f7ff ff62 	bl	80018c2 <LCD_OpenWindow>
	LCD_FillWindow ( usWidth * usHeight, usColor );
 80019fe:	887b      	ldrh	r3, [r7, #2]
 8001a00:	883a      	ldrh	r2, [r7, #0]
 8001a02:	fb02 f303 	mul.w	r3, r2, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	8b3b      	ldrh	r3, [r7, #24]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	f7ff ff79 	bl	8001904 <LCD_FillWindow>
//	ILI9341_Send_Burst(usColor,  usWidth * usHeight);
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd90      	pop	{r4, r7, pc}
	...

08001a1c <LCD_FillScreen>:


void LCD_FillScreen (uint16_t usColor )
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	4603      	mov	r3, r0
 8001a24:	80fb      	strh	r3, [r7, #6]
	LCD_DrawFilledRectangle(0, 0, X_SIZE, Y_SIZE, usColor);
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <LCD_FillScreen+0x2c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <LCD_FillScreen+0x30>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	b299      	uxth	r1, r3
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	460b      	mov	r3, r1
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff ffca 	bl	80019d4 <LCD_DrawFilledRectangle>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	2000000c 	.word	0x2000000c

08001a50 <LCD_DrawChar>:

	}
}

void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	80bb      	strh	r3, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	3b20      	subs	r3, #32
 8001a66:	73fb      	strb	r3, [r7, #15]

	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001a68:	88b9      	ldrh	r1, [r7, #4]
 8001a6a:	88f8      	ldrh	r0, [r7, #6]
 8001a6c:	2310      	movs	r3, #16
 8001a6e:	2208      	movs	r2, #8
 8001a70:	f7ff ff27 	bl	80018c2 <LCD_OpenWindow>

	LCD_Write_Cmd ( CMD_SetPixel );
 8001a74:	202c      	movs	r0, #44	; 0x2c
 8001a76:	f7ff fcbd 	bl	80013f4 <ILI9341_Send_Command>

	uint16_t* array = (uint16_t*) malloc(HEIGHT_EN_CHAR * WIDTH_EN_CHAR * sizeof(uint16_t));
 8001a7a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a7e:	f012 fd2b 	bl	80144d8 <malloc>
 8001a82:	4603      	mov	r3, r0
 8001a84:	60bb      	str	r3, [r7, #8]
	uint16_t* pt = array;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	613b      	str	r3, [r7, #16]
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	75bb      	strb	r3, [r7, #22]
 8001a8e:	e026      	b.n	8001ade <LCD_DrawChar+0x8e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	7dbb      	ldrb	r3, [r7, #22]
 8001a94:	491c      	ldr	r1, [pc, #112]	; (8001b08 <LCD_DrawChar+0xb8>)
 8001a96:	0112      	lsls	r2, r2, #4
 8001a98:	440a      	add	r2, r1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	75fb      	strb	r3, [r7, #23]

		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	757b      	strb	r3, [r7, #21]
 8001aa4:	e015      	b.n	8001ad2 <LCD_DrawChar+0x82>
		{

			if ( ucTemp & 0x01 ) {
 8001aa6:	7dfb      	ldrb	r3, [r7, #23]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <LCD_DrawChar+0x68>
				*pt = 0x0000;
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	801a      	strh	r2, [r3, #0]
 8001ab6:	e003      	b.n	8001ac0 <LCD_DrawChar+0x70>
			} else {
				*pt = 0xFFFF;
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001abe:	801a      	strh	r2, [r3, #0]
			}
			ucTemp >>= 1;
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
 8001ac2:	085b      	lsrs	r3, r3, #1
 8001ac4:	75fb      	strb	r3, [r7, #23]
			pt++;
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	3302      	adds	r3, #2
 8001aca:	613b      	str	r3, [r7, #16]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001acc:	7d7b      	ldrb	r3, [r7, #21]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	757b      	strb	r3, [r7, #21]
 8001ad2:	7d7b      	ldrb	r3, [r7, #21]
 8001ad4:	2b07      	cmp	r3, #7
 8001ad6:	d9e6      	bls.n	8001aa6 <LCD_DrawChar+0x56>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001ad8:	7dbb      	ldrb	r3, [r7, #22]
 8001ada:	3301      	adds	r3, #1
 8001adc:	75bb      	strb	r3, [r7, #22]
 8001ade:	7dbb      	ldrb	r3, [r7, #22]
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	d9d5      	bls.n	8001a90 <LCD_DrawChar+0x40>
		}
	}
	DC_DATA;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aea:	4808      	ldr	r0, [pc, #32]	; (8001b0c <LCD_DrawChar+0xbc>)
 8001aec:	f002 ffd3 	bl	8004a96 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send_Multiple(array, HEIGHT_EN_CHAR * WIDTH_EN_CHAR * 2);
 8001af0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af4:	68b8      	ldr	r0, [r7, #8]
 8001af6:	f7ff fe01 	bl	80016fc <ILI9341_SPI_Send_Multiple>
	free(array);
 8001afa:	68b8      	ldr	r0, [r7, #8]
 8001afc:	f012 fcf4 	bl	80144e8 <free>
}
 8001b00:	bf00      	nop
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	0802feb0 	.word	0x0802feb0
 8001b0c:	40010c00 	.word	0x40010c00

08001b10 <LCD_DrawString>:
}



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	603a      	str	r2, [r7, #0]
 8001b1a:	80fb      	strh	r3, [r7, #6]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001b20:	e01d      	b.n	8001b5e <LCD_DrawString+0x4e>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001b28:	d904      	bls.n	8001b34 <LCD_DrawString+0x24>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001b2e:	88bb      	ldrh	r3, [r7, #4]
 8001b30:	3310      	adds	r3, #16
 8001b32:	80bb      	strh	r3, [r7, #4]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001b34:	88bb      	ldrh	r3, [r7, #4]
 8001b36:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001b3a:	d903      	bls.n	8001b44 <LCD_DrawString+0x34>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	80bb      	strh	r3, [r7, #4]
		}

		LCD_DrawChar ( usC, usP, * pStr );
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	781a      	ldrb	r2, [r3, #0]
 8001b48:	88b9      	ldrh	r1, [r7, #4]
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff7f 	bl	8001a50 <LCD_DrawChar>

		pStr ++;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	603b      	str	r3, [r7, #0]

		usC += WIDTH_EN_CHAR;
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	3308      	adds	r3, #8
 8001b5c:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1dd      	bne.n	8001b22 <LCD_DrawString+0x12>

	}

}
 8001b66:	bf00      	nop
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <LCD_Print>:

	if (num_chars_to_print < 0) return;
	LCD_DrawString(x, y, formatted_str);
}

void LCD_Print(uint16_t xc, uint16_t yc, const char* fmt, ...) {
 8001b70:	b40c      	push	{r2, r3}
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b08e      	sub	sp, #56	; 0x38
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	460a      	mov	r2, r1
 8001b7c:	80fb      	strh	r3, [r7, #6]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	80bb      	strh	r3, [r7, #4]

	char formatted_str[40];

	va_list arglist;
	va_start(arglist, fmt);
 8001b82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b86:	60bb      	str	r3, [r7, #8]

	int num_chars_to_print = vsnprintf(formatted_str, sizeof(formatted_str), fmt, arglist);
 8001b88:	f107 000c 	add.w	r0, r7, #12
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b90:	2128      	movs	r1, #40	; 0x28
 8001b92:	f013 fa81 	bl	8015098 <vsniprintf>
 8001b96:	6378      	str	r0, [r7, #52]	; 0x34
	va_end(arglist);

	if (num_chars_to_print < 0) return;
 8001b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <LCD_Print+0x46>
	LCD_DrawString(xc * WIDTH_EN_CHAR, yc * HEIGHT_EN_CHAR, formatted_str);
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	b298      	uxth	r0, r3
 8001ba4:	88bb      	ldrh	r3, [r7, #4]
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	f107 020c 	add.w	r2, r7, #12
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f7ff ffae 	bl	8001b10 <LCD_DrawString>
 8001bb4:	e000      	b.n	8001bb8 <LCD_Print+0x48>
	if (num_chars_to_print < 0) return;
 8001bb6:	bf00      	nop
}
 8001bb8:	3738      	adds	r7, #56	; 0x38
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bc0:	b002      	add	sp, #8
 8001bc2:	4770      	bx	lr

08001bc4 <UpdateHIDClassConfig>:

extern int16_t USB_CUSTOM_HID_CONFIG_DESC_SIZ;

extern int16_t USB_CUSTOM_HID_DESC_SIZ;

static void UpdateHIDClassConfig(HID_ClassConfigStruct* cfg) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
    USBD_CUSTOM_HID_CfgFSDesc = cfg->CfgFSDesc;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <UpdateHIDClassConfig+0x48>)
 8001bd2:	6013      	str	r3, [r2, #0]
    USBD_CUSTOM_HID_CfgHSDesc = cfg->CfgHSDesc;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	; (8001c10 <UpdateHIDClassConfig+0x4c>)
 8001bda:	6013      	str	r3, [r2, #0]
    USBD_CUSTOM_HID_OtherSpeedCfgDesc = cfg->OtherSpeedCfgDesc;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <UpdateHIDClassConfig+0x50>)
 8001be2:	6013      	str	r3, [r2, #0]
    USB_CUSTOM_HID_CONFIG_DESC_SIZ = cfg->size_CfgDesc;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	899b      	ldrh	r3, [r3, #12]
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <UpdateHIDClassConfig+0x54>)
 8001bec:	801a      	strh	r2, [r3, #0]

    USBD_CUSTOM_HID_Desc = cfg->Desc;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <UpdateHIDClassConfig+0x58>)
 8001bf4:	6013      	str	r3, [r2, #0]
    USB_CUSTOM_HID_DESC_SIZ = cfg->size_Desc;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	8a9b      	ldrh	r3, [r3, #20]
 8001bfa:	b21a      	sxth	r2, r3
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <UpdateHIDClassConfig+0x5c>)
 8001bfe:	801a      	strh	r2, [r3, #0]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000cac 	.word	0x20000cac
 8001c10:	20000cb0 	.word	0x20000cb0
 8001c14:	20000cb4 	.word	0x20000cb4
 8001c18:	20000cbc 	.word	0x20000cbc
 8001c1c:	20000cb8 	.word	0x20000cb8
 8001c20:	20000cbe 	.word	0x20000cbe

08001c24 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8001c28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8001c36:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	460a      	mov	r2, r1
 8001c4a:	71fb      	strb	r3, [r7, #7]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8001c50:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <UpdateHIDItfConfig>:

extern uint16_t USBD_CUSTOM_HID_REPORT_DESC_SIZE;

extern USBD_CUSTOM_HID_ItfTypeDef USBD_CustomHID_fops_FS;

static void UpdateHIDItfConfig(HID_ItfConfigStruct* cfg) {
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	CUSTOM_HID_ReportDesc_FS = cfg->ReportDesc_FS;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <UpdateHIDItfConfig+0x3c>)
 8001c6a:	6013      	str	r3, [r2, #0]
	USBD_CUSTOM_HID_REPORT_DESC_SIZE = cfg->size_ReportDesc;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	889a      	ldrh	r2, [r3, #4]
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <UpdateHIDItfConfig+0x40>)
 8001c72:	801a      	strh	r2, [r3, #0]

	// need to reinit the whole thing
	USBD_CustomHID_fops_FS = (USBD_CUSTOM_HID_ItfTypeDef) {
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <UpdateHIDItfConfig+0x3c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <UpdateHIDItfConfig+0x44>)
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <UpdateHIDItfConfig+0x44>)
 8001c7e:	4a09      	ldr	r2, [pc, #36]	; (8001ca4 <UpdateHIDItfConfig+0x48>)
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <UpdateHIDItfConfig+0x44>)
 8001c84:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <UpdateHIDItfConfig+0x4c>)
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <UpdateHIDItfConfig+0x44>)
 8001c8a:	4a08      	ldr	r2, [pc, #32]	; (8001cac <UpdateHIDItfConfig+0x50>)
 8001c8c:	60da      	str	r2, [r3, #12]
								  CUSTOM_HID_ReportDesc_FS,
								  CUSTOM_HID_Init_FS,
								  CUSTOM_HID_DeInit_FS,
								  CUSTOM_HID_OutEvent_FS
								};
}
 8001c8e:	bf00      	nop
 8001c90:	371c      	adds	r7, #28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	200010a0 	.word	0x200010a0
 8001c9c:	200010a4 	.word	0x200010a4
 8001ca0:	200010a8 	.word	0x200010a8
 8001ca4:	08001c25 	.word	0x08001c25
 8001ca8:	08001c33 	.word	0x08001c33
 8001cac:	08001c41 	.word	0x08001c41

08001cb0 <HAL_TIM_PeriodElapsedCallback>:
int16_t reading;
int16_t voltage[4];
int16_t max_reading[4];

int16_t errors[4];
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a48      	ldr	r2, [pc, #288]	; (8001ddc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d17d      	bne.n	8001dbc <HAL_TIM_PeriodElapsedCallback+0x10c>
		drum_interrupt_counts++;
 8001cc0:	4b47      	ldr	r3, [pc, #284]	; (8001de0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	4a46      	ldr	r2, [pc, #280]	; (8001de0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001cc8:	6013      	str	r3, [r2, #0]
		DrumUpdate(0);
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f7ff fab8 	bl	8001240 <DrumUpdate>


		uint8_t ADSConfig[3] = {0x01,
 8001cd0:	4a44      	ldr	r2, [pc, #272]	; (8001de4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001cd2:	f107 0310 	add.w	r3, r7, #16
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	4611      	mov	r1, r2
 8001cda:	8019      	strh	r1, [r3, #0]
 8001cdc:	3302      	adds	r3, #2
 8001cde:	0c12      	lsrs	r2, r2, #16
 8001ce0:	701a      	strb	r2, [r3, #0]
							     ADS1115_OS | ADS1115_MODE_CONTINUOUS | ADS1115_PGA_ONE,
								 ADS1115_DATA_RATE_250 | ADS1115_COMP_MODE | ADS1115_COMP_POL | ADS1115_COMP_LAT | ADS1115_COMP_QUE };
		uint8_t ADSWrite[1] = {0x00};
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	733b      	strb	r3, [r7, #12]
		uint8_t ADSReceive[2];
//		__disable_irq();
		for (int i = 0; i < 4; i++){
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	e03c      	b.n	8001d66 <HAL_TIM_PeriodElapsedCallback+0xb6>
			ADSConfig[1] = ADS1115_OS | ADS1115_PGA_ONE | ADS1115_MODE_CONTINUOUS | ((0b100 | i) << 4); // choose AIN
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	b25b      	sxtb	r3, r3
 8001cf2:	f063 033d 	orn	r3, r3, #61	; 0x3d
 8001cf6:	b25b      	sxtb	r3, r3
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	747b      	strb	r3, [r7, #17]

			int temp;
			errors[1] = HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSConfig, 3, 100);
 8001cfc:	f107 0210 	add.w	r2, r7, #16
 8001d00:	2364      	movs	r3, #100	; 0x64
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2303      	movs	r3, #3
 8001d06:	2190      	movs	r1, #144	; 0x90
 8001d08:	4837      	ldr	r0, [pc, #220]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001d0a:	f003 f839 	bl	8004d80 <HAL_I2C_Master_Transmit>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	b21a      	sxth	r2, r3
 8001d12:	4b36      	ldr	r3, [pc, #216]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001d14:	805a      	strh	r2, [r3, #2]
//			if (!temp) LCD_Print(0, r++, "ERROR 1! %d", temp);
			errors[2] = HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSWrite, 1, 100);
 8001d16:	f107 020c 	add.w	r2, r7, #12
 8001d1a:	2364      	movs	r3, #100	; 0x64
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	2190      	movs	r1, #144	; 0x90
 8001d22:	4831      	ldr	r0, [pc, #196]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001d24:	f003 f82c 	bl	8004d80 <HAL_I2C_Master_Transmit>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001d2e:	809a      	strh	r2, [r3, #4]
//			if (!temp) LCD_Print(0, r++, "ERROR 2! %d", temp);
//			HAL_Delay(20);

			errors[3] = HAL_I2C_Master_Receive(&hi2c1, ADS1115_ADDRESS << 1, ADSReceive, 2, 100);
 8001d30:	f107 0208 	add.w	r2, r7, #8
 8001d34:	2364      	movs	r3, #100	; 0x64
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2302      	movs	r3, #2
 8001d3a:	2190      	movs	r1, #144	; 0x90
 8001d3c:	482a      	ldr	r0, [pc, #168]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001d3e:	f003 f91d 	bl	8004f7c <HAL_I2C_Master_Receive>
 8001d42:	4603      	mov	r3, r0
 8001d44:	b21a      	sxth	r2, r3
 8001d46:	4b29      	ldr	r3, [pc, #164]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001d48:	80da      	strh	r2, [r3, #6]
//			if (!temp) LCD_Print(0, r++, "ERROR 3! %d", temp);
			voltage[i] = (ADSReceive[0] << 8 | ADSReceive[1]);
 8001d4a:	7a3b      	ldrb	r3, [r7, #8]
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	b21a      	sxth	r2, r3
 8001d50:	7a7b      	ldrb	r3, [r7, #9]
 8001d52:	b21b      	sxth	r3, r3
 8001d54:	4313      	orrs	r3, r2
 8001d56:	b219      	sxth	r1, r3
 8001d58:	4a25      	ldr	r2, [pc, #148]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < 4; i++){
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	3301      	adds	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	ddbf      	ble.n	8001cec <HAL_TIM_PeriodElapsedCallback+0x3c>
		}
//		__enable_irq();

//		if (drum_interrupt_counts % 2 == 0) {

		keyboardhid.KEYCODE1 = drums[0].state >= DRUM_HIT ? 0x07 : 0x00;  // press 'd'
 8001d6c:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001d6e:	7a1b      	ldrb	r3, [r3, #8]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_TIM_PeriodElapsedCallback+0xc8>
 8001d74:	2207      	movs	r2, #7
 8001d76:	e000      	b.n	8001d7a <HAL_TIM_PeriodElapsedCallback+0xca>
 8001d78:	2200      	movs	r2, #0
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001d7c:	709a      	strb	r2, [r3, #2]
		keyboardhid.KEYCODE2 = drums[1].state >= DRUM_HIT ? 0x09 : 0x00;  // press 'f'
 8001d7e:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001d80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_TIM_PeriodElapsedCallback+0xdc>
 8001d88:	2209      	movs	r2, #9
 8001d8a:	e000      	b.n	8001d8e <HAL_TIM_PeriodElapsedCallback+0xde>
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001d90:	70da      	strb	r2, [r3, #3]
		keyboardhid.KEYCODE3 = drums[2].state >= DRUM_HIT ? 0x0d : 0x00;  // press 'j'
 8001d92:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001d94:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8001d9c:	220d      	movs	r2, #13
 8001d9e:	e000      	b.n	8001da2 <HAL_TIM_PeriodElapsedCallback+0xf2>
 8001da0:	2200      	movs	r2, #0
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001da4:	711a      	strb	r2, [r3, #4]
		keyboardhid.KEYCODE4 = drums[3].state >= DRUM_HIT ? 0x0e : 0x00;  // press 'k'
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001da8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_TIM_PeriodElapsedCallback+0x104>
 8001db0:	220e      	movs	r2, #14
 8001db2:	e000      	b.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x106>
 8001db4:	2200      	movs	r2, #0
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001db8:	715a      	strb	r2, [r3, #5]

	else if (htim == &htim4) {
		mix_interrupt_counts++;
		PrecomputeMix();
	}
}
 8001dba:	e00a      	b.n	8001dd2 <HAL_TIM_PeriodElapsedCallback+0x122>
	else if (htim == &htim4) {
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a0f      	ldr	r2, [pc, #60]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d106      	bne.n	8001dd2 <HAL_TIM_PeriodElapsedCallback+0x122>
		mix_interrupt_counts++;
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	4a0d      	ldr	r2, [pc, #52]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001dcc:	6013      	str	r3, [r2, #0]
		PrecomputeMix();
 8001dce:	f7fe ff33 	bl	8000c38 <PrecomputeMix>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000b8c 	.word	0x20000b8c
 8001de0:	20000c64 	.word	0x20000c64
 8001de4:	080171d4 	.word	0x080171d4
 8001de8:	200009bc 	.word	0x200009bc
 8001dec:	20000c7c 	.word	0x20000c7c
 8001df0:	20000c74 	.word	0x20000c74
 8001df4:	20000780 	.word	0x20000780
 8001df8:	20000c68 	.word	0x20000c68
 8001dfc:	20000bd4 	.word	0x20000bd4
 8001e00:	20000c70 	.word	0x20000c70

08001e04 <HAL_GPIO_EXTI_Callback>:

uint16_t btn_callbacks = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
	int keyPressed = ButtonPadCallback(GPIO_Pin);
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe ffed 	bl	8000df0 <ButtonPadCallback>
 8001e16:	60f8      	str	r0, [r7, #12]
	ButtonPad_DrumCalibration(keyPressed);
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f7ff fa73 	bl	8001304 <ButtonPad_DrumCalibration>
	btn_callbacks++;
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_GPIO_EXTI_Callback+0x30>)
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	3301      	adds	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_GPIO_EXTI_Callback+0x30>)
 8001e28:	801a      	strh	r2, [r3, #0]
}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000c84 	.word	0x20000c84

08001e38 <HAL_UART_RxCpltCallback>:

uint8_t Rx_data[1] = {0};
uint16_t Rx_buff[6] = {0};
int Rx_length = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
//	Rx_length += 1;
	if (Rx_length < 2) {
 8001e40:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_UART_RxCpltCallback+0xb4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	dc13      	bgt.n	8001e70 <HAL_UART_RxCpltCallback+0x38>
		if (*Rx_data != 0xFF) {
 8001e48:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <HAL_UART_RxCpltCallback+0xb8>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2bff      	cmp	r3, #255	; 0xff
 8001e4e:	d003      	beq.n	8001e58 <HAL_UART_RxCpltCallback+0x20>
			Rx_length = 0;
 8001e50:	4b26      	ldr	r3, [pc, #152]	; (8001eec <HAL_UART_RxCpltCallback+0xb4>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	e040      	b.n	8001eda <HAL_UART_RxCpltCallback+0xa2>
		} else {
			((uint8_t*) Rx_buff)[Rx_length++] = *Rx_data;
 8001e58:	4b24      	ldr	r3, [pc, #144]	; (8001eec <HAL_UART_RxCpltCallback+0xb4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	4923      	ldr	r1, [pc, #140]	; (8001eec <HAL_UART_RxCpltCallback+0xb4>)
 8001e60:	600a      	str	r2, [r1, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_UART_RxCpltCallback+0xbc>)
 8001e66:	4413      	add	r3, r2
 8001e68:	4a21      	ldr	r2, [pc, #132]	; (8001ef0 <HAL_UART_RxCpltCallback+0xb8>)
 8001e6a:	7812      	ldrb	r2, [r2, #0]
 8001e6c:	701a      	strb	r2, [r3, #0]
 8001e6e:	e034      	b.n	8001eda <HAL_UART_RxCpltCallback+0xa2>
		}
	} else {
		((uint8_t*) Rx_buff)[Rx_length++] = *Rx_data;
 8001e70:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <HAL_UART_RxCpltCallback+0xb4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	491d      	ldr	r1, [pc, #116]	; (8001eec <HAL_UART_RxCpltCallback+0xb4>)
 8001e78:	600a      	str	r2, [r1, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_UART_RxCpltCallback+0xbc>)
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a1b      	ldr	r2, [pc, #108]	; (8001ef0 <HAL_UART_RxCpltCallback+0xb8>)
 8001e82:	7812      	ldrb	r2, [r2, #0]
 8001e84:	701a      	strb	r2, [r3, #0]
		if (Rx_length == 12) {
 8001e86:	4b19      	ldr	r3, [pc, #100]	; (8001eec <HAL_UART_RxCpltCallback+0xb4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b0c      	cmp	r3, #12
 8001e8c:	d125      	bne.n	8001eda <HAL_UART_RxCpltCallback+0xa2>
			if (Rx_buff[1] + Rx_buff[2] + Rx_buff[3] + Rx_buff[4] == Rx_buff[5]) {
 8001e8e:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_UART_RxCpltCallback+0xbc>)
 8001e90:	885b      	ldrh	r3, [r3, #2]
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <HAL_UART_RxCpltCallback+0xbc>)
 8001e96:	889b      	ldrh	r3, [r3, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	4a16      	ldr	r2, [pc, #88]	; (8001ef4 <HAL_UART_RxCpltCallback+0xbc>)
 8001e9c:	88d2      	ldrh	r2, [r2, #6]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <HAL_UART_RxCpltCallback+0xbc>)
 8001ea2:	8912      	ldrh	r2, [r2, #8]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4a13      	ldr	r2, [pc, #76]	; (8001ef4 <HAL_UART_RxCpltCallback+0xbc>)
 8001ea8:	8952      	ldrh	r2, [r2, #10]
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d112      	bne.n	8001ed4 <HAL_UART_RxCpltCallback+0x9c>
				for (int i = 0; i < 4; i++) {
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	e00c      	b.n	8001ece <HAL_UART_RxCpltCallback+0x96>
					drum_sensor_values[i] = Rx_buff[i+1];
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	4a0e      	ldr	r2, [pc, #56]	; (8001ef4 <HAL_UART_RxCpltCallback+0xbc>)
 8001eba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <HAL_UART_RxCpltCallback+0xc0>)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int i = 0; i < 4; i++) {
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	ddef      	ble.n	8001eb4 <HAL_UART_RxCpltCallback+0x7c>
				}
			}
			Rx_length = 0;
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_UART_RxCpltCallback+0xb4>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 8001eda:	2201      	movs	r2, #1
 8001edc:	4904      	ldr	r1, [pc, #16]	; (8001ef0 <HAL_UART_RxCpltCallback+0xb8>)
 8001ede:	4807      	ldr	r0, [pc, #28]	; (8001efc <HAL_UART_RxCpltCallback+0xc4>)
 8001ee0:	f008 fafe 	bl	800a4e0 <HAL_UART_Receive_IT>
}
 8001ee4:	bf00      	nop
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000c98 	.word	0x20000c98
 8001ef0:	20000c88 	.word	0x20000c88
 8001ef4:	20000c8c 	.word	0x20000c8c
 8001ef8:	20000770 	.word	0x20000770
 8001efc:	20000c1c 	.word	0x20000c1c

08001f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f06:	f001 f8cd 	bl	80030a4 <HAL_Init>

  /* USER CODE BEGIN Init */
  UpdateHIDClassConfig(&Keyboard_ClassConfig);
 8001f0a:	482e      	ldr	r0, [pc, #184]	; (8001fc4 <main+0xc4>)
 8001f0c:	f7ff fe5a 	bl	8001bc4 <UpdateHIDClassConfig>
  UpdateHIDItfConfig(&Keyboard_ItfConfig);
 8001f10:	482d      	ldr	r0, [pc, #180]	; (8001fc8 <main+0xc8>)
 8001f12:	f7ff fea3 	bl	8001c5c <UpdateHIDItfConfig>
//  UpdateHIDClassConfig(&Switch_ClassConfig);
//UpdateHIDItfConfig(&Switch_ItfConfig);
  MX_USB_DEVICE_Init();
 8001f16:	f011 fdef 	bl	8013af8 <MX_USB_DEVICE_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f1a:	f000 f861 	bl	8001fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f1e:	f000 fb67 	bl	80025f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f22:	f000 fb2b 	bl	800257c <MX_DMA_Init>
  MX_SPI2_Init();
 8001f26:	f000 f9df 	bl	80022e8 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001f2a:	f000 fa5f 	bl	80023ec <MX_TIM3_Init>
  MX_ADC1_Init();
 8001f2e:	f000 f8b7 	bl	80020a0 <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 8001f32:	f000 f981 	bl	8002238 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001f36:	f00c f90d 	bl	800e154 <MX_FATFS_Init>
  MX_DAC_Init();
 8001f3a:	f000 f91b 	bl	8002174 <MX_DAC_Init>
  MX_I2C1_Init();
 8001f3e:	f000 f94d 	bl	80021dc <MX_I2C1_Init>
  MX_TIM2_Init();
 8001f42:	f000 fa07 	bl	8002354 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001f46:	f000 fa9f 	bl	8002488 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001f4a:	f000 faed 	bl	8002528 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001f4e:	f000 f993 	bl	8002278 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */



  HAL_ADCEx_Calibration_Start(&hadc1);
 8001f52:	481e      	ldr	r0, [pc, #120]	; (8001fcc <main+0xcc>)
 8001f54:	f001 fbaa 	bl	80036ac <HAL_ADCEx_Calibration_Start>
  HAL_UART_Receive_IT (&huart1, Rx_data, 1);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	491d      	ldr	r1, [pc, #116]	; (8001fd0 <main+0xd0>)
 8001f5c:	481d      	ldr	r0, [pc, #116]	; (8001fd4 <main+0xd4>)
 8001f5e:	f008 fabf 	bl	800a4e0 <HAL_UART_Receive_IT>

	ButtonPadInit();
 8001f62:	f7fe ff27 	bl	8000db4 <ButtonPadInit>

	ILI9341_Init();
 8001f66:	f7ff fa7d 	bl	8001464 <ILI9341_Init>
	ILI9341_Set_Rotation(2);
 8001f6a:	2002      	movs	r0, #2
 8001f6c:	f7ff fc00 	bl	8001770 <ILI9341_Set_Rotation>
	LCD_FillScreen(PINK);
 8001f70:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8001f74:	f7ff fd52 	bl	8001a1c <LCD_FillScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



	long last_ticks = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61bb      	str	r3, [r7, #24]
	long tft_last_ticks = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
	long ticks = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]
	int num_hits = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
	int hit_state = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60bb      	str	r3, [r7, #8]
//		while (1) {}
//	}


	uint32_t reset_ticks;
	uint16_t temp = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	80fb      	strh	r3, [r7, #6]
//			tft_last_ticks = HAL_GetTick();
//		}


//		keyboardhid.MODIFIER = 0x02;  // left Shift
		for (int i = 0; i < 26; i++) {
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	e012      	b.n	8001fbc <main+0xbc>
			keyboardhid.KEYCODE1 = 0x04 + i;  // press 'a'
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <main+0xd8>)
 8001fa0:	709a      	strb	r2, [r3, #2]
			temp = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8001fa2:	2208      	movs	r2, #8
 8001fa4:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <main+0xd8>)
 8001fa6:	480d      	ldr	r0, [pc, #52]	; (8001fdc <main+0xdc>)
 8001fa8:	f00c faf8 	bl	800e59c <USBD_CUSTOM_HID_SendReport>
 8001fac:	4603      	mov	r3, r0
 8001fae:	80fb      	strh	r3, [r7, #6]
			HAL_Delay (10);
 8001fb0:	200a      	movs	r0, #10
 8001fb2:	f001 f8d9 	bl	8003168 <HAL_Delay>
		for (int i = 0; i < 26; i++) {
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	61fb      	str	r3, [r7, #28]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	2b19      	cmp	r3, #25
 8001fc0:	dde9      	ble.n	8001f96 <main+0x96>
 8001fc2:	e7e5      	b.n	8001f90 <main+0x90>
 8001fc4:	080304a0 	.word	0x080304a0
 8001fc8:	080304c0 	.word	0x080304c0
 8001fcc:	200008ac 	.word	0x200008ac
 8001fd0:	20000c88 	.word	0x20000c88
 8001fd4:	20000c1c 	.word	0x20000c1c
 8001fd8:	20000c68 	.word	0x20000c68
 8001fdc:	20000ddc 	.word	0x20000ddc

08001fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b096      	sub	sp, #88	; 0x58
 8001fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fe6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fea:	2228      	movs	r2, #40	; 0x28
 8001fec:	2100      	movs	r1, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f012 fa90 	bl	8014514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
 8002010:	611a      	str	r2, [r3, #16]
 8002012:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002014:	2301      	movs	r3, #1
 8002016:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800201c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800201e:	2300      	movs	r3, #0
 8002020:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002022:	2301      	movs	r3, #1
 8002024:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002026:	2302      	movs	r3, #2
 8002028:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800202a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800202e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002030:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002034:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002036:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800203a:	4618      	mov	r0, r3
 800203c:	f005 fae6 	bl	800760c <HAL_RCC_OscConfig>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002046:	f000 fba1 	bl	800278c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800204a:	230f      	movs	r3, #15
 800204c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800204e:	2302      	movs	r3, #2
 8002050:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800205c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002062:	f107 031c 	add.w	r3, r7, #28
 8002066:	2102      	movs	r1, #2
 8002068:	4618      	mov	r0, r3
 800206a:	f005 fd51 	bl	8007b10 <HAL_RCC_ClockConfig>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002074:	f000 fb8a 	bl	800278c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002078:	2312      	movs	r3, #18
 800207a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800207c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002080:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	4618      	mov	r0, r3
 800208a:	f005 fecf 	bl	8007e2c <HAL_RCCEx_PeriphCLKConfig>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002094:	f000 fb7a 	bl	800278c <Error_Handler>
  }
}
 8002098:	bf00      	nop
 800209a:	3758      	adds	r7, #88	; 0x58
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80020b0:	4b2e      	ldr	r3, [pc, #184]	; (800216c <MX_ADC1_Init+0xcc>)
 80020b2:	4a2f      	ldr	r2, [pc, #188]	; (8002170 <MX_ADC1_Init+0xd0>)
 80020b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80020b6:	4b2d      	ldr	r3, [pc, #180]	; (800216c <MX_ADC1_Init+0xcc>)
 80020b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80020be:	4b2b      	ldr	r3, [pc, #172]	; (800216c <MX_ADC1_Init+0xcc>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020c4:	4b29      	ldr	r3, [pc, #164]	; (800216c <MX_ADC1_Init+0xcc>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020ca:	4b28      	ldr	r3, [pc, #160]	; (800216c <MX_ADC1_Init+0xcc>)
 80020cc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80020d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020d2:	4b26      	ldr	r3, [pc, #152]	; (800216c <MX_ADC1_Init+0xcc>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80020d8:	4b24      	ldr	r3, [pc, #144]	; (800216c <MX_ADC1_Init+0xcc>)
 80020da:	2204      	movs	r2, #4
 80020dc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020de:	4823      	ldr	r0, [pc, #140]	; (800216c <MX_ADC1_Init+0xcc>)
 80020e0:	f001 f866 	bl	80031b0 <HAL_ADC_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80020ea:	f000 fb4f 	bl	800278c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020f2:	2301      	movs	r3, #1
 80020f4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80020f6:	2307      	movs	r3, #7
 80020f8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	4619      	mov	r1, r3
 80020fe:	481b      	ldr	r0, [pc, #108]	; (800216c <MX_ADC1_Init+0xcc>)
 8002100:	f001 f940 	bl	8003384 <HAL_ADC_ConfigChannel>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800210a:	f000 fb3f 	bl	800278c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800210e:	2301      	movs	r3, #1
 8002110:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002112:	2302      	movs	r3, #2
 8002114:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4814      	ldr	r0, [pc, #80]	; (800216c <MX_ADC1_Init+0xcc>)
 800211c:	f001 f932 	bl	8003384 <HAL_ADC_ConfigChannel>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002126:	f000 fb31 	bl	800278c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800212a:	2302      	movs	r3, #2
 800212c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800212e:	2303      	movs	r3, #3
 8002130:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002132:	1d3b      	adds	r3, r7, #4
 8002134:	4619      	mov	r1, r3
 8002136:	480d      	ldr	r0, [pc, #52]	; (800216c <MX_ADC1_Init+0xcc>)
 8002138:	f001 f924 	bl	8003384 <HAL_ADC_ConfigChannel>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002142:	f000 fb23 	bl	800278c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002146:	2303      	movs	r3, #3
 8002148:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800214a:	2304      	movs	r3, #4
 800214c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	4619      	mov	r1, r3
 8002152:	4806      	ldr	r0, [pc, #24]	; (800216c <MX_ADC1_Init+0xcc>)
 8002154:	f001 f916 	bl	8003384 <HAL_ADC_ConfigChannel>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800215e:	f000 fb15 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200008ac 	.word	0x200008ac
 8002170:	40012400 	.word	0x40012400

08002174 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800217a:	463b      	mov	r3, r7
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002182:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <MX_DAC_Init+0x60>)
 8002184:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <MX_DAC_Init+0x64>)
 8002186:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002188:	4812      	ldr	r0, [pc, #72]	; (80021d4 <MX_DAC_Init+0x60>)
 800218a:	f001 fc4a 	bl	8003a22 <HAL_DAC_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002194:	f000 fafa 	bl	800278c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002198:	2324      	movs	r3, #36	; 0x24
 800219a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800219c:	2300      	movs	r3, #0
 800219e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80021a0:	463b      	mov	r3, r7
 80021a2:	2200      	movs	r2, #0
 80021a4:	4619      	mov	r1, r3
 80021a6:	480b      	ldr	r0, [pc, #44]	; (80021d4 <MX_DAC_Init+0x60>)
 80021a8:	f001 fd66 	bl	8003c78 <HAL_DAC_ConfigChannel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80021b2:	f000 faeb 	bl	800278c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80021b6:	463b      	mov	r3, r7
 80021b8:	2210      	movs	r2, #16
 80021ba:	4619      	mov	r1, r3
 80021bc:	4805      	ldr	r0, [pc, #20]	; (80021d4 <MX_DAC_Init+0x60>)
 80021be:	f001 fd5b 	bl	8003c78 <HAL_DAC_ConfigChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80021c8:	f000 fae0 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000920 	.word	0x20000920
 80021d8:	40007400 	.word	0x40007400

080021dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <MX_I2C1_Init+0x50>)
 80021e2:	4a13      	ldr	r2, [pc, #76]	; (8002230 <MX_I2C1_Init+0x54>)
 80021e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <MX_I2C1_Init+0x50>)
 80021e8:	4a12      	ldr	r2, [pc, #72]	; (8002234 <MX_I2C1_Init+0x58>)
 80021ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021ec:	4b0f      	ldr	r3, [pc, #60]	; (800222c <MX_I2C1_Init+0x50>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <MX_I2C1_Init+0x50>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <MX_I2C1_Init+0x50>)
 80021fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002200:	4b0a      	ldr	r3, [pc, #40]	; (800222c <MX_I2C1_Init+0x50>)
 8002202:	2200      	movs	r2, #0
 8002204:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <MX_I2C1_Init+0x50>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800220c:	4b07      	ldr	r3, [pc, #28]	; (800222c <MX_I2C1_Init+0x50>)
 800220e:	2200      	movs	r2, #0
 8002210:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <MX_I2C1_Init+0x50>)
 8002214:	2200      	movs	r2, #0
 8002216:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002218:	4804      	ldr	r0, [pc, #16]	; (800222c <MX_I2C1_Init+0x50>)
 800221a:	f002 fc6d 	bl	8004af8 <HAL_I2C_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002224:	f000 fab2 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}
 800222c:	200009bc 	.word	0x200009bc
 8002230:	40005400 	.word	0x40005400
 8002234:	000186a0 	.word	0x000186a0

08002238 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <MX_SDIO_SD_Init+0x38>)
 800223e:	4a0d      	ldr	r2, [pc, #52]	; (8002274 <MX_SDIO_SD_Init+0x3c>)
 8002240:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <MX_SDIO_SD_Init+0x38>)
 8002244:	2200      	movs	r2, #0
 8002246:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <MX_SDIO_SD_Init+0x38>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <MX_SDIO_SD_Init+0x38>)
 8002250:	2200      	movs	r2, #0
 8002252:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <MX_SDIO_SD_Init+0x38>)
 8002256:	2200      	movs	r2, #0
 8002258:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <MX_SDIO_SD_Init+0x38>)
 800225c:	2200      	movs	r2, #0
 800225e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 100;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <MX_SDIO_SD_Init+0x38>)
 8002262:	2264      	movs	r2, #100	; 0x64
 8002264:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000a10 	.word	0x20000a10
 8002274:	40018000 	.word	0x40018000

08002278 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800227c:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <MX_SPI1_Init+0x68>)
 800227e:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <MX_SPI1_Init+0x6c>)
 8002280:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002282:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <MX_SPI1_Init+0x68>)
 8002284:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002288:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <MX_SPI1_Init+0x68>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002290:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <MX_SPI1_Init+0x68>)
 8002292:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002296:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <MX_SPI1_Init+0x68>)
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800229e:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <MX_SPI1_Init+0x68>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <MX_SPI1_Init+0x68>)
 80022a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80022aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <MX_SPI1_Init+0x68>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <MX_SPI1_Init+0x68>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <MX_SPI1_Init+0x68>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <MX_SPI1_Init+0x68>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <MX_SPI1_Init+0x68>)
 80022c6:	220a      	movs	r2, #10
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022ca:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_SPI1_Init+0x68>)
 80022cc:	f007 f8c7 	bl	800945e <HAL_SPI_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80022d6:	f000 fa59 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000a94 	.word	0x20000a94
 80022e4:	40013000 	.word	0x40013000

080022e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80022ec:	4b17      	ldr	r3, [pc, #92]	; (800234c <MX_SPI2_Init+0x64>)
 80022ee:	4a18      	ldr	r2, [pc, #96]	; (8002350 <MX_SPI2_Init+0x68>)
 80022f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <MX_SPI2_Init+0x64>)
 80022f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <MX_SPI2_Init+0x64>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <MX_SPI2_Init+0x64>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <MX_SPI2_Init+0x64>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <MX_SPI2_Init+0x64>)
 800230e:	2200      	movs	r2, #0
 8002310:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <MX_SPI2_Init+0x64>)
 8002314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002318:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <MX_SPI2_Init+0x64>)
 800231c:	2200      	movs	r2, #0
 800231e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <MX_SPI2_Init+0x64>)
 8002322:	2200      	movs	r2, #0
 8002324:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <MX_SPI2_Init+0x64>)
 8002328:	2200      	movs	r2, #0
 800232a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <MX_SPI2_Init+0x64>)
 800232e:	2200      	movs	r2, #0
 8002330:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_SPI2_Init+0x64>)
 8002334:	220a      	movs	r2, #10
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002338:	4804      	ldr	r0, [pc, #16]	; (800234c <MX_SPI2_Init+0x64>)
 800233a:	f007 f890 	bl	800945e <HAL_SPI_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002344:	f000 fa22 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000aec 	.word	0x20000aec
 8002350:	40003800 	.word	0x40003800

08002354 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800235a:	f107 0308 	add.w	r3, r7, #8
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002368:	463b      	mov	r3, r7
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002370:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <MX_TIM2_Init+0x94>)
 8002372:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002376:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <MX_TIM2_Init+0x94>)
 800237a:	2200      	movs	r2, #0
 800237c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237e:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <MX_TIM2_Init+0x94>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 8002384:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <MX_TIM2_Init+0x94>)
 8002386:	f240 52db 	movw	r2, #1499	; 0x5db
 800238a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <MX_TIM2_Init+0x94>)
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <MX_TIM2_Init+0x94>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002398:	4813      	ldr	r0, [pc, #76]	; (80023e8 <MX_TIM2_Init+0x94>)
 800239a:	f007 facd 	bl	8009938 <HAL_TIM_Base_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80023a4:	f000 f9f2 	bl	800278c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023ae:	f107 0308 	add.w	r3, r7, #8
 80023b2:	4619      	mov	r1, r3
 80023b4:	480c      	ldr	r0, [pc, #48]	; (80023e8 <MX_TIM2_Init+0x94>)
 80023b6:	f007 fcf5 	bl	8009da4 <HAL_TIM_ConfigClockSource>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80023c0:	f000 f9e4 	bl	800278c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80023c4:	2320      	movs	r3, #32
 80023c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023cc:	463b      	mov	r3, r7
 80023ce:	4619      	mov	r1, r3
 80023d0:	4805      	ldr	r0, [pc, #20]	; (80023e8 <MX_TIM2_Init+0x94>)
 80023d2:	f007 ffb7 	bl	800a344 <HAL_TIMEx_MasterConfigSynchronization>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80023dc:	f000 f9d6 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023e0:	bf00      	nop
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000b44 	.word	0x20000b44

080023ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023f2:	f107 0308 	add.w	r3, r7, #8
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002400:	463b      	mov	r3, r7
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <MX_TIM3_Init+0x94>)
 800240a:	4a1e      	ldr	r2, [pc, #120]	; (8002484 <MX_TIM3_Init+0x98>)
 800240c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 800240e:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <MX_TIM3_Init+0x94>)
 8002410:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002414:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002416:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <MX_TIM3_Init+0x94>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 800241c:	4b18      	ldr	r3, [pc, #96]	; (8002480 <MX_TIM3_Init+0x94>)
 800241e:	2231      	movs	r2, #49	; 0x31
 8002420:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <MX_TIM3_Init+0x94>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <MX_TIM3_Init+0x94>)
 800242a:	2200      	movs	r2, #0
 800242c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800242e:	4814      	ldr	r0, [pc, #80]	; (8002480 <MX_TIM3_Init+0x94>)
 8002430:	f007 fa82 	bl	8009938 <HAL_TIM_Base_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800243a:	f000 f9a7 	bl	800278c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800243e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002442:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002444:	f107 0308 	add.w	r3, r7, #8
 8002448:	4619      	mov	r1, r3
 800244a:	480d      	ldr	r0, [pc, #52]	; (8002480 <MX_TIM3_Init+0x94>)
 800244c:	f007 fcaa 	bl	8009da4 <HAL_TIM_ConfigClockSource>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002456:	f000 f999 	bl	800278c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002462:	463b      	mov	r3, r7
 8002464:	4619      	mov	r1, r3
 8002466:	4806      	ldr	r0, [pc, #24]	; (8002480 <MX_TIM3_Init+0x94>)
 8002468:	f007 ff6c 	bl	800a344 <HAL_TIMEx_MasterConfigSynchronization>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002472:	f000 f98b 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002476:	bf00      	nop
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000b8c 	.word	0x20000b8c
 8002484:	40000400 	.word	0x40000400

08002488 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800248e:	f107 030c 	add.w	r3, r7, #12
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
 800249c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024a6:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <MX_TIM4_Init+0x98>)
 80024a8:	4a1e      	ldr	r2, [pc, #120]	; (8002524 <MX_TIM4_Init+0x9c>)
 80024aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80024ac:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <MX_TIM4_Init+0x98>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b2:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <MX_TIM4_Init+0x98>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <MX_TIM4_Init+0x98>)
 80024ba:	f240 12f3 	movw	r2, #499	; 0x1f3
 80024be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c0:	4b17      	ldr	r3, [pc, #92]	; (8002520 <MX_TIM4_Init+0x98>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c6:	4b16      	ldr	r3, [pc, #88]	; (8002520 <MX_TIM4_Init+0x98>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80024cc:	4814      	ldr	r0, [pc, #80]	; (8002520 <MX_TIM4_Init+0x98>)
 80024ce:	f007 fa33 	bl	8009938 <HAL_TIM_Base_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80024d8:	f000 f958 	bl	800278c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80024dc:	2305      	movs	r3, #5
 80024de:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80024e0:	2310      	movs	r3, #16
 80024e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80024e4:	f107 030c 	add.w	r3, r7, #12
 80024e8:	4619      	mov	r1, r3
 80024ea:	480d      	ldr	r0, [pc, #52]	; (8002520 <MX_TIM4_Init+0x98>)
 80024ec:	f007 fd21 	bl	8009f32 <HAL_TIM_SlaveConfigSynchro>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80024f6:	f000 f949 	bl	800278c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	4619      	mov	r1, r3
 8002506:	4806      	ldr	r0, [pc, #24]	; (8002520 <MX_TIM4_Init+0x98>)
 8002508:	f007 ff1c 	bl	800a344 <HAL_TIMEx_MasterConfigSynchronization>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002512:	f000 f93b 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002516:	bf00      	nop
 8002518:	3720      	adds	r7, #32
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000bd4 	.word	0x20000bd4
 8002524:	40000800 	.word	0x40000800

08002528 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <MX_USART1_UART_Init+0x4c>)
 800252e:	4a12      	ldr	r2, [pc, #72]	; (8002578 <MX_USART1_UART_Init+0x50>)
 8002530:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <MX_USART1_UART_Init+0x4c>)
 8002534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002538:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <MX_USART1_UART_Init+0x4c>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <MX_USART1_UART_Init+0x4c>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002546:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <MX_USART1_UART_Init+0x4c>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <MX_USART1_UART_Init+0x4c>)
 800254e:	220c      	movs	r2, #12
 8002550:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <MX_USART1_UART_Init+0x4c>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <MX_USART1_UART_Init+0x4c>)
 800255a:	2200      	movs	r2, #0
 800255c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800255e:	4805      	ldr	r0, [pc, #20]	; (8002574 <MX_USART1_UART_Init+0x4c>)
 8002560:	f007 ff6e 	bl	800a440 <HAL_UART_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800256a:	f000 f90f 	bl	800278c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000c1c 	.word	0x20000c1c
 8002578:	40013800 	.word	0x40013800

0800257c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002582:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <MX_DMA_Init+0x70>)
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	4a19      	ldr	r2, [pc, #100]	; (80025ec <MX_DMA_Init+0x70>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6153      	str	r3, [r2, #20]
 800258e:	4b17      	ldr	r3, [pc, #92]	; (80025ec <MX_DMA_Init+0x70>)
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800259a:	4b14      	ldr	r3, [pc, #80]	; (80025ec <MX_DMA_Init+0x70>)
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	4a13      	ldr	r2, [pc, #76]	; (80025ec <MX_DMA_Init+0x70>)
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	6153      	str	r3, [r2, #20]
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <MX_DMA_Init+0x70>)
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2105      	movs	r1, #5
 80025b6:	200b      	movs	r0, #11
 80025b8:	f001 f9fd 	bl	80039b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025bc:	200b      	movs	r0, #11
 80025be:	f001 fa16 	bl	80039ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2105      	movs	r1, #5
 80025c6:	203a      	movs	r0, #58	; 0x3a
 80025c8:	f001 f9f5 	bl	80039b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80025cc:	203a      	movs	r0, #58	; 0x3a
 80025ce:	f001 fa0e 	bl	80039ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 5, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2105      	movs	r1, #5
 80025d6:	203b      	movs	r0, #59	; 0x3b
 80025d8:	f001 f9ed 	bl	80039b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 80025dc:	203b      	movs	r0, #59	; 0x3b
 80025de:	f001 fa06 	bl	80039ee <HAL_NVIC_EnableIRQ>

}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000

080025f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f6:	f107 0318 	add.w	r3, r7, #24
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	609a      	str	r2, [r3, #8]
 8002602:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002604:	4b5c      	ldr	r3, [pc, #368]	; (8002778 <MX_GPIO_Init+0x188>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	4a5b      	ldr	r2, [pc, #364]	; (8002778 <MX_GPIO_Init+0x188>)
 800260a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800260e:	6193      	str	r3, [r2, #24]
 8002610:	4b59      	ldr	r3, [pc, #356]	; (8002778 <MX_GPIO_Init+0x188>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800261c:	4b56      	ldr	r3, [pc, #344]	; (8002778 <MX_GPIO_Init+0x188>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	4a55      	ldr	r2, [pc, #340]	; (8002778 <MX_GPIO_Init+0x188>)
 8002622:	f043 0310 	orr.w	r3, r3, #16
 8002626:	6193      	str	r3, [r2, #24]
 8002628:	4b53      	ldr	r3, [pc, #332]	; (8002778 <MX_GPIO_Init+0x188>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002634:	4b50      	ldr	r3, [pc, #320]	; (8002778 <MX_GPIO_Init+0x188>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	4a4f      	ldr	r2, [pc, #316]	; (8002778 <MX_GPIO_Init+0x188>)
 800263a:	f043 0304 	orr.w	r3, r3, #4
 800263e:	6193      	str	r3, [r2, #24]
 8002640:	4b4d      	ldr	r3, [pc, #308]	; (8002778 <MX_GPIO_Init+0x188>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800264c:	4b4a      	ldr	r3, [pc, #296]	; (8002778 <MX_GPIO_Init+0x188>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	4a49      	ldr	r2, [pc, #292]	; (8002778 <MX_GPIO_Init+0x188>)
 8002652:	f043 0308 	orr.w	r3, r3, #8
 8002656:	6193      	str	r3, [r2, #24]
 8002658:	4b47      	ldr	r3, [pc, #284]	; (8002778 <MX_GPIO_Init+0x188>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002664:	4b44      	ldr	r3, [pc, #272]	; (8002778 <MX_GPIO_Init+0x188>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	4a43      	ldr	r2, [pc, #268]	; (8002778 <MX_GPIO_Init+0x188>)
 800266a:	f043 0320 	orr.w	r3, r3, #32
 800266e:	6193      	str	r3, [r2, #24]
 8002670:	4b41      	ldr	r3, [pc, #260]	; (8002778 <MX_GPIO_Init+0x188>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|T_CLK_Pin
 800267c:	2200      	movs	r2, #0
 800267e:	f64f 0170 	movw	r1, #63600	; 0xf870
 8002682:	483e      	ldr	r0, [pc, #248]	; (800277c <MX_GPIO_Init+0x18c>)
 8002684:	f002 fa07 	bl	8004a96 <HAL_GPIO_WritePin>
                          |T_CS_Pin|T_DIN_Pin|T_DO_Pin|T_IRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED_Pin, GPIO_PIN_RESET);
 8002688:	2200      	movs	r2, #0
 800268a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 800268e:	483c      	ldr	r0, [pc, #240]	; (8002780 <MX_GPIO_Init+0x190>)
 8002690:	f002 fa01 	bl	8004a96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8002694:	2200      	movs	r2, #0
 8002696:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800269a:	483a      	ldr	r0, [pc, #232]	; (8002784 <MX_GPIO_Init+0x194>)
 800269c:	f002 f9fb 	bl	8004a96 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 80026a0:	230f      	movs	r3, #15
 80026a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80026a4:	4b38      	ldr	r3, [pc, #224]	; (8002788 <MX_GPIO_Init+0x198>)
 80026a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026a8:	2302      	movs	r3, #2
 80026aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ac:	f107 0318 	add.w	r3, r7, #24
 80026b0:	4619      	mov	r1, r3
 80026b2:	4832      	ldr	r0, [pc, #200]	; (800277c <MX_GPIO_Init+0x18c>)
 80026b4:	f002 f844 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 T_CLK_Pin
                           T_CS_Pin T_DIN_Pin T_DO_Pin T_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|T_CLK_Pin
 80026b8:	f64f 0370 	movw	r3, #63600	; 0xf870
 80026bc:	61bb      	str	r3, [r7, #24]
                          |T_CS_Pin|T_DIN_Pin|T_DO_Pin|T_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026be:	2301      	movs	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c6:	2302      	movs	r3, #2
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ca:	f107 0318 	add.w	r3, r7, #24
 80026ce:	4619      	mov	r1, r3
 80026d0:	482a      	ldr	r0, [pc, #168]	; (800277c <MX_GPIO_Init+0x18c>)
 80026d2:	f002 f835 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80026d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026dc:	2301      	movs	r3, #1
 80026de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e4:	2302      	movs	r3, #2
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e8:	f107 0318 	add.w	r3, r7, #24
 80026ec:	4619      	mov	r1, r3
 80026ee:	4824      	ldr	r0, [pc, #144]	; (8002780 <MX_GPIO_Init+0x190>)
 80026f0:	f002 f826 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin;
 80026f4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80026f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fa:	2301      	movs	r3, #1
 80026fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002702:	2302      	movs	r3, #2
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002706:	f107 0318 	add.w	r3, r7, #24
 800270a:	4619      	mov	r1, r3
 800270c:	481d      	ldr	r0, [pc, #116]	; (8002784 <MX_GPIO_Init+0x194>)
 800270e:	f002 f817 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002716:	2301      	movs	r3, #1
 8002718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800271e:	2303      	movs	r3, #3
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002722:	f107 0318 	add.w	r3, r7, #24
 8002726:	4619      	mov	r1, r3
 8002728:	4815      	ldr	r0, [pc, #84]	; (8002780 <MX_GPIO_Init+0x190>)
 800272a:	f002 f809 	bl	8004740 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800272e:	2200      	movs	r2, #0
 8002730:	2105      	movs	r1, #5
 8002732:	2006      	movs	r0, #6
 8002734:	f001 f93f 	bl	80039b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002738:	2006      	movs	r0, #6
 800273a:	f001 f958 	bl	80039ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800273e:	2200      	movs	r2, #0
 8002740:	2105      	movs	r1, #5
 8002742:	2007      	movs	r0, #7
 8002744:	f001 f937 	bl	80039b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002748:	2007      	movs	r0, #7
 800274a:	f001 f950 	bl	80039ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2105      	movs	r1, #5
 8002752:	2008      	movs	r0, #8
 8002754:	f001 f92f 	bl	80039b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002758:	2008      	movs	r0, #8
 800275a:	f001 f948 	bl	80039ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2105      	movs	r1, #5
 8002762:	2009      	movs	r0, #9
 8002764:	f001 f927 	bl	80039b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002768:	2009      	movs	r0, #9
 800276a:	f001 f940 	bl	80039ee <HAL_NVIC_EnableIRQ>

}
 800276e:	bf00      	nop
 8002770:	3728      	adds	r7, #40	; 0x28
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	40011800 	.word	0x40011800
 8002780:	40011000 	.word	0x40011000
 8002784:	40010c00 	.word	0x40010c00
 8002788:	10310000 	.word	0x10310000

0800278c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002790:	b672      	cpsid	i
}
 8002792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002794:	e7fe      	b.n	8002794 <Error_Handler+0x8>
	...

08002798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_MspInit+0x4c>)
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	4a10      	ldr	r2, [pc, #64]	; (80027e4 <HAL_MspInit+0x4c>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6193      	str	r3, [r2, #24]
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_MspInit+0x4c>)
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	607b      	str	r3, [r7, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b6:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_MspInit+0x4c>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <HAL_MspInit+0x4c>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c0:	61d3      	str	r3, [r2, #28]
 80027c2:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <HAL_MspInit+0x4c>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	210f      	movs	r1, #15
 80027d2:	f06f 0001 	mvn.w	r0, #1
 80027d6:	f001 f8ee 	bl	80039b6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000

080027e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 0310 	add.w	r3, r7, #16
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a28      	ldr	r2, [pc, #160]	; (80028a4 <HAL_ADC_MspInit+0xbc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d149      	bne.n	800289c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002808:	4b27      	ldr	r3, [pc, #156]	; (80028a8 <HAL_ADC_MspInit+0xc0>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	4a26      	ldr	r2, [pc, #152]	; (80028a8 <HAL_ADC_MspInit+0xc0>)
 800280e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002812:	6193      	str	r3, [r2, #24]
 8002814:	4b24      	ldr	r3, [pc, #144]	; (80028a8 <HAL_ADC_MspInit+0xc0>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002820:	4b21      	ldr	r3, [pc, #132]	; (80028a8 <HAL_ADC_MspInit+0xc0>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	4a20      	ldr	r2, [pc, #128]	; (80028a8 <HAL_ADC_MspInit+0xc0>)
 8002826:	f043 0304 	orr.w	r3, r3, #4
 800282a:	6193      	str	r3, [r2, #24]
 800282c:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_ADC_MspInit+0xc0>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002838:	230f      	movs	r3, #15
 800283a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800283c:	2303      	movs	r3, #3
 800283e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002840:	f107 0310 	add.w	r3, r7, #16
 8002844:	4619      	mov	r1, r3
 8002846:	4819      	ldr	r0, [pc, #100]	; (80028ac <HAL_ADC_MspInit+0xc4>)
 8002848:	f001 ff7a 	bl	8004740 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800284c:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <HAL_ADC_MspInit+0xc8>)
 800284e:	4a19      	ldr	r2, [pc, #100]	; (80028b4 <HAL_ADC_MspInit+0xcc>)
 8002850:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002852:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <HAL_ADC_MspInit+0xc8>)
 8002854:	2200      	movs	r2, #0
 8002856:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002858:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <HAL_ADC_MspInit+0xc8>)
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800285e:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <HAL_ADC_MspInit+0xc8>)
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <HAL_ADC_MspInit+0xc8>)
 8002866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800286a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800286c:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <HAL_ADC_MspInit+0xc8>)
 800286e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002872:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002874:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <HAL_ADC_MspInit+0xc8>)
 8002876:	2220      	movs	r2, #32
 8002878:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800287a:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <HAL_ADC_MspInit+0xc8>)
 800287c:	2200      	movs	r2, #0
 800287e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002880:	480b      	ldr	r0, [pc, #44]	; (80028b0 <HAL_ADC_MspInit+0xc8>)
 8002882:	f001 fad9 	bl	8003e38 <HAL_DMA_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800288c:	f7ff ff7e 	bl	800278c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a07      	ldr	r2, [pc, #28]	; (80028b0 <HAL_ADC_MspInit+0xc8>)
 8002894:	621a      	str	r2, [r3, #32]
 8002896:	4a06      	ldr	r2, [pc, #24]	; (80028b0 <HAL_ADC_MspInit+0xc8>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800289c:	bf00      	nop
 800289e:	3720      	adds	r7, #32
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40012400 	.word	0x40012400
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40010800 	.word	0x40010800
 80028b0:	200008dc 	.word	0x200008dc
 80028b4:	40020008 	.word	0x40020008

080028b8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a3d      	ldr	r2, [pc, #244]	; (80029c8 <HAL_DAC_MspInit+0x110>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d172      	bne.n	80029be <HAL_DAC_MspInit+0x106>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80028d8:	4b3c      	ldr	r3, [pc, #240]	; (80029cc <HAL_DAC_MspInit+0x114>)
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	4a3b      	ldr	r2, [pc, #236]	; (80029cc <HAL_DAC_MspInit+0x114>)
 80028de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028e2:	61d3      	str	r3, [r2, #28]
 80028e4:	4b39      	ldr	r3, [pc, #228]	; (80029cc <HAL_DAC_MspInit+0x114>)
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f0:	4b36      	ldr	r3, [pc, #216]	; (80029cc <HAL_DAC_MspInit+0x114>)
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	4a35      	ldr	r2, [pc, #212]	; (80029cc <HAL_DAC_MspInit+0x114>)
 80028f6:	f043 0304 	orr.w	r3, r3, #4
 80028fa:	6193      	str	r3, [r2, #24]
 80028fc:	4b33      	ldr	r3, [pc, #204]	; (80029cc <HAL_DAC_MspInit+0x114>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002908:	2330      	movs	r3, #48	; 0x30
 800290a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800290c:	2303      	movs	r3, #3
 800290e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002910:	f107 0310 	add.w	r3, r7, #16
 8002914:	4619      	mov	r1, r3
 8002916:	482e      	ldr	r0, [pc, #184]	; (80029d0 <HAL_DAC_MspInit+0x118>)
 8002918:	f001 ff12 	bl	8004740 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA2_Channel3;
 800291c:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_DAC_MspInit+0x11c>)
 800291e:	4a2e      	ldr	r2, [pc, #184]	; (80029d8 <HAL_DAC_MspInit+0x120>)
 8002920:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002922:	4b2c      	ldr	r3, [pc, #176]	; (80029d4 <HAL_DAC_MspInit+0x11c>)
 8002924:	2210      	movs	r2, #16
 8002926:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002928:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <HAL_DAC_MspInit+0x11c>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800292e:	4b29      	ldr	r3, [pc, #164]	; (80029d4 <HAL_DAC_MspInit+0x11c>)
 8002930:	2280      	movs	r2, #128	; 0x80
 8002932:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002934:	4b27      	ldr	r3, [pc, #156]	; (80029d4 <HAL_DAC_MspInit+0x11c>)
 8002936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800293a:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800293c:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <HAL_DAC_MspInit+0x11c>)
 800293e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002942:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8002944:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <HAL_DAC_MspInit+0x11c>)
 8002946:	2220      	movs	r2, #32
 8002948:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800294a:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <HAL_DAC_MspInit+0x11c>)
 800294c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002950:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002952:	4820      	ldr	r0, [pc, #128]	; (80029d4 <HAL_DAC_MspInit+0x11c>)
 8002954:	f001 fa70 	bl	8003e38 <HAL_DMA_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_DAC_MspInit+0xaa>
    {
      Error_Handler();
 800295e:	f7ff ff15 	bl	800278c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <HAL_DAC_MspInit+0x11c>)
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	4a1a      	ldr	r2, [pc, #104]	; (80029d4 <HAL_DAC_MspInit+0x11c>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA2_Channel4;
 800296e:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <HAL_DAC_MspInit+0x124>)
 8002970:	4a1b      	ldr	r2, [pc, #108]	; (80029e0 <HAL_DAC_MspInit+0x128>)
 8002972:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_DAC_MspInit+0x124>)
 8002976:	2210      	movs	r2, #16
 8002978:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800297a:	4b18      	ldr	r3, [pc, #96]	; (80029dc <HAL_DAC_MspInit+0x124>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002980:	4b16      	ldr	r3, [pc, #88]	; (80029dc <HAL_DAC_MspInit+0x124>)
 8002982:	2280      	movs	r2, #128	; 0x80
 8002984:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002986:	4b15      	ldr	r3, [pc, #84]	; (80029dc <HAL_DAC_MspInit+0x124>)
 8002988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800298c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800298e:	4b13      	ldr	r3, [pc, #76]	; (80029dc <HAL_DAC_MspInit+0x124>)
 8002990:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002994:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <HAL_DAC_MspInit+0x124>)
 8002998:	2220      	movs	r2, #32
 800299a:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800299c:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <HAL_DAC_MspInit+0x124>)
 800299e:	2200      	movs	r2, #0
 80029a0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 80029a2:	480e      	ldr	r0, [pc, #56]	; (80029dc <HAL_DAC_MspInit+0x124>)
 80029a4:	f001 fa48 	bl	8003e38 <HAL_DMA_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_DAC_MspInit+0xfa>
    {
      Error_Handler();
 80029ae:	f7ff feed 	bl	800278c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a09      	ldr	r2, [pc, #36]	; (80029dc <HAL_DAC_MspInit+0x124>)
 80029b6:	60da      	str	r2, [r3, #12]
 80029b8:	4a08      	ldr	r2, [pc, #32]	; (80029dc <HAL_DAC_MspInit+0x124>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80029be:	bf00      	nop
 80029c0:	3720      	adds	r7, #32
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40007400 	.word	0x40007400
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40010800 	.word	0x40010800
 80029d4:	20000934 	.word	0x20000934
 80029d8:	40020430 	.word	0x40020430
 80029dc:	20000978 	.word	0x20000978
 80029e0:	40020444 	.word	0x40020444

080029e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 0310 	add.w	r3, r7, #16
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a15      	ldr	r2, [pc, #84]	; (8002a54 <HAL_I2C_MspInit+0x70>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d123      	bne.n	8002a4c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a04:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <HAL_I2C_MspInit+0x74>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	4a13      	ldr	r2, [pc, #76]	; (8002a58 <HAL_I2C_MspInit+0x74>)
 8002a0a:	f043 0308 	orr.w	r3, r3, #8
 8002a0e:	6193      	str	r3, [r2, #24]
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_I2C_MspInit+0x74>)
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a1c:	23c0      	movs	r3, #192	; 0xc0
 8002a1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a20:	2312      	movs	r3, #18
 8002a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a24:	2303      	movs	r3, #3
 8002a26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a28:	f107 0310 	add.w	r3, r7, #16
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	480b      	ldr	r0, [pc, #44]	; (8002a5c <HAL_I2C_MspInit+0x78>)
 8002a30:	f001 fe86 	bl	8004740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <HAL_I2C_MspInit+0x74>)
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <HAL_I2C_MspInit+0x74>)
 8002a3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a3e:	61d3      	str	r3, [r2, #28]
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_I2C_MspInit+0x74>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a4c:	bf00      	nop
 8002a4e:	3720      	adds	r7, #32
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40005400 	.word	0x40005400
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40010c00 	.word	0x40010c00

08002a60 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	; 0x28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 0318 	add.w	r3, r7, #24
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a22      	ldr	r2, [pc, #136]	; (8002b04 <HAL_SD_MspInit+0xa4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d13c      	bne.n	8002afa <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002a80:	4b21      	ldr	r3, [pc, #132]	; (8002b08 <HAL_SD_MspInit+0xa8>)
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	4a20      	ldr	r2, [pc, #128]	; (8002b08 <HAL_SD_MspInit+0xa8>)
 8002a86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a8a:	6153      	str	r3, [r2, #20]
 8002a8c:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <HAL_SD_MspInit+0xa8>)
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_SD_MspInit+0xa8>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	4a1a      	ldr	r2, [pc, #104]	; (8002b08 <HAL_SD_MspInit+0xa8>)
 8002a9e:	f043 0310 	orr.w	r3, r3, #16
 8002aa2:	6193      	str	r3, [r2, #24]
 8002aa4:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <HAL_SD_MspInit+0xa8>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ab0:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <HAL_SD_MspInit+0xa8>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <HAL_SD_MspInit+0xa8>)
 8002ab6:	f043 0320 	orr.w	r3, r3, #32
 8002aba:	6193      	str	r3, [r2, #24]
 8002abc:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <HAL_SD_MspInit+0xa8>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002ac8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002acc:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad6:	f107 0318 	add.w	r3, r7, #24
 8002ada:	4619      	mov	r1, r3
 8002adc:	480b      	ldr	r0, [pc, #44]	; (8002b0c <HAL_SD_MspInit+0xac>)
 8002ade:	f001 fe2f 	bl	8004740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aea:	2303      	movs	r3, #3
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002aee:	f107 0318 	add.w	r3, r7, #24
 8002af2:	4619      	mov	r1, r3
 8002af4:	4806      	ldr	r0, [pc, #24]	; (8002b10 <HAL_SD_MspInit+0xb0>)
 8002af6:	f001 fe23 	bl	8004740 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002afa:	bf00      	nop
 8002afc:	3728      	adds	r7, #40	; 0x28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40018000 	.word	0x40018000
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40011000 	.word	0x40011000
 8002b10:	40011400 	.word	0x40011400

08002b14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08c      	sub	sp, #48	; 0x30
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1c:	f107 031c 	add.w	r3, r7, #28
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a4b      	ldr	r2, [pc, #300]	; (8002c5c <HAL_SPI_MspInit+0x148>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d157      	bne.n	8002be4 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b34:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <HAL_SPI_MspInit+0x14c>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	4a49      	ldr	r2, [pc, #292]	; (8002c60 <HAL_SPI_MspInit+0x14c>)
 8002b3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b3e:	6193      	str	r3, [r2, #24]
 8002b40:	4b47      	ldr	r3, [pc, #284]	; (8002c60 <HAL_SPI_MspInit+0x14c>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4c:	4b44      	ldr	r3, [pc, #272]	; (8002c60 <HAL_SPI_MspInit+0x14c>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	4a43      	ldr	r2, [pc, #268]	; (8002c60 <HAL_SPI_MspInit+0x14c>)
 8002b52:	f043 0304 	orr.w	r3, r3, #4
 8002b56:	6193      	str	r3, [r2, #24]
 8002b58:	4b41      	ldr	r3, [pc, #260]	; (8002c60 <HAL_SPI_MspInit+0x14c>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b64:	4b3e      	ldr	r3, [pc, #248]	; (8002c60 <HAL_SPI_MspInit+0x14c>)
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	4a3d      	ldr	r2, [pc, #244]	; (8002c60 <HAL_SPI_MspInit+0x14c>)
 8002b6a:	f043 0308 	orr.w	r3, r3, #8
 8002b6e:	6193      	str	r3, [r2, #24]
 8002b70:	4b3b      	ldr	r3, [pc, #236]	; (8002c60 <HAL_SPI_MspInit+0x14c>)
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	693b      	ldr	r3, [r7, #16]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2302      	movs	r3, #2
 8002b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b86:	2303      	movs	r3, #3
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8a:	f107 031c 	add.w	r3, r7, #28
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4834      	ldr	r0, [pc, #208]	; (8002c64 <HAL_SPI_MspInit+0x150>)
 8002b92:	f001 fdd5 	bl	8004740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002b96:	2328      	movs	r3, #40	; 0x28
 8002b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba2:	f107 031c 	add.w	r3, r7, #28
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	482f      	ldr	r0, [pc, #188]	; (8002c68 <HAL_SPI_MspInit+0x154>)
 8002baa:	f001 fdc9 	bl	8004740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002bae:	2310      	movs	r3, #16
 8002bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bba:	f107 031c 	add.w	r3, r7, #28
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4829      	ldr	r0, [pc, #164]	; (8002c68 <HAL_SPI_MspInit+0x154>)
 8002bc2:	f001 fdbd 	bl	8004740 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002bc6:	4b29      	ldr	r3, [pc, #164]	; (8002c6c <HAL_SPI_MspInit+0x158>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bce:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd6:	f043 0301 	orr.w	r3, r3, #1
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bdc:	4a23      	ldr	r2, [pc, #140]	; (8002c6c <HAL_SPI_MspInit+0x158>)
 8002bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002be2:	e036      	b.n	8002c52 <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a21      	ldr	r2, [pc, #132]	; (8002c70 <HAL_SPI_MspInit+0x15c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d131      	bne.n	8002c52 <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bee:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <HAL_SPI_MspInit+0x14c>)
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	4a1b      	ldr	r2, [pc, #108]	; (8002c60 <HAL_SPI_MspInit+0x14c>)
 8002bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf8:	61d3      	str	r3, [r2, #28]
 8002bfa:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <HAL_SPI_MspInit+0x14c>)
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c06:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <HAL_SPI_MspInit+0x14c>)
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	4a15      	ldr	r2, [pc, #84]	; (8002c60 <HAL_SPI_MspInit+0x14c>)
 8002c0c:	f043 0308 	orr.w	r3, r3, #8
 8002c10:	6193      	str	r3, [r2, #24]
 8002c12:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <HAL_SPI_MspInit+0x14c>)
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002c1e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2c:	f107 031c 	add.w	r3, r7, #28
 8002c30:	4619      	mov	r1, r3
 8002c32:	480d      	ldr	r0, [pc, #52]	; (8002c68 <HAL_SPI_MspInit+0x154>)
 8002c34:	f001 fd84 	bl	8004740 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c46:	f107 031c 	add.w	r3, r7, #28
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4806      	ldr	r0, [pc, #24]	; (8002c68 <HAL_SPI_MspInit+0x154>)
 8002c4e:	f001 fd77 	bl	8004740 <HAL_GPIO_Init>
}
 8002c52:	bf00      	nop
 8002c54:	3730      	adds	r7, #48	; 0x30
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40013000 	.word	0x40013000
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40010800 	.word	0x40010800
 8002c68:	40010c00 	.word	0x40010c00
 8002c6c:	40010000 	.word	0x40010000
 8002c70:	40003800 	.word	0x40003800

08002c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d10c      	bne.n	8002ca0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c86:	4b22      	ldr	r3, [pc, #136]	; (8002d10 <HAL_TIM_Base_MspInit+0x9c>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	4a21      	ldr	r2, [pc, #132]	; (8002d10 <HAL_TIM_Base_MspInit+0x9c>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	61d3      	str	r3, [r2, #28]
 8002c92:	4b1f      	ldr	r3, [pc, #124]	; (8002d10 <HAL_TIM_Base_MspInit+0x9c>)
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c9e:	e032      	b.n	8002d06 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1b      	ldr	r2, [pc, #108]	; (8002d14 <HAL_TIM_Base_MspInit+0xa0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d114      	bne.n	8002cd4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002caa:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_TIM_Base_MspInit+0x9c>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	4a18      	ldr	r2, [pc, #96]	; (8002d10 <HAL_TIM_Base_MspInit+0x9c>)
 8002cb0:	f043 0302 	orr.w	r3, r3, #2
 8002cb4:	61d3      	str	r3, [r2, #28]
 8002cb6:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <HAL_TIM_Base_MspInit+0x9c>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2105      	movs	r1, #5
 8002cc6:	201d      	movs	r0, #29
 8002cc8:	f000 fe75 	bl	80039b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ccc:	201d      	movs	r0, #29
 8002cce:	f000 fe8e 	bl	80039ee <HAL_NVIC_EnableIRQ>
}
 8002cd2:	e018      	b.n	8002d06 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <HAL_TIM_Base_MspInit+0xa4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d113      	bne.n	8002d06 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cde:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <HAL_TIM_Base_MspInit+0x9c>)
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	4a0b      	ldr	r2, [pc, #44]	; (8002d10 <HAL_TIM_Base_MspInit+0x9c>)
 8002ce4:	f043 0304 	orr.w	r3, r3, #4
 8002ce8:	61d3      	str	r3, [r2, #28]
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_TIM_Base_MspInit+0x9c>)
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2105      	movs	r1, #5
 8002cfa:	201e      	movs	r0, #30
 8002cfc:	f000 fe5b 	bl	80039b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d00:	201e      	movs	r0, #30
 8002d02:	f000 fe74 	bl	80039ee <HAL_NVIC_EnableIRQ>
}
 8002d06:	bf00      	nop
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40000400 	.word	0x40000400
 8002d18:	40000800 	.word	0x40000800

08002d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d24:	f107 0310 	add.w	r3, r7, #16
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a20      	ldr	r2, [pc, #128]	; (8002db8 <HAL_UART_MspInit+0x9c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d139      	bne.n	8002db0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d3c:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <HAL_UART_MspInit+0xa0>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	4a1e      	ldr	r2, [pc, #120]	; (8002dbc <HAL_UART_MspInit+0xa0>)
 8002d42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d46:	6193      	str	r3, [r2, #24]
 8002d48:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <HAL_UART_MspInit+0xa0>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d54:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <HAL_UART_MspInit+0xa0>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	4a18      	ldr	r2, [pc, #96]	; (8002dbc <HAL_UART_MspInit+0xa0>)
 8002d5a:	f043 0304 	orr.w	r3, r3, #4
 8002d5e:	6193      	str	r3, [r2, #24]
 8002d60:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <HAL_UART_MspInit+0xa0>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d76:	2303      	movs	r3, #3
 8002d78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7a:	f107 0310 	add.w	r3, r7, #16
 8002d7e:	4619      	mov	r1, r3
 8002d80:	480f      	ldr	r0, [pc, #60]	; (8002dc0 <HAL_UART_MspInit+0xa4>)
 8002d82:	f001 fcdd 	bl	8004740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d94:	f107 0310 	add.w	r3, r7, #16
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4809      	ldr	r0, [pc, #36]	; (8002dc0 <HAL_UART_MspInit+0xa4>)
 8002d9c:	f001 fcd0 	bl	8004740 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002da0:	2200      	movs	r2, #0
 8002da2:	2105      	movs	r1, #5
 8002da4:	2025      	movs	r0, #37	; 0x25
 8002da6:	f000 fe06 	bl	80039b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002daa:	2025      	movs	r0, #37	; 0x25
 8002dac:	f000 fe1f 	bl	80039ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002db0:	bf00      	nop
 8002db2:	3720      	adds	r7, #32
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40013800 	.word	0x40013800
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40010800 	.word	0x40010800

08002dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dc8:	e7fe      	b.n	8002dc8 <NMI_Handler+0x4>

08002dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dce:	e7fe      	b.n	8002dce <HardFault_Handler+0x4>

08002dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd4:	e7fe      	b.n	8002dd4 <MemManage_Handler+0x4>

08002dd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dda:	e7fe      	b.n	8002dda <BusFault_Handler+0x4>

08002ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <UsageFault_Handler+0x4>

08002de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002df2:	f000 f99d 	bl	8003130 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002df6:	f010 fb41 	bl	801347c <xTaskGetSchedulerState>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d001      	beq.n	8002e04 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002e00:	f010 fe1a 	bl	8013a38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e04:	bf00      	nop
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f001 fe5b 	bl	8004ac8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	f001 fe54 	bl	8004ac8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002e28:	2004      	movs	r0, #4
 8002e2a:	f001 fe4d 	bl	8004ac8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002e36:	2008      	movs	r0, #8
 8002e38:	f001 fe46 	bl	8004ac8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e44:	4802      	ldr	r0, [pc, #8]	; (8002e50 <DMA1_Channel1_IRQHandler+0x10>)
 8002e46:	f001 fa11 	bl	800426c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200008dc 	.word	0x200008dc

08002e54 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002e58:	4802      	ldr	r0, [pc, #8]	; (8002e64 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002e5a:	f002 ffa5 	bl	8005da8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	200012b8 	.word	0x200012b8

08002e68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e6c:	4802      	ldr	r0, [pc, #8]	; (8002e78 <TIM3_IRQHandler+0x10>)
 8002e6e:	f006 fe91 	bl	8009b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000b8c 	.word	0x20000b8c

08002e7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e80:	4802      	ldr	r0, [pc, #8]	; (8002e8c <TIM4_IRQHandler+0x10>)
 8002e82:	f006 fe87 	bl	8009b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000bd4 	.word	0x20000bd4

08002e90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e94:	4802      	ldr	r0, [pc, #8]	; (8002ea0 <USART1_IRQHandler+0x10>)
 8002e96:	f007 fb49 	bl	800a52c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000c1c 	.word	0x20000c1c

08002ea4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002ea8:	4802      	ldr	r0, [pc, #8]	; (8002eb4 <DMA2_Channel3_IRQHandler+0x10>)
 8002eaa:	f001 f9df 	bl	800426c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000934 	.word	0x20000934

08002eb8 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8002ebc:	4802      	ldr	r0, [pc, #8]	; (8002ec8 <DMA2_Channel4_5_IRQHandler+0x10>)
 8002ebe:	f001 f9d5 	bl	800426c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000978 	.word	0x20000978

08002ecc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
	return 1;
 8002ed0:	2301      	movs	r3, #1
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <_kill>:

int _kill(int pid, int sig)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ee4:	f011 f9d4 	bl	8014290 <__errno>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2216      	movs	r2, #22
 8002eec:	601a      	str	r2, [r3, #0]
	return -1;
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <_exit>:

void _exit (int status)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f02:	f04f 31ff 	mov.w	r1, #4294967295
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff ffe7 	bl	8002eda <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f0c:	e7fe      	b.n	8002f0c <_exit+0x12>

08002f0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b086      	sub	sp, #24
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	e00a      	b.n	8002f36 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f20:	f3af 8000 	nop.w
 8002f24:	4601      	mov	r1, r0
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	60ba      	str	r2, [r7, #8]
 8002f2c:	b2ca      	uxtb	r2, r1
 8002f2e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	3301      	adds	r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	dbf0      	blt.n	8002f20 <_read+0x12>
	}

return len;
 8002f3e:	687b      	ldr	r3, [r7, #4]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	e009      	b.n	8002f6e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	60ba      	str	r2, [r7, #8]
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	dbf1      	blt.n	8002f5a <_write+0x12>
	}
	return len;
 8002f76:	687b      	ldr	r3, [r7, #4]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <_close>:

int _close(int file)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	return -1;
 8002f88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr

08002f96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fa6:	605a      	str	r2, [r3, #4]
	return 0;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <_isatty>:

int _isatty(int file)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
	return 1;
 8002fbc:	2301      	movs	r3, #1
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
	return 0;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr

08002fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fe8:	4a14      	ldr	r2, [pc, #80]	; (800303c <_sbrk+0x5c>)
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <_sbrk+0x60>)
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <_sbrk+0x64>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <_sbrk+0x64>)
 8002ffe:	4a12      	ldr	r2, [pc, #72]	; (8003048 <_sbrk+0x68>)
 8003000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <_sbrk+0x64>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	429a      	cmp	r2, r3
 800300e:	d207      	bcs.n	8003020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003010:	f011 f93e 	bl	8014290 <__errno>
 8003014:	4603      	mov	r3, r0
 8003016:	220c      	movs	r2, #12
 8003018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800301a:	f04f 33ff 	mov.w	r3, #4294967295
 800301e:	e009      	b.n	8003034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <_sbrk+0x64>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003026:	4b07      	ldr	r3, [pc, #28]	; (8003044 <_sbrk+0x64>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	4a05      	ldr	r2, [pc, #20]	; (8003044 <_sbrk+0x64>)
 8003030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003032:	68fb      	ldr	r3, [r7, #12]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20010000 	.word	0x20010000
 8003040:	00000400 	.word	0x00000400
 8003044:	20000c9c 	.word	0x20000c9c
 8003048:	200015d8 	.word	0x200015d8

0800304c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003050:	bf00      	nop
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr

08003058 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003058:	f7ff fff8 	bl	800304c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800305c:	480b      	ldr	r0, [pc, #44]	; (800308c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800305e:	490c      	ldr	r1, [pc, #48]	; (8003090 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003060:	4a0c      	ldr	r2, [pc, #48]	; (8003094 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003064:	e002      	b.n	800306c <LoopCopyDataInit>

08003066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800306a:	3304      	adds	r3, #4

0800306c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800306c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800306e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003070:	d3f9      	bcc.n	8003066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003072:	4a09      	ldr	r2, [pc, #36]	; (8003098 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003074:	4c09      	ldr	r4, [pc, #36]	; (800309c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003078:	e001      	b.n	800307e <LoopFillZerobss>

0800307a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800307a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800307c:	3204      	adds	r2, #4

0800307e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800307e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003080:	d3fb      	bcc.n	800307a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003082:	f011 fa01 	bl	8014488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003086:	f7fe ff3b 	bl	8001f00 <main>
  bx lr
 800308a:	4770      	bx	lr
  ldr r0, =_sdata
 800308c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003090:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8003094:	0803097c 	.word	0x0803097c
  ldr r2, =_sbss
 8003098:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 800309c:	200015d4 	.word	0x200015d4

080030a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030a0:	e7fe      	b.n	80030a0 <ADC1_2_IRQHandler>
	...

080030a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <HAL_Init+0x28>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a07      	ldr	r2, [pc, #28]	; (80030cc <HAL_Init+0x28>)
 80030ae:	f043 0310 	orr.w	r3, r3, #16
 80030b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030b4:	2003      	movs	r0, #3
 80030b6:	f000 fc73 	bl	80039a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ba:	200f      	movs	r0, #15
 80030bc:	f000 f808 	bl	80030d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030c0:	f7ff fb6a 	bl	8002798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40022000 	.word	0x40022000

080030d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030d8:	4b12      	ldr	r3, [pc, #72]	; (8003124 <HAL_InitTick+0x54>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b12      	ldr	r3, [pc, #72]	; (8003128 <HAL_InitTick+0x58>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	4619      	mov	r1, r3
 80030e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fc8b 	bl	8003a0a <HAL_SYSTICK_Config>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e00e      	b.n	800311c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b0f      	cmp	r3, #15
 8003102:	d80a      	bhi.n	800311a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003104:	2200      	movs	r2, #0
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	f04f 30ff 	mov.w	r0, #4294967295
 800310c:	f000 fc53 	bl	80039b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003110:	4a06      	ldr	r2, [pc, #24]	; (800312c <HAL_InitTick+0x5c>)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	e000      	b.n	800311c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20000080 	.word	0x20000080
 8003128:	20000088 	.word	0x20000088
 800312c:	20000084 	.word	0x20000084

08003130 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003134:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_IncTick+0x1c>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_IncTick+0x20>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4413      	add	r3, r2
 8003140:	4a03      	ldr	r2, [pc, #12]	; (8003150 <HAL_IncTick+0x20>)
 8003142:	6013      	str	r3, [r2, #0]
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr
 800314c:	20000088 	.word	0x20000088
 8003150:	20000ca0 	.word	0x20000ca0

08003154 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return uwTick;
 8003158:	4b02      	ldr	r3, [pc, #8]	; (8003164 <HAL_GetTick+0x10>)
 800315a:	681b      	ldr	r3, [r3, #0]
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr
 8003164:	20000ca0 	.word	0x20000ca0

08003168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003170:	f7ff fff0 	bl	8003154 <HAL_GetTick>
 8003174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003180:	d005      	beq.n	800318e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003182:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <HAL_Delay+0x44>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800318e:	bf00      	nop
 8003190:	f7ff ffe0 	bl	8003154 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	429a      	cmp	r2, r3
 800319e:	d8f7      	bhi.n	8003190 <HAL_Delay+0x28>
  {
  }
}
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000088 	.word	0x20000088

080031b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e0ce      	b.n	8003370 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d109      	bne.n	80031f4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff fafa 	bl	80027e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fa17 	bl	8003628 <ADC_ConversionStop_Disable>
 80031fa:	4603      	mov	r3, r0
 80031fc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	f040 80a9 	bne.w	800335e <HAL_ADC_Init+0x1ae>
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	2b00      	cmp	r3, #0
 8003210:	f040 80a5 	bne.w	800335e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800321c:	f023 0302 	bic.w	r3, r3, #2
 8003220:	f043 0202 	orr.w	r2, r3, #2
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4951      	ldr	r1, [pc, #324]	; (8003378 <HAL_ADC_Init+0x1c8>)
 8003232:	428b      	cmp	r3, r1
 8003234:	d10a      	bne.n	800324c <HAL_ADC_Init+0x9c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800323e:	d002      	beq.n	8003246 <HAL_ADC_Init+0x96>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	e004      	b.n	8003250 <HAL_ADC_Init+0xa0>
 8003246:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800324a:	e001      	b.n	8003250 <HAL_ADC_Init+0xa0>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003250:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	7b1b      	ldrb	r3, [r3, #12]
 8003256:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003258:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	4313      	orrs	r3, r2
 800325e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003268:	d003      	beq.n	8003272 <HAL_ADC_Init+0xc2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d102      	bne.n	8003278 <HAL_ADC_Init+0xc8>
 8003272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003276:	e000      	b.n	800327a <HAL_ADC_Init+0xca>
 8003278:	2300      	movs	r3, #0
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7d1b      	ldrb	r3, [r3, #20]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d119      	bne.n	80032bc <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	7b1b      	ldrb	r3, [r3, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	3b01      	subs	r3, #1
 8003296:	035a      	lsls	r2, r3, #13
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	e00b      	b.n	80032bc <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	f043 0220 	orr.w	r2, r3, #32
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	f043 0201 	orr.w	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	4b29      	ldr	r3, [pc, #164]	; (800337c <HAL_ADC_Init+0x1cc>)
 80032d8:	4013      	ands	r3, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ec:	d003      	beq.n	80032f6 <HAL_ADC_Init+0x146>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d104      	bne.n	8003300 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	051b      	lsls	r3, r3, #20
 80032fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	430a      	orrs	r2, r1
 8003312:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	4b19      	ldr	r3, [pc, #100]	; (8003380 <HAL_ADC_Init+0x1d0>)
 800331c:	4013      	ands	r3, r2
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	429a      	cmp	r2, r3
 8003322:	d10b      	bne.n	800333c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	f023 0303 	bic.w	r3, r3, #3
 8003332:	f043 0201 	orr.w	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800333a:	e018      	b.n	800336e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	f023 0312 	bic.w	r3, r3, #18
 8003344:	f043 0210 	orr.w	r2, r3, #16
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	f043 0201 	orr.w	r2, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800335c:	e007      	b.n	800336e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	f043 0210 	orr.w	r2, r3, #16
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800336e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40013c00 	.word	0x40013c00
 800337c:	ffe1f7fd 	.word	0xffe1f7fd
 8003380:	ff1f0efe 	.word	0xff1f0efe

08003384 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x20>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e0dc      	b.n	800355e <HAL_ADC_ConfigChannel+0x1da>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b06      	cmp	r3, #6
 80033b2:	d81c      	bhi.n	80033ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	3b05      	subs	r3, #5
 80033c6:	221f      	movs	r2, #31
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	4019      	ands	r1, r3
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	6818      	ldr	r0, [r3, #0]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	3b05      	subs	r3, #5
 80033e0:	fa00 f203 	lsl.w	r2, r0, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	635a      	str	r2, [r3, #52]	; 0x34
 80033ec:	e03c      	b.n	8003468 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b0c      	cmp	r3, #12
 80033f4:	d81c      	bhi.n	8003430 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	3b23      	subs	r3, #35	; 0x23
 8003408:	221f      	movs	r2, #31
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43db      	mvns	r3, r3
 8003410:	4019      	ands	r1, r3
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	3b23      	subs	r3, #35	; 0x23
 8003422:	fa00 f203 	lsl.w	r2, r0, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	631a      	str	r2, [r3, #48]	; 0x30
 800342e:	e01b      	b.n	8003468 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	3b41      	subs	r3, #65	; 0x41
 8003442:	221f      	movs	r2, #31
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	4019      	ands	r1, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	3b41      	subs	r3, #65	; 0x41
 800345c:	fa00 f203 	lsl.w	r2, r0, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b09      	cmp	r3, #9
 800346e:	d91c      	bls.n	80034aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68d9      	ldr	r1, [r3, #12]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4613      	mov	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4413      	add	r3, r2
 8003480:	3b1e      	subs	r3, #30
 8003482:	2207      	movs	r2, #7
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	4019      	ands	r1, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	6898      	ldr	r0, [r3, #8]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4413      	add	r3, r2
 800349a:	3b1e      	subs	r3, #30
 800349c:	fa00 f203 	lsl.w	r2, r0, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	60da      	str	r2, [r3, #12]
 80034a8:	e019      	b.n	80034de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6919      	ldr	r1, [r3, #16]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4413      	add	r3, r2
 80034ba:	2207      	movs	r2, #7
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	4019      	ands	r1, r3
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6898      	ldr	r0, [r3, #8]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4613      	mov	r3, r2
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	4413      	add	r3, r2
 80034d2:	fa00 f203 	lsl.w	r2, r0, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b10      	cmp	r3, #16
 80034e4:	d003      	beq.n	80034ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034ea:	2b11      	cmp	r3, #17
 80034ec:	d132      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1d      	ldr	r2, [pc, #116]	; (8003568 <HAL_ADC_ConfigChannel+0x1e4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d125      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d126      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003514:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b10      	cmp	r3, #16
 800351c:	d11a      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800351e:	4b13      	ldr	r3, [pc, #76]	; (800356c <HAL_ADC_ConfigChannel+0x1e8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a13      	ldr	r2, [pc, #76]	; (8003570 <HAL_ADC_ConfigChannel+0x1ec>)
 8003524:	fba2 2303 	umull	r2, r3, r2, r3
 8003528:	0c9a      	lsrs	r2, r3, #18
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003534:	e002      	b.n	800353c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	3b01      	subs	r3, #1
 800353a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f9      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x1b2>
 8003542:	e007      	b.n	8003554 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	f043 0220 	orr.w	r2, r3, #32
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800355c:	7bfb      	ldrb	r3, [r7, #15]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr
 8003568:	40012400 	.word	0x40012400
 800356c:	20000080 	.word	0x20000080
 8003570:	431bde83 	.word	0x431bde83

08003574 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b01      	cmp	r3, #1
 8003590:	d040      	beq.n	8003614 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0201 	orr.w	r2, r2, #1
 80035a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035a2:	4b1f      	ldr	r3, [pc, #124]	; (8003620 <ADC_Enable+0xac>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1f      	ldr	r2, [pc, #124]	; (8003624 <ADC_Enable+0xb0>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	0c9b      	lsrs	r3, r3, #18
 80035ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80035b0:	e002      	b.n	80035b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f9      	bne.n	80035b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035be:	f7ff fdc9 	bl	8003154 <HAL_GetTick>
 80035c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80035c4:	e01f      	b.n	8003606 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035c6:	f7ff fdc5 	bl	8003154 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d918      	bls.n	8003606 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d011      	beq.n	8003606 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	f043 0210 	orr.w	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	f043 0201 	orr.w	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e007      	b.n	8003616 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d1d8      	bne.n	80035c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000080 	.word	0x20000080
 8003624:	431bde83 	.word	0x431bde83

08003628 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b01      	cmp	r3, #1
 8003640:	d12e      	bne.n	80036a0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0201 	bic.w	r2, r2, #1
 8003650:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003652:	f7ff fd7f 	bl	8003154 <HAL_GetTick>
 8003656:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003658:	e01b      	b.n	8003692 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800365a:	f7ff fd7b 	bl	8003154 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d914      	bls.n	8003692 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b01      	cmp	r3, #1
 8003674:	d10d      	bne.n	8003692 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	f043 0210 	orr.w	r2, r3, #16
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	f043 0201 	orr.w	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e007      	b.n	80036a2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b01      	cmp	r3, #1
 800369e:	d0dc      	beq.n	800365a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_ADCEx_Calibration_Start+0x1e>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e097      	b.n	80037fa <HAL_ADCEx_Calibration_Start+0x14e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff ffa8 	bl	8003628 <ADC_ConversionStop_Disable>
 80036d8:	4603      	mov	r3, r0
 80036da:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff ff49 	bl	8003574 <ADC_Enable>
 80036e2:	4603      	mov	r3, r0
 80036e4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f040 8081 	bne.w	80037f0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036f6:	f023 0302 	bic.w	r3, r3, #2
 80036fa:	f043 0202 	orr.w	r2, r3, #2
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003702:	4b40      	ldr	r3, [pc, #256]	; (8003804 <HAL_ADCEx_Calibration_Start+0x158>)
 8003704:	681c      	ldr	r4, [r3, #0]
 8003706:	2002      	movs	r0, #2
 8003708:	f004 fc46 	bl	8007f98 <HAL_RCCEx_GetPeriphCLKFreq>
 800370c:	4603      	mov	r3, r0
 800370e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003712:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003714:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003716:	e002      	b.n	800371e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3b01      	subs	r3, #1
 800371c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f9      	bne.n	8003718 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0208 	orr.w	r2, r2, #8
 8003732:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003734:	f7ff fd0e 	bl	8003154 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800373a:	e01b      	b.n	8003774 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800373c:	f7ff fd0a 	bl	8003154 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b0a      	cmp	r3, #10
 8003748:	d914      	bls.n	8003774 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00d      	beq.n	8003774 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	f023 0312 	bic.w	r3, r3, #18
 8003760:	f043 0210 	orr.w	r2, r3, #16
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e042      	b.n	80037fa <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1dc      	bne.n	800373c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0204 	orr.w	r2, r2, #4
 8003790:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003792:	f7ff fcdf 	bl	8003154 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003798:	e01b      	b.n	80037d2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800379a:	f7ff fcdb 	bl	8003154 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b0a      	cmp	r3, #10
 80037a6:	d914      	bls.n	80037d2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00d      	beq.n	80037d2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	f023 0312 	bic.w	r3, r3, #18
 80037be:	f043 0210 	orr.w	r2, r3, #16
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e013      	b.n	80037fa <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1dc      	bne.n	800379a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	f023 0303 	bic.w	r3, r3, #3
 80037e8:	f043 0201 	orr.w	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80037f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd90      	pop	{r4, r7, pc}
 8003802:	bf00      	nop
 8003804:	20000080 	.word	0x20000080

08003808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <__NVIC_SetPriorityGrouping+0x44>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003824:	4013      	ands	r3, r2
 8003826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800383a:	4a04      	ldr	r2, [pc, #16]	; (800384c <__NVIC_SetPriorityGrouping+0x44>)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	60d3      	str	r3, [r2, #12]
}
 8003840:	bf00      	nop
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <__NVIC_GetPriorityGrouping+0x18>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	0a1b      	lsrs	r3, r3, #8
 800385a:	f003 0307 	and.w	r3, r3, #7
}
 800385e:	4618      	mov	r0, r3
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	e000ed00 	.word	0xe000ed00

0800386c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387a:	2b00      	cmp	r3, #0
 800387c:	db0b      	blt.n	8003896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	f003 021f 	and.w	r2, r3, #31
 8003884:	4906      	ldr	r1, [pc, #24]	; (80038a0 <__NVIC_EnableIRQ+0x34>)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	2001      	movs	r0, #1
 800388e:	fa00 f202 	lsl.w	r2, r0, r2
 8003892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr
 80038a0:	e000e100 	.word	0xe000e100

080038a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	6039      	str	r1, [r7, #0]
 80038ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	db0a      	blt.n	80038ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	490c      	ldr	r1, [pc, #48]	; (80038f0 <__NVIC_SetPriority+0x4c>)
 80038be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c2:	0112      	lsls	r2, r2, #4
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	440b      	add	r3, r1
 80038c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038cc:	e00a      	b.n	80038e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4908      	ldr	r1, [pc, #32]	; (80038f4 <__NVIC_SetPriority+0x50>)
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	3b04      	subs	r3, #4
 80038dc:	0112      	lsls	r2, r2, #4
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	440b      	add	r3, r1
 80038e2:	761a      	strb	r2, [r3, #24]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	e000e100 	.word	0xe000e100
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b089      	sub	sp, #36	; 0x24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f1c3 0307 	rsb	r3, r3, #7
 8003912:	2b04      	cmp	r3, #4
 8003914:	bf28      	it	cs
 8003916:	2304      	movcs	r3, #4
 8003918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3304      	adds	r3, #4
 800391e:	2b06      	cmp	r3, #6
 8003920:	d902      	bls.n	8003928 <NVIC_EncodePriority+0x30>
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	3b03      	subs	r3, #3
 8003926:	e000      	b.n	800392a <NVIC_EncodePriority+0x32>
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800392c:	f04f 32ff 	mov.w	r2, #4294967295
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43da      	mvns	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	401a      	ands	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003940:	f04f 31ff 	mov.w	r1, #4294967295
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fa01 f303 	lsl.w	r3, r1, r3
 800394a:	43d9      	mvns	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003950:	4313      	orrs	r3, r2
         );
}
 8003952:	4618      	mov	r0, r3
 8003954:	3724      	adds	r7, #36	; 0x24
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3b01      	subs	r3, #1
 8003968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800396c:	d301      	bcc.n	8003972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800396e:	2301      	movs	r3, #1
 8003970:	e00f      	b.n	8003992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003972:	4a0a      	ldr	r2, [pc, #40]	; (800399c <SysTick_Config+0x40>)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3b01      	subs	r3, #1
 8003978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800397a:	210f      	movs	r1, #15
 800397c:	f04f 30ff 	mov.w	r0, #4294967295
 8003980:	f7ff ff90 	bl	80038a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003984:	4b05      	ldr	r3, [pc, #20]	; (800399c <SysTick_Config+0x40>)
 8003986:	2200      	movs	r2, #0
 8003988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800398a:	4b04      	ldr	r3, [pc, #16]	; (800399c <SysTick_Config+0x40>)
 800398c:	2207      	movs	r2, #7
 800398e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	e000e010 	.word	0xe000e010

080039a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff ff2d 	bl	8003808 <__NVIC_SetPriorityGrouping>
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b086      	sub	sp, #24
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	4603      	mov	r3, r0
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039c8:	f7ff ff42 	bl	8003850 <__NVIC_GetPriorityGrouping>
 80039cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	6978      	ldr	r0, [r7, #20]
 80039d4:	f7ff ff90 	bl	80038f8 <NVIC_EncodePriority>
 80039d8:	4602      	mov	r2, r0
 80039da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff5f 	bl	80038a4 <__NVIC_SetPriority>
}
 80039e6:	bf00      	nop
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	4603      	mov	r3, r0
 80039f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff ff35 	bl	800386c <__NVIC_EnableIRQ>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff ffa2 	bl	800395c <SysTick_Config>
 8003a18:	4603      	mov	r3, r0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e014      	b.n	8003a5e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	791b      	ldrb	r3, [r3, #4]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d105      	bne.n	8003a4a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7fe ff37 	bl	80028b8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e092      	b.n	8003ba6 <HAL_DAC_Start_DMA+0x13e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	795b      	ldrb	r3, [r3, #5]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_DAC_Start_DMA+0x24>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e08c      	b.n	8003ba6 <HAL_DAC_Start_DMA+0x13e>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2202      	movs	r2, #2
 8003a96:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d129      	bne.n	8003af2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	4a43      	ldr	r2, [pc, #268]	; (8003bb0 <HAL_DAC_Start_DMA+0x148>)
 8003aa4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	4a42      	ldr	r2, [pc, #264]	; (8003bb4 <HAL_DAC_Start_DMA+0x14c>)
 8003aac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	4a41      	ldr	r2, [pc, #260]	; (8003bb8 <HAL_DAC_Start_DMA+0x150>)
 8003ab4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ac4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_DAC_Start_DMA+0x6c>
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d005      	beq.n	8003ade <HAL_DAC_Start_DMA+0x76>
 8003ad2:	e009      	b.n	8003ae8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3308      	adds	r3, #8
 8003ada:	613b      	str	r3, [r7, #16]
        break;
 8003adc:	e033      	b.n	8003b46 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	330c      	adds	r3, #12
 8003ae4:	613b      	str	r3, [r7, #16]
        break;
 8003ae6:	e02e      	b.n	8003b46 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3310      	adds	r3, #16
 8003aee:	613b      	str	r3, [r7, #16]
        break;
 8003af0:	e029      	b.n	8003b46 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	4a31      	ldr	r2, [pc, #196]	; (8003bbc <HAL_DAC_Start_DMA+0x154>)
 8003af8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	4a30      	ldr	r2, [pc, #192]	; (8003bc0 <HAL_DAC_Start_DMA+0x158>)
 8003b00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	4a2f      	ldr	r2, [pc, #188]	; (8003bc4 <HAL_DAC_Start_DMA+0x15c>)
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b18:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_DAC_Start_DMA+0xc0>
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d005      	beq.n	8003b32 <HAL_DAC_Start_DMA+0xca>
 8003b26:	e009      	b.n	8003b3c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3314      	adds	r3, #20
 8003b2e:	613b      	str	r3, [r7, #16]
        break;
 8003b30:	e009      	b.n	8003b46 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3318      	adds	r3, #24
 8003b38:	613b      	str	r3, [r7, #16]
        break;
 8003b3a:	e004      	b.n	8003b46 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	331c      	adds	r3, #28
 8003b42:	613b      	str	r3, [r7, #16]
        break;
 8003b44:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d109      	bne.n	8003b60 <HAL_DAC_Start_DMA+0xf8>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* DAC_CR_DMAUDRIE1 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6898      	ldr	r0, [r3, #8]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	f000 f9e5 	bl	8003f24 <HAL_DMA_Start_IT>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	75fb      	strb	r3, [r7, #23]
 8003b5e:	e008      	b.n	8003b72 <HAL_DAC_Start_DMA+0x10a>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
#endif /* DAC_CR_DMAUDRIE2 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	68d8      	ldr	r0, [r3, #12]
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	f000 f9db 	bl	8003f24 <HAL_DMA_Start_IT>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10c      	bne.n	8003b98 <HAL_DAC_Start_DMA+0x130>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	e005      	b.n	8003ba4 <HAL_DAC_Start_DMA+0x13c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f043 0204 	orr.w	r2, r3, #4
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	08003d29 	.word	0x08003d29
 8003bb4:	08003d4b 	.word	0x08003d4b
 8003bb8:	08003d67 	.word	0x08003d67
 8003bbc:	08003dcb 	.word	0x08003dcb
 8003bc0:	08003ded 	.word	0x08003ded
 8003bc4:	08003e09 	.word	0x08003e09

08003bc8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e02e      	b.n	8003c3a <HAL_DAC_Stop_DMA+0x72>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43da      	mvns	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	400a      	ands	r2, r1
 8003bf8:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6819      	ldr	r1, [r3, #0]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2201      	movs	r2, #1
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	43da      	mvns	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	400a      	ands	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d105      	bne.n	8003c28 <HAL_DAC_Stop_DMA+0x60>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 f9df 	bl	8003fe4 <HAL_DMA_Abort>
 8003c26:	e004      	b.n	8003c32 <HAL_DAC_Stop_DMA+0x6a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 f9d9 	bl	8003fe4 <HAL_DMA_Abort>
#endif /* DAC_CR_DMAUDRIE2 */
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr

08003c54 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr

08003c66 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr

08003c78 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b089      	sub	sp, #36	; 0x24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_DAC_ConfigChannel+0x1c>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e042      	b.n	8003d1e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	795b      	ldrb	r3, [r3, #5]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_DAC_ConfigChannel+0x2c>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e03c      	b.n	8003d1e <HAL_DAC_ConfigChannel+0xa6>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2202      	movs	r2, #2
 8003cae:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6819      	ldr	r1, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f003 0310 	and.w	r3, r3, #16
 8003d00:	22c0      	movs	r2, #192	; 0xc0
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43da      	mvns	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003d1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3724      	adds	r7, #36	; 0x24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f7ff ff83 	bl	8003c42 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	711a      	strb	r2, [r3, #4]
}
 8003d42:	bf00      	nop
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f7ff ff7b 	bl	8003c54 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	f043 0204 	orr.w	r2, r3, #4
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f7ff ff70 	bl	8003c66 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	711a      	strb	r2, [r3, #4]
}
 8003d8c:	bf00      	nop
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr

08003db8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr

08003dca <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f7ff ffdb 	bl	8003d94 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	711a      	strb	r2, [r3, #4]
}
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f7ff ffd3 	bl	8003da6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003e00:	bf00      	nop
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f043 0204 	orr.w	r2, r3, #4
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f7ff ffc8 	bl	8003db8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	711a      	strb	r2, [r3, #4]
}
 8003e2e:	bf00      	nop
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e059      	b.n	8003f02 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	4b2d      	ldr	r3, [pc, #180]	; (8003f0c <HAL_DMA_Init+0xd4>)
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d80f      	bhi.n	8003e7a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <HAL_DMA_Init+0xd8>)
 8003e62:	4413      	add	r3, r2
 8003e64:	4a2b      	ldr	r2, [pc, #172]	; (8003f14 <HAL_DMA_Init+0xdc>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	091b      	lsrs	r3, r3, #4
 8003e6c:	009a      	lsls	r2, r3, #2
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a28      	ldr	r2, [pc, #160]	; (8003f18 <HAL_DMA_Init+0xe0>)
 8003e76:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e78:	e00e      	b.n	8003e98 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	4b26      	ldr	r3, [pc, #152]	; (8003f1c <HAL_DMA_Init+0xe4>)
 8003e82:	4413      	add	r3, r2
 8003e84:	4a23      	ldr	r2, [pc, #140]	; (8003f14 <HAL_DMA_Init+0xdc>)
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	009a      	lsls	r2, r3, #2
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a22      	ldr	r2, [pc, #136]	; (8003f20 <HAL_DMA_Init+0xe8>)
 8003e96:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003eae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003eb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	40020407 	.word	0x40020407
 8003f10:	bffdfff8 	.word	0xbffdfff8
 8003f14:	cccccccd 	.word	0xcccccccd
 8003f18:	40020000 	.word	0x40020000
 8003f1c:	bffdfbf8 	.word	0xbffdfbf8
 8003f20:	40020400 	.word	0x40020400

08003f24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_DMA_Start_IT+0x20>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e04b      	b.n	8003fdc <HAL_DMA_Start_IT+0xb8>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d13a      	bne.n	8003fce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 fbb1 	bl	80046e4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d008      	beq.n	8003f9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 020e 	orr.w	r2, r2, #14
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	e00f      	b.n	8003fbc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0204 	bic.w	r2, r2, #4
 8003faa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 020a 	orr.w	r2, r2, #10
 8003fba:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	e005      	b.n	8003fda <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d008      	beq.n	800400e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2204      	movs	r2, #4
 8004000:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e020      	b.n	8004050 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 020e 	bic.w	r2, r2, #14
 800401c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0201 	bic.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	2101      	movs	r1, #1
 8004038:	fa01 f202 	lsl.w	r2, r1, r2
 800403c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800404e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr
	...

0800405c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d005      	beq.n	8004080 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2204      	movs	r2, #4
 8004078:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	73fb      	strb	r3, [r7, #15]
 800407e:	e0d6      	b.n	800422e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 020e 	bic.w	r2, r2, #14
 800408e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0201 	bic.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	4b64      	ldr	r3, [pc, #400]	; (8004238 <HAL_DMA_Abort_IT+0x1dc>)
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d958      	bls.n	800415e <HAL_DMA_Abort_IT+0x102>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a62      	ldr	r2, [pc, #392]	; (800423c <HAL_DMA_Abort_IT+0x1e0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d04f      	beq.n	8004156 <HAL_DMA_Abort_IT+0xfa>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a61      	ldr	r2, [pc, #388]	; (8004240 <HAL_DMA_Abort_IT+0x1e4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d048      	beq.n	8004152 <HAL_DMA_Abort_IT+0xf6>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a5f      	ldr	r2, [pc, #380]	; (8004244 <HAL_DMA_Abort_IT+0x1e8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d040      	beq.n	800414c <HAL_DMA_Abort_IT+0xf0>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a5e      	ldr	r2, [pc, #376]	; (8004248 <HAL_DMA_Abort_IT+0x1ec>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d038      	beq.n	8004146 <HAL_DMA_Abort_IT+0xea>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a5c      	ldr	r2, [pc, #368]	; (800424c <HAL_DMA_Abort_IT+0x1f0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d030      	beq.n	8004140 <HAL_DMA_Abort_IT+0xe4>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a5b      	ldr	r2, [pc, #364]	; (8004250 <HAL_DMA_Abort_IT+0x1f4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d028      	beq.n	800413a <HAL_DMA_Abort_IT+0xde>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a52      	ldr	r2, [pc, #328]	; (8004238 <HAL_DMA_Abort_IT+0x1dc>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d020      	beq.n	8004134 <HAL_DMA_Abort_IT+0xd8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a57      	ldr	r2, [pc, #348]	; (8004254 <HAL_DMA_Abort_IT+0x1f8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d019      	beq.n	8004130 <HAL_DMA_Abort_IT+0xd4>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a55      	ldr	r2, [pc, #340]	; (8004258 <HAL_DMA_Abort_IT+0x1fc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d012      	beq.n	800412c <HAL_DMA_Abort_IT+0xd0>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a54      	ldr	r2, [pc, #336]	; (800425c <HAL_DMA_Abort_IT+0x200>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00a      	beq.n	8004126 <HAL_DMA_Abort_IT+0xca>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a52      	ldr	r2, [pc, #328]	; (8004260 <HAL_DMA_Abort_IT+0x204>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d102      	bne.n	8004120 <HAL_DMA_Abort_IT+0xc4>
 800411a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800411e:	e01b      	b.n	8004158 <HAL_DMA_Abort_IT+0xfc>
 8004120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004124:	e018      	b.n	8004158 <HAL_DMA_Abort_IT+0xfc>
 8004126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800412a:	e015      	b.n	8004158 <HAL_DMA_Abort_IT+0xfc>
 800412c:	2310      	movs	r3, #16
 800412e:	e013      	b.n	8004158 <HAL_DMA_Abort_IT+0xfc>
 8004130:	2301      	movs	r3, #1
 8004132:	e011      	b.n	8004158 <HAL_DMA_Abort_IT+0xfc>
 8004134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004138:	e00e      	b.n	8004158 <HAL_DMA_Abort_IT+0xfc>
 800413a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800413e:	e00b      	b.n	8004158 <HAL_DMA_Abort_IT+0xfc>
 8004140:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004144:	e008      	b.n	8004158 <HAL_DMA_Abort_IT+0xfc>
 8004146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800414a:	e005      	b.n	8004158 <HAL_DMA_Abort_IT+0xfc>
 800414c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004150:	e002      	b.n	8004158 <HAL_DMA_Abort_IT+0xfc>
 8004152:	2310      	movs	r3, #16
 8004154:	e000      	b.n	8004158 <HAL_DMA_Abort_IT+0xfc>
 8004156:	2301      	movs	r3, #1
 8004158:	4a42      	ldr	r2, [pc, #264]	; (8004264 <HAL_DMA_Abort_IT+0x208>)
 800415a:	6053      	str	r3, [r2, #4]
 800415c:	e057      	b.n	800420e <HAL_DMA_Abort_IT+0x1b2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a36      	ldr	r2, [pc, #216]	; (800423c <HAL_DMA_Abort_IT+0x1e0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d04f      	beq.n	8004208 <HAL_DMA_Abort_IT+0x1ac>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a34      	ldr	r2, [pc, #208]	; (8004240 <HAL_DMA_Abort_IT+0x1e4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d048      	beq.n	8004204 <HAL_DMA_Abort_IT+0x1a8>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a33      	ldr	r2, [pc, #204]	; (8004244 <HAL_DMA_Abort_IT+0x1e8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d040      	beq.n	80041fe <HAL_DMA_Abort_IT+0x1a2>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a31      	ldr	r2, [pc, #196]	; (8004248 <HAL_DMA_Abort_IT+0x1ec>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d038      	beq.n	80041f8 <HAL_DMA_Abort_IT+0x19c>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a30      	ldr	r2, [pc, #192]	; (800424c <HAL_DMA_Abort_IT+0x1f0>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d030      	beq.n	80041f2 <HAL_DMA_Abort_IT+0x196>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a2e      	ldr	r2, [pc, #184]	; (8004250 <HAL_DMA_Abort_IT+0x1f4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d028      	beq.n	80041ec <HAL_DMA_Abort_IT+0x190>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a26      	ldr	r2, [pc, #152]	; (8004238 <HAL_DMA_Abort_IT+0x1dc>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d020      	beq.n	80041e6 <HAL_DMA_Abort_IT+0x18a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a2a      	ldr	r2, [pc, #168]	; (8004254 <HAL_DMA_Abort_IT+0x1f8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d019      	beq.n	80041e2 <HAL_DMA_Abort_IT+0x186>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a29      	ldr	r2, [pc, #164]	; (8004258 <HAL_DMA_Abort_IT+0x1fc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d012      	beq.n	80041de <HAL_DMA_Abort_IT+0x182>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a27      	ldr	r2, [pc, #156]	; (800425c <HAL_DMA_Abort_IT+0x200>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00a      	beq.n	80041d8 <HAL_DMA_Abort_IT+0x17c>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a26      	ldr	r2, [pc, #152]	; (8004260 <HAL_DMA_Abort_IT+0x204>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d102      	bne.n	80041d2 <HAL_DMA_Abort_IT+0x176>
 80041cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041d0:	e01b      	b.n	800420a <HAL_DMA_Abort_IT+0x1ae>
 80041d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041d6:	e018      	b.n	800420a <HAL_DMA_Abort_IT+0x1ae>
 80041d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041dc:	e015      	b.n	800420a <HAL_DMA_Abort_IT+0x1ae>
 80041de:	2310      	movs	r3, #16
 80041e0:	e013      	b.n	800420a <HAL_DMA_Abort_IT+0x1ae>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e011      	b.n	800420a <HAL_DMA_Abort_IT+0x1ae>
 80041e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041ea:	e00e      	b.n	800420a <HAL_DMA_Abort_IT+0x1ae>
 80041ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80041f0:	e00b      	b.n	800420a <HAL_DMA_Abort_IT+0x1ae>
 80041f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041f6:	e008      	b.n	800420a <HAL_DMA_Abort_IT+0x1ae>
 80041f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041fc:	e005      	b.n	800420a <HAL_DMA_Abort_IT+0x1ae>
 80041fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004202:	e002      	b.n	800420a <HAL_DMA_Abort_IT+0x1ae>
 8004204:	2310      	movs	r3, #16
 8004206:	e000      	b.n	800420a <HAL_DMA_Abort_IT+0x1ae>
 8004208:	2301      	movs	r3, #1
 800420a:	4a17      	ldr	r2, [pc, #92]	; (8004268 <HAL_DMA_Abort_IT+0x20c>)
 800420c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	4798      	blx	r3
    } 
  }
  return status;
 800422e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40020080 	.word	0x40020080
 800423c:	40020008 	.word	0x40020008
 8004240:	4002001c 	.word	0x4002001c
 8004244:	40020030 	.word	0x40020030
 8004248:	40020044 	.word	0x40020044
 800424c:	40020058 	.word	0x40020058
 8004250:	4002006c 	.word	0x4002006c
 8004254:	40020408 	.word	0x40020408
 8004258:	4002041c 	.word	0x4002041c
 800425c:	40020430 	.word	0x40020430
 8004260:	40020444 	.word	0x40020444
 8004264:	40020400 	.word	0x40020400
 8004268:	40020000 	.word	0x40020000

0800426c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	2204      	movs	r2, #4
 800428a:	409a      	lsls	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80f1 	beq.w	8004478 <HAL_DMA_IRQHandler+0x20c>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80eb 	beq.w	8004478 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0320 	and.w	r3, r3, #32
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d107      	bne.n	80042c0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0204 	bic.w	r2, r2, #4
 80042be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	4b5f      	ldr	r3, [pc, #380]	; (8004444 <HAL_DMA_IRQHandler+0x1d8>)
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d958      	bls.n	800437e <HAL_DMA_IRQHandler+0x112>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a5d      	ldr	r2, [pc, #372]	; (8004448 <HAL_DMA_IRQHandler+0x1dc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d04f      	beq.n	8004376 <HAL_DMA_IRQHandler+0x10a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a5c      	ldr	r2, [pc, #368]	; (800444c <HAL_DMA_IRQHandler+0x1e0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d048      	beq.n	8004372 <HAL_DMA_IRQHandler+0x106>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a5a      	ldr	r2, [pc, #360]	; (8004450 <HAL_DMA_IRQHandler+0x1e4>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d040      	beq.n	800436c <HAL_DMA_IRQHandler+0x100>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a59      	ldr	r2, [pc, #356]	; (8004454 <HAL_DMA_IRQHandler+0x1e8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d038      	beq.n	8004366 <HAL_DMA_IRQHandler+0xfa>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a57      	ldr	r2, [pc, #348]	; (8004458 <HAL_DMA_IRQHandler+0x1ec>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d030      	beq.n	8004360 <HAL_DMA_IRQHandler+0xf4>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a56      	ldr	r2, [pc, #344]	; (800445c <HAL_DMA_IRQHandler+0x1f0>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d028      	beq.n	800435a <HAL_DMA_IRQHandler+0xee>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a4d      	ldr	r2, [pc, #308]	; (8004444 <HAL_DMA_IRQHandler+0x1d8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d020      	beq.n	8004354 <HAL_DMA_IRQHandler+0xe8>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a52      	ldr	r2, [pc, #328]	; (8004460 <HAL_DMA_IRQHandler+0x1f4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d019      	beq.n	8004350 <HAL_DMA_IRQHandler+0xe4>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a50      	ldr	r2, [pc, #320]	; (8004464 <HAL_DMA_IRQHandler+0x1f8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d012      	beq.n	800434c <HAL_DMA_IRQHandler+0xe0>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a4f      	ldr	r2, [pc, #316]	; (8004468 <HAL_DMA_IRQHandler+0x1fc>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00a      	beq.n	8004346 <HAL_DMA_IRQHandler+0xda>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a4d      	ldr	r2, [pc, #308]	; (800446c <HAL_DMA_IRQHandler+0x200>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d102      	bne.n	8004340 <HAL_DMA_IRQHandler+0xd4>
 800433a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800433e:	e01b      	b.n	8004378 <HAL_DMA_IRQHandler+0x10c>
 8004340:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004344:	e018      	b.n	8004378 <HAL_DMA_IRQHandler+0x10c>
 8004346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800434a:	e015      	b.n	8004378 <HAL_DMA_IRQHandler+0x10c>
 800434c:	2340      	movs	r3, #64	; 0x40
 800434e:	e013      	b.n	8004378 <HAL_DMA_IRQHandler+0x10c>
 8004350:	2304      	movs	r3, #4
 8004352:	e011      	b.n	8004378 <HAL_DMA_IRQHandler+0x10c>
 8004354:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004358:	e00e      	b.n	8004378 <HAL_DMA_IRQHandler+0x10c>
 800435a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800435e:	e00b      	b.n	8004378 <HAL_DMA_IRQHandler+0x10c>
 8004360:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004364:	e008      	b.n	8004378 <HAL_DMA_IRQHandler+0x10c>
 8004366:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800436a:	e005      	b.n	8004378 <HAL_DMA_IRQHandler+0x10c>
 800436c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004370:	e002      	b.n	8004378 <HAL_DMA_IRQHandler+0x10c>
 8004372:	2340      	movs	r3, #64	; 0x40
 8004374:	e000      	b.n	8004378 <HAL_DMA_IRQHandler+0x10c>
 8004376:	2304      	movs	r3, #4
 8004378:	4a3d      	ldr	r2, [pc, #244]	; (8004470 <HAL_DMA_IRQHandler+0x204>)
 800437a:	6053      	str	r3, [r2, #4]
 800437c:	e057      	b.n	800442e <HAL_DMA_IRQHandler+0x1c2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a31      	ldr	r2, [pc, #196]	; (8004448 <HAL_DMA_IRQHandler+0x1dc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d04f      	beq.n	8004428 <HAL_DMA_IRQHandler+0x1bc>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a2f      	ldr	r2, [pc, #188]	; (800444c <HAL_DMA_IRQHandler+0x1e0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d048      	beq.n	8004424 <HAL_DMA_IRQHandler+0x1b8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a2e      	ldr	r2, [pc, #184]	; (8004450 <HAL_DMA_IRQHandler+0x1e4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d040      	beq.n	800441e <HAL_DMA_IRQHandler+0x1b2>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a2c      	ldr	r2, [pc, #176]	; (8004454 <HAL_DMA_IRQHandler+0x1e8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d038      	beq.n	8004418 <HAL_DMA_IRQHandler+0x1ac>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a2b      	ldr	r2, [pc, #172]	; (8004458 <HAL_DMA_IRQHandler+0x1ec>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d030      	beq.n	8004412 <HAL_DMA_IRQHandler+0x1a6>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a29      	ldr	r2, [pc, #164]	; (800445c <HAL_DMA_IRQHandler+0x1f0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d028      	beq.n	800440c <HAL_DMA_IRQHandler+0x1a0>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a21      	ldr	r2, [pc, #132]	; (8004444 <HAL_DMA_IRQHandler+0x1d8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d020      	beq.n	8004406 <HAL_DMA_IRQHandler+0x19a>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a25      	ldr	r2, [pc, #148]	; (8004460 <HAL_DMA_IRQHandler+0x1f4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d019      	beq.n	8004402 <HAL_DMA_IRQHandler+0x196>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a24      	ldr	r2, [pc, #144]	; (8004464 <HAL_DMA_IRQHandler+0x1f8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d012      	beq.n	80043fe <HAL_DMA_IRQHandler+0x192>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a22      	ldr	r2, [pc, #136]	; (8004468 <HAL_DMA_IRQHandler+0x1fc>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00a      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x18c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a21      	ldr	r2, [pc, #132]	; (800446c <HAL_DMA_IRQHandler+0x200>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d102      	bne.n	80043f2 <HAL_DMA_IRQHandler+0x186>
 80043ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043f0:	e01b      	b.n	800442a <HAL_DMA_IRQHandler+0x1be>
 80043f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80043f6:	e018      	b.n	800442a <HAL_DMA_IRQHandler+0x1be>
 80043f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043fc:	e015      	b.n	800442a <HAL_DMA_IRQHandler+0x1be>
 80043fe:	2340      	movs	r3, #64	; 0x40
 8004400:	e013      	b.n	800442a <HAL_DMA_IRQHandler+0x1be>
 8004402:	2304      	movs	r3, #4
 8004404:	e011      	b.n	800442a <HAL_DMA_IRQHandler+0x1be>
 8004406:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800440a:	e00e      	b.n	800442a <HAL_DMA_IRQHandler+0x1be>
 800440c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004410:	e00b      	b.n	800442a <HAL_DMA_IRQHandler+0x1be>
 8004412:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004416:	e008      	b.n	800442a <HAL_DMA_IRQHandler+0x1be>
 8004418:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800441c:	e005      	b.n	800442a <HAL_DMA_IRQHandler+0x1be>
 800441e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004422:	e002      	b.n	800442a <HAL_DMA_IRQHandler+0x1be>
 8004424:	2340      	movs	r3, #64	; 0x40
 8004426:	e000      	b.n	800442a <HAL_DMA_IRQHandler+0x1be>
 8004428:	2304      	movs	r3, #4
 800442a:	4a12      	ldr	r2, [pc, #72]	; (8004474 <HAL_DMA_IRQHandler+0x208>)
 800442c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 8136 	beq.w	80046a4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004440:	e130      	b.n	80046a4 <HAL_DMA_IRQHandler+0x438>
 8004442:	bf00      	nop
 8004444:	40020080 	.word	0x40020080
 8004448:	40020008 	.word	0x40020008
 800444c:	4002001c 	.word	0x4002001c
 8004450:	40020030 	.word	0x40020030
 8004454:	40020044 	.word	0x40020044
 8004458:	40020058 	.word	0x40020058
 800445c:	4002006c 	.word	0x4002006c
 8004460:	40020408 	.word	0x40020408
 8004464:	4002041c 	.word	0x4002041c
 8004468:	40020430 	.word	0x40020430
 800446c:	40020444 	.word	0x40020444
 8004470:	40020400 	.word	0x40020400
 8004474:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	2202      	movs	r2, #2
 800447e:	409a      	lsls	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4013      	ands	r3, r2
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80dd 	beq.w	8004644 <HAL_DMA_IRQHandler+0x3d8>
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 80d7 	beq.w	8004644 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10b      	bne.n	80044bc <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 020a 	bic.w	r2, r2, #10
 80044b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	4b7b      	ldr	r3, [pc, #492]	; (80046b0 <HAL_DMA_IRQHandler+0x444>)
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d958      	bls.n	800457a <HAL_DMA_IRQHandler+0x30e>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a79      	ldr	r2, [pc, #484]	; (80046b4 <HAL_DMA_IRQHandler+0x448>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d04f      	beq.n	8004572 <HAL_DMA_IRQHandler+0x306>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a78      	ldr	r2, [pc, #480]	; (80046b8 <HAL_DMA_IRQHandler+0x44c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d048      	beq.n	800456e <HAL_DMA_IRQHandler+0x302>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a76      	ldr	r2, [pc, #472]	; (80046bc <HAL_DMA_IRQHandler+0x450>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d040      	beq.n	8004568 <HAL_DMA_IRQHandler+0x2fc>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a75      	ldr	r2, [pc, #468]	; (80046c0 <HAL_DMA_IRQHandler+0x454>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d038      	beq.n	8004562 <HAL_DMA_IRQHandler+0x2f6>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a73      	ldr	r2, [pc, #460]	; (80046c4 <HAL_DMA_IRQHandler+0x458>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d030      	beq.n	800455c <HAL_DMA_IRQHandler+0x2f0>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a72      	ldr	r2, [pc, #456]	; (80046c8 <HAL_DMA_IRQHandler+0x45c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d028      	beq.n	8004556 <HAL_DMA_IRQHandler+0x2ea>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a69      	ldr	r2, [pc, #420]	; (80046b0 <HAL_DMA_IRQHandler+0x444>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d020      	beq.n	8004550 <HAL_DMA_IRQHandler+0x2e4>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a6e      	ldr	r2, [pc, #440]	; (80046cc <HAL_DMA_IRQHandler+0x460>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d019      	beq.n	800454c <HAL_DMA_IRQHandler+0x2e0>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a6c      	ldr	r2, [pc, #432]	; (80046d0 <HAL_DMA_IRQHandler+0x464>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d012      	beq.n	8004548 <HAL_DMA_IRQHandler+0x2dc>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a6b      	ldr	r2, [pc, #428]	; (80046d4 <HAL_DMA_IRQHandler+0x468>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d00a      	beq.n	8004542 <HAL_DMA_IRQHandler+0x2d6>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a69      	ldr	r2, [pc, #420]	; (80046d8 <HAL_DMA_IRQHandler+0x46c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d102      	bne.n	800453c <HAL_DMA_IRQHandler+0x2d0>
 8004536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800453a:	e01b      	b.n	8004574 <HAL_DMA_IRQHandler+0x308>
 800453c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004540:	e018      	b.n	8004574 <HAL_DMA_IRQHandler+0x308>
 8004542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004546:	e015      	b.n	8004574 <HAL_DMA_IRQHandler+0x308>
 8004548:	2320      	movs	r3, #32
 800454a:	e013      	b.n	8004574 <HAL_DMA_IRQHandler+0x308>
 800454c:	2302      	movs	r3, #2
 800454e:	e011      	b.n	8004574 <HAL_DMA_IRQHandler+0x308>
 8004550:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004554:	e00e      	b.n	8004574 <HAL_DMA_IRQHandler+0x308>
 8004556:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800455a:	e00b      	b.n	8004574 <HAL_DMA_IRQHandler+0x308>
 800455c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004560:	e008      	b.n	8004574 <HAL_DMA_IRQHandler+0x308>
 8004562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004566:	e005      	b.n	8004574 <HAL_DMA_IRQHandler+0x308>
 8004568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800456c:	e002      	b.n	8004574 <HAL_DMA_IRQHandler+0x308>
 800456e:	2320      	movs	r3, #32
 8004570:	e000      	b.n	8004574 <HAL_DMA_IRQHandler+0x308>
 8004572:	2302      	movs	r3, #2
 8004574:	4a59      	ldr	r2, [pc, #356]	; (80046dc <HAL_DMA_IRQHandler+0x470>)
 8004576:	6053      	str	r3, [r2, #4]
 8004578:	e057      	b.n	800462a <HAL_DMA_IRQHandler+0x3be>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a4d      	ldr	r2, [pc, #308]	; (80046b4 <HAL_DMA_IRQHandler+0x448>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d04f      	beq.n	8004624 <HAL_DMA_IRQHandler+0x3b8>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a4b      	ldr	r2, [pc, #300]	; (80046b8 <HAL_DMA_IRQHandler+0x44c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d048      	beq.n	8004620 <HAL_DMA_IRQHandler+0x3b4>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a4a      	ldr	r2, [pc, #296]	; (80046bc <HAL_DMA_IRQHandler+0x450>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d040      	beq.n	800461a <HAL_DMA_IRQHandler+0x3ae>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a48      	ldr	r2, [pc, #288]	; (80046c0 <HAL_DMA_IRQHandler+0x454>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d038      	beq.n	8004614 <HAL_DMA_IRQHandler+0x3a8>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a47      	ldr	r2, [pc, #284]	; (80046c4 <HAL_DMA_IRQHandler+0x458>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d030      	beq.n	800460e <HAL_DMA_IRQHandler+0x3a2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a45      	ldr	r2, [pc, #276]	; (80046c8 <HAL_DMA_IRQHandler+0x45c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d028      	beq.n	8004608 <HAL_DMA_IRQHandler+0x39c>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a3d      	ldr	r2, [pc, #244]	; (80046b0 <HAL_DMA_IRQHandler+0x444>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d020      	beq.n	8004602 <HAL_DMA_IRQHandler+0x396>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a41      	ldr	r2, [pc, #260]	; (80046cc <HAL_DMA_IRQHandler+0x460>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d019      	beq.n	80045fe <HAL_DMA_IRQHandler+0x392>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a40      	ldr	r2, [pc, #256]	; (80046d0 <HAL_DMA_IRQHandler+0x464>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d012      	beq.n	80045fa <HAL_DMA_IRQHandler+0x38e>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a3e      	ldr	r2, [pc, #248]	; (80046d4 <HAL_DMA_IRQHandler+0x468>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d00a      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x388>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a3d      	ldr	r2, [pc, #244]	; (80046d8 <HAL_DMA_IRQHandler+0x46c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d102      	bne.n	80045ee <HAL_DMA_IRQHandler+0x382>
 80045e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045ec:	e01b      	b.n	8004626 <HAL_DMA_IRQHandler+0x3ba>
 80045ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045f2:	e018      	b.n	8004626 <HAL_DMA_IRQHandler+0x3ba>
 80045f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045f8:	e015      	b.n	8004626 <HAL_DMA_IRQHandler+0x3ba>
 80045fa:	2320      	movs	r3, #32
 80045fc:	e013      	b.n	8004626 <HAL_DMA_IRQHandler+0x3ba>
 80045fe:	2302      	movs	r3, #2
 8004600:	e011      	b.n	8004626 <HAL_DMA_IRQHandler+0x3ba>
 8004602:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004606:	e00e      	b.n	8004626 <HAL_DMA_IRQHandler+0x3ba>
 8004608:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800460c:	e00b      	b.n	8004626 <HAL_DMA_IRQHandler+0x3ba>
 800460e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004612:	e008      	b.n	8004626 <HAL_DMA_IRQHandler+0x3ba>
 8004614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004618:	e005      	b.n	8004626 <HAL_DMA_IRQHandler+0x3ba>
 800461a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800461e:	e002      	b.n	8004626 <HAL_DMA_IRQHandler+0x3ba>
 8004620:	2320      	movs	r3, #32
 8004622:	e000      	b.n	8004626 <HAL_DMA_IRQHandler+0x3ba>
 8004624:	2302      	movs	r3, #2
 8004626:	4a2e      	ldr	r2, [pc, #184]	; (80046e0 <HAL_DMA_IRQHandler+0x474>)
 8004628:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	2b00      	cmp	r3, #0
 8004638:	d034      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004642:	e02f      	b.n	80046a4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	2208      	movs	r2, #8
 800464a:	409a      	lsls	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4013      	ands	r3, r2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d028      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x43a>
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d023      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 020e 	bic.w	r2, r2, #14
 800466c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004676:	2101      	movs	r1, #1
 8004678:	fa01 f202 	lsl.w	r2, r1, r2
 800467c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	2b00      	cmp	r3, #0
 800469a:	d004      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	4798      	blx	r3
    }
  }
  return;
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
}
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40020080 	.word	0x40020080
 80046b4:	40020008 	.word	0x40020008
 80046b8:	4002001c 	.word	0x4002001c
 80046bc:	40020030 	.word	0x40020030
 80046c0:	40020044 	.word	0x40020044
 80046c4:	40020058 	.word	0x40020058
 80046c8:	4002006c 	.word	0x4002006c
 80046cc:	40020408 	.word	0x40020408
 80046d0:	4002041c 	.word	0x4002041c
 80046d4:	40020430 	.word	0x40020430
 80046d8:	40020444 	.word	0x40020444
 80046dc:	40020400 	.word	0x40020400
 80046e0:	40020000 	.word	0x40020000

080046e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fa:	2101      	movs	r1, #1
 80046fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004700:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b10      	cmp	r3, #16
 8004710:	d108      	bne.n	8004724 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004722:	e007      	b.n	8004734 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	60da      	str	r2, [r3, #12]
}
 8004734:	bf00      	nop
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr
	...

08004740 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004740:	b480      	push	{r7}
 8004742:	b08b      	sub	sp, #44	; 0x2c
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800474a:	2300      	movs	r3, #0
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800474e:	2300      	movs	r3, #0
 8004750:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004752:	e179      	b.n	8004a48 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004754:	2201      	movs	r2, #1
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	429a      	cmp	r2, r3
 800476e:	f040 8168 	bne.w	8004a42 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	4a96      	ldr	r2, [pc, #600]	; (80049d0 <HAL_GPIO_Init+0x290>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d05e      	beq.n	800483a <HAL_GPIO_Init+0xfa>
 800477c:	4a94      	ldr	r2, [pc, #592]	; (80049d0 <HAL_GPIO_Init+0x290>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d875      	bhi.n	800486e <HAL_GPIO_Init+0x12e>
 8004782:	4a94      	ldr	r2, [pc, #592]	; (80049d4 <HAL_GPIO_Init+0x294>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d058      	beq.n	800483a <HAL_GPIO_Init+0xfa>
 8004788:	4a92      	ldr	r2, [pc, #584]	; (80049d4 <HAL_GPIO_Init+0x294>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d86f      	bhi.n	800486e <HAL_GPIO_Init+0x12e>
 800478e:	4a92      	ldr	r2, [pc, #584]	; (80049d8 <HAL_GPIO_Init+0x298>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d052      	beq.n	800483a <HAL_GPIO_Init+0xfa>
 8004794:	4a90      	ldr	r2, [pc, #576]	; (80049d8 <HAL_GPIO_Init+0x298>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d869      	bhi.n	800486e <HAL_GPIO_Init+0x12e>
 800479a:	4a90      	ldr	r2, [pc, #576]	; (80049dc <HAL_GPIO_Init+0x29c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d04c      	beq.n	800483a <HAL_GPIO_Init+0xfa>
 80047a0:	4a8e      	ldr	r2, [pc, #568]	; (80049dc <HAL_GPIO_Init+0x29c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d863      	bhi.n	800486e <HAL_GPIO_Init+0x12e>
 80047a6:	4a8e      	ldr	r2, [pc, #568]	; (80049e0 <HAL_GPIO_Init+0x2a0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d046      	beq.n	800483a <HAL_GPIO_Init+0xfa>
 80047ac:	4a8c      	ldr	r2, [pc, #560]	; (80049e0 <HAL_GPIO_Init+0x2a0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d85d      	bhi.n	800486e <HAL_GPIO_Init+0x12e>
 80047b2:	2b12      	cmp	r3, #18
 80047b4:	d82a      	bhi.n	800480c <HAL_GPIO_Init+0xcc>
 80047b6:	2b12      	cmp	r3, #18
 80047b8:	d859      	bhi.n	800486e <HAL_GPIO_Init+0x12e>
 80047ba:	a201      	add	r2, pc, #4	; (adr r2, 80047c0 <HAL_GPIO_Init+0x80>)
 80047bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c0:	0800483b 	.word	0x0800483b
 80047c4:	08004815 	.word	0x08004815
 80047c8:	08004827 	.word	0x08004827
 80047cc:	08004869 	.word	0x08004869
 80047d0:	0800486f 	.word	0x0800486f
 80047d4:	0800486f 	.word	0x0800486f
 80047d8:	0800486f 	.word	0x0800486f
 80047dc:	0800486f 	.word	0x0800486f
 80047e0:	0800486f 	.word	0x0800486f
 80047e4:	0800486f 	.word	0x0800486f
 80047e8:	0800486f 	.word	0x0800486f
 80047ec:	0800486f 	.word	0x0800486f
 80047f0:	0800486f 	.word	0x0800486f
 80047f4:	0800486f 	.word	0x0800486f
 80047f8:	0800486f 	.word	0x0800486f
 80047fc:	0800486f 	.word	0x0800486f
 8004800:	0800486f 	.word	0x0800486f
 8004804:	0800481d 	.word	0x0800481d
 8004808:	08004831 	.word	0x08004831
 800480c:	4a75      	ldr	r2, [pc, #468]	; (80049e4 <HAL_GPIO_Init+0x2a4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d013      	beq.n	800483a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004812:	e02c      	b.n	800486e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	623b      	str	r3, [r7, #32]
          break;
 800481a:	e029      	b.n	8004870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	3304      	adds	r3, #4
 8004822:	623b      	str	r3, [r7, #32]
          break;
 8004824:	e024      	b.n	8004870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	3308      	adds	r3, #8
 800482c:	623b      	str	r3, [r7, #32]
          break;
 800482e:	e01f      	b.n	8004870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	330c      	adds	r3, #12
 8004836:	623b      	str	r3, [r7, #32]
          break;
 8004838:	e01a      	b.n	8004870 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d102      	bne.n	8004848 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004842:	2304      	movs	r3, #4
 8004844:	623b      	str	r3, [r7, #32]
          break;
 8004846:	e013      	b.n	8004870 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d105      	bne.n	800485c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004850:	2308      	movs	r3, #8
 8004852:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	611a      	str	r2, [r3, #16]
          break;
 800485a:	e009      	b.n	8004870 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800485c:	2308      	movs	r3, #8
 800485e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	615a      	str	r2, [r3, #20]
          break;
 8004866:	e003      	b.n	8004870 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004868:	2300      	movs	r3, #0
 800486a:	623b      	str	r3, [r7, #32]
          break;
 800486c:	e000      	b.n	8004870 <HAL_GPIO_Init+0x130>
          break;
 800486e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2bff      	cmp	r3, #255	; 0xff
 8004874:	d801      	bhi.n	800487a <HAL_GPIO_Init+0x13a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	e001      	b.n	800487e <HAL_GPIO_Init+0x13e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3304      	adds	r3, #4
 800487e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	2bff      	cmp	r3, #255	; 0xff
 8004884:	d802      	bhi.n	800488c <HAL_GPIO_Init+0x14c>
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	e002      	b.n	8004892 <HAL_GPIO_Init+0x152>
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	3b08      	subs	r3, #8
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	210f      	movs	r1, #15
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	fa01 f303 	lsl.w	r3, r1, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	401a      	ands	r2, r3
 80048a4:	6a39      	ldr	r1, [r7, #32]
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	fa01 f303 	lsl.w	r3, r1, r3
 80048ac:	431a      	orrs	r2, r3
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 80c1 	beq.w	8004a42 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80048c0:	4b49      	ldr	r3, [pc, #292]	; (80049e8 <HAL_GPIO_Init+0x2a8>)
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	4a48      	ldr	r2, [pc, #288]	; (80049e8 <HAL_GPIO_Init+0x2a8>)
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	6193      	str	r3, [r2, #24]
 80048cc:	4b46      	ldr	r3, [pc, #280]	; (80049e8 <HAL_GPIO_Init+0x2a8>)
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80048d8:	4a44      	ldr	r2, [pc, #272]	; (80049ec <HAL_GPIO_Init+0x2ac>)
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	089b      	lsrs	r3, r3, #2
 80048de:	3302      	adds	r3, #2
 80048e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	f003 0303 	and.w	r3, r3, #3
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	220f      	movs	r2, #15
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	43db      	mvns	r3, r3
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4013      	ands	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a3c      	ldr	r2, [pc, #240]	; (80049f0 <HAL_GPIO_Init+0x2b0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d01f      	beq.n	8004944 <HAL_GPIO_Init+0x204>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a3b      	ldr	r2, [pc, #236]	; (80049f4 <HAL_GPIO_Init+0x2b4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d019      	beq.n	8004940 <HAL_GPIO_Init+0x200>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a3a      	ldr	r2, [pc, #232]	; (80049f8 <HAL_GPIO_Init+0x2b8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d013      	beq.n	800493c <HAL_GPIO_Init+0x1fc>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a39      	ldr	r2, [pc, #228]	; (80049fc <HAL_GPIO_Init+0x2bc>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00d      	beq.n	8004938 <HAL_GPIO_Init+0x1f8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a38      	ldr	r2, [pc, #224]	; (8004a00 <HAL_GPIO_Init+0x2c0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d007      	beq.n	8004934 <HAL_GPIO_Init+0x1f4>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a37      	ldr	r2, [pc, #220]	; (8004a04 <HAL_GPIO_Init+0x2c4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d101      	bne.n	8004930 <HAL_GPIO_Init+0x1f0>
 800492c:	2305      	movs	r3, #5
 800492e:	e00a      	b.n	8004946 <HAL_GPIO_Init+0x206>
 8004930:	2306      	movs	r3, #6
 8004932:	e008      	b.n	8004946 <HAL_GPIO_Init+0x206>
 8004934:	2304      	movs	r3, #4
 8004936:	e006      	b.n	8004946 <HAL_GPIO_Init+0x206>
 8004938:	2303      	movs	r3, #3
 800493a:	e004      	b.n	8004946 <HAL_GPIO_Init+0x206>
 800493c:	2302      	movs	r3, #2
 800493e:	e002      	b.n	8004946 <HAL_GPIO_Init+0x206>
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <HAL_GPIO_Init+0x206>
 8004944:	2300      	movs	r3, #0
 8004946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004948:	f002 0203 	and.w	r2, r2, #3
 800494c:	0092      	lsls	r2, r2, #2
 800494e:	4093      	lsls	r3, r2
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004956:	4925      	ldr	r1, [pc, #148]	; (80049ec <HAL_GPIO_Init+0x2ac>)
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	089b      	lsrs	r3, r3, #2
 800495c:	3302      	adds	r3, #2
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d006      	beq.n	800497e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004970:	4b25      	ldr	r3, [pc, #148]	; (8004a08 <HAL_GPIO_Init+0x2c8>)
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	4924      	ldr	r1, [pc, #144]	; (8004a08 <HAL_GPIO_Init+0x2c8>)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	4313      	orrs	r3, r2
 800497a:	608b      	str	r3, [r1, #8]
 800497c:	e006      	b.n	800498c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800497e:	4b22      	ldr	r3, [pc, #136]	; (8004a08 <HAL_GPIO_Init+0x2c8>)
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	43db      	mvns	r3, r3
 8004986:	4920      	ldr	r1, [pc, #128]	; (8004a08 <HAL_GPIO_Init+0x2c8>)
 8004988:	4013      	ands	r3, r2
 800498a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d006      	beq.n	80049a6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004998:	4b1b      	ldr	r3, [pc, #108]	; (8004a08 <HAL_GPIO_Init+0x2c8>)
 800499a:	68da      	ldr	r2, [r3, #12]
 800499c:	491a      	ldr	r1, [pc, #104]	; (8004a08 <HAL_GPIO_Init+0x2c8>)
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60cb      	str	r3, [r1, #12]
 80049a4:	e006      	b.n	80049b4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80049a6:	4b18      	ldr	r3, [pc, #96]	; (8004a08 <HAL_GPIO_Init+0x2c8>)
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	43db      	mvns	r3, r3
 80049ae:	4916      	ldr	r1, [pc, #88]	; (8004a08 <HAL_GPIO_Init+0x2c8>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d025      	beq.n	8004a0c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80049c0:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <HAL_GPIO_Init+0x2c8>)
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	4910      	ldr	r1, [pc, #64]	; (8004a08 <HAL_GPIO_Init+0x2c8>)
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	604b      	str	r3, [r1, #4]
 80049cc:	e025      	b.n	8004a1a <HAL_GPIO_Init+0x2da>
 80049ce:	bf00      	nop
 80049d0:	10320000 	.word	0x10320000
 80049d4:	10310000 	.word	0x10310000
 80049d8:	10220000 	.word	0x10220000
 80049dc:	10210000 	.word	0x10210000
 80049e0:	10120000 	.word	0x10120000
 80049e4:	10110000 	.word	0x10110000
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40010000 	.word	0x40010000
 80049f0:	40010800 	.word	0x40010800
 80049f4:	40010c00 	.word	0x40010c00
 80049f8:	40011000 	.word	0x40011000
 80049fc:	40011400 	.word	0x40011400
 8004a00:	40011800 	.word	0x40011800
 8004a04:	40011c00 	.word	0x40011c00
 8004a08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004a0c:	4b15      	ldr	r3, [pc, #84]	; (8004a64 <HAL_GPIO_Init+0x324>)
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	43db      	mvns	r3, r3
 8004a14:	4913      	ldr	r1, [pc, #76]	; (8004a64 <HAL_GPIO_Init+0x324>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d006      	beq.n	8004a34 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004a26:	4b0f      	ldr	r3, [pc, #60]	; (8004a64 <HAL_GPIO_Init+0x324>)
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	490e      	ldr	r1, [pc, #56]	; (8004a64 <HAL_GPIO_Init+0x324>)
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	600b      	str	r3, [r1, #0]
 8004a32:	e006      	b.n	8004a42 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004a34:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <HAL_GPIO_Init+0x324>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	4909      	ldr	r1, [pc, #36]	; (8004a64 <HAL_GPIO_Init+0x324>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	3301      	adds	r3, #1
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f47f ae7e 	bne.w	8004754 <HAL_GPIO_Init+0x14>
  }
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	372c      	adds	r7, #44	; 0x2c
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr
 8004a64:	40010400 	.word	0x40010400

08004a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	887b      	ldrh	r3, [r7, #2]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a80:	2301      	movs	r3, #1
 8004a82:	73fb      	strb	r3, [r7, #15]
 8004a84:	e001      	b.n	8004a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr

08004a96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	807b      	strh	r3, [r7, #2]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004aa6:	787b      	ldrb	r3, [r7, #1]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aac:	887a      	ldrh	r2, [r7, #2]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004ab2:	e003      	b.n	8004abc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ab4:	887b      	ldrh	r3, [r7, #2]
 8004ab6:	041a      	lsls	r2, r3, #16
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	611a      	str	r2, [r3, #16]
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bc80      	pop	{r7}
 8004ac4:	4770      	bx	lr
	...

08004ac8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ad2:	4b08      	ldr	r3, [pc, #32]	; (8004af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ad4:	695a      	ldr	r2, [r3, #20]
 8004ad6:	88fb      	ldrh	r3, [r7, #6]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d006      	beq.n	8004aec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ade:	4a05      	ldr	r2, [pc, #20]	; (8004af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ae0:	88fb      	ldrh	r3, [r7, #6]
 8004ae2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ae4:	88fb      	ldrh	r3, [r7, #6]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fd f98c 	bl	8001e04 <HAL_GPIO_EXTI_Callback>
  }
}
 8004aec:	bf00      	nop
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40010400 	.word	0x40010400

08004af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e12b      	b.n	8004d62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fd ff60 	bl	80029e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2224      	movs	r2, #36	; 0x24
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0201 	bic.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b5c:	f003 f920 	bl	8007da0 <HAL_RCC_GetPCLK1Freq>
 8004b60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	4a81      	ldr	r2, [pc, #516]	; (8004d6c <HAL_I2C_Init+0x274>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d807      	bhi.n	8004b7c <HAL_I2C_Init+0x84>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4a80      	ldr	r2, [pc, #512]	; (8004d70 <HAL_I2C_Init+0x278>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	bf94      	ite	ls
 8004b74:	2301      	movls	r3, #1
 8004b76:	2300      	movhi	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	e006      	b.n	8004b8a <HAL_I2C_Init+0x92>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4a7d      	ldr	r2, [pc, #500]	; (8004d74 <HAL_I2C_Init+0x27c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	bf94      	ite	ls
 8004b84:	2301      	movls	r3, #1
 8004b86:	2300      	movhi	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e0e7      	b.n	8004d62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4a78      	ldr	r2, [pc, #480]	; (8004d78 <HAL_I2C_Init+0x280>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	0c9b      	lsrs	r3, r3, #18
 8004b9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	4a6a      	ldr	r2, [pc, #424]	; (8004d6c <HAL_I2C_Init+0x274>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d802      	bhi.n	8004bcc <HAL_I2C_Init+0xd4>
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	e009      	b.n	8004be0 <HAL_I2C_Init+0xe8>
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004bd2:	fb02 f303 	mul.w	r3, r2, r3
 8004bd6:	4a69      	ldr	r2, [pc, #420]	; (8004d7c <HAL_I2C_Init+0x284>)
 8004bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bdc:	099b      	lsrs	r3, r3, #6
 8004bde:	3301      	adds	r3, #1
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	430b      	orrs	r3, r1
 8004be6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bf2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	495c      	ldr	r1, [pc, #368]	; (8004d6c <HAL_I2C_Init+0x274>)
 8004bfc:	428b      	cmp	r3, r1
 8004bfe:	d819      	bhi.n	8004c34 <HAL_I2C_Init+0x13c>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	1e59      	subs	r1, r3, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c0e:	1c59      	adds	r1, r3, #1
 8004c10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c14:	400b      	ands	r3, r1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <HAL_I2C_Init+0x138>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1e59      	subs	r1, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c28:	3301      	adds	r3, #1
 8004c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c2e:	e051      	b.n	8004cd4 <HAL_I2C_Init+0x1dc>
 8004c30:	2304      	movs	r3, #4
 8004c32:	e04f      	b.n	8004cd4 <HAL_I2C_Init+0x1dc>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d111      	bne.n	8004c60 <HAL_I2C_Init+0x168>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	1e58      	subs	r0, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6859      	ldr	r1, [r3, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	440b      	add	r3, r1
 8004c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c4e:	3301      	adds	r3, #1
 8004c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bf0c      	ite	eq
 8004c58:	2301      	moveq	r3, #1
 8004c5a:	2300      	movne	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	e012      	b.n	8004c86 <HAL_I2C_Init+0x18e>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	1e58      	subs	r0, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6859      	ldr	r1, [r3, #4]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	0099      	lsls	r1, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c76:	3301      	adds	r3, #1
 8004c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	bf0c      	ite	eq
 8004c80:	2301      	moveq	r3, #1
 8004c82:	2300      	movne	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_I2C_Init+0x196>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e022      	b.n	8004cd4 <HAL_I2C_Init+0x1dc>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10e      	bne.n	8004cb4 <HAL_I2C_Init+0x1bc>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	1e58      	subs	r0, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6859      	ldr	r1, [r3, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	440b      	add	r3, r1
 8004ca4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ca8:	3301      	adds	r3, #1
 8004caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb2:	e00f      	b.n	8004cd4 <HAL_I2C_Init+0x1dc>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	1e58      	subs	r0, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6859      	ldr	r1, [r3, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	0099      	lsls	r1, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cca:	3301      	adds	r3, #1
 8004ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	6809      	ldr	r1, [r1, #0]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69da      	ldr	r2, [r3, #28]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6911      	ldr	r1, [r2, #16]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	68d2      	ldr	r2, [r2, #12]
 8004d0e:	4311      	orrs	r1, r2
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6812      	ldr	r2, [r2, #0]
 8004d14:	430b      	orrs	r3, r1
 8004d16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695a      	ldr	r2, [r3, #20]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	000186a0 	.word	0x000186a0
 8004d70:	001e847f 	.word	0x001e847f
 8004d74:	003d08ff 	.word	0x003d08ff
 8004d78:	431bde83 	.word	0x431bde83
 8004d7c:	10624dd3 	.word	0x10624dd3

08004d80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b088      	sub	sp, #32
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	607a      	str	r2, [r7, #4]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	817b      	strh	r3, [r7, #10]
 8004d90:	4613      	mov	r3, r2
 8004d92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d94:	f7fe f9de 	bl	8003154 <HAL_GetTick>
 8004d98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	f040 80e0 	bne.w	8004f68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	2319      	movs	r3, #25
 8004dae:	2201      	movs	r2, #1
 8004db0:	4970      	ldr	r1, [pc, #448]	; (8004f74 <HAL_I2C_Master_Transmit+0x1f4>)
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 fc9e 	bl	80056f4 <I2C_WaitOnFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e0d3      	b.n	8004f6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_I2C_Master_Transmit+0x50>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e0cc      	b.n	8004f6a <HAL_I2C_Master_Transmit+0x1ea>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d007      	beq.n	8004df6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f042 0201 	orr.w	r2, r2, #1
 8004df4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2221      	movs	r2, #33	; 0x21
 8004e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2210      	movs	r2, #16
 8004e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	893a      	ldrh	r2, [r7, #8]
 8004e26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4a50      	ldr	r2, [pc, #320]	; (8004f78 <HAL_I2C_Master_Transmit+0x1f8>)
 8004e36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e38:	8979      	ldrh	r1, [r7, #10]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	6a3a      	ldr	r2, [r7, #32]
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 fb08 	bl	8005454 <I2C_MasterRequestWrite>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e08d      	b.n	8004f6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e4e:	2300      	movs	r3, #0
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e64:	e066      	b.n	8004f34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	6a39      	ldr	r1, [r7, #32]
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 fd5c 	bl	8005928 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00d      	beq.n	8004e92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d107      	bne.n	8004e8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e06b      	b.n	8004f6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	781a      	ldrb	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d11b      	bne.n	8004f08 <HAL_I2C_Master_Transmit+0x188>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d017      	beq.n	8004f08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	781a      	ldrb	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	6a39      	ldr	r1, [r7, #32]
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 fd53 	bl	80059b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00d      	beq.n	8004f34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d107      	bne.n	8004f30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e01a      	b.n	8004f6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d194      	bne.n	8004e66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	e000      	b.n	8004f6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f68:	2302      	movs	r3, #2
  }
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	00100002 	.word	0x00100002
 8004f78:	ffff0000 	.word	0xffff0000

08004f7c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08c      	sub	sp, #48	; 0x30
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	607a      	str	r2, [r7, #4]
 8004f86:	461a      	mov	r2, r3
 8004f88:	460b      	mov	r3, r1
 8004f8a:	817b      	strh	r3, [r7, #10]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f94:	f7fe f8de 	bl	8003154 <HAL_GetTick>
 8004f98:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b20      	cmp	r3, #32
 8004fa4:	f040 824b 	bne.w	800543e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	2319      	movs	r3, #25
 8004fae:	2201      	movs	r2, #1
 8004fb0:	497f      	ldr	r1, [pc, #508]	; (80051b0 <HAL_I2C_Master_Receive+0x234>)
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 fb9e 	bl	80056f4 <I2C_WaitOnFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	e23e      	b.n	8005440 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_I2C_Master_Receive+0x54>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e237      	b.n	8005440 <HAL_I2C_Master_Receive+0x4c4>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d007      	beq.n	8004ff6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 0201 	orr.w	r2, r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005004:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2222      	movs	r2, #34	; 0x22
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2210      	movs	r2, #16
 8005012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	893a      	ldrh	r2, [r7, #8]
 8005026:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4a5f      	ldr	r2, [pc, #380]	; (80051b4 <HAL_I2C_Master_Receive+0x238>)
 8005036:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005038:	8979      	ldrh	r1, [r7, #10]
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 fa8a 	bl	8005558 <I2C_MasterRequestRead>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e1f8      	b.n	8005440 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005052:	2b00      	cmp	r3, #0
 8005054:	d113      	bne.n	800507e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005056:	2300      	movs	r3, #0
 8005058:	61fb      	str	r3, [r7, #28]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	61fb      	str	r3, [r7, #28]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	61fb      	str	r3, [r7, #28]
 800506a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	e1cc      	b.n	8005418 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005082:	2b01      	cmp	r3, #1
 8005084:	d11e      	bne.n	80050c4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005094:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005096:	b672      	cpsid	i
}
 8005098:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800509a:	2300      	movs	r3, #0
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80050c0:	b662      	cpsie	i
}
 80050c2:	e035      	b.n	8005130 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d11e      	bne.n	800510a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80050dc:	b672      	cpsid	i
}
 80050de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005104:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005106:	b662      	cpsie	i
}
 8005108:	e012      	b.n	8005130 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005118:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800511a:	2300      	movs	r3, #0
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005130:	e172      	b.n	8005418 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005136:	2b03      	cmp	r3, #3
 8005138:	f200 811f 	bhi.w	800537a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005140:	2b01      	cmp	r3, #1
 8005142:	d123      	bne.n	800518c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005146:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 fc7d 	bl	8005a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e173      	b.n	8005440 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b01      	subs	r3, #1
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	855a      	strh	r2, [r3, #42]	; 0x2a
 800518a:	e145      	b.n	8005418 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005190:	2b02      	cmp	r3, #2
 8005192:	d152      	bne.n	800523a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	2200      	movs	r2, #0
 800519c:	4906      	ldr	r1, [pc, #24]	; (80051b8 <HAL_I2C_Master_Receive+0x23c>)
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 faa8 	bl	80056f4 <I2C_WaitOnFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d008      	beq.n	80051bc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e148      	b.n	8005440 <HAL_I2C_Master_Receive+0x4c4>
 80051ae:	bf00      	nop
 80051b0:	00100002 	.word	0x00100002
 80051b4:	ffff0000 	.word	0xffff0000
 80051b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80051bc:	b672      	cpsid	i
}
 80051be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005202:	b662      	cpsie	i
}
 8005204:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005238:	e0ee      	b.n	8005418 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	2200      	movs	r2, #0
 8005242:	4981      	ldr	r1, [pc, #516]	; (8005448 <HAL_I2C_Master_Receive+0x4cc>)
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 fa55 	bl	80056f4 <I2C_WaitOnFlagUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e0f5      	b.n	8005440 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005262:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005264:	b672      	cpsid	i
}
 8005266:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005290:	b29b      	uxth	r3, r3
 8005292:	3b01      	subs	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800529a:	4b6c      	ldr	r3, [pc, #432]	; (800544c <HAL_I2C_Master_Receive+0x4d0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	08db      	lsrs	r3, r3, #3
 80052a0:	4a6b      	ldr	r2, [pc, #428]	; (8005450 <HAL_I2C_Master_Receive+0x4d4>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	0a1a      	lsrs	r2, r3, #8
 80052a8:	4613      	mov	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	00da      	lsls	r2, r3, #3
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d118      	bne.n	80052f2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f043 0220 	orr.w	r2, r3, #32
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80052e2:	b662      	cpsie	i
}
 80052e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e0a6      	b.n	8005440 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d1d9      	bne.n	80052b4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800530e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691a      	ldr	r2, [r3, #16]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005342:	b662      	cpsie	i
}
 8005344:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005378:	e04e      	b.n	8005418 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800537a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 fb62 	bl	8005a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e058      	b.n	8005440 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d124      	bne.n	8005418 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d107      	bne.n	80053e6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005402:	3b01      	subs	r3, #1
 8005404:	b29a      	uxth	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540e:	b29b      	uxth	r3, r3
 8005410:	3b01      	subs	r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541c:	2b00      	cmp	r3, #0
 800541e:	f47f ae88 	bne.w	8005132 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2220      	movs	r2, #32
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	e000      	b.n	8005440 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800543e:	2302      	movs	r3, #2
  }
}
 8005440:	4618      	mov	r0, r3
 8005442:	3728      	adds	r7, #40	; 0x28
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	00010004 	.word	0x00010004
 800544c:	20000080 	.word	0x20000080
 8005450:	14f8b589 	.word	0x14f8b589

08005454 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af02      	add	r7, sp, #8
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	607a      	str	r2, [r7, #4]
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	460b      	mov	r3, r1
 8005462:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b08      	cmp	r3, #8
 800546e:	d006      	beq.n	800547e <I2C_MasterRequestWrite+0x2a>
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d003      	beq.n	800547e <I2C_MasterRequestWrite+0x2a>
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800547c:	d108      	bne.n	8005490 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	e00b      	b.n	80054a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	2b12      	cmp	r3, #18
 8005496:	d107      	bne.n	80054a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f91d 	bl	80056f4 <I2C_WaitOnFlagUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00d      	beq.n	80054dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ce:	d103      	bne.n	80054d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e035      	b.n	8005548 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054e4:	d108      	bne.n	80054f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054e6:	897b      	ldrh	r3, [r7, #10]
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	461a      	mov	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054f4:	611a      	str	r2, [r3, #16]
 80054f6:	e01b      	b.n	8005530 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054f8:	897b      	ldrh	r3, [r7, #10]
 80054fa:	11db      	asrs	r3, r3, #7
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	f003 0306 	and.w	r3, r3, #6
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f063 030f 	orn	r3, r3, #15
 8005508:	b2da      	uxtb	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	490e      	ldr	r1, [pc, #56]	; (8005550 <I2C_MasterRequestWrite+0xfc>)
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 f966 	bl	80057e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e010      	b.n	8005548 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005526:	897b      	ldrh	r3, [r7, #10]
 8005528:	b2da      	uxtb	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	4907      	ldr	r1, [pc, #28]	; (8005554 <I2C_MasterRequestWrite+0x100>)
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 f956 	bl	80057e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	00010008 	.word	0x00010008
 8005554:	00010002 	.word	0x00010002

08005558 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	607a      	str	r2, [r7, #4]
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	460b      	mov	r3, r1
 8005566:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800557c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b08      	cmp	r3, #8
 8005582:	d006      	beq.n	8005592 <I2C_MasterRequestRead+0x3a>
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d003      	beq.n	8005592 <I2C_MasterRequestRead+0x3a>
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005590:	d108      	bne.n	80055a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	e00b      	b.n	80055bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a8:	2b11      	cmp	r3, #17
 80055aa:	d107      	bne.n	80055bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 f893 	bl	80056f4 <I2C_WaitOnFlagUntilTimeout>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00d      	beq.n	80055f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e2:	d103      	bne.n	80055ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e079      	b.n	80056e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055f8:	d108      	bne.n	800560c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055fa:	897b      	ldrh	r3, [r7, #10]
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	f043 0301 	orr.w	r3, r3, #1
 8005602:	b2da      	uxtb	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	611a      	str	r2, [r3, #16]
 800560a:	e05f      	b.n	80056cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800560c:	897b      	ldrh	r3, [r7, #10]
 800560e:	11db      	asrs	r3, r3, #7
 8005610:	b2db      	uxtb	r3, r3
 8005612:	f003 0306 	and.w	r3, r3, #6
 8005616:	b2db      	uxtb	r3, r3
 8005618:	f063 030f 	orn	r3, r3, #15
 800561c:	b2da      	uxtb	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	4930      	ldr	r1, [pc, #192]	; (80056ec <I2C_MasterRequestRead+0x194>)
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 f8dc 	bl	80057e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e054      	b.n	80056e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800563a:	897b      	ldrh	r3, [r7, #10]
 800563c:	b2da      	uxtb	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	4929      	ldr	r1, [pc, #164]	; (80056f0 <I2C_MasterRequestRead+0x198>)
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 f8cc 	bl	80057e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e044      	b.n	80056e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800565a:	2300      	movs	r3, #0
 800565c:	613b      	str	r3, [r7, #16]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	613b      	str	r3, [r7, #16]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800567e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 f831 	bl	80056f4 <I2C_WaitOnFlagUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00d      	beq.n	80056b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a6:	d103      	bne.n	80056b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e017      	b.n	80056e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80056b4:	897b      	ldrh	r3, [r7, #10]
 80056b6:	11db      	asrs	r3, r3, #7
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	f003 0306 	and.w	r3, r3, #6
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	f063 030e 	orn	r3, r3, #14
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	4907      	ldr	r1, [pc, #28]	; (80056f0 <I2C_MasterRequestRead+0x198>)
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 f888 	bl	80057e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3718      	adds	r7, #24
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	00010008 	.word	0x00010008
 80056f0:	00010002 	.word	0x00010002

080056f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	603b      	str	r3, [r7, #0]
 8005700:	4613      	mov	r3, r2
 8005702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005704:	e048      	b.n	8005798 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570c:	d044      	beq.n	8005798 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800570e:	f7fd fd21 	bl	8003154 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	429a      	cmp	r2, r3
 800571c:	d302      	bcc.n	8005724 <I2C_WaitOnFlagUntilTimeout+0x30>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d139      	bne.n	8005798 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	0c1b      	lsrs	r3, r3, #16
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b01      	cmp	r3, #1
 800572c:	d10d      	bne.n	800574a <I2C_WaitOnFlagUntilTimeout+0x56>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	43da      	mvns	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4013      	ands	r3, r2
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	bf0c      	ite	eq
 8005740:	2301      	moveq	r3, #1
 8005742:	2300      	movne	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	461a      	mov	r2, r3
 8005748:	e00c      	b.n	8005764 <I2C_WaitOnFlagUntilTimeout+0x70>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	43da      	mvns	r2, r3
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4013      	ands	r3, r2
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	461a      	mov	r2, r3
 8005764:	79fb      	ldrb	r3, [r7, #7]
 8005766:	429a      	cmp	r2, r3
 8005768:	d116      	bne.n	8005798 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	f043 0220 	orr.w	r2, r3, #32
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e023      	b.n	80057e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	0c1b      	lsrs	r3, r3, #16
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d10d      	bne.n	80057be <I2C_WaitOnFlagUntilTimeout+0xca>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	43da      	mvns	r2, r3
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4013      	ands	r3, r2
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	bf0c      	ite	eq
 80057b4:	2301      	moveq	r3, #1
 80057b6:	2300      	movne	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	461a      	mov	r2, r3
 80057bc:	e00c      	b.n	80057d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	43da      	mvns	r2, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	4013      	ands	r3, r2
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	bf0c      	ite	eq
 80057d0:	2301      	moveq	r3, #1
 80057d2:	2300      	movne	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d093      	beq.n	8005706 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057f6:	e071      	b.n	80058dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005806:	d123      	bne.n	8005850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005816:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005820:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	f043 0204 	orr.w	r2, r3, #4
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e067      	b.n	8005920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005856:	d041      	beq.n	80058dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005858:	f7fd fc7c 	bl	8003154 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	429a      	cmp	r2, r3
 8005866:	d302      	bcc.n	800586e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d136      	bne.n	80058dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	0c1b      	lsrs	r3, r3, #16
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b01      	cmp	r3, #1
 8005876:	d10c      	bne.n	8005892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	43da      	mvns	r2, r3
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	4013      	ands	r3, r2
 8005884:	b29b      	uxth	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	bf14      	ite	ne
 800588a:	2301      	movne	r3, #1
 800588c:	2300      	moveq	r3, #0
 800588e:	b2db      	uxtb	r3, r3
 8005890:	e00b      	b.n	80058aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	43da      	mvns	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	4013      	ands	r3, r2
 800589e:	b29b      	uxth	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	bf14      	ite	ne
 80058a4:	2301      	movne	r3, #1
 80058a6:	2300      	moveq	r3, #0
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d016      	beq.n	80058dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c8:	f043 0220 	orr.w	r2, r3, #32
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e021      	b.n	8005920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	0c1b      	lsrs	r3, r3, #16
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d10c      	bne.n	8005900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	43da      	mvns	r2, r3
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	4013      	ands	r3, r2
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	bf14      	ite	ne
 80058f8:	2301      	movne	r3, #1
 80058fa:	2300      	moveq	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	e00b      	b.n	8005918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	43da      	mvns	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4013      	ands	r3, r2
 800590c:	b29b      	uxth	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	bf14      	ite	ne
 8005912:	2301      	movne	r3, #1
 8005914:	2300      	moveq	r3, #0
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	f47f af6d 	bne.w	80057f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005934:	e034      	b.n	80059a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f8e3 	bl	8005b02 <I2C_IsAcknowledgeFailed>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e034      	b.n	80059b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594c:	d028      	beq.n	80059a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800594e:	f7fd fc01 	bl	8003154 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	429a      	cmp	r2, r3
 800595c:	d302      	bcc.n	8005964 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d11d      	bne.n	80059a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596e:	2b80      	cmp	r3, #128	; 0x80
 8005970:	d016      	beq.n	80059a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	f043 0220 	orr.w	r2, r3, #32
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e007      	b.n	80059b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059aa:	2b80      	cmp	r3, #128	; 0x80
 80059ac:	d1c3      	bne.n	8005936 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059c4:	e034      	b.n	8005a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 f89b 	bl	8005b02 <I2C_IsAcknowledgeFailed>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e034      	b.n	8005a40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059dc:	d028      	beq.n	8005a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059de:	f7fd fbb9 	bl	8003154 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d302      	bcc.n	80059f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d11d      	bne.n	8005a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	f003 0304 	and.w	r3, r3, #4
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d016      	beq.n	8005a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1c:	f043 0220 	orr.w	r2, r3, #32
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e007      	b.n	8005a40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d1c3      	bne.n	80059c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a54:	e049      	b.n	8005aea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b10      	cmp	r3, #16
 8005a62:	d119      	bne.n	8005a98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0210 	mvn.w	r2, #16
 8005a6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e030      	b.n	8005afa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a98:	f7fd fb5c 	bl	8003154 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d302      	bcc.n	8005aae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d11d      	bne.n	8005aea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab8:	2b40      	cmp	r3, #64	; 0x40
 8005aba:	d016      	beq.n	8005aea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	f043 0220 	orr.w	r2, r3, #32
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e007      	b.n	8005afa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af4:	2b40      	cmp	r3, #64	; 0x40
 8005af6:	d1ae      	bne.n	8005a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b18:	d11b      	bne.n	8005b52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	f043 0204 	orr.w	r2, r3, #4
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr

08005b5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b60:	b08b      	sub	sp, #44	; 0x2c
 8005b62:	af06      	add	r7, sp, #24
 8005b64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0f1      	b.n	8005d54 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d106      	bne.n	8005b8a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f00e f8f5 	bl	8013d74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2203      	movs	r2, #3
 8005b8e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f005 ff66 	bl	800ba68 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	603b      	str	r3, [r7, #0]
 8005ba2:	687e      	ldr	r6, [r7, #4]
 8005ba4:	466d      	mov	r5, sp
 8005ba6:	f106 0410 	add.w	r4, r6, #16
 8005baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	602b      	str	r3, [r5, #0]
 8005bb2:	1d33      	adds	r3, r6, #4
 8005bb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bb6:	6838      	ldr	r0, [r7, #0]
 8005bb8:	f005 ff30 	bl	800ba1c <USB_CoreInit>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d005      	beq.n	8005bce <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e0c2      	b.n	8005d54 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f005 ff61 	bl	800ba9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bda:	2300      	movs	r3, #0
 8005bdc:	73fb      	strb	r3, [r7, #15]
 8005bde:	e040      	b.n	8005c62 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	4613      	mov	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	440b      	add	r3, r1
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	440b      	add	r3, r1
 8005c06:	7bfa      	ldrb	r2, [r7, #15]
 8005c08:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
 8005c0c:	6879      	ldr	r1, [r7, #4]
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	440b      	add	r3, r1
 8005c1a:	3303      	adds	r3, #3
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c20:	7bfa      	ldrb	r2, [r7, #15]
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	4613      	mov	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	440b      	add	r3, r1
 8005c2e:	3338      	adds	r3, #56	; 0x38
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c34:	7bfa      	ldrb	r2, [r7, #15]
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	440b      	add	r3, r1
 8005c42:	333c      	adds	r3, #60	; 0x3c
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c48:	7bfa      	ldrb	r2, [r7, #15]
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	440b      	add	r3, r1
 8005c56:	3340      	adds	r3, #64	; 0x40
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	73fb      	strb	r3, [r7, #15]
 8005c62:	7bfa      	ldrb	r2, [r7, #15]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d3b9      	bcc.n	8005be0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	73fb      	strb	r3, [r7, #15]
 8005c70:	e044      	b.n	8005cfc <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c72:	7bfa      	ldrb	r2, [r7, #15]
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	4613      	mov	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	440b      	add	r3, r1
 8005c80:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c88:	7bfa      	ldrb	r2, [r7, #15]
 8005c8a:	6879      	ldr	r1, [r7, #4]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	440b      	add	r3, r1
 8005c96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c9a:	7bfa      	ldrb	r2, [r7, #15]
 8005c9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c9e:	7bfa      	ldrb	r2, [r7, #15]
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	440b      	add	r3, r1
 8005cac:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005cb4:	7bfa      	ldrb	r2, [r7, #15]
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	440b      	add	r3, r1
 8005cc2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005cca:	7bfa      	ldrb	r2, [r7, #15]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	440b      	add	r3, r1
 8005cd8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005cdc:	2200      	movs	r2, #0
 8005cde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ce0:	7bfa      	ldrb	r2, [r7, #15]
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	440b      	add	r3, r1
 8005cee:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	73fb      	strb	r3, [r7, #15]
 8005cfc:	7bfa      	ldrb	r2, [r7, #15]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d3b5      	bcc.n	8005c72 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	687e      	ldr	r6, [r7, #4]
 8005d0e:	466d      	mov	r5, sp
 8005d10:	f106 0410 	add.w	r4, r6, #16
 8005d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	602b      	str	r3, [r5, #0]
 8005d1c:	1d33      	adds	r3, r6, #4
 8005d1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d20:	6838      	ldr	r0, [r7, #0]
 8005d22:	f005 fec7 	bl	800bab4 <USB_DevInit>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d005      	beq.n	8005d38 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e00d      	b.n	8005d54 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f008 f948 	bl	800dfe2 <USB_DevDisconnect>

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d5c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_PCD_Start+0x16>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e016      	b.n	8005da0 <HAL_PCD_Start+0x44>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f005 fe5c 	bl	800ba3c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005d84:	2101      	movs	r1, #1
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f00e fa4b 	bl	8014222 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f008 f91c 	bl	800dfce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f008 f91e 	bl	800dff6 <USB_ReadInterrupts>
 8005dba:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fb04 	bl	80063d4 <PCD_EP_ISR_Handler>

    return;
 8005dcc:	e119      	b.n	8006002 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d013      	beq.n	8005e00 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dea:	b292      	uxth	r2, r2
 8005dec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f00e f83a 	bl	8013e6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005df6:	2100      	movs	r1, #0
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f905 	bl	8006008 <HAL_PCD_SetAddress>

    return;
 8005dfe:	e100      	b.n	8006002 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00c      	beq.n	8005e24 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e1c:	b292      	uxth	r2, r2
 8005e1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005e22:	e0ee      	b.n	8006002 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00c      	beq.n	8005e48 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e40:	b292      	uxth	r2, r2
 8005e42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005e46:	e0dc      	b.n	8006002 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d027      	beq.n	8005ea2 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0204 	bic.w	r2, r2, #4
 8005e64:	b292      	uxth	r2, r2
 8005e66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0208 	bic.w	r2, r2, #8
 8005e7c:	b292      	uxth	r2, r2
 8005e7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f00e f82a 	bl	8013edc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e9a:	b292      	uxth	r2, r2
 8005e9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005ea0:	e0af      	b.n	8006002 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 8083 	beq.w	8005fb4 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8005eae:	2300      	movs	r3, #0
 8005eb0:	77fb      	strb	r3, [r7, #31]
 8005eb2:	e010      	b.n	8005ed6 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	7ffb      	ldrb	r3, [r7, #31]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	441a      	add	r2, r3
 8005ec0:	7ffb      	ldrb	r3, [r7, #31]
 8005ec2:	8812      	ldrh	r2, [r2, #0]
 8005ec4:	b292      	uxth	r2, r2
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	3320      	adds	r3, #32
 8005eca:	443b      	add	r3, r7
 8005ecc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8005ed0:	7ffb      	ldrb	r3, [r7, #31]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	77fb      	strb	r3, [r7, #31]
 8005ed6:	7ffb      	ldrb	r3, [r7, #31]
 8005ed8:	2b07      	cmp	r3, #7
 8005eda:	d9eb      	bls.n	8005eb4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0201 	orr.w	r2, r2, #1
 8005eee:	b292      	uxth	r2, r2
 8005ef0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0201 	bic.w	r2, r2, #1
 8005f06:	b292      	uxth	r2, r2
 8005f08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005f0c:	bf00      	nop
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0f6      	beq.n	8005f0e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f32:	b292      	uxth	r2, r2
 8005f34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005f38:	2300      	movs	r3, #0
 8005f3a:	77fb      	strb	r3, [r7, #31]
 8005f3c:	e00f      	b.n	8005f5e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005f3e:	7ffb      	ldrb	r3, [r7, #31]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	4611      	mov	r1, r2
 8005f46:	7ffa      	ldrb	r2, [r7, #31]
 8005f48:	0092      	lsls	r2, r2, #2
 8005f4a:	440a      	add	r2, r1
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	3320      	adds	r3, #32
 8005f50:	443b      	add	r3, r7
 8005f52:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005f56:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005f58:	7ffb      	ldrb	r3, [r7, #31]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	77fb      	strb	r3, [r7, #31]
 8005f5e:	7ffb      	ldrb	r3, [r7, #31]
 8005f60:	2b07      	cmp	r3, #7
 8005f62:	d9ec      	bls.n	8005f3e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0208 	orr.w	r2, r2, #8
 8005f76:	b292      	uxth	r2, r2
 8005f78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f8e:	b292      	uxth	r2, r2
 8005f90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0204 	orr.w	r2, r2, #4
 8005fa6:	b292      	uxth	r2, r2
 8005fa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f00d ff7b 	bl	8013ea8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005fb2:	e026      	b.n	8006002 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00f      	beq.n	8005fde <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005fd0:	b292      	uxth	r2, r2
 8005fd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f00d ff39 	bl	8013e4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005fdc:	e011      	b.n	8006002 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00c      	beq.n	8006002 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ffa:	b292      	uxth	r2, r2
 8005ffc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006000:	bf00      	nop
  }
}
 8006002:	3720      	adds	r7, #32
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	460b      	mov	r3, r1
 8006012:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_PCD_SetAddress+0x1a>
 800601e:	2302      	movs	r3, #2
 8006020:	e013      	b.n	800604a <HAL_PCD_SetAddress+0x42>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	78fa      	ldrb	r2, [r7, #3]
 800602e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	78fa      	ldrb	r2, [r7, #3]
 8006038:	4611      	mov	r1, r2
 800603a:	4618      	mov	r0, r3
 800603c:	f007 ffb4 	bl	800dfa8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	4608      	mov	r0, r1
 800605c:	4611      	mov	r1, r2
 800605e:	461a      	mov	r2, r3
 8006060:	4603      	mov	r3, r0
 8006062:	70fb      	strb	r3, [r7, #3]
 8006064:	460b      	mov	r3, r1
 8006066:	803b      	strh	r3, [r7, #0]
 8006068:	4613      	mov	r3, r2
 800606a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800606c:	2300      	movs	r3, #0
 800606e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006074:	2b00      	cmp	r3, #0
 8006076:	da0e      	bge.n	8006096 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	4413      	add	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	705a      	strb	r2, [r3, #1]
 8006094:	e00e      	b.n	80060b4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006096:	78fb      	ldrb	r3, [r7, #3]
 8006098:	f003 0207 	and.w	r2, r3, #7
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	4413      	add	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80060c0:	883a      	ldrh	r2, [r7, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	78ba      	ldrb	r2, [r7, #2]
 80060ca:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80060cc:	78bb      	ldrb	r3, [r7, #2]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d102      	bne.n	80060d8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d101      	bne.n	80060e6 <HAL_PCD_EP_Open+0x94>
 80060e2:	2302      	movs	r3, #2
 80060e4:	e00e      	b.n	8006104 <HAL_PCD_EP_Open+0xb2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68f9      	ldr	r1, [r7, #12]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f005 fcfd 	bl	800baf4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8006102:	7afb      	ldrb	r3, [r7, #11]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	460b      	mov	r3, r1
 8006116:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006118:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800611c:	2b00      	cmp	r3, #0
 800611e:	da0e      	bge.n	800613e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	4613      	mov	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	4413      	add	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2201      	movs	r2, #1
 800613a:	705a      	strb	r2, [r3, #1]
 800613c:	e00e      	b.n	800615c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800613e:	78fb      	ldrb	r3, [r7, #3]
 8006140:	f003 0207 	and.w	r2, r3, #7
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	4413      	add	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	b2da      	uxtb	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800616e:	2b01      	cmp	r3, #1
 8006170:	d101      	bne.n	8006176 <HAL_PCD_EP_Close+0x6a>
 8006172:	2302      	movs	r3, #2
 8006174:	e00e      	b.n	8006194 <HAL_PCD_EP_Close+0x88>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68f9      	ldr	r1, [r7, #12]
 8006184:	4618      	mov	r0, r3
 8006186:	f006 f875 	bl	800c274 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	607a      	str	r2, [r7, #4]
 80061a6:	603b      	str	r3, [r7, #0]
 80061a8:	460b      	mov	r3, r1
 80061aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061ac:	7afb      	ldrb	r3, [r7, #11]
 80061ae:	f003 0207 	and.w	r2, r3, #7
 80061b2:	4613      	mov	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	4413      	add	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	2200      	movs	r2, #0
 80061d4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2200      	movs	r2, #0
 80061da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061dc:	7afb      	ldrb	r3, [r7, #11]
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6979      	ldr	r1, [r7, #20]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f006 fa2c 	bl	800c64c <USB_EPStartXfer>

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b086      	sub	sp, #24
 8006202:	af00      	add	r7, sp, #0
 8006204:	60f8      	str	r0, [r7, #12]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
 800620a:	460b      	mov	r3, r1
 800620c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800620e:	7afb      	ldrb	r3, [r7, #11]
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	4613      	mov	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4413      	add	r3, r2
 8006222:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2200      	movs	r2, #0
 8006242:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	2201      	movs	r2, #1
 8006248:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800624a:	7afb      	ldrb	r3, [r7, #11]
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	b2da      	uxtb	r2, r3
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6979      	ldr	r1, [r7, #20]
 800625c:	4618      	mov	r0, r3
 800625e:	f006 f9f5 	bl	800c64c <USB_EPStartXfer>

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006278:	78fb      	ldrb	r3, [r7, #3]
 800627a:	f003 0207 	and.w	r2, r3, #7
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	429a      	cmp	r2, r3
 8006284:	d901      	bls.n	800628a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e04c      	b.n	8006324 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800628a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800628e:	2b00      	cmp	r3, #0
 8006290:	da0e      	bge.n	80062b0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	f003 0307 	and.w	r3, r3, #7
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	4613      	mov	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	4413      	add	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2201      	movs	r2, #1
 80062ac:	705a      	strb	r2, [r3, #1]
 80062ae:	e00c      	b.n	80062ca <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80062b0:	78fa      	ldrb	r2, [r7, #3]
 80062b2:	4613      	mov	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	4413      	add	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d101      	bne.n	80062ea <HAL_PCD_EP_SetStall+0x7e>
 80062e6:	2302      	movs	r3, #2
 80062e8:	e01c      	b.n	8006324 <HAL_PCD_EP_SetStall+0xb8>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68f9      	ldr	r1, [r7, #12]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f007 fd58 	bl	800ddae <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80062fe:	78fb      	ldrb	r3, [r7, #3]
 8006300:	f003 0307 	and.w	r3, r3, #7
 8006304:	2b00      	cmp	r3, #0
 8006306:	d108      	bne.n	800631a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006312:	4619      	mov	r1, r3
 8006314:	4610      	mov	r0, r2
 8006316:	f007 fe7d 	bl	800e014 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	460b      	mov	r3, r1
 8006336:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	f003 020f 	and.w	r2, r3, #15
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	429a      	cmp	r2, r3
 8006344:	d901      	bls.n	800634a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e040      	b.n	80063cc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800634a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800634e:	2b00      	cmp	r3, #0
 8006350:	da0e      	bge.n	8006370 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	f003 0307 	and.w	r3, r3, #7
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	4613      	mov	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	4413      	add	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2201      	movs	r2, #1
 800636c:	705a      	strb	r2, [r3, #1]
 800636e:	e00e      	b.n	800638e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006370:	78fb      	ldrb	r3, [r7, #3]
 8006372:	f003 0207 	and.w	r2, r3, #7
 8006376:	4613      	mov	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	4413      	add	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	b2da      	uxtb	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d101      	bne.n	80063ae <HAL_PCD_EP_ClrStall+0x82>
 80063aa:	2302      	movs	r3, #2
 80063ac:	e00e      	b.n	80063cc <HAL_PCD_EP_ClrStall+0xa0>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68f9      	ldr	r1, [r7, #12]
 80063bc:	4618      	mov	r0, r3
 80063be:	f007 fd46 	bl	800de4e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b096      	sub	sp, #88	; 0x58
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80063dc:	e3bf      	b.n	8006b5e <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80063ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	f003 030f 	and.w	r3, r3, #15
 80063f4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80063f8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f040 8179 	bne.w	80066f4 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006402:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006406:	f003 0310 	and.w	r3, r3, #16
 800640a:	2b00      	cmp	r3, #0
 800640c:	d152      	bne.n	80064b4 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	b29b      	uxth	r3, r3
 8006416:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800641a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641e:	81fb      	strh	r3, [r7, #14]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	89fb      	ldrh	r3, [r7, #14]
 8006426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800642a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800642e:	b29b      	uxth	r3, r3
 8006430:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	3328      	adds	r3, #40	; 0x28
 8006436:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006440:	b29b      	uxth	r3, r3
 8006442:	461a      	mov	r2, r3
 8006444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	4413      	add	r3, r2
 800644c:	3302      	adds	r3, #2
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6812      	ldr	r2, [r2, #0]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006462:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006466:	695a      	ldr	r2, [r3, #20]
 8006468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	441a      	add	r2, r3
 800646e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006470:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006472:	2100      	movs	r1, #0
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f00d fcd0 	bl	8013e1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 836b 	beq.w	8006b5e <PCD_EP_ISR_Handler+0x78a>
 8006488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	f040 8366 	bne.w	8006b5e <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006498:	b2db      	uxtb	r3, r3
 800649a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	b292      	uxth	r2, r2
 80064a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80064b2:	e354      	b.n	8006b5e <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80064ba:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80064c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80064ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d034      	beq.n	800653c <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064da:	b29b      	uxth	r3, r3
 80064dc:	461a      	mov	r2, r3
 80064de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	4413      	add	r3, r2
 80064e6:	3306      	adds	r3, #6
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	6812      	ldr	r2, [r2, #0]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80064fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064fc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6818      	ldr	r0, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8006508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800650a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800650c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800650e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006510:	b29b      	uxth	r3, r3
 8006512:	f007 fdcf 	bl	800e0b4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	b29a      	uxth	r2, r3
 800651e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006522:	4013      	ands	r3, r2
 8006524:	823b      	strh	r3, [r7, #16]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	8a3a      	ldrh	r2, [r7, #16]
 800652c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006530:	b292      	uxth	r2, r2
 8006532:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f00d fc43 	bl	8013dc0 <HAL_PCD_SetupStageCallback>
 800653a:	e310      	b.n	8006b5e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800653c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006540:	2b00      	cmp	r3, #0
 8006542:	f280 830c 	bge.w	8006b5e <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	b29a      	uxth	r2, r3
 800654e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006552:	4013      	ands	r3, r2
 8006554:	83fb      	strh	r3, [r7, #30]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	8bfa      	ldrh	r2, [r7, #30]
 800655c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006560:	b292      	uxth	r2, r2
 8006562:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800656c:	b29b      	uxth	r3, r3
 800656e:	461a      	mov	r2, r3
 8006570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	4413      	add	r3, r2
 8006578:	3306      	adds	r3, #6
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800658c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800658e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006592:	69db      	ldr	r3, [r3, #28]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d019      	beq.n	80065cc <PCD_EP_ISR_Handler+0x1f8>
 8006598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d015      	beq.n	80065cc <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6818      	ldr	r0, [r3, #0]
 80065a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065a6:	6959      	ldr	r1, [r3, #20]
 80065a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065aa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80065ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ae:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	f007 fd7f 	bl	800e0b4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80065b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065b8:	695a      	ldr	r2, [r3, #20]
 80065ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	441a      	add	r2, r3
 80065c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065c2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80065c4:	2100      	movs	r1, #0
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f00d fc0c 	bl	8013de4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80065d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80065da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f040 82bd 	bne.w	8006b5e <PCD_EP_ISR_Handler+0x78a>
 80065e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80065e8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80065ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065f0:	f000 82b5 	beq.w	8006b5e <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	61bb      	str	r3, [r7, #24]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006602:	b29b      	uxth	r3, r3
 8006604:	461a      	mov	r2, r3
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	4413      	add	r3, r2
 800660a:	61bb      	str	r3, [r7, #24]
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	881b      	ldrh	r3, [r3, #0]
 8006618:	b29b      	uxth	r3, r3
 800661a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800661e:	b29a      	uxth	r2, r3
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	801a      	strh	r2, [r3, #0]
 8006624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	2b3e      	cmp	r3, #62	; 0x3e
 800662a:	d91d      	bls.n	8006668 <PCD_EP_ISR_Handler+0x294>
 800662c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	095b      	lsrs	r3, r3, #5
 8006632:	647b      	str	r3, [r7, #68]	; 0x44
 8006634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	f003 031f 	and.w	r3, r3, #31
 800663c:	2b00      	cmp	r3, #0
 800663e:	d102      	bne.n	8006646 <PCD_EP_ISR_Handler+0x272>
 8006640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006642:	3b01      	subs	r3, #1
 8006644:	647b      	str	r3, [r7, #68]	; 0x44
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	b29a      	uxth	r2, r3
 800664c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800664e:	b29b      	uxth	r3, r3
 8006650:	029b      	lsls	r3, r3, #10
 8006652:	b29b      	uxth	r3, r3
 8006654:	4313      	orrs	r3, r2
 8006656:	b29b      	uxth	r3, r3
 8006658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800665c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006660:	b29a      	uxth	r2, r3
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	801a      	strh	r2, [r3, #0]
 8006666:	e026      	b.n	80066b6 <PCD_EP_ISR_Handler+0x2e2>
 8006668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10a      	bne.n	8006686 <PCD_EP_ISR_Handler+0x2b2>
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	b29b      	uxth	r3, r3
 8006676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800667a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800667e:	b29a      	uxth	r2, r3
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	801a      	strh	r2, [r3, #0]
 8006684:	e017      	b.n	80066b6 <PCD_EP_ISR_Handler+0x2e2>
 8006686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	085b      	lsrs	r3, r3, #1
 800668c:	647b      	str	r3, [r7, #68]	; 0x44
 800668e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <PCD_EP_ISR_Handler+0x2cc>
 800669a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800669c:	3301      	adds	r3, #1
 800669e:	647b      	str	r3, [r7, #68]	; 0x44
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	029b      	lsls	r3, r3, #10
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	4313      	orrs	r3, r2
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c6:	827b      	strh	r3, [r7, #18]
 80066c8:	8a7b      	ldrh	r3, [r7, #18]
 80066ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066ce:	827b      	strh	r3, [r7, #18]
 80066d0:	8a7b      	ldrh	r3, [r7, #18]
 80066d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066d6:	827b      	strh	r3, [r7, #18]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	8a7b      	ldrh	r3, [r7, #18]
 80066de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	8013      	strh	r3, [r2, #0]
 80066f2:	e234      	b.n	8006b5e <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	461a      	mov	r2, r3
 80066fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006708:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800670c:	2b00      	cmp	r3, #0
 800670e:	f280 80fc 	bge.w	800690a <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	b29a      	uxth	r2, r3
 8006724:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006728:	4013      	ands	r3, r2
 800672a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006740:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006744:	b292      	uxth	r2, r2
 8006746:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006748:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800674c:	4613      	mov	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	4413      	add	r3, r2
 800675c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800675e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006760:	7b1b      	ldrb	r3, [r3, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d125      	bne.n	80067b2 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800676e:	b29b      	uxth	r3, r3
 8006770:	461a      	mov	r2, r3
 8006772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	4413      	add	r3, r2
 800677a:	3306      	adds	r3, #6
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6812      	ldr	r2, [r2, #0]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800678e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8006792:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 8092 	beq.w	80068c0 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6818      	ldr	r0, [r3, #0]
 80067a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067a2:	6959      	ldr	r1, [r3, #20]
 80067a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067a6:	88da      	ldrh	r2, [r3, #6]
 80067a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80067ac:	f007 fc82 	bl	800e0b4 <USB_ReadPMA>
 80067b0:	e086      	b.n	80068c0 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80067b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067b4:	78db      	ldrb	r3, [r3, #3]
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d10a      	bne.n	80067d0 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80067ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80067be:	461a      	mov	r2, r3
 80067c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f9d9 	bl	8006b7a <HAL_PCD_EP_DB_Receive>
 80067c8:	4603      	mov	r3, r0
 80067ca:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80067ce:	e077      	b.n	80068c0 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	461a      	mov	r2, r3
 80067d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ea:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	441a      	add	r2, r3
 80067fc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800680c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006810:	b29b      	uxth	r3, r3
 8006812:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	461a      	mov	r2, r3
 800681a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	b29b      	uxth	r3, r3
 8006826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d024      	beq.n	8006878 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006836:	b29b      	uxth	r3, r3
 8006838:	461a      	mov	r2, r3
 800683a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	4413      	add	r3, r2
 8006842:	3302      	adds	r3, #2
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	6812      	ldr	r2, [r2, #0]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006856:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800685a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800685e:	2b00      	cmp	r3, #0
 8006860:	d02e      	beq.n	80068c0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6818      	ldr	r0, [r3, #0]
 8006866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006868:	6959      	ldr	r1, [r3, #20]
 800686a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800686c:	891a      	ldrh	r2, [r3, #8]
 800686e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006872:	f007 fc1f 	bl	800e0b4 <USB_ReadPMA>
 8006876:	e023      	b.n	80068c0 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006880:	b29b      	uxth	r3, r3
 8006882:	461a      	mov	r2, r3
 8006884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	4413      	add	r3, r2
 800688c:	3306      	adds	r3, #6
 800688e:	005b      	lsls	r3, r3, #1
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6812      	ldr	r2, [r2, #0]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068a0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80068a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d009      	beq.n	80068c0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6818      	ldr	r0, [r3, #0]
 80068b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068b2:	6959      	ldr	r1, [r3, #20]
 80068b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068b6:	895a      	ldrh	r2, [r3, #10]
 80068b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80068bc:	f007 fbfa 	bl	800e0b4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80068c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068c2:	69da      	ldr	r2, [r3, #28]
 80068c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80068c8:	441a      	add	r2, r3
 80068ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80068ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068d0:	695a      	ldr	r2, [r3, #20]
 80068d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80068d6:	441a      	add	r2, r3
 80068d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068da:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80068dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <PCD_EP_ISR_Handler+0x51c>
 80068e4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80068e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d206      	bcs.n	80068fe <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80068f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	4619      	mov	r1, r3
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f00d fa74 	bl	8013de4 <HAL_PCD_DataOutStageCallback>
 80068fc:	e005      	b.n	800690a <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006904:	4618      	mov	r0, r3
 8006906:	f005 fea1 	bl	800c64c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800690a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800690e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 8123 	beq.w	8006b5e <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8006918:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	4613      	mov	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	4413      	add	r3, r2
 800692a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006946:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	441a      	add	r2, r3
 8006958:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800695c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006964:	b29b      	uxth	r3, r3
 8006966:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800696a:	78db      	ldrb	r3, [r3, #3]
 800696c:	2b01      	cmp	r3, #1
 800696e:	f040 80a2 	bne.w	8006ab6 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8006972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006974:	2200      	movs	r2, #0
 8006976:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800697a:	7b1b      	ldrb	r3, [r3, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 8093 	beq.w	8006aa8 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006982:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698a:	2b00      	cmp	r3, #0
 800698c:	d046      	beq.n	8006a1c <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800698e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006990:	785b      	ldrb	r3, [r3, #1]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d126      	bne.n	80069e4 <PCD_EP_ISR_Handler+0x610>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	461a      	mov	r2, r3
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	4413      	add	r3, r2
 80069ac:	627b      	str	r3, [r7, #36]	; 0x24
 80069ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	011a      	lsls	r2, r3, #4
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	4413      	add	r3, r2
 80069b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069bc:	623b      	str	r3, [r7, #32]
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	801a      	strh	r2, [r3, #0]
 80069ce:	6a3b      	ldr	r3, [r7, #32]
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069dc:	b29a      	uxth	r2, r3
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	801a      	strh	r2, [r3, #0]
 80069e2:	e061      	b.n	8006aa8 <PCD_EP_ISR_Handler+0x6d4>
 80069e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069e6:	785b      	ldrb	r3, [r3, #1]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d15d      	bne.n	8006aa8 <PCD_EP_ISR_Handler+0x6d4>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	461a      	mov	r2, r3
 80069fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a00:	4413      	add	r3, r2
 8006a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	011a      	lsls	r2, r3, #4
 8006a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a16:	2200      	movs	r2, #0
 8006a18:	801a      	strh	r2, [r3, #0]
 8006a1a:	e045      	b.n	8006aa8 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a24:	785b      	ldrb	r3, [r3, #1]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d126      	bne.n	8006a78 <PCD_EP_ISR_Handler+0x6a4>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3e:	4413      	add	r3, r2
 8006a40:	637b      	str	r3, [r7, #52]	; 0x34
 8006a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	011a      	lsls	r2, r3, #4
 8006a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a50:	633b      	str	r3, [r7, #48]	; 0x30
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	801a      	strh	r2, [r3, #0]
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	801a      	strh	r2, [r3, #0]
 8006a76:	e017      	b.n	8006aa8 <PCD_EP_ISR_Handler+0x6d4>
 8006a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a7a:	785b      	ldrb	r3, [r3, #1]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d113      	bne.n	8006aa8 <PCD_EP_ISR_Handler+0x6d4>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a8e:	4413      	add	r3, r2
 8006a90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	011a      	lsls	r2, r3, #4
 8006a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006aa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f00d f9b3 	bl	8013e1a <HAL_PCD_DataInStageCallback>
 8006ab4:	e053      	b.n	8006b5e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006ab6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d146      	bne.n	8006b50 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	461a      	mov	r2, r3
 8006ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	00db      	lsls	r3, r3, #3
 8006ad4:	4413      	add	r3, r2
 8006ad6:	3302      	adds	r3, #2
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	6812      	ldr	r2, [r2, #0]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006aea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006af0:	699a      	ldr	r2, [r3, #24]
 8006af2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d907      	bls.n	8006b0a <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8006afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b02:	1ad2      	subs	r2, r2, r3
 8006b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b06:	619a      	str	r2, [r3, #24]
 8006b08:	e002      	b.n	8006b10 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8006b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d106      	bne.n	8006b26 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f00d f97b 	bl	8013e1a <HAL_PCD_DataInStageCallback>
 8006b24:	e01b      	b.n	8006b5e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b28:	695a      	ldr	r2, [r3, #20]
 8006b2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b2e:	441a      	add	r2, r3
 8006b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b32:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b36:	69da      	ldr	r2, [r3, #28]
 8006b38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b3c:	441a      	add	r2, r3
 8006b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b40:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f005 fd7f 	bl	800c64c <USB_EPStartXfer>
 8006b4e:	e006      	b.n	8006b5e <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006b50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006b54:	461a      	mov	r2, r3
 8006b56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f91b 	bl	8006d94 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	b21b      	sxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f6ff ac37 	blt.w	80063de <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3758      	adds	r7, #88	; 0x58
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b088      	sub	sp, #32
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	4613      	mov	r3, r2
 8006b86:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006b88:	88fb      	ldrh	r3, [r7, #6]
 8006b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d07e      	beq.n	8006c90 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	00db      	lsls	r3, r3, #3
 8006ba4:	4413      	add	r3, r2
 8006ba6:	3302      	adds	r3, #2
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	6812      	ldr	r2, [r2, #0]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	699a      	ldr	r2, [r3, #24]
 8006bc0:	8b7b      	ldrh	r3, [r7, #26]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d306      	bcc.n	8006bd4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	699a      	ldr	r2, [r3, #24]
 8006bca:	8b7b      	ldrh	r3, [r7, #26]
 8006bcc:	1ad2      	subs	r2, r2, r3
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	619a      	str	r2, [r3, #24]
 8006bd2:	e002      	b.n	8006bda <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d123      	bne.n	8006c2a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	461a      	mov	r2, r3
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	881b      	ldrh	r3, [r3, #0]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfc:	833b      	strh	r3, [r7, #24]
 8006bfe:	8b3b      	ldrh	r3, [r7, #24]
 8006c00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c04:	833b      	strh	r3, [r7, #24]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	441a      	add	r2, r3
 8006c14:	8b3b      	ldrh	r3, [r7, #24]
 8006c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006c2a:	88fb      	ldrh	r3, [r7, #6]
 8006c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d01f      	beq.n	8006c74 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4e:	82fb      	strh	r3, [r7, #22]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	461a      	mov	r2, r3
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	441a      	add	r2, r3
 8006c5e:	8afb      	ldrh	r3, [r7, #22]
 8006c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006c74:	8b7b      	ldrh	r3, [r7, #26]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 8087 	beq.w	8006d8a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6818      	ldr	r0, [r3, #0]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	6959      	ldr	r1, [r3, #20]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	891a      	ldrh	r2, [r3, #8]
 8006c88:	8b7b      	ldrh	r3, [r7, #26]
 8006c8a:	f007 fa13 	bl	800e0b4 <USB_ReadPMA>
 8006c8e:	e07c      	b.n	8006d8a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	00db      	lsls	r3, r3, #3
 8006ca2:	4413      	add	r3, r2
 8006ca4:	3306      	adds	r3, #6
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	6812      	ldr	r2, [r2, #0]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cb8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	699a      	ldr	r2, [r3, #24]
 8006cbe:	8b7b      	ldrh	r3, [r7, #26]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d306      	bcc.n	8006cd2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	699a      	ldr	r2, [r3, #24]
 8006cc8:	8b7b      	ldrh	r3, [r7, #26]
 8006cca:	1ad2      	subs	r2, r2, r3
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	619a      	str	r2, [r3, #24]
 8006cd0:	e002      	b.n	8006cd8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d123      	bne.n	8006d28 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfa:	83fb      	strh	r3, [r7, #30]
 8006cfc:	8bfb      	ldrh	r3, [r7, #30]
 8006cfe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d02:	83fb      	strh	r3, [r7, #30]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	441a      	add	r2, r3
 8006d12:	8bfb      	ldrh	r3, [r7, #30]
 8006d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006d28:	88fb      	ldrh	r3, [r7, #6]
 8006d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d11f      	bne.n	8006d72 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	461a      	mov	r2, r3
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4c:	83bb      	strh	r3, [r7, #28]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	441a      	add	r2, r3
 8006d5c:	8bbb      	ldrh	r3, [r7, #28]
 8006d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006d72:	8b7b      	ldrh	r3, [r7, #26]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d008      	beq.n	8006d8a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6818      	ldr	r0, [r3, #0]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	6959      	ldr	r1, [r3, #20]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	895a      	ldrh	r2, [r3, #10]
 8006d84:	8b7b      	ldrh	r3, [r7, #26]
 8006d86:	f007 f995 	bl	800e0b4 <USB_ReadPMA>
    }
  }

  return count;
 8006d8a:	8b7b      	ldrh	r3, [r7, #26]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3720      	adds	r7, #32
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b0a4      	sub	sp, #144	; 0x90
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006da2:	88fb      	ldrh	r3, [r7, #6]
 8006da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 81dd 	beq.w	8007168 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	461a      	mov	r2, r3
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	4413      	add	r3, r2
 8006dc2:	3302      	adds	r3, #2
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	6812      	ldr	r2, [r2, #0]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dd0:	881b      	ldrh	r3, [r3, #0]
 8006dd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dd6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	699a      	ldr	r2, [r3, #24]
 8006dde:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d907      	bls.n	8006df6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	699a      	ldr	r2, [r3, #24]
 8006dea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006dee:	1ad2      	subs	r2, r2, r3
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	619a      	str	r2, [r3, #24]
 8006df4:	e002      	b.n	8006dfc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f040 80b9 	bne.w	8006f78 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	785b      	ldrb	r3, [r3, #1]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d126      	bne.n	8006e5c <HAL_PCD_EP_DB_Transmit+0xc8>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	461a      	mov	r2, r3
 8006e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e22:	4413      	add	r3, r2
 8006e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	011a      	lsls	r2, r3, #4
 8006e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2e:	4413      	add	r3, r2
 8006e30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e44:	801a      	strh	r2, [r3, #0]
 8006e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e58:	801a      	strh	r2, [r3, #0]
 8006e5a:	e01a      	b.n	8006e92 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	785b      	ldrb	r3, [r3, #1]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d116      	bne.n	8006e92 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	637b      	str	r3, [r7, #52]	; 0x34
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e78:	4413      	add	r3, r2
 8006e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	011a      	lsls	r2, r3, #4
 8006e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e84:	4413      	add	r3, r2
 8006e86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e8a:	633b      	str	r3, [r7, #48]	; 0x30
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	2200      	movs	r2, #0
 8006e90:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	785b      	ldrb	r3, [r3, #1]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d126      	bne.n	8006eee <HAL_PCD_EP_DB_Transmit+0x15a>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	61fb      	str	r3, [r7, #28]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	61fb      	str	r3, [r7, #28]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	011a      	lsls	r2, r3, #4
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ec6:	61bb      	str	r3, [r7, #24]
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	801a      	strh	r2, [r3, #0]
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	801a      	strh	r2, [r3, #0]
 8006eec:	e017      	b.n	8006f1e <HAL_PCD_EP_DB_Transmit+0x18a>
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	785b      	ldrb	r3, [r3, #1]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d113      	bne.n	8006f1e <HAL_PCD_EP_DB_Transmit+0x18a>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	461a      	mov	r2, r3
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	4413      	add	r3, r2
 8006f06:	627b      	str	r3, [r7, #36]	; 0x24
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	011a      	lsls	r2, r3, #4
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	4413      	add	r3, r2
 8006f12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f16:	623b      	str	r3, [r7, #32]
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	4619      	mov	r1, r3
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f00c ff78 	bl	8013e1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006f2a:	88fb      	ldrh	r3, [r7, #6]
 8006f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 82fc 	beq.w	800752e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f50:	82fb      	strh	r3, [r7, #22]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	441a      	add	r2, r3
 8006f60:	8afb      	ldrh	r3, [r7, #22]
 8006f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	8013      	strh	r3, [r2, #0]
 8006f76:	e2da      	b.n	800752e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006f78:	88fb      	ldrh	r3, [r7, #6]
 8006f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d021      	beq.n	8006fc6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	441a      	add	r2, r3
 8006fae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	f040 82ae 	bne.w	800752e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	695a      	ldr	r2, [r3, #20]
 8006fd6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006fda:	441a      	add	r2, r3
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	69da      	ldr	r2, [r3, #28]
 8006fe4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006fe8:	441a      	add	r2, r3
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	6a1a      	ldr	r2, [r3, #32]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d30b      	bcc.n	8007012 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	6a1a      	ldr	r2, [r3, #32]
 8007006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800700a:	1ad2      	subs	r2, r2, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	621a      	str	r2, [r3, #32]
 8007010:	e017      	b.n	8007042 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d108      	bne.n	800702c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800701a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800701e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800702a:	e00a      	b.n	8007042 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	2200      	movs	r2, #0
 8007040:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	785b      	ldrb	r3, [r3, #1]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d165      	bne.n	8007116 <HAL_PCD_EP_DB_Transmit+0x382>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007058:	b29b      	uxth	r3, r3
 800705a:	461a      	mov	r2, r3
 800705c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800705e:	4413      	add	r3, r2
 8007060:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	011a      	lsls	r2, r3, #4
 8007068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800706a:	4413      	add	r3, r2
 800706c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007070:	63bb      	str	r3, [r7, #56]	; 0x38
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	b29b      	uxth	r3, r3
 8007078:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800707c:	b29a      	uxth	r2, r3
 800707e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007080:	801a      	strh	r2, [r3, #0]
 8007082:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007086:	2b3e      	cmp	r3, #62	; 0x3e
 8007088:	d91d      	bls.n	80070c6 <HAL_PCD_EP_DB_Transmit+0x332>
 800708a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800708e:	095b      	lsrs	r3, r3, #5
 8007090:	64bb      	str	r3, [r7, #72]	; 0x48
 8007092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007096:	f003 031f 	and.w	r3, r3, #31
 800709a:	2b00      	cmp	r3, #0
 800709c:	d102      	bne.n	80070a4 <HAL_PCD_EP_DB_Transmit+0x310>
 800709e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070a0:	3b01      	subs	r3, #1
 80070a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80070a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	029b      	lsls	r3, r3, #10
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	4313      	orrs	r3, r2
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070be:	b29a      	uxth	r2, r3
 80070c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c2:	801a      	strh	r2, [r3, #0]
 80070c4:	e044      	b.n	8007150 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80070c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10a      	bne.n	80070e4 <HAL_PCD_EP_DB_Transmit+0x350>
 80070ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070dc:	b29a      	uxth	r2, r3
 80070de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e0:	801a      	strh	r2, [r3, #0]
 80070e2:	e035      	b.n	8007150 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80070e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070e8:	085b      	lsrs	r3, r3, #1
 80070ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80070ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d002      	beq.n	80070fe <HAL_PCD_EP_DB_Transmit+0x36a>
 80070f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070fa:	3301      	adds	r3, #1
 80070fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80070fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	b29a      	uxth	r2, r3
 8007104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007106:	b29b      	uxth	r3, r3
 8007108:	029b      	lsls	r3, r3, #10
 800710a:	b29b      	uxth	r3, r3
 800710c:	4313      	orrs	r3, r2
 800710e:	b29a      	uxth	r2, r3
 8007110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007112:	801a      	strh	r2, [r3, #0]
 8007114:	e01c      	b.n	8007150 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	785b      	ldrb	r3, [r3, #1]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d118      	bne.n	8007150 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	647b      	str	r3, [r7, #68]	; 0x44
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800712c:	b29b      	uxth	r3, r3
 800712e:	461a      	mov	r2, r3
 8007130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007132:	4413      	add	r3, r2
 8007134:	647b      	str	r3, [r7, #68]	; 0x44
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	011a      	lsls	r2, r3, #4
 800713c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800713e:	4413      	add	r3, r2
 8007140:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007144:	643b      	str	r3, [r7, #64]	; 0x40
 8007146:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800714a:	b29a      	uxth	r2, r3
 800714c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800714e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6818      	ldr	r0, [r3, #0]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	6959      	ldr	r1, [r3, #20]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	891a      	ldrh	r2, [r3, #8]
 800715c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007160:	b29b      	uxth	r3, r3
 8007162:	f006 ff62 	bl	800e02a <USB_WritePMA>
 8007166:	e1e2      	b.n	800752e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007170:	b29b      	uxth	r3, r3
 8007172:	461a      	mov	r2, r3
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	00db      	lsls	r3, r3, #3
 800717a:	4413      	add	r3, r2
 800717c:	3306      	adds	r3, #6
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	6812      	ldr	r2, [r2, #0]
 8007184:	4413      	add	r3, r2
 8007186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007190:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	699a      	ldr	r2, [r3, #24]
 8007198:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800719c:	429a      	cmp	r2, r3
 800719e:	d307      	bcc.n	80071b0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	699a      	ldr	r2, [r3, #24]
 80071a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80071a8:	1ad2      	subs	r2, r2, r3
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	619a      	str	r2, [r3, #24]
 80071ae:	e002      	b.n	80071b6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2200      	movs	r2, #0
 80071b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f040 80c0 	bne.w	8007340 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	785b      	ldrb	r3, [r3, #1]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d126      	bne.n	8007216 <HAL_PCD_EP_DB_Transmit+0x482>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	461a      	mov	r2, r3
 80071da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80071dc:	4413      	add	r3, r2
 80071de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	011a      	lsls	r2, r3, #4
 80071e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80071e8:	4413      	add	r3, r2
 80071ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80071f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071fe:	801a      	strh	r2, [r3, #0]
 8007200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007202:	881b      	ldrh	r3, [r3, #0]
 8007204:	b29b      	uxth	r3, r3
 8007206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800720a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800720e:	b29a      	uxth	r2, r3
 8007210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007212:	801a      	strh	r2, [r3, #0]
 8007214:	e01a      	b.n	800724c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	785b      	ldrb	r3, [r3, #1]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d116      	bne.n	800724c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	667b      	str	r3, [r7, #100]	; 0x64
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800722c:	b29b      	uxth	r3, r3
 800722e:	461a      	mov	r2, r3
 8007230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007232:	4413      	add	r3, r2
 8007234:	667b      	str	r3, [r7, #100]	; 0x64
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	011a      	lsls	r2, r3, #4
 800723c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800723e:	4413      	add	r3, r2
 8007240:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007244:	663b      	str	r3, [r7, #96]	; 0x60
 8007246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007248:	2200      	movs	r2, #0
 800724a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	677b      	str	r3, [r7, #116]	; 0x74
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	785b      	ldrb	r3, [r3, #1]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d12b      	bne.n	80072b2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007268:	b29b      	uxth	r3, r3
 800726a:	461a      	mov	r2, r3
 800726c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800726e:	4413      	add	r3, r2
 8007270:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	011a      	lsls	r2, r3, #4
 8007278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800727a:	4413      	add	r3, r2
 800727c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007280:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007284:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007290:	b29a      	uxth	r2, r3
 8007292:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007296:	801a      	strh	r2, [r3, #0]
 8007298:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	b29b      	uxth	r3, r3
 80072a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072ae:	801a      	strh	r2, [r3, #0]
 80072b0:	e017      	b.n	80072e2 <HAL_PCD_EP_DB_Transmit+0x54e>
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	785b      	ldrb	r3, [r3, #1]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d113      	bne.n	80072e2 <HAL_PCD_EP_DB_Transmit+0x54e>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	461a      	mov	r2, r3
 80072c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072c8:	4413      	add	r3, r2
 80072ca:	677b      	str	r3, [r7, #116]	; 0x74
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	011a      	lsls	r2, r3, #4
 80072d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072d4:	4413      	add	r3, r2
 80072d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072da:	673b      	str	r3, [r7, #112]	; 0x70
 80072dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072de:	2200      	movs	r2, #0
 80072e0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	4619      	mov	r1, r3
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f00c fd96 	bl	8013e1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80072ee:	88fb      	ldrh	r3, [r7, #6]
 80072f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f040 811a 	bne.w	800752e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4413      	add	r3, r2
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	b29b      	uxth	r3, r3
 800730c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007314:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	461a      	mov	r2, r3
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	441a      	add	r2, r3
 8007326:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800732a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800732e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007332:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800733a:	b29b      	uxth	r3, r3
 800733c:	8013      	strh	r3, [r2, #0]
 800733e:	e0f6      	b.n	800752e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007340:	88fb      	ldrh	r3, [r7, #6]
 8007342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d121      	bne.n	800738e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	461a      	mov	r2, r3
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	b29b      	uxth	r3, r3
 800735c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007364:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	461a      	mov	r2, r3
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	441a      	add	r2, r3
 8007376:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800737a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800737e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007382:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800738a:	b29b      	uxth	r3, r3
 800738c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007394:	2b01      	cmp	r3, #1
 8007396:	f040 80ca 	bne.w	800752e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	695a      	ldr	r2, [r3, #20]
 800739e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80073a2:	441a      	add	r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	69da      	ldr	r2, [r3, #28]
 80073ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80073b0:	441a      	add	r2, r3
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	6a1a      	ldr	r2, [r3, #32]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d30b      	bcc.n	80073da <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	6a1a      	ldr	r2, [r3, #32]
 80073ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073d2:	1ad2      	subs	r2, r2, r3
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	621a      	str	r2, [r3, #32]
 80073d8:	e017      	b.n	800740a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d108      	bne.n	80073f4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80073e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80073e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80073f2:	e00a      	b.n	800740a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2200      	movs	r2, #0
 8007400:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	657b      	str	r3, [r7, #84]	; 0x54
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	785b      	ldrb	r3, [r3, #1]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d165      	bne.n	80074e4 <HAL_PCD_EP_DB_Transmit+0x750>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007426:	b29b      	uxth	r3, r3
 8007428:	461a      	mov	r2, r3
 800742a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800742c:	4413      	add	r3, r2
 800742e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	011a      	lsls	r2, r3, #4
 8007436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007438:	4413      	add	r3, r2
 800743a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800743e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007440:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	b29b      	uxth	r3, r3
 8007446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800744a:	b29a      	uxth	r2, r3
 800744c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800744e:	801a      	strh	r2, [r3, #0]
 8007450:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007454:	2b3e      	cmp	r3, #62	; 0x3e
 8007456:	d91d      	bls.n	8007494 <HAL_PCD_EP_DB_Transmit+0x700>
 8007458:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800745c:	095b      	lsrs	r3, r3, #5
 800745e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007460:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007464:	f003 031f 	and.w	r3, r3, #31
 8007468:	2b00      	cmp	r3, #0
 800746a:	d102      	bne.n	8007472 <HAL_PCD_EP_DB_Transmit+0x6de>
 800746c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800746e:	3b01      	subs	r3, #1
 8007470:	66bb      	str	r3, [r7, #104]	; 0x68
 8007472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	b29a      	uxth	r2, r3
 8007478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800747a:	b29b      	uxth	r3, r3
 800747c:	029b      	lsls	r3, r3, #10
 800747e:	b29b      	uxth	r3, r3
 8007480:	4313      	orrs	r3, r2
 8007482:	b29b      	uxth	r3, r3
 8007484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800748c:	b29a      	uxth	r2, r3
 800748e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007490:	801a      	strh	r2, [r3, #0]
 8007492:	e041      	b.n	8007518 <HAL_PCD_EP_DB_Transmit+0x784>
 8007494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <HAL_PCD_EP_DB_Transmit+0x71e>
 800749c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074ae:	801a      	strh	r2, [r3, #0]
 80074b0:	e032      	b.n	8007518 <HAL_PCD_EP_DB_Transmit+0x784>
 80074b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074b6:	085b      	lsrs	r3, r3, #1
 80074b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80074ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d002      	beq.n	80074cc <HAL_PCD_EP_DB_Transmit+0x738>
 80074c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074c8:	3301      	adds	r3, #1
 80074ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80074cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	029b      	lsls	r3, r3, #10
 80074d8:	b29b      	uxth	r3, r3
 80074da:	4313      	orrs	r3, r2
 80074dc:	b29a      	uxth	r2, r3
 80074de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074e0:	801a      	strh	r2, [r3, #0]
 80074e2:	e019      	b.n	8007518 <HAL_PCD_EP_DB_Transmit+0x784>
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	785b      	ldrb	r3, [r3, #1]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d115      	bne.n	8007518 <HAL_PCD_EP_DB_Transmit+0x784>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	461a      	mov	r2, r3
 80074f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074fa:	4413      	add	r3, r2
 80074fc:	657b      	str	r3, [r7, #84]	; 0x54
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	011a      	lsls	r2, r3, #4
 8007504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007506:	4413      	add	r3, r2
 8007508:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800750c:	653b      	str	r3, [r7, #80]	; 0x50
 800750e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007512:	b29a      	uxth	r2, r3
 8007514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007516:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6818      	ldr	r0, [r3, #0]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	6959      	ldr	r1, [r3, #20]
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	895a      	ldrh	r2, [r3, #10]
 8007524:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007528:	b29b      	uxth	r3, r3
 800752a:	f006 fd7e 	bl	800e02a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	b29b      	uxth	r3, r3
 8007540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007548:	82bb      	strh	r3, [r7, #20]
 800754a:	8abb      	ldrh	r3, [r7, #20]
 800754c:	f083 0310 	eor.w	r3, r3, #16
 8007550:	82bb      	strh	r3, [r7, #20]
 8007552:	8abb      	ldrh	r3, [r7, #20]
 8007554:	f083 0320 	eor.w	r3, r3, #32
 8007558:	82bb      	strh	r3, [r7, #20]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	441a      	add	r2, r3
 8007568:	8abb      	ldrh	r3, [r7, #20]
 800756a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800756e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800757a:	b29b      	uxth	r3, r3
 800757c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3790      	adds	r7, #144	; 0x90
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	607b      	str	r3, [r7, #4]
 8007592:	460b      	mov	r3, r1
 8007594:	817b      	strh	r3, [r7, #10]
 8007596:	4613      	mov	r3, r2
 8007598:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800759a:	897b      	ldrh	r3, [r7, #10]
 800759c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00b      	beq.n	80075be <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075a6:	897b      	ldrh	r3, [r7, #10]
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	4613      	mov	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	00db      	lsls	r3, r3, #3
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	4413      	add	r3, r2
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	e009      	b.n	80075d2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80075be:	897a      	ldrh	r2, [r7, #10]
 80075c0:	4613      	mov	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	4413      	add	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80075d2:	893b      	ldrh	r3, [r7, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d107      	bne.n	80075e8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2200      	movs	r2, #0
 80075dc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	80da      	strh	r2, [r3, #6]
 80075e6:	e00b      	b.n	8007600 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2201      	movs	r2, #1
 80075ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	0c1b      	lsrs	r3, r3, #16
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	371c      	adds	r7, #28
 8007606:	46bd      	mov	sp, r7
 8007608:	bc80      	pop	{r7}
 800760a:	4770      	bx	lr

0800760c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e272      	b.n	8007b04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 8087 	beq.w	800773a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800762c:	4b92      	ldr	r3, [pc, #584]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f003 030c 	and.w	r3, r3, #12
 8007634:	2b04      	cmp	r3, #4
 8007636:	d00c      	beq.n	8007652 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007638:	4b8f      	ldr	r3, [pc, #572]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f003 030c 	and.w	r3, r3, #12
 8007640:	2b08      	cmp	r3, #8
 8007642:	d112      	bne.n	800766a <HAL_RCC_OscConfig+0x5e>
 8007644:	4b8c      	ldr	r3, [pc, #560]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800764c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007650:	d10b      	bne.n	800766a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007652:	4b89      	ldr	r3, [pc, #548]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d06c      	beq.n	8007738 <HAL_RCC_OscConfig+0x12c>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d168      	bne.n	8007738 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e24c      	b.n	8007b04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007672:	d106      	bne.n	8007682 <HAL_RCC_OscConfig+0x76>
 8007674:	4b80      	ldr	r3, [pc, #512]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a7f      	ldr	r2, [pc, #508]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 800767a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	e02e      	b.n	80076e0 <HAL_RCC_OscConfig+0xd4>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10c      	bne.n	80076a4 <HAL_RCC_OscConfig+0x98>
 800768a:	4b7b      	ldr	r3, [pc, #492]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a7a      	ldr	r2, [pc, #488]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	4b78      	ldr	r3, [pc, #480]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a77      	ldr	r2, [pc, #476]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 800769c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076a0:	6013      	str	r3, [r2, #0]
 80076a2:	e01d      	b.n	80076e0 <HAL_RCC_OscConfig+0xd4>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076ac:	d10c      	bne.n	80076c8 <HAL_RCC_OscConfig+0xbc>
 80076ae:	4b72      	ldr	r3, [pc, #456]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a71      	ldr	r2, [pc, #452]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80076b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	4b6f      	ldr	r3, [pc, #444]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a6e      	ldr	r2, [pc, #440]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80076c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	e00b      	b.n	80076e0 <HAL_RCC_OscConfig+0xd4>
 80076c8:	4b6b      	ldr	r3, [pc, #428]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a6a      	ldr	r2, [pc, #424]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80076ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076d2:	6013      	str	r3, [r2, #0]
 80076d4:	4b68      	ldr	r3, [pc, #416]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a67      	ldr	r2, [pc, #412]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80076da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d013      	beq.n	8007710 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076e8:	f7fb fd34 	bl	8003154 <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076ee:	e008      	b.n	8007702 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076f0:	f7fb fd30 	bl	8003154 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b64      	cmp	r3, #100	; 0x64
 80076fc:	d901      	bls.n	8007702 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e200      	b.n	8007b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007702:	4b5d      	ldr	r3, [pc, #372]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0f0      	beq.n	80076f0 <HAL_RCC_OscConfig+0xe4>
 800770e:	e014      	b.n	800773a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007710:	f7fb fd20 	bl	8003154 <HAL_GetTick>
 8007714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007716:	e008      	b.n	800772a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007718:	f7fb fd1c 	bl	8003154 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b64      	cmp	r3, #100	; 0x64
 8007724:	d901      	bls.n	800772a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e1ec      	b.n	8007b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800772a:	4b53      	ldr	r3, [pc, #332]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1f0      	bne.n	8007718 <HAL_RCC_OscConfig+0x10c>
 8007736:	e000      	b.n	800773a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0302 	and.w	r3, r3, #2
 8007742:	2b00      	cmp	r3, #0
 8007744:	d063      	beq.n	800780e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007746:	4b4c      	ldr	r3, [pc, #304]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f003 030c 	and.w	r3, r3, #12
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00b      	beq.n	800776a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007752:	4b49      	ldr	r3, [pc, #292]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f003 030c 	and.w	r3, r3, #12
 800775a:	2b08      	cmp	r3, #8
 800775c:	d11c      	bne.n	8007798 <HAL_RCC_OscConfig+0x18c>
 800775e:	4b46      	ldr	r3, [pc, #280]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d116      	bne.n	8007798 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800776a:	4b43      	ldr	r3, [pc, #268]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d005      	beq.n	8007782 <HAL_RCC_OscConfig+0x176>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d001      	beq.n	8007782 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e1c0      	b.n	8007b04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007782:	4b3d      	ldr	r3, [pc, #244]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	4939      	ldr	r1, [pc, #228]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007792:	4313      	orrs	r3, r2
 8007794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007796:	e03a      	b.n	800780e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d020      	beq.n	80077e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077a0:	4b36      	ldr	r3, [pc, #216]	; (800787c <HAL_RCC_OscConfig+0x270>)
 80077a2:	2201      	movs	r2, #1
 80077a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077a6:	f7fb fcd5 	bl	8003154 <HAL_GetTick>
 80077aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077ac:	e008      	b.n	80077c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077ae:	f7fb fcd1 	bl	8003154 <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d901      	bls.n	80077c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e1a1      	b.n	8007b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077c0:	4b2d      	ldr	r3, [pc, #180]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0302 	and.w	r3, r3, #2
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d0f0      	beq.n	80077ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077cc:	4b2a      	ldr	r3, [pc, #168]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	00db      	lsls	r3, r3, #3
 80077da:	4927      	ldr	r1, [pc, #156]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	600b      	str	r3, [r1, #0]
 80077e0:	e015      	b.n	800780e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077e2:	4b26      	ldr	r3, [pc, #152]	; (800787c <HAL_RCC_OscConfig+0x270>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e8:	f7fb fcb4 	bl	8003154 <HAL_GetTick>
 80077ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077ee:	e008      	b.n	8007802 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077f0:	f7fb fcb0 	bl	8003154 <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e180      	b.n	8007b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007802:	4b1d      	ldr	r3, [pc, #116]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1f0      	bne.n	80077f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0308 	and.w	r3, r3, #8
 8007816:	2b00      	cmp	r3, #0
 8007818:	d03a      	beq.n	8007890 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d019      	beq.n	8007856 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007822:	4b17      	ldr	r3, [pc, #92]	; (8007880 <HAL_RCC_OscConfig+0x274>)
 8007824:	2201      	movs	r2, #1
 8007826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007828:	f7fb fc94 	bl	8003154 <HAL_GetTick>
 800782c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800782e:	e008      	b.n	8007842 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007830:	f7fb fc90 	bl	8003154 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	2b02      	cmp	r3, #2
 800783c:	d901      	bls.n	8007842 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e160      	b.n	8007b04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007842:	4b0d      	ldr	r3, [pc, #52]	; (8007878 <HAL_RCC_OscConfig+0x26c>)
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d0f0      	beq.n	8007830 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800784e:	2001      	movs	r0, #1
 8007850:	f000 face 	bl	8007df0 <RCC_Delay>
 8007854:	e01c      	b.n	8007890 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007856:	4b0a      	ldr	r3, [pc, #40]	; (8007880 <HAL_RCC_OscConfig+0x274>)
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800785c:	f7fb fc7a 	bl	8003154 <HAL_GetTick>
 8007860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007862:	e00f      	b.n	8007884 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007864:	f7fb fc76 	bl	8003154 <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	2b02      	cmp	r3, #2
 8007870:	d908      	bls.n	8007884 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e146      	b.n	8007b04 <HAL_RCC_OscConfig+0x4f8>
 8007876:	bf00      	nop
 8007878:	40021000 	.word	0x40021000
 800787c:	42420000 	.word	0x42420000
 8007880:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007884:	4b92      	ldr	r3, [pc, #584]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 8007886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e9      	bne.n	8007864 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 80a6 	beq.w	80079ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800789e:	2300      	movs	r3, #0
 80078a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078a2:	4b8b      	ldr	r3, [pc, #556]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10d      	bne.n	80078ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078ae:	4b88      	ldr	r3, [pc, #544]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	4a87      	ldr	r2, [pc, #540]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 80078b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078b8:	61d3      	str	r3, [r2, #28]
 80078ba:	4b85      	ldr	r3, [pc, #532]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078c2:	60bb      	str	r3, [r7, #8]
 80078c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078c6:	2301      	movs	r3, #1
 80078c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078ca:	4b82      	ldr	r3, [pc, #520]	; (8007ad4 <HAL_RCC_OscConfig+0x4c8>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d118      	bne.n	8007908 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078d6:	4b7f      	ldr	r3, [pc, #508]	; (8007ad4 <HAL_RCC_OscConfig+0x4c8>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a7e      	ldr	r2, [pc, #504]	; (8007ad4 <HAL_RCC_OscConfig+0x4c8>)
 80078dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078e2:	f7fb fc37 	bl	8003154 <HAL_GetTick>
 80078e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078e8:	e008      	b.n	80078fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078ea:	f7fb fc33 	bl	8003154 <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	2b64      	cmp	r3, #100	; 0x64
 80078f6:	d901      	bls.n	80078fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e103      	b.n	8007b04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078fc:	4b75      	ldr	r3, [pc, #468]	; (8007ad4 <HAL_RCC_OscConfig+0x4c8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007904:	2b00      	cmp	r3, #0
 8007906:	d0f0      	beq.n	80078ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d106      	bne.n	800791e <HAL_RCC_OscConfig+0x312>
 8007910:	4b6f      	ldr	r3, [pc, #444]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	4a6e      	ldr	r2, [pc, #440]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 8007916:	f043 0301 	orr.w	r3, r3, #1
 800791a:	6213      	str	r3, [r2, #32]
 800791c:	e02d      	b.n	800797a <HAL_RCC_OscConfig+0x36e>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10c      	bne.n	8007940 <HAL_RCC_OscConfig+0x334>
 8007926:	4b6a      	ldr	r3, [pc, #424]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	4a69      	ldr	r2, [pc, #420]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 800792c:	f023 0301 	bic.w	r3, r3, #1
 8007930:	6213      	str	r3, [r2, #32]
 8007932:	4b67      	ldr	r3, [pc, #412]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	4a66      	ldr	r2, [pc, #408]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 8007938:	f023 0304 	bic.w	r3, r3, #4
 800793c:	6213      	str	r3, [r2, #32]
 800793e:	e01c      	b.n	800797a <HAL_RCC_OscConfig+0x36e>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	2b05      	cmp	r3, #5
 8007946:	d10c      	bne.n	8007962 <HAL_RCC_OscConfig+0x356>
 8007948:	4b61      	ldr	r3, [pc, #388]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	4a60      	ldr	r2, [pc, #384]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 800794e:	f043 0304 	orr.w	r3, r3, #4
 8007952:	6213      	str	r3, [r2, #32]
 8007954:	4b5e      	ldr	r3, [pc, #376]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	4a5d      	ldr	r2, [pc, #372]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 800795a:	f043 0301 	orr.w	r3, r3, #1
 800795e:	6213      	str	r3, [r2, #32]
 8007960:	e00b      	b.n	800797a <HAL_RCC_OscConfig+0x36e>
 8007962:	4b5b      	ldr	r3, [pc, #364]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	4a5a      	ldr	r2, [pc, #360]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 8007968:	f023 0301 	bic.w	r3, r3, #1
 800796c:	6213      	str	r3, [r2, #32]
 800796e:	4b58      	ldr	r3, [pc, #352]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	4a57      	ldr	r2, [pc, #348]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 8007974:	f023 0304 	bic.w	r3, r3, #4
 8007978:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d015      	beq.n	80079ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007982:	f7fb fbe7 	bl	8003154 <HAL_GetTick>
 8007986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007988:	e00a      	b.n	80079a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800798a:	f7fb fbe3 	bl	8003154 <HAL_GetTick>
 800798e:	4602      	mov	r2, r0
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	f241 3288 	movw	r2, #5000	; 0x1388
 8007998:	4293      	cmp	r3, r2
 800799a:	d901      	bls.n	80079a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e0b1      	b.n	8007b04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079a0:	4b4b      	ldr	r3, [pc, #300]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	f003 0302 	and.w	r3, r3, #2
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d0ee      	beq.n	800798a <HAL_RCC_OscConfig+0x37e>
 80079ac:	e014      	b.n	80079d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079ae:	f7fb fbd1 	bl	8003154 <HAL_GetTick>
 80079b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079b4:	e00a      	b.n	80079cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079b6:	f7fb fbcd 	bl	8003154 <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d901      	bls.n	80079cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e09b      	b.n	8007b04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079cc:	4b40      	ldr	r3, [pc, #256]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	f003 0302 	and.w	r3, r3, #2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1ee      	bne.n	80079b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80079d8:	7dfb      	ldrb	r3, [r7, #23]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d105      	bne.n	80079ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079de:	4b3c      	ldr	r3, [pc, #240]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	4a3b      	ldr	r2, [pc, #236]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 80079e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 8087 	beq.w	8007b02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079f4:	4b36      	ldr	r3, [pc, #216]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f003 030c 	and.w	r3, r3, #12
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d061      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	69db      	ldr	r3, [r3, #28]
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d146      	bne.n	8007a96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a08:	4b33      	ldr	r3, [pc, #204]	; (8007ad8 <HAL_RCC_OscConfig+0x4cc>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a0e:	f7fb fba1 	bl	8003154 <HAL_GetTick>
 8007a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a14:	e008      	b.n	8007a28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a16:	f7fb fb9d 	bl	8003154 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d901      	bls.n	8007a28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e06d      	b.n	8007b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a28:	4b29      	ldr	r3, [pc, #164]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1f0      	bne.n	8007a16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a3c:	d108      	bne.n	8007a50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007a3e:	4b24      	ldr	r3, [pc, #144]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	4921      	ldr	r1, [pc, #132]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a50:	4b1f      	ldr	r3, [pc, #124]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a19      	ldr	r1, [r3, #32]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	430b      	orrs	r3, r1
 8007a62:	491b      	ldr	r1, [pc, #108]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 8007a64:	4313      	orrs	r3, r2
 8007a66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a68:	4b1b      	ldr	r3, [pc, #108]	; (8007ad8 <HAL_RCC_OscConfig+0x4cc>)
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a6e:	f7fb fb71 	bl	8003154 <HAL_GetTick>
 8007a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a74:	e008      	b.n	8007a88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a76:	f7fb fb6d 	bl	8003154 <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d901      	bls.n	8007a88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e03d      	b.n	8007b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a88:	4b11      	ldr	r3, [pc, #68]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d0f0      	beq.n	8007a76 <HAL_RCC_OscConfig+0x46a>
 8007a94:	e035      	b.n	8007b02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a96:	4b10      	ldr	r3, [pc, #64]	; (8007ad8 <HAL_RCC_OscConfig+0x4cc>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a9c:	f7fb fb5a 	bl	8003154 <HAL_GetTick>
 8007aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007aa2:	e008      	b.n	8007ab6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aa4:	f7fb fb56 	bl	8003154 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e026      	b.n	8007b04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ab6:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <HAL_RCC_OscConfig+0x4c4>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1f0      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x498>
 8007ac2:	e01e      	b.n	8007b02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	69db      	ldr	r3, [r3, #28]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d107      	bne.n	8007adc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e019      	b.n	8007b04 <HAL_RCC_OscConfig+0x4f8>
 8007ad0:	40021000 	.word	0x40021000
 8007ad4:	40007000 	.word	0x40007000
 8007ad8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007adc:	4b0b      	ldr	r3, [pc, #44]	; (8007b0c <HAL_RCC_OscConfig+0x500>)
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d106      	bne.n	8007afe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d001      	beq.n	8007b02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e000      	b.n	8007b04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	40021000 	.word	0x40021000

08007b10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e0d0      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b24:	4b6a      	ldr	r3, [pc, #424]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0307 	and.w	r3, r3, #7
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d910      	bls.n	8007b54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b32:	4b67      	ldr	r3, [pc, #412]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f023 0207 	bic.w	r2, r3, #7
 8007b3a:	4965      	ldr	r1, [pc, #404]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b42:	4b63      	ldr	r3, [pc, #396]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d001      	beq.n	8007b54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e0b8      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d020      	beq.n	8007ba2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0304 	and.w	r3, r3, #4
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d005      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b6c:	4b59      	ldr	r3, [pc, #356]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	4a58      	ldr	r2, [pc, #352]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007b76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0308 	and.w	r3, r3, #8
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d005      	beq.n	8007b90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b84:	4b53      	ldr	r3, [pc, #332]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	4a52      	ldr	r2, [pc, #328]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007b8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b90:	4b50      	ldr	r3, [pc, #320]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	494d      	ldr	r1, [pc, #308]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d040      	beq.n	8007c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d107      	bne.n	8007bc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bb6:	4b47      	ldr	r3, [pc, #284]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d115      	bne.n	8007bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e07f      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d107      	bne.n	8007bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bce:	4b41      	ldr	r3, [pc, #260]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d109      	bne.n	8007bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e073      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bde:	4b3d      	ldr	r3, [pc, #244]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e06b      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bee:	4b39      	ldr	r3, [pc, #228]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f023 0203 	bic.w	r2, r3, #3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	4936      	ldr	r1, [pc, #216]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c00:	f7fb faa8 	bl	8003154 <HAL_GetTick>
 8007c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c06:	e00a      	b.n	8007c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c08:	f7fb faa4 	bl	8003154 <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d901      	bls.n	8007c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e053      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c1e:	4b2d      	ldr	r3, [pc, #180]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f003 020c 	and.w	r2, r3, #12
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d1eb      	bne.n	8007c08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c30:	4b27      	ldr	r3, [pc, #156]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0307 	and.w	r3, r3, #7
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d210      	bcs.n	8007c60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c3e:	4b24      	ldr	r3, [pc, #144]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f023 0207 	bic.w	r2, r3, #7
 8007c46:	4922      	ldr	r1, [pc, #136]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c4e:	4b20      	ldr	r3, [pc, #128]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0307 	and.w	r3, r3, #7
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d001      	beq.n	8007c60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e032      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0304 	and.w	r3, r3, #4
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d008      	beq.n	8007c7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c6c:	4b19      	ldr	r3, [pc, #100]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	4916      	ldr	r1, [pc, #88]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0308 	and.w	r3, r3, #8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d009      	beq.n	8007c9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c8a:	4b12      	ldr	r3, [pc, #72]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	00db      	lsls	r3, r3, #3
 8007c98:	490e      	ldr	r1, [pc, #56]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c9e:	f000 f821 	bl	8007ce4 <HAL_RCC_GetSysClockFreq>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	4b0b      	ldr	r3, [pc, #44]	; (8007cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	091b      	lsrs	r3, r3, #4
 8007caa:	f003 030f 	and.w	r3, r3, #15
 8007cae:	490a      	ldr	r1, [pc, #40]	; (8007cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8007cb0:	5ccb      	ldrb	r3, [r1, r3]
 8007cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb6:	4a09      	ldr	r2, [pc, #36]	; (8007cdc <HAL_RCC_ClockConfig+0x1cc>)
 8007cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007cba:	4b09      	ldr	r3, [pc, #36]	; (8007ce0 <HAL_RCC_ClockConfig+0x1d0>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fb fa06 	bl	80030d0 <HAL_InitTick>

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	40022000 	.word	0x40022000
 8007cd4:	40021000 	.word	0x40021000
 8007cd8:	080304c8 	.word	0x080304c8
 8007cdc:	20000080 	.word	0x20000080
 8007ce0:	20000084 	.word	0x20000084

08007ce4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	60fb      	str	r3, [r7, #12]
 8007cee:	2300      	movs	r3, #0
 8007cf0:	60bb      	str	r3, [r7, #8]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	617b      	str	r3, [r7, #20]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007cfe:	4b1e      	ldr	r3, [pc, #120]	; (8007d78 <HAL_RCC_GetSysClockFreq+0x94>)
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f003 030c 	and.w	r3, r3, #12
 8007d0a:	2b04      	cmp	r3, #4
 8007d0c:	d002      	beq.n	8007d14 <HAL_RCC_GetSysClockFreq+0x30>
 8007d0e:	2b08      	cmp	r3, #8
 8007d10:	d003      	beq.n	8007d1a <HAL_RCC_GetSysClockFreq+0x36>
 8007d12:	e027      	b.n	8007d64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007d14:	4b19      	ldr	r3, [pc, #100]	; (8007d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8007d16:	613b      	str	r3, [r7, #16]
      break;
 8007d18:	e027      	b.n	8007d6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	0c9b      	lsrs	r3, r3, #18
 8007d1e:	f003 030f 	and.w	r3, r3, #15
 8007d22:	4a17      	ldr	r2, [pc, #92]	; (8007d80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007d24:	5cd3      	ldrb	r3, [r2, r3]
 8007d26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d010      	beq.n	8007d54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007d32:	4b11      	ldr	r3, [pc, #68]	; (8007d78 <HAL_RCC_GetSysClockFreq+0x94>)
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	0c5b      	lsrs	r3, r3, #17
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	4a11      	ldr	r2, [pc, #68]	; (8007d84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007d3e:	5cd3      	ldrb	r3, [r2, r3]
 8007d40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a0d      	ldr	r2, [pc, #52]	; (8007d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8007d46:	fb03 f202 	mul.w	r2, r3, r2
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d50:	617b      	str	r3, [r7, #20]
 8007d52:	e004      	b.n	8007d5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a0c      	ldr	r2, [pc, #48]	; (8007d88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007d58:	fb02 f303 	mul.w	r3, r2, r3
 8007d5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	613b      	str	r3, [r7, #16]
      break;
 8007d62:	e002      	b.n	8007d6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007d64:	4b05      	ldr	r3, [pc, #20]	; (8007d7c <HAL_RCC_GetSysClockFreq+0x98>)
 8007d66:	613b      	str	r3, [r7, #16]
      break;
 8007d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d6a:	693b      	ldr	r3, [r7, #16]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	371c      	adds	r7, #28
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bc80      	pop	{r7}
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	40021000 	.word	0x40021000
 8007d7c:	007a1200 	.word	0x007a1200
 8007d80:	080304e0 	.word	0x080304e0
 8007d84:	080304f0 	.word	0x080304f0
 8007d88:	003d0900 	.word	0x003d0900

08007d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d90:	4b02      	ldr	r3, [pc, #8]	; (8007d9c <HAL_RCC_GetHCLKFreq+0x10>)
 8007d92:	681b      	ldr	r3, [r3, #0]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bc80      	pop	{r7}
 8007d9a:	4770      	bx	lr
 8007d9c:	20000080 	.word	0x20000080

08007da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007da4:	f7ff fff2 	bl	8007d8c <HAL_RCC_GetHCLKFreq>
 8007da8:	4602      	mov	r2, r0
 8007daa:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	0a1b      	lsrs	r3, r3, #8
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	4903      	ldr	r1, [pc, #12]	; (8007dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007db6:	5ccb      	ldrb	r3, [r1, r3]
 8007db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	40021000 	.word	0x40021000
 8007dc4:	080304d8 	.word	0x080304d8

08007dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007dcc:	f7ff ffde 	bl	8007d8c <HAL_RCC_GetHCLKFreq>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	0adb      	lsrs	r3, r3, #11
 8007dd8:	f003 0307 	and.w	r3, r3, #7
 8007ddc:	4903      	ldr	r1, [pc, #12]	; (8007dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dde:	5ccb      	ldrb	r3, [r1, r3]
 8007de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	40021000 	.word	0x40021000
 8007dec:	080304d8 	.word	0x080304d8

08007df0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007df8:	4b0a      	ldr	r3, [pc, #40]	; (8007e24 <RCC_Delay+0x34>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a0a      	ldr	r2, [pc, #40]	; (8007e28 <RCC_Delay+0x38>)
 8007dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007e02:	0a5b      	lsrs	r3, r3, #9
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	fb02 f303 	mul.w	r3, r2, r3
 8007e0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007e0c:	bf00      	nop
  }
  while (Delay --);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	1e5a      	subs	r2, r3, #1
 8007e12:	60fa      	str	r2, [r7, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1f9      	bne.n	8007e0c <RCC_Delay+0x1c>
}
 8007e18:	bf00      	nop
 8007e1a:	bf00      	nop
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bc80      	pop	{r7}
 8007e22:	4770      	bx	lr
 8007e24:	20000080 	.word	0x20000080
 8007e28:	10624dd3 	.word	0x10624dd3

08007e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007e34:	2300      	movs	r3, #0
 8007e36:	613b      	str	r3, [r7, #16]
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d07d      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e4c:	4b4f      	ldr	r3, [pc, #316]	; (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10d      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e58:	4b4c      	ldr	r3, [pc, #304]	; (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e5a:	69db      	ldr	r3, [r3, #28]
 8007e5c:	4a4b      	ldr	r2, [pc, #300]	; (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e62:	61d3      	str	r3, [r2, #28]
 8007e64:	4b49      	ldr	r3, [pc, #292]	; (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e6c:	60bb      	str	r3, [r7, #8]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e70:	2301      	movs	r3, #1
 8007e72:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e74:	4b46      	ldr	r3, [pc, #280]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d118      	bne.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e80:	4b43      	ldr	r3, [pc, #268]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a42      	ldr	r2, [pc, #264]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e8c:	f7fb f962 	bl	8003154 <HAL_GetTick>
 8007e90:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e92:	e008      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e94:	f7fb f95e 	bl	8003154 <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	2b64      	cmp	r3, #100	; 0x64
 8007ea0:	d901      	bls.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e06d      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ea6:	4b3a      	ldr	r3, [pc, #232]	; (8007f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0f0      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007eb2:	4b36      	ldr	r3, [pc, #216]	; (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d02e      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d027      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ed0:	4b2e      	ldr	r3, [pc, #184]	; (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ed8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007eda:	4b2e      	ldr	r3, [pc, #184]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007edc:	2201      	movs	r2, #1
 8007ede:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ee0:	4b2c      	ldr	r3, [pc, #176]	; (8007f94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007ee6:	4a29      	ldr	r2, [pc, #164]	; (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d014      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ef6:	f7fb f92d 	bl	8003154 <HAL_GetTick>
 8007efa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007efc:	e00a      	b.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007efe:	f7fb f929 	bl	8003154 <HAL_GetTick>
 8007f02:	4602      	mov	r2, r0
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d901      	bls.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e036      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f14:	4b1d      	ldr	r3, [pc, #116]	; (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f16:	6a1b      	ldr	r3, [r3, #32]
 8007f18:	f003 0302 	and.w	r3, r3, #2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d0ee      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f20:	4b1a      	ldr	r3, [pc, #104]	; (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	4917      	ldr	r1, [pc, #92]	; (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007f32:	7dfb      	ldrb	r3, [r7, #23]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d105      	bne.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f38:	4b14      	ldr	r3, [pc, #80]	; (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	4a13      	ldr	r2, [pc, #76]	; (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0302 	and.w	r3, r3, #2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d008      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f50:	4b0e      	ldr	r3, [pc, #56]	; (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	490b      	ldr	r1, [pc, #44]	; (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0310 	and.w	r3, r3, #16
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d008      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f6e:	4b07      	ldr	r3, [pc, #28]	; (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	4904      	ldr	r1, [pc, #16]	; (8007f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3718      	adds	r7, #24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	40021000 	.word	0x40021000
 8007f90:	40007000 	.word	0x40007000
 8007f94:	42420440 	.word	0x42420440

08007f98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b088      	sub	sp, #32
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	617b      	str	r3, [r7, #20]
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	61fb      	str	r3, [r7, #28]
 8007fa8:	2300      	movs	r3, #0
 8007faa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	60fb      	str	r3, [r7, #12]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	2b0f      	cmp	r3, #15
 8007fba:	f200 80af 	bhi.w	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8007fbe:	a201      	add	r2, pc, #4	; (adr r2, 8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc4:	0800809b 	.word	0x0800809b
 8007fc8:	08008101 	.word	0x08008101
 8007fcc:	0800811d 	.word	0x0800811d
 8007fd0:	0800808b 	.word	0x0800808b
 8007fd4:	0800811d 	.word	0x0800811d
 8007fd8:	0800811d 	.word	0x0800811d
 8007fdc:	0800811d 	.word	0x0800811d
 8007fe0:	08008093 	.word	0x08008093
 8007fe4:	0800811d 	.word	0x0800811d
 8007fe8:	0800811d 	.word	0x0800811d
 8007fec:	0800811d 	.word	0x0800811d
 8007ff0:	0800811d 	.word	0x0800811d
 8007ff4:	0800811d 	.word	0x0800811d
 8007ff8:	0800811d 	.word	0x0800811d
 8007ffc:	0800811d 	.word	0x0800811d
 8008000:	08008005 	.word	0x08008005
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8008004:	4b4a      	ldr	r3, [pc, #296]	; (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800800a:	4b49      	ldr	r3, [pc, #292]	; (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008012:	2b00      	cmp	r3, #0
 8008014:	f000 8084 	beq.w	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	0c9b      	lsrs	r3, r3, #18
 800801c:	f003 030f 	and.w	r3, r3, #15
 8008020:	4a44      	ldr	r2, [pc, #272]	; (8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8008022:	5cd3      	ldrb	r3, [r2, r3]
 8008024:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d015      	beq.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008030:	4b3f      	ldr	r3, [pc, #252]	; (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	0c5b      	lsrs	r3, r3, #17
 8008036:	f003 0301 	and.w	r3, r3, #1
 800803a:	4a3f      	ldr	r2, [pc, #252]	; (8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800803c:	5cd3      	ldrb	r3, [r2, r3]
 800803e:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00d      	beq.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800804a:	4a3c      	ldr	r2, [pc, #240]	; (800813c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	fb02 f303 	mul.w	r3, r2, r3
 8008058:	61fb      	str	r3, [r7, #28]
 800805a:	e004      	b.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	4a38      	ldr	r2, [pc, #224]	; (8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8008060:	fb02 f303 	mul.w	r3, r2, r3
 8008064:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008066:	4b32      	ldr	r3, [pc, #200]	; (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800806e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008072:	d102      	bne.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8008078:	e052      	b.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	005b      	lsls	r3, r3, #1
 800807e:	4a31      	ldr	r2, [pc, #196]	; (8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8008080:	fba2 2303 	umull	r2, r3, r2, r3
 8008084:	085b      	lsrs	r3, r3, #1
 8008086:	61bb      	str	r3, [r7, #24]
      break;
 8008088:	e04a      	b.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800808a:	f7ff fe2b 	bl	8007ce4 <HAL_RCC_GetSysClockFreq>
 800808e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008090:	e049      	b.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8008092:	f7ff fe27 	bl	8007ce4 <HAL_RCC_GetSysClockFreq>
 8008096:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008098:	e045      	b.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800809a:	4b25      	ldr	r3, [pc, #148]	; (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080aa:	d108      	bne.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 80080b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080ba:	61bb      	str	r3, [r7, #24]
 80080bc:	e01f      	b.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080c8:	d109      	bne.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80080ca:	4b19      	ldr	r3, [pc, #100]	; (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80080cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 80080d6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80080da:	61bb      	str	r3, [r7, #24]
 80080dc:	e00f      	b.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080e8:	d11c      	bne.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80080ea:	4b11      	ldr	r3, [pc, #68]	; (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d016      	beq.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 80080f6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80080fa:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80080fc:	e012      	b.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80080fe:	e011      	b.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008100:	f7ff fe62 	bl	8007dc8 <HAL_RCC_GetPCLK2Freq>
 8008104:	4602      	mov	r2, r0
 8008106:	4b0a      	ldr	r3, [pc, #40]	; (8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	0b9b      	lsrs	r3, r3, #14
 800810c:	f003 0303 	and.w	r3, r3, #3
 8008110:	3301      	adds	r3, #1
 8008112:	005b      	lsls	r3, r3, #1
 8008114:	fbb2 f3f3 	udiv	r3, r2, r3
 8008118:	61bb      	str	r3, [r7, #24]
      break;
 800811a:	e004      	b.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 800811c:	bf00      	nop
 800811e:	e002      	b.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8008120:	bf00      	nop
 8008122:	e000      	b.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8008124:	bf00      	nop
    }
  }
  return (frequency);
 8008126:	69bb      	ldr	r3, [r7, #24]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3720      	adds	r7, #32
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	40021000 	.word	0x40021000
 8008134:	080304f4 	.word	0x080304f4
 8008138:	08030504 	.word	0x08030504
 800813c:	007a1200 	.word	0x007a1200
 8008140:	003d0900 	.word	0x003d0900
 8008144:	aaaaaaab 	.word	0xaaaaaaab

08008148 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e022      	b.n	80081a0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d105      	bne.n	8008172 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7fa fc77 	bl	8002a60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2203      	movs	r2, #3
 8008176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f814 	bl	80081a8 <HAL_SD_InitCard>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e00a      	b.n	80081a0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80081a8:	b5b0      	push	{r4, r5, r7, lr}
 80081aa:	b08e      	sub	sp, #56	; 0x38
 80081ac:	af04      	add	r7, sp, #16
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80081b0:	2300      	movs	r3, #0
 80081b2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80081b4:	2300      	movs	r3, #0
 80081b6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80081b8:	2300      	movs	r3, #0
 80081ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80081bc:	2300      	movs	r3, #0
 80081be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80081c0:	2300      	movs	r3, #0
 80081c2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80081c4:	2376      	movs	r3, #118	; 0x76
 80081c6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681d      	ldr	r5, [r3, #0]
 80081cc:	466c      	mov	r4, sp
 80081ce:	f107 0314 	add.w	r3, r7, #20
 80081d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80081d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80081da:	f107 0308 	add.w	r3, r7, #8
 80081de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081e0:	4628      	mov	r0, r5
 80081e2:	f002 feb5 	bl	800af50 <SDIO_Init>
 80081e6:	4603      	mov	r3, r0
 80081e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80081ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e04f      	b.n	8008298 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80081f8:	4b29      	ldr	r3, [pc, #164]	; (80082a0 <HAL_SD_InitCard+0xf8>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4618      	mov	r0, r3
 8008204:	f002 feea 	bl	800afdc <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008208:	4b25      	ldr	r3, [pc, #148]	; (80082a0 <HAL_SD_InitCard+0xf8>)
 800820a:	2201      	movs	r2, #1
 800820c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800820e:	2002      	movs	r0, #2
 8008210:	f7fa ffaa 	bl	8003168 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 ff03 	bl	8009020 <SD_PowerON>
 800821a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800821c:	6a3b      	ldr	r3, [r7, #32]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00b      	beq.n	800823a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	431a      	orrs	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e02e      	b.n	8008298 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fe22 	bl	8008e84 <SD_InitCard>
 8008240:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00b      	beq.n	8008260 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	431a      	orrs	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e01b      	b.n	8008298 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008268:	4618      	mov	r0, r3
 800826a:	f002 ff43 	bl	800b0f4 <SDMMC_CmdBlockLength>
 800826e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008270:	6a3b      	ldr	r3, [r7, #32]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00f      	beq.n	8008296 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a0a      	ldr	r2, [pc, #40]	; (80082a4 <HAL_SD_InitCard+0xfc>)
 800827c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	431a      	orrs	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e000      	b.n	8008298 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3728      	adds	r7, #40	; 0x28
 800829c:	46bd      	mov	sp, r7
 800829e:	bdb0      	pop	{r4, r5, r7, pc}
 80082a0:	423000a0 	.word	0x423000a0
 80082a4:	004005ff 	.word	0x004005ff

080082a8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b092      	sub	sp, #72	; 0x48
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80082b6:	f7fa ff4d 	bl	8003154 <HAL_GetTick>
 80082ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d107      	bne.n	80082da <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e1bd      	b.n	8008656 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	f040 81b0 	bne.w	8008648 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80082ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	441a      	add	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d907      	bls.n	800830c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008300:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e1a4      	b.n	8008656 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2203      	movs	r2, #3
 8008310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2200      	movs	r2, #0
 800831a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008320:	2b01      	cmp	r3, #1
 8008322:	d002      	beq.n	800832a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008326:	025b      	lsls	r3, r3, #9
 8008328:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800832a:	f04f 33ff 	mov.w	r3, #4294967295
 800832e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	025b      	lsls	r3, r3, #9
 8008334:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008336:	2390      	movs	r3, #144	; 0x90
 8008338:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800833a:	2302      	movs	r3, #2
 800833c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800833e:	2300      	movs	r3, #0
 8008340:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008342:	2301      	movs	r3, #1
 8008344:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f107 0214 	add.w	r2, r7, #20
 800834e:	4611      	mov	r1, r2
 8008350:	4618      	mov	r0, r3
 8008352:	f002 fea4 	bl	800b09e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d90a      	bls.n	8008372 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2202      	movs	r2, #2
 8008360:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008368:	4618      	mov	r0, r3
 800836a:	f002 ff07 	bl	800b17c <SDMMC_CmdReadMultiBlock>
 800836e:	6478      	str	r0, [r7, #68]	; 0x44
 8008370:	e009      	b.n	8008386 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2201      	movs	r2, #1
 8008376:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800837e:	4618      	mov	r0, r3
 8008380:	f002 feda 	bl	800b138 <SDMMC_CmdReadSingleBlock>
 8008384:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008388:	2b00      	cmp	r3, #0
 800838a:	d012      	beq.n	80083b2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a7a      	ldr	r2, [pc, #488]	; (800857c <HAL_SD_ReadBlocks+0x2d4>)
 8008392:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800839a:	431a      	orrs	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e151      	b.n	8008656 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80083b6:	e061      	b.n	800847c <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d03c      	beq.n	8008440 <HAL_SD_ReadBlocks+0x198>
 80083c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d039      	beq.n	8008440 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80083cc:	2300      	movs	r3, #0
 80083ce:	643b      	str	r3, [r7, #64]	; 0x40
 80083d0:	e033      	b.n	800843a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f002 fde4 	bl	800afa4 <SDIO_ReadFIFO>
 80083dc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80083de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e0:	b2da      	uxtb	r2, r3
 80083e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80083e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e8:	3301      	adds	r3, #1
 80083ea:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80083ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ee:	3b01      	subs	r3, #1
 80083f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80083f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f4:	0a1b      	lsrs	r3, r3, #8
 80083f6:	b2da      	uxtb	r2, r3
 80083f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083fa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80083fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083fe:	3301      	adds	r3, #1
 8008400:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008404:	3b01      	subs	r3, #1
 8008406:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840a:	0c1b      	lsrs	r3, r3, #16
 800840c:	b2da      	uxtb	r2, r3
 800840e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008410:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008414:	3301      	adds	r3, #1
 8008416:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800841a:	3b01      	subs	r3, #1
 800841c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800841e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008420:	0e1b      	lsrs	r3, r3, #24
 8008422:	b2da      	uxtb	r2, r3
 8008424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008426:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842a:	3301      	adds	r3, #1
 800842c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800842e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008430:	3b01      	subs	r3, #1
 8008432:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8008434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008436:	3301      	adds	r3, #1
 8008438:	643b      	str	r3, [r7, #64]	; 0x40
 800843a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800843c:	2b07      	cmp	r3, #7
 800843e:	d9c8      	bls.n	80083d2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008440:	f7fa fe88 	bl	8003154 <HAL_GetTick>
 8008444:	4602      	mov	r2, r0
 8008446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800844c:	429a      	cmp	r2, r3
 800844e:	d902      	bls.n	8008456 <HAL_SD_ReadBlocks+0x1ae>
 8008450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008452:	2b00      	cmp	r3, #0
 8008454:	d112      	bne.n	800847c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a48      	ldr	r2, [pc, #288]	; (800857c <HAL_SD_ReadBlocks+0x2d4>)
 800845c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008462:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008478:	2303      	movs	r3, #3
 800847a:	e0ec      	b.n	8008656 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008482:	f240 332a 	movw	r3, #810	; 0x32a
 8008486:	4013      	ands	r3, r2
 8008488:	2b00      	cmp	r3, #0
 800848a:	d095      	beq.n	80083b8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008496:	2b00      	cmp	r3, #0
 8008498:	d022      	beq.n	80084e0 <HAL_SD_ReadBlocks+0x238>
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d91f      	bls.n	80084e0 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d01b      	beq.n	80084e0 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f002 fecb 	bl	800b248 <SDMMC_CmdStopTransfer>
 80084b2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80084b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d012      	beq.n	80084e0 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a2f      	ldr	r2, [pc, #188]	; (800857c <HAL_SD_ReadBlocks+0x2d4>)
 80084c0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084c8:	431a      	orrs	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e0ba      	b.n	8008656 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084e6:	f003 0308 	and.w	r3, r3, #8
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d012      	beq.n	8008514 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a22      	ldr	r2, [pc, #136]	; (800857c <HAL_SD_ReadBlocks+0x2d4>)
 80084f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fa:	f043 0208 	orr.w	r2, r3, #8
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e0a0      	b.n	8008656 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800851a:	f003 0302 	and.w	r3, r3, #2
 800851e:	2b00      	cmp	r3, #0
 8008520:	d012      	beq.n	8008548 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a15      	ldr	r2, [pc, #84]	; (800857c <HAL_SD_ReadBlocks+0x2d4>)
 8008528:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	f043 0202 	orr.w	r2, r3, #2
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e086      	b.n	8008656 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854e:	f003 0320 	and.w	r3, r3, #32
 8008552:	2b00      	cmp	r3, #0
 8008554:	d063      	beq.n	800861e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a08      	ldr	r2, [pc, #32]	; (800857c <HAL_SD_ReadBlocks+0x2d4>)
 800855c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008562:	f043 0220 	orr.w	r2, r3, #32
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2201      	movs	r2, #1
 800856e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e06c      	b.n	8008656 <HAL_SD_ReadBlocks+0x3ae>
 800857c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f002 fd0d 	bl	800afa4 <SDIO_ReadFIFO>
 800858a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858e:	b2da      	uxtb	r2, r3
 8008590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008592:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008596:	3301      	adds	r3, #1
 8008598:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800859a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800859c:	3b01      	subs	r3, #1
 800859e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80085a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a2:	0a1b      	lsrs	r3, r3, #8
 80085a4:	b2da      	uxtb	r2, r3
 80085a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80085aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ac:	3301      	adds	r3, #1
 80085ae:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80085b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b2:	3b01      	subs	r3, #1
 80085b4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80085b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b8:	0c1b      	lsrs	r3, r3, #16
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085be:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80085c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c2:	3301      	adds	r3, #1
 80085c4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80085c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c8:	3b01      	subs	r3, #1
 80085ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80085cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ce:	0e1b      	lsrs	r3, r3, #24
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80085d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d8:	3301      	adds	r3, #1
 80085da:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80085dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085de:	3b01      	subs	r3, #1
 80085e0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80085e2:	f7fa fdb7 	bl	8003154 <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d902      	bls.n	80085f8 <HAL_SD_ReadBlocks+0x350>
 80085f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d112      	bne.n	800861e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a18      	ldr	r2, [pc, #96]	; (8008660 <HAL_SD_ReadBlocks+0x3b8>)
 80085fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008604:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e01b      	b.n	8008656 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d002      	beq.n	8008632 <HAL_SD_ReadBlocks+0x38a>
 800862c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1a6      	bne.n	8008580 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f240 523a 	movw	r2, #1338	; 0x53a
 800863a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	e006      	b.n	8008656 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
  }
}
 8008656:	4618      	mov	r0, r3
 8008658:	3748      	adds	r7, #72	; 0x48
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	004005ff 	.word	0x004005ff

08008664 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b092      	sub	sp, #72	; 0x48
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
 8008670:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008672:	f7fa fd6f 	bl	8003154 <HAL_GetTick>
 8008676:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d107      	bne.n	8008696 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800868a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e166      	b.n	8008964 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b01      	cmp	r3, #1
 80086a0:	f040 8159 	bne.w	8008956 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80086aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	441a      	add	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d907      	bls.n	80086c8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086bc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e14d      	b.n	8008964 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2203      	movs	r2, #3
 80086cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2200      	movs	r2, #0
 80086d6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d002      	beq.n	80086e6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80086e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e2:	025b      	lsls	r3, r3, #9
 80086e4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80086e6:	f04f 33ff 	mov.w	r3, #4294967295
 80086ea:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	025b      	lsls	r3, r3, #9
 80086f0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80086f2:	2390      	movs	r3, #144	; 0x90
 80086f4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80086f6:	2300      	movs	r3, #0
 80086f8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80086fe:	2301      	movs	r3, #1
 8008700:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f107 0218 	add.w	r2, r7, #24
 800870a:	4611      	mov	r1, r2
 800870c:	4618      	mov	r0, r3
 800870e:	f002 fcc6 	bl	800b09e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d90a      	bls.n	800872e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2220      	movs	r2, #32
 800871c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008724:	4618      	mov	r0, r3
 8008726:	f002 fd6d 	bl	800b204 <SDMMC_CmdWriteMultiBlock>
 800872a:	6478      	str	r0, [r7, #68]	; 0x44
 800872c:	e009      	b.n	8008742 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2210      	movs	r2, #16
 8008732:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800873a:	4618      	mov	r0, r3
 800873c:	f002 fd40 	bl	800b1c0 <SDMMC_CmdWriteSingleBlock>
 8008740:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008744:	2b00      	cmp	r3, #0
 8008746:	d012      	beq.n	800876e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a87      	ldr	r2, [pc, #540]	; (800896c <HAL_SD_WriteBlocks+0x308>)
 800874e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008756:	431a      	orrs	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e0fa      	b.n	8008964 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008772:	e065      	b.n	8008840 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800877a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d040      	beq.n	8008804 <HAL_SD_WriteBlocks+0x1a0>
 8008782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008784:	2b00      	cmp	r3, #0
 8008786:	d03d      	beq.n	8008804 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008788:	2300      	movs	r3, #0
 800878a:	643b      	str	r3, [r7, #64]	; 0x40
 800878c:	e037      	b.n	80087fe <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800878e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008796:	3301      	adds	r3, #1
 8008798:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800879a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800879c:	3b01      	subs	r3, #1
 800879e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80087a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	021a      	lsls	r2, r3, #8
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80087ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ae:	3301      	adds	r3, #1
 80087b0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80087b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b4:	3b01      	subs	r3, #1
 80087b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80087b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	041a      	lsls	r2, r3, #16
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80087c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c6:	3301      	adds	r3, #1
 80087c8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80087ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087cc:	3b01      	subs	r3, #1
 80087ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80087d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	061a      	lsls	r2, r3, #24
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	4313      	orrs	r3, r2
 80087da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80087dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087de:	3301      	adds	r3, #1
 80087e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80087e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e4:	3b01      	subs	r3, #1
 80087e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f107 0214 	add.w	r2, r7, #20
 80087f0:	4611      	mov	r1, r2
 80087f2:	4618      	mov	r0, r3
 80087f4:	f002 fbe2 	bl	800afbc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80087f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087fa:	3301      	adds	r3, #1
 80087fc:	643b      	str	r3, [r7, #64]	; 0x40
 80087fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008800:	2b07      	cmp	r3, #7
 8008802:	d9c4      	bls.n	800878e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008804:	f7fa fca6 	bl	8003154 <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008810:	429a      	cmp	r2, r3
 8008812:	d902      	bls.n	800881a <HAL_SD_WriteBlocks+0x1b6>
 8008814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008816:	2b00      	cmp	r3, #0
 8008818:	d112      	bne.n	8008840 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a53      	ldr	r2, [pc, #332]	; (800896c <HAL_SD_WriteBlocks+0x308>)
 8008820:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008828:	431a      	orrs	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e091      	b.n	8008964 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008846:	f240 331a 	movw	r3, #794	; 0x31a
 800884a:	4013      	ands	r3, r2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d091      	beq.n	8008774 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800885a:	2b00      	cmp	r3, #0
 800885c:	d022      	beq.n	80088a4 <HAL_SD_WriteBlocks+0x240>
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d91f      	bls.n	80088a4 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008868:	2b03      	cmp	r3, #3
 800886a:	d01b      	beq.n	80088a4 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4618      	mov	r0, r3
 8008872:	f002 fce9 	bl	800b248 <SDMMC_CmdStopTransfer>
 8008876:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800887a:	2b00      	cmp	r3, #0
 800887c:	d012      	beq.n	80088a4 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a3a      	ldr	r2, [pc, #232]	; (800896c <HAL_SD_WriteBlocks+0x308>)
 8008884:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800888a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800888c:	431a      	orrs	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e05f      	b.n	8008964 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088aa:	f003 0308 	and.w	r3, r3, #8
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d012      	beq.n	80088d8 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a2d      	ldr	r2, [pc, #180]	; (800896c <HAL_SD_WriteBlocks+0x308>)
 80088b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088be:	f043 0208 	orr.w	r2, r3, #8
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e045      	b.n	8008964 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d012      	beq.n	800890c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a20      	ldr	r2, [pc, #128]	; (800896c <HAL_SD_WriteBlocks+0x308>)
 80088ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f2:	f043 0202 	orr.w	r2, r3, #2
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e02b      	b.n	8008964 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008912:	f003 0310 	and.w	r3, r3, #16
 8008916:	2b00      	cmp	r3, #0
 8008918:	d012      	beq.n	8008940 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a13      	ldr	r2, [pc, #76]	; (800896c <HAL_SD_WriteBlocks+0x308>)
 8008920:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008926:	f043 0210 	orr.w	r2, r3, #16
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e011      	b.n	8008964 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f240 523a 	movw	r2, #1338	; 0x53a
 8008948:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	e006      	b.n	8008964 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
  }
}
 8008964:	4618      	mov	r0, r3
 8008966:	3748      	adds	r7, #72	; 0x48
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	004005ff 	.word	0x004005ff

08008970 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800897e:	0f9b      	lsrs	r3, r3, #30
 8008980:	b2da      	uxtb	r2, r3
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800898a:	0e9b      	lsrs	r3, r3, #26
 800898c:	b2db      	uxtb	r3, r3
 800898e:	f003 030f 	and.w	r3, r3, #15
 8008992:	b2da      	uxtb	r2, r3
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800899c:	0e1b      	lsrs	r3, r3, #24
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	f003 0303 	and.w	r3, r3, #3
 80089a4:	b2da      	uxtb	r2, r3
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089ae:	0c1b      	lsrs	r3, r3, #16
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089ba:	0a1b      	lsrs	r3, r3, #8
 80089bc:	b2da      	uxtb	r2, r3
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089d0:	0d1b      	lsrs	r3, r3, #20
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089dc:	0c1b      	lsrs	r3, r3, #16
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	f003 030f 	and.w	r3, r3, #15
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089ee:	0bdb      	lsrs	r3, r3, #15
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a00:	0b9b      	lsrs	r3, r3, #14
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a12:	0b5b      	lsrs	r3, r3, #13
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a24:	0b1b      	lsrs	r3, r3, #12
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	f003 0301 	and.w	r3, r3, #1
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	2200      	movs	r2, #0
 8008a36:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d163      	bne.n	8008b08 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a44:	009a      	lsls	r2, r3, #2
 8008a46:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008a50:	0f92      	lsrs	r2, r2, #30
 8008a52:	431a      	orrs	r2, r3
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a5c:	0edb      	lsrs	r3, r3, #27
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	f003 0307 	and.w	r3, r3, #7
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a6e:	0e1b      	lsrs	r3, r3, #24
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	f003 0307 	and.w	r3, r3, #7
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a80:	0d5b      	lsrs	r3, r3, #21
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	f003 0307 	and.w	r3, r3, #7
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a92:	0c9b      	lsrs	r3, r3, #18
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	f003 0307 	and.w	r3, r3, #7
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aa4:	0bdb      	lsrs	r3, r3, #15
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	f003 0307 	and.w	r3, r3, #7
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	7e1b      	ldrb	r3, [r3, #24]
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	f003 0307 	and.w	r3, r3, #7
 8008ac6:	3302      	adds	r3, #2
 8008ac8:	2201      	movs	r2, #1
 8008aca:	fa02 f303 	lsl.w	r3, r2, r3
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008ad2:	fb03 f202 	mul.w	r2, r3, r2
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	7a1b      	ldrb	r3, [r3, #8]
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	f003 030f 	and.w	r3, r3, #15
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	409a      	lsls	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008af4:	0a52      	lsrs	r2, r2, #9
 8008af6:	fb03 f202 	mul.w	r2, r3, r2
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b04:	661a      	str	r2, [r3, #96]	; 0x60
 8008b06:	e031      	b.n	8008b6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d11d      	bne.n	8008b4c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b14:	041b      	lsls	r3, r3, #16
 8008b16:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b1e:	0c1b      	lsrs	r3, r3, #16
 8008b20:	431a      	orrs	r2, r3
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	029a      	lsls	r2, r3, #10
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b40:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	661a      	str	r2, [r3, #96]	; 0x60
 8008b4a:	e00f      	b.n	8008b6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a58      	ldr	r2, [pc, #352]	; (8008cb4 <HAL_SD_GetCardCSD+0x344>)
 8008b52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e09d      	b.n	8008ca8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b70:	0b9b      	lsrs	r3, r3, #14
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	f003 0301 	and.w	r3, r3, #1
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b82:	09db      	lsrs	r3, r3, #7
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b8a:	b2da      	uxtb	r2, r3
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba4:	0fdb      	lsrs	r3, r3, #31
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb0:	0f5b      	lsrs	r3, r3, #29
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	f003 0303 	and.w	r3, r3, #3
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc2:	0e9b      	lsrs	r3, r3, #26
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd4:	0d9b      	lsrs	r3, r3, #22
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	f003 030f 	and.w	r3, r3, #15
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be6:	0d5b      	lsrs	r3, r3, #21
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c02:	0c1b      	lsrs	r3, r3, #16
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c16:	0bdb      	lsrs	r3, r3, #15
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c2a:	0b9b      	lsrs	r3, r3, #14
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c3e:	0b5b      	lsrs	r3, r3, #13
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	f003 0301 	and.w	r3, r3, #1
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c52:	0b1b      	lsrs	r3, r3, #12
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	b2da      	uxtb	r2, r3
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c66:	0a9b      	lsrs	r3, r3, #10
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	f003 0303 	and.w	r3, r3, #3
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c7a:	0a1b      	lsrs	r3, r3, #8
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	f003 0303 	and.w	r3, r3, #3
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8e:	085b      	lsrs	r3, r3, #1
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c96:	b2da      	uxtb	r2, r3
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bc80      	pop	{r7}
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	004005ff 	.word	0x004005ff

08008cb8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bc80      	pop	{r7}
 8008d0c:	4770      	bx	lr
	...

08008d10 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008d10:	b5b0      	push	{r4, r5, r7, lr}
 8008d12:	b08e      	sub	sp, #56	; 0x38
 8008d14:	af04      	add	r7, sp, #16
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2203      	movs	r2, #3
 8008d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d2c:	2b03      	cmp	r3, #3
 8008d2e:	d02e      	beq.n	8008d8e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d36:	d106      	bne.n	8008d46 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	639a      	str	r2, [r3, #56]	; 0x38
 8008d44:	e029      	b.n	8008d9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d4c:	d10a      	bne.n	8008d64 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fa1c 	bl	800918c <SD_WideBus_Enable>
 8008d54:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	639a      	str	r2, [r3, #56]	; 0x38
 8008d62:	e01a      	b.n	8008d9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10a      	bne.n	8008d80 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fa59 	bl	8009222 <SD_WideBus_Disable>
 8008d70:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	639a      	str	r2, [r3, #56]	; 0x38
 8008d7e:	e00c      	b.n	8008d9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	639a      	str	r2, [r3, #56]	; 0x38
 8008d8c:	e005      	b.n	8008d9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d92:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00b      	beq.n	8008dba <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a26      	ldr	r2, [pc, #152]	; (8008e40 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008da8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008db8:	e01f      	b.n	8008dfa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	695b      	ldr	r3, [r3, #20]
 8008dd4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681d      	ldr	r5, [r3, #0]
 8008de0:	466c      	mov	r4, sp
 8008de2:	f107 0314 	add.w	r3, r7, #20
 8008de6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008dea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008dee:	f107 0308 	add.w	r3, r7, #8
 8008df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008df4:	4628      	mov	r0, r5
 8008df6:	f002 f8ab 	bl	800af50 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e02:	4618      	mov	r0, r3
 8008e04:	f002 f976 	bl	800b0f4 <SDMMC_CmdBlockLength>
 8008e08:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e0a:	6a3b      	ldr	r3, [r7, #32]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00c      	beq.n	8008e2a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a0a      	ldr	r2, [pc, #40]	; (8008e40 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008e16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	431a      	orrs	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3728      	adds	r7, #40	; 0x28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	004005ff 	.word	0x004005ff

08008e44 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008e50:	f107 030c 	add.w	r3, r7, #12
 8008e54:	4619      	mov	r1, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f970 	bl	800913c <SD_SendStatus>
 8008e5c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d005      	beq.n	8008e70 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	431a      	orrs	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	0a5b      	lsrs	r3, r3, #9
 8008e74:	f003 030f 	and.w	r3, r3, #15
 8008e78:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008e7a:	693b      	ldr	r3, [r7, #16]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3718      	adds	r7, #24
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008e84:	b5b0      	push	{r4, r5, r7, lr}
 8008e86:	b094      	sub	sp, #80	; 0x50
 8008e88:	af04      	add	r7, sp, #16
 8008e8a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f002 f8ae 	bl	800aff6 <SDIO_GetPowerState>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d102      	bne.n	8008ea6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ea0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008ea4:	e0b8      	b.n	8009018 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eaa:	2b03      	cmp	r3, #3
 8008eac:	d02f      	beq.n	8008f0e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f002 fad2 	bl	800b45c <SDMMC_CmdSendCID>
 8008eb8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <SD_InitCard+0x40>
    {
      return errorstate;
 8008ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec2:	e0a9      	b.n	8009018 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2100      	movs	r1, #0
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f002 f8d5 	bl	800b07a <SDIO_GetResponse>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2104      	movs	r1, #4
 8008edc:	4618      	mov	r0, r3
 8008ede:	f002 f8cc 	bl	800b07a <SDIO_GetResponse>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2108      	movs	r1, #8
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f002 f8c3 	bl	800b07a <SDIO_GetResponse>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	210c      	movs	r1, #12
 8008f00:	4618      	mov	r0, r3
 8008f02:	f002 f8ba 	bl	800b07a <SDIO_GetResponse>
 8008f06:	4602      	mov	r2, r0
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	d00d      	beq.n	8008f32 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f107 020e 	add.w	r2, r7, #14
 8008f1e:	4611      	mov	r1, r2
 8008f20:	4618      	mov	r0, r3
 8008f22:	f002 fad8 	bl	800b4d6 <SDMMC_CmdSetRelAdd>
 8008f26:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <SD_InitCard+0xae>
    {
      return errorstate;
 8008f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f30:	e072      	b.n	8009018 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	d036      	beq.n	8008fa8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008f3a:	89fb      	ldrh	r3, [r7, #14]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f4a:	041b      	lsls	r3, r3, #16
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	4610      	mov	r0, r2
 8008f50:	f002 faa2 	bl	800b498 <SDMMC_CmdSendCSD>
 8008f54:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d001      	beq.n	8008f60 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f5e:	e05b      	b.n	8009018 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2100      	movs	r1, #0
 8008f66:	4618      	mov	r0, r3
 8008f68:	f002 f887 	bl	800b07a <SDIO_GetResponse>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2104      	movs	r1, #4
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f002 f87e 	bl	800b07a <SDIO_GetResponse>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2108      	movs	r1, #8
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f002 f875 	bl	800b07a <SDIO_GetResponse>
 8008f90:	4602      	mov	r2, r0
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	210c      	movs	r1, #12
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f002 f86c 	bl	800b07a <SDIO_GetResponse>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2104      	movs	r1, #4
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f002 f863 	bl	800b07a <SDIO_GetResponse>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	0d1a      	lsrs	r2, r3, #20
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008fbc:	f107 0310 	add.w	r3, r7, #16
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff fcd4 	bl	8008970 <HAL_SD_GetCardCSD>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d002      	beq.n	8008fd4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008fd2:	e021      	b.n	8009018 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6819      	ldr	r1, [r3, #0]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fdc:	041b      	lsls	r3, r3, #16
 8008fde:	2200      	movs	r2, #0
 8008fe0:	461c      	mov	r4, r3
 8008fe2:	4615      	mov	r5, r2
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	462b      	mov	r3, r5
 8008fe8:	4608      	mov	r0, r1
 8008fea:	f002 f94f 	bl	800b28c <SDMMC_CmdSelDesel>
 8008fee:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d001      	beq.n	8008ffa <SD_InitCard+0x176>
  {
    return errorstate;
 8008ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff8:	e00e      	b.n	8009018 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681d      	ldr	r5, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	466c      	mov	r4, sp
 8009002:	f103 0210 	add.w	r2, r3, #16
 8009006:	ca07      	ldmia	r2, {r0, r1, r2}
 8009008:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800900c:	3304      	adds	r3, #4
 800900e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009010:	4628      	mov	r0, r5
 8009012:	f001 ff9d 	bl	800af50 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3740      	adds	r7, #64	; 0x40
 800901c:	46bd      	mov	sp, r7
 800901e:	bdb0      	pop	{r4, r5, r7, pc}

08009020 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009028:	2300      	movs	r3, #0
 800902a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800902c:	2300      	movs	r3, #0
 800902e:	617b      	str	r3, [r7, #20]
 8009030:	2300      	movs	r3, #0
 8009032:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4618      	mov	r0, r3
 800903a:	f002 f94a 	bl	800b2d2 <SDMMC_CmdGoIdleState>
 800903e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	e072      	b.n	8009130 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4618      	mov	r0, r3
 8009050:	f002 f95d 	bl	800b30e <SDMMC_CmdOperCond>
 8009054:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00d      	beq.n	8009078 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4618      	mov	r0, r3
 8009068:	f002 f933 	bl	800b2d2 <SDMMC_CmdGoIdleState>
 800906c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d004      	beq.n	800907e <SD_PowerON+0x5e>
    {
      return errorstate;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	e05b      	b.n	8009130 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009082:	2b01      	cmp	r3, #1
 8009084:	d137      	bne.n	80090f6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2100      	movs	r1, #0
 800908c:	4618      	mov	r0, r3
 800908e:	f002 f95d 	bl	800b34c <SDMMC_CmdAppCommand>
 8009092:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d02d      	beq.n	80090f6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800909a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800909e:	e047      	b.n	8009130 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2100      	movs	r1, #0
 80090a6:	4618      	mov	r0, r3
 80090a8:	f002 f950 	bl	800b34c <SDMMC_CmdAppCommand>
 80090ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <SD_PowerON+0x98>
    {
      return errorstate;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	e03b      	b.n	8009130 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	491e      	ldr	r1, [pc, #120]	; (8009138 <SD_PowerON+0x118>)
 80090be:	4618      	mov	r0, r3
 80090c0:	f002 f966 	bl	800b390 <SDMMC_CmdAppOperCommand>
 80090c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d002      	beq.n	80090d2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80090cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80090d0:	e02e      	b.n	8009130 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2100      	movs	r1, #0
 80090d8:	4618      	mov	r0, r3
 80090da:	f001 ffce 	bl	800b07a <SDIO_GetResponse>
 80090de:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	0fdb      	lsrs	r3, r3, #31
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d101      	bne.n	80090ec <SD_PowerON+0xcc>
 80090e8:	2301      	movs	r3, #1
 80090ea:	e000      	b.n	80090ee <SD_PowerON+0xce>
 80090ec:	2300      	movs	r3, #0
 80090ee:	613b      	str	r3, [r7, #16]

    count++;
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	3301      	adds	r3, #1
 80090f4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d802      	bhi.n	8009106 <SD_PowerON+0xe6>
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d0cc      	beq.n	80090a0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800910c:	4293      	cmp	r3, r2
 800910e:	d902      	bls.n	8009116 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009110:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009114:	e00c      	b.n	8009130 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d003      	beq.n	8009128 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	645a      	str	r2, [r3, #68]	; 0x44
 8009126:	e002      	b.n	800912e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	c1100000 	.word	0xc1100000

0800913c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d102      	bne.n	8009152 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800914c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009150:	e018      	b.n	8009184 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800915a:	041b      	lsls	r3, r3, #16
 800915c:	4619      	mov	r1, r3
 800915e:	4610      	mov	r0, r2
 8009160:	f002 f9da 	bl	800b518 <SDMMC_CmdSendStatus>
 8009164:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <SD_SendStatus+0x34>
  {
    return errorstate;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	e009      	b.n	8009184 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2100      	movs	r1, #0
 8009176:	4618      	mov	r0, r3
 8009178:	f001 ff7f 	bl	800b07a <SDIO_GetResponse>
 800917c:	4602      	mov	r2, r0
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009194:	2300      	movs	r3, #0
 8009196:	60fb      	str	r3, [r7, #12]
 8009198:	2300      	movs	r3, #0
 800919a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2100      	movs	r1, #0
 80091a2:	4618      	mov	r0, r3
 80091a4:	f001 ff69 	bl	800b07a <SDIO_GetResponse>
 80091a8:	4603      	mov	r3, r0
 80091aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091b2:	d102      	bne.n	80091ba <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80091b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091b8:	e02f      	b.n	800921a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80091ba:	f107 030c 	add.w	r3, r7, #12
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f879 	bl	80092b8 <SD_FindSCR>
 80091c6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d001      	beq.n	80091d2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	e023      	b.n	800921a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d01c      	beq.n	8009216 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e4:	041b      	lsls	r3, r3, #16
 80091e6:	4619      	mov	r1, r3
 80091e8:	4610      	mov	r0, r2
 80091ea:	f002 f8af 	bl	800b34c <SDMMC_CmdAppCommand>
 80091ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	e00f      	b.n	800921a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2102      	movs	r1, #2
 8009200:	4618      	mov	r0, r3
 8009202:	f002 f8e8 	bl	800b3d6 <SDMMC_CmdBusWidth>
 8009206:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	e003      	b.n	800921a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009212:	2300      	movs	r3, #0
 8009214:	e001      	b.n	800921a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009216:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800921a:	4618      	mov	r0, r3
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b086      	sub	sp, #24
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800922a:	2300      	movs	r3, #0
 800922c:	60fb      	str	r3, [r7, #12]
 800922e:	2300      	movs	r3, #0
 8009230:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2100      	movs	r1, #0
 8009238:	4618      	mov	r0, r3
 800923a:	f001 ff1e 	bl	800b07a <SDIO_GetResponse>
 800923e:	4603      	mov	r3, r0
 8009240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009244:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009248:	d102      	bne.n	8009250 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800924a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800924e:	e02f      	b.n	80092b0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009250:	f107 030c 	add.w	r3, r7, #12
 8009254:	4619      	mov	r1, r3
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f82e 	bl	80092b8 <SD_FindSCR>
 800925c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d001      	beq.n	8009268 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	e023      	b.n	80092b0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d01c      	beq.n	80092ac <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800927a:	041b      	lsls	r3, r3, #16
 800927c:	4619      	mov	r1, r3
 800927e:	4610      	mov	r0, r2
 8009280:	f002 f864 	bl	800b34c <SDMMC_CmdAppCommand>
 8009284:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	e00f      	b.n	80092b0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2100      	movs	r1, #0
 8009296:	4618      	mov	r0, r3
 8009298:	f002 f89d 	bl	800b3d6 <SDMMC_CmdBusWidth>
 800929c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	e003      	b.n	80092b0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80092a8:	2300      	movs	r3, #0
 80092aa:	e001      	b.n	80092b0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80092ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3718      	adds	r7, #24
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80092b8:	b590      	push	{r4, r7, lr}
 80092ba:	b08f      	sub	sp, #60	; 0x3c
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80092c2:	f7f9 ff47 	bl	8003154 <HAL_GetTick>
 80092c6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80092c8:	2300      	movs	r3, #0
 80092ca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80092cc:	2300      	movs	r3, #0
 80092ce:	60bb      	str	r3, [r7, #8]
 80092d0:	2300      	movs	r3, #0
 80092d2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2108      	movs	r1, #8
 80092de:	4618      	mov	r0, r3
 80092e0:	f001 ff08 	bl	800b0f4 <SDMMC_CmdBlockLength>
 80092e4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80092e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80092ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ee:	e0b2      	b.n	8009456 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f8:	041b      	lsls	r3, r3, #16
 80092fa:	4619      	mov	r1, r3
 80092fc:	4610      	mov	r0, r2
 80092fe:	f002 f825 	bl	800b34c <SDMMC_CmdAppCommand>
 8009302:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <SD_FindSCR+0x56>
  {
    return errorstate;
 800930a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930c:	e0a3      	b.n	8009456 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800930e:	f04f 33ff 	mov.w	r3, #4294967295
 8009312:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009314:	2308      	movs	r3, #8
 8009316:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8009318:	2330      	movs	r3, #48	; 0x30
 800931a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800931c:	2302      	movs	r3, #2
 800931e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009320:	2300      	movs	r3, #0
 8009322:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009324:	2301      	movs	r3, #1
 8009326:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f107 0210 	add.w	r2, r7, #16
 8009330:	4611      	mov	r1, r2
 8009332:	4618      	mov	r0, r3
 8009334:	f001 feb3 	bl	800b09e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4618      	mov	r0, r3
 800933e:	f002 f86c 	bl	800b41a <SDMMC_CmdSendSCR>
 8009342:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009346:	2b00      	cmp	r3, #0
 8009348:	d02a      	beq.n	80093a0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800934a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934c:	e083      	b.n	8009456 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00f      	beq.n	800937c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6819      	ldr	r1, [r3, #0]
 8009360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	f107 0208 	add.w	r2, r7, #8
 8009368:	18d4      	adds	r4, r2, r3
 800936a:	4608      	mov	r0, r1
 800936c:	f001 fe1a 	bl	800afa4 <SDIO_ReadFIFO>
 8009370:	4603      	mov	r3, r0
 8009372:	6023      	str	r3, [r4, #0]
      index++;
 8009374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009376:	3301      	adds	r3, #1
 8009378:	637b      	str	r3, [r7, #52]	; 0x34
 800937a:	e006      	b.n	800938a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d012      	beq.n	80093b0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800938a:	f7f9 fee3 	bl	8003154 <HAL_GetTick>
 800938e:	4602      	mov	r2, r0
 8009390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009398:	d102      	bne.n	80093a0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800939a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800939e:	e05a      	b.n	8009456 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0cf      	beq.n	800934e <SD_FindSCR+0x96>
 80093ae:	e000      	b.n	80093b2 <SD_FindSCR+0xfa>
      break;
 80093b0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b8:	f003 0308 	and.w	r3, r3, #8
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d005      	beq.n	80093cc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2208      	movs	r2, #8
 80093c6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80093c8:	2308      	movs	r3, #8
 80093ca:	e044      	b.n	8009456 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d2:	f003 0302 	and.w	r3, r3, #2
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d005      	beq.n	80093e6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2202      	movs	r2, #2
 80093e0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80093e2:	2302      	movs	r3, #2
 80093e4:	e037      	b.n	8009456 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ec:	f003 0320 	and.w	r3, r3, #32
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d005      	beq.n	8009400 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2220      	movs	r2, #32
 80093fa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80093fc:	2320      	movs	r3, #32
 80093fe:	e02a      	b.n	8009456 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f240 523a 	movw	r2, #1338	; 0x53a
 8009408:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	061a      	lsls	r2, r3, #24
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	021b      	lsls	r3, r3, #8
 8009412:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009416:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	0a1b      	lsrs	r3, r3, #8
 800941c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009420:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	0e1b      	lsrs	r3, r3, #24
 8009426:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942a:	601a      	str	r2, [r3, #0]
    scr++;
 800942c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942e:	3304      	adds	r3, #4
 8009430:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	061a      	lsls	r2, r3, #24
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	021b      	lsls	r3, r3, #8
 800943a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800943e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	0a1b      	lsrs	r3, r3, #8
 8009444:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009448:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	0e1b      	lsrs	r3, r3, #24
 800944e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009452:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	373c      	adds	r7, #60	; 0x3c
 800945a:	46bd      	mov	sp, r7
 800945c:	bd90      	pop	{r4, r7, pc}

0800945e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b082      	sub	sp, #8
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d101      	bne.n	8009470 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	e076      	b.n	800955e <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009474:	2b00      	cmp	r3, #0
 8009476:	d108      	bne.n	800948a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009480:	d009      	beq.n	8009496 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	61da      	str	r2, [r3, #28]
 8009488:	e005      	b.n	8009496 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d106      	bne.n	80094b6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f7f9 fb2f 	bl	8002b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2202      	movs	r2, #2
 80094ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094cc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80094de:	431a      	orrs	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094e8:	431a      	orrs	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	f003 0302 	and.w	r3, r3, #2
 80094f2:	431a      	orrs	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	695b      	ldr	r3, [r3, #20]
 80094f8:	f003 0301 	and.w	r3, r3, #1
 80094fc:	431a      	orrs	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009506:	431a      	orrs	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	69db      	ldr	r3, [r3, #28]
 800950c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009510:	431a      	orrs	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800951a:	ea42 0103 	orr.w	r1, r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009522:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	430a      	orrs	r2, r1
 800952c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	699b      	ldr	r3, [r3, #24]
 8009532:	0c1a      	lsrs	r2, r3, #16
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f002 0204 	and.w	r2, r2, #4
 800953c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	69da      	ldr	r2, [r3, #28]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800954c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b088      	sub	sp, #32
 800956a:	af00      	add	r7, sp, #0
 800956c:	60f8      	str	r0, [r7, #12]
 800956e:	60b9      	str	r1, [r7, #8]
 8009570:	603b      	str	r3, [r7, #0]
 8009572:	4613      	mov	r3, r2
 8009574:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009576:	2300      	movs	r3, #0
 8009578:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009580:	2b01      	cmp	r3, #1
 8009582:	d101      	bne.n	8009588 <HAL_SPI_Transmit+0x22>
 8009584:	2302      	movs	r3, #2
 8009586:	e12d      	b.n	80097e4 <HAL_SPI_Transmit+0x27e>
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009590:	f7f9 fde0 	bl	8003154 <HAL_GetTick>
 8009594:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009596:	88fb      	ldrh	r3, [r7, #6]
 8009598:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d002      	beq.n	80095ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80095a6:	2302      	movs	r3, #2
 80095a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80095aa:	e116      	b.n	80097da <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d002      	beq.n	80095b8 <HAL_SPI_Transmit+0x52>
 80095b2:	88fb      	ldrh	r3, [r7, #6]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d102      	bne.n	80095be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80095bc:	e10d      	b.n	80097da <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2203      	movs	r2, #3
 80095c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	88fa      	ldrh	r2, [r7, #6]
 80095d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	88fa      	ldrh	r2, [r7, #6]
 80095dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009604:	d10f      	bne.n	8009626 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009614:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009624:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009630:	2b40      	cmp	r3, #64	; 0x40
 8009632:	d007      	beq.n	8009644 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009642:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800964c:	d14f      	bne.n	80096ee <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d002      	beq.n	800965c <HAL_SPI_Transmit+0xf6>
 8009656:	8afb      	ldrh	r3, [r7, #22]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d142      	bne.n	80096e2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009660:	881a      	ldrh	r2, [r3, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966c:	1c9a      	adds	r2, r3, #2
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009676:	b29b      	uxth	r3, r3
 8009678:	3b01      	subs	r3, #1
 800967a:	b29a      	uxth	r2, r3
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009680:	e02f      	b.n	80096e2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	f003 0302 	and.w	r3, r3, #2
 800968c:	2b02      	cmp	r3, #2
 800968e:	d112      	bne.n	80096b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009694:	881a      	ldrh	r2, [r3, #0]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a0:	1c9a      	adds	r2, r3, #2
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	3b01      	subs	r3, #1
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80096b4:	e015      	b.n	80096e2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096b6:	f7f9 fd4d 	bl	8003154 <HAL_GetTick>
 80096ba:	4602      	mov	r2, r0
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	683a      	ldr	r2, [r7, #0]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d803      	bhi.n	80096ce <HAL_SPI_Transmit+0x168>
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096cc:	d102      	bne.n	80096d4 <HAL_SPI_Transmit+0x16e>
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d106      	bne.n	80096e2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80096d4:	2303      	movs	r3, #3
 80096d6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80096e0:	e07b      	b.n	80097da <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1ca      	bne.n	8009682 <HAL_SPI_Transmit+0x11c>
 80096ec:	e050      	b.n	8009790 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d002      	beq.n	80096fc <HAL_SPI_Transmit+0x196>
 80096f6:	8afb      	ldrh	r3, [r7, #22]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d144      	bne.n	8009786 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	330c      	adds	r3, #12
 8009706:	7812      	ldrb	r2, [r2, #0]
 8009708:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970e:	1c5a      	adds	r2, r3, #1
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009718:	b29b      	uxth	r3, r3
 800971a:	3b01      	subs	r3, #1
 800971c:	b29a      	uxth	r2, r3
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009722:	e030      	b.n	8009786 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f003 0302 	and.w	r3, r3, #2
 800972e:	2b02      	cmp	r3, #2
 8009730:	d113      	bne.n	800975a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	330c      	adds	r3, #12
 800973c:	7812      	ldrb	r2, [r2, #0]
 800973e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009744:	1c5a      	adds	r2, r3, #1
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800974e:	b29b      	uxth	r3, r3
 8009750:	3b01      	subs	r3, #1
 8009752:	b29a      	uxth	r2, r3
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	86da      	strh	r2, [r3, #54]	; 0x36
 8009758:	e015      	b.n	8009786 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800975a:	f7f9 fcfb 	bl	8003154 <HAL_GetTick>
 800975e:	4602      	mov	r2, r0
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	683a      	ldr	r2, [r7, #0]
 8009766:	429a      	cmp	r2, r3
 8009768:	d803      	bhi.n	8009772 <HAL_SPI_Transmit+0x20c>
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009770:	d102      	bne.n	8009778 <HAL_SPI_Transmit+0x212>
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d106      	bne.n	8009786 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8009778:	2303      	movs	r3, #3
 800977a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009784:	e029      	b.n	80097da <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800978a:	b29b      	uxth	r3, r3
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1c9      	bne.n	8009724 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009790:	69ba      	ldr	r2, [r7, #24]
 8009792:	6839      	ldr	r1, [r7, #0]
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f000 f8b1 	bl	80098fc <SPI_EndRxTxTransaction>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d002      	beq.n	80097a6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2220      	movs	r2, #32
 80097a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10a      	bne.n	80097c4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097ae:	2300      	movs	r3, #0
 80097b0:	613b      	str	r3, [r7, #16]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	613b      	str	r3, [r7, #16]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	613b      	str	r3, [r7, #16]
 80097c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	77fb      	strb	r3, [r7, #31]
 80097d0:	e003      	b.n	80097da <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80097e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3720      	adds	r7, #32
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b088      	sub	sp, #32
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	603b      	str	r3, [r7, #0]
 80097f8:	4613      	mov	r3, r2
 80097fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80097fc:	f7f9 fcaa 	bl	8003154 <HAL_GetTick>
 8009800:	4602      	mov	r2, r0
 8009802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009804:	1a9b      	subs	r3, r3, r2
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	4413      	add	r3, r2
 800980a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800980c:	f7f9 fca2 	bl	8003154 <HAL_GetTick>
 8009810:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009812:	4b39      	ldr	r3, [pc, #228]	; (80098f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	015b      	lsls	r3, r3, #5
 8009818:	0d1b      	lsrs	r3, r3, #20
 800981a:	69fa      	ldr	r2, [r7, #28]
 800981c:	fb02 f303 	mul.w	r3, r2, r3
 8009820:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009822:	e054      	b.n	80098ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800982a:	d050      	beq.n	80098ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800982c:	f7f9 fc92 	bl	8003154 <HAL_GetTick>
 8009830:	4602      	mov	r2, r0
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	69fa      	ldr	r2, [r7, #28]
 8009838:	429a      	cmp	r2, r3
 800983a:	d902      	bls.n	8009842 <SPI_WaitFlagStateUntilTimeout+0x56>
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d13d      	bne.n	80098be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	685a      	ldr	r2, [r3, #4]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009850:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800985a:	d111      	bne.n	8009880 <SPI_WaitFlagStateUntilTimeout+0x94>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009864:	d004      	beq.n	8009870 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800986e:	d107      	bne.n	8009880 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800987e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009888:	d10f      	bne.n	80098aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009898:	601a      	str	r2, [r3, #0]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	e017      	b.n	80098ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d101      	bne.n	80098c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80098c4:	2300      	movs	r3, #0
 80098c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	689a      	ldr	r2, [r3, #8]
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	4013      	ands	r3, r2
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	429a      	cmp	r2, r3
 80098dc:	bf0c      	ite	eq
 80098de:	2301      	moveq	r3, #1
 80098e0:	2300      	movne	r3, #0
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	461a      	mov	r2, r3
 80098e6:	79fb      	ldrb	r3, [r7, #7]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d19b      	bne.n	8009824 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3720      	adds	r7, #32
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	20000080 	.word	0x20000080

080098fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af02      	add	r7, sp, #8
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	2200      	movs	r2, #0
 8009910:	2180      	movs	r1, #128	; 0x80
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f7ff ff6a 	bl	80097ec <SPI_WaitFlagStateUntilTimeout>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d007      	beq.n	800992e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009922:	f043 0220 	orr.w	r2, r3, #32
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800992a:	2303      	movs	r3, #3
 800992c:	e000      	b.n	8009930 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800992e:	2300      	movs	r3, #0
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d101      	bne.n	800994a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	e041      	b.n	80099ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d106      	bne.n	8009964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f7f9 f988 	bl	8002c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2202      	movs	r2, #2
 8009968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	3304      	adds	r3, #4
 8009974:	4619      	mov	r1, r3
 8009976:	4610      	mov	r0, r2
 8009978:	f000 fb42 	bl	800a000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
	...

080099d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d001      	beq.n	80099f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	e03c      	b.n	8009a6a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2202      	movs	r2, #2
 80099f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a1d      	ldr	r2, [pc, #116]	; (8009a74 <HAL_TIM_Base_Start+0x9c>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d018      	beq.n	8009a34 <HAL_TIM_Base_Start+0x5c>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a1c      	ldr	r2, [pc, #112]	; (8009a78 <HAL_TIM_Base_Start+0xa0>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d013      	beq.n	8009a34 <HAL_TIM_Base_Start+0x5c>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a14:	d00e      	beq.n	8009a34 <HAL_TIM_Base_Start+0x5c>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a18      	ldr	r2, [pc, #96]	; (8009a7c <HAL_TIM_Base_Start+0xa4>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d009      	beq.n	8009a34 <HAL_TIM_Base_Start+0x5c>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a16      	ldr	r2, [pc, #88]	; (8009a80 <HAL_TIM_Base_Start+0xa8>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d004      	beq.n	8009a34 <HAL_TIM_Base_Start+0x5c>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a15      	ldr	r2, [pc, #84]	; (8009a84 <HAL_TIM_Base_Start+0xac>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d111      	bne.n	8009a58 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	f003 0307 	and.w	r3, r3, #7
 8009a3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2b06      	cmp	r3, #6
 8009a44:	d010      	beq.n	8009a68 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f042 0201 	orr.w	r2, r2, #1
 8009a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a56:	e007      	b.n	8009a68 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f042 0201 	orr.w	r2, r2, #1
 8009a66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bc80      	pop	{r7}
 8009a72:	4770      	bx	lr
 8009a74:	40012c00 	.word	0x40012c00
 8009a78:	40013400 	.word	0x40013400
 8009a7c:	40000400 	.word	0x40000400
 8009a80:	40000800 	.word	0x40000800
 8009a84:	40000c00 	.word	0x40000c00

08009a88 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	6a1a      	ldr	r2, [r3, #32]
 8009a96:	f241 1311 	movw	r3, #4369	; 0x1111
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10f      	bne.n	8009ac0 <HAL_TIM_Base_Stop+0x38>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	6a1a      	ldr	r2, [r3, #32]
 8009aa6:	f240 4344 	movw	r3, #1092	; 0x444
 8009aaa:	4013      	ands	r3, r2
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d107      	bne.n	8009ac0 <HAL_TIM_Base_Stop+0x38>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f022 0201 	bic.w	r2, r2, #1
 8009abe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	370c      	adds	r7, #12
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bc80      	pop	{r7}
 8009ad2:	4770      	bx	lr

08009ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d001      	beq.n	8009aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e044      	b.n	8009b76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2202      	movs	r2, #2
 8009af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68da      	ldr	r2, [r3, #12]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f042 0201 	orr.w	r2, r2, #1
 8009b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a1d      	ldr	r2, [pc, #116]	; (8009b80 <HAL_TIM_Base_Start_IT+0xac>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d018      	beq.n	8009b40 <HAL_TIM_Base_Start_IT+0x6c>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a1c      	ldr	r2, [pc, #112]	; (8009b84 <HAL_TIM_Base_Start_IT+0xb0>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d013      	beq.n	8009b40 <HAL_TIM_Base_Start_IT+0x6c>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b20:	d00e      	beq.n	8009b40 <HAL_TIM_Base_Start_IT+0x6c>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a18      	ldr	r2, [pc, #96]	; (8009b88 <HAL_TIM_Base_Start_IT+0xb4>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d009      	beq.n	8009b40 <HAL_TIM_Base_Start_IT+0x6c>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a16      	ldr	r2, [pc, #88]	; (8009b8c <HAL_TIM_Base_Start_IT+0xb8>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d004      	beq.n	8009b40 <HAL_TIM_Base_Start_IT+0x6c>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a15      	ldr	r2, [pc, #84]	; (8009b90 <HAL_TIM_Base_Start_IT+0xbc>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d111      	bne.n	8009b64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	f003 0307 	and.w	r3, r3, #7
 8009b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2b06      	cmp	r3, #6
 8009b50:	d010      	beq.n	8009b74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f042 0201 	orr.w	r2, r2, #1
 8009b60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b62:	e007      	b.n	8009b74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f042 0201 	orr.w	r2, r2, #1
 8009b72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bc80      	pop	{r7}
 8009b7e:	4770      	bx	lr
 8009b80:	40012c00 	.word	0x40012c00
 8009b84:	40013400 	.word	0x40013400
 8009b88:	40000400 	.word	0x40000400
 8009b8c:	40000800 	.word	0x40000800
 8009b90:	40000c00 	.word	0x40000c00

08009b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	f003 0302 	and.w	r3, r3, #2
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d122      	bne.n	8009bf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	f003 0302 	and.w	r3, r3, #2
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d11b      	bne.n	8009bf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f06f 0202 	mvn.w	r2, #2
 8009bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	699b      	ldr	r3, [r3, #24]
 8009bce:	f003 0303 	and.w	r3, r3, #3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f9f6 	bl	8009fc8 <HAL_TIM_IC_CaptureCallback>
 8009bdc:	e005      	b.n	8009bea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f9e9 	bl	8009fb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f9f8 	bl	8009fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	f003 0304 	and.w	r3, r3, #4
 8009bfa:	2b04      	cmp	r3, #4
 8009bfc:	d122      	bne.n	8009c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	f003 0304 	and.w	r3, r3, #4
 8009c08:	2b04      	cmp	r3, #4
 8009c0a:	d11b      	bne.n	8009c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f06f 0204 	mvn.w	r2, #4
 8009c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2202      	movs	r2, #2
 8009c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f9cc 	bl	8009fc8 <HAL_TIM_IC_CaptureCallback>
 8009c30:	e005      	b.n	8009c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f9bf 	bl	8009fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 f9ce 	bl	8009fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	f003 0308 	and.w	r3, r3, #8
 8009c4e:	2b08      	cmp	r3, #8
 8009c50:	d122      	bne.n	8009c98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	f003 0308 	and.w	r3, r3, #8
 8009c5c:	2b08      	cmp	r3, #8
 8009c5e:	d11b      	bne.n	8009c98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f06f 0208 	mvn.w	r2, #8
 8009c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2204      	movs	r2, #4
 8009c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	69db      	ldr	r3, [r3, #28]
 8009c76:	f003 0303 	and.w	r3, r3, #3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d003      	beq.n	8009c86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f9a2 	bl	8009fc8 <HAL_TIM_IC_CaptureCallback>
 8009c84:	e005      	b.n	8009c92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f995 	bl	8009fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f9a4 	bl	8009fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	f003 0310 	and.w	r3, r3, #16
 8009ca2:	2b10      	cmp	r3, #16
 8009ca4:	d122      	bne.n	8009cec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	f003 0310 	and.w	r3, r3, #16
 8009cb0:	2b10      	cmp	r3, #16
 8009cb2:	d11b      	bne.n	8009cec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f06f 0210 	mvn.w	r2, #16
 8009cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2208      	movs	r2, #8
 8009cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	69db      	ldr	r3, [r3, #28]
 8009cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d003      	beq.n	8009cda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 f978 	bl	8009fc8 <HAL_TIM_IC_CaptureCallback>
 8009cd8:	e005      	b.n	8009ce6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f96b 	bl	8009fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f97a 	bl	8009fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	f003 0301 	and.w	r3, r3, #1
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d10e      	bne.n	8009d18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	f003 0301 	and.w	r3, r3, #1
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d107      	bne.n	8009d18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f06f 0201 	mvn.w	r2, #1
 8009d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7f7 ffcc 	bl	8001cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d22:	2b80      	cmp	r3, #128	; 0x80
 8009d24:	d10e      	bne.n	8009d44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d30:	2b80      	cmp	r3, #128	; 0x80
 8009d32:	d107      	bne.n	8009d44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fb75 	bl	800a42e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d4e:	2b40      	cmp	r3, #64	; 0x40
 8009d50:	d10e      	bne.n	8009d70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d5c:	2b40      	cmp	r3, #64	; 0x40
 8009d5e:	d107      	bne.n	8009d70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f93e 	bl	8009fec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	f003 0320 	and.w	r3, r3, #32
 8009d7a:	2b20      	cmp	r3, #32
 8009d7c:	d10e      	bne.n	8009d9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	f003 0320 	and.w	r3, r3, #32
 8009d88:	2b20      	cmp	r3, #32
 8009d8a:	d107      	bne.n	8009d9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f06f 0220 	mvn.w	r2, #32
 8009d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fb40 	bl	800a41c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d9c:	bf00      	nop
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009dae:	2300      	movs	r3, #0
 8009db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d101      	bne.n	8009dc0 <HAL_TIM_ConfigClockSource+0x1c>
 8009dbc:	2302      	movs	r3, #2
 8009dbe:	e0b4      	b.n	8009f2a <HAL_TIM_ConfigClockSource+0x186>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009de6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009df8:	d03e      	beq.n	8009e78 <HAL_TIM_ConfigClockSource+0xd4>
 8009dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dfe:	f200 8087 	bhi.w	8009f10 <HAL_TIM_ConfigClockSource+0x16c>
 8009e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e06:	f000 8086 	beq.w	8009f16 <HAL_TIM_ConfigClockSource+0x172>
 8009e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e0e:	d87f      	bhi.n	8009f10 <HAL_TIM_ConfigClockSource+0x16c>
 8009e10:	2b70      	cmp	r3, #112	; 0x70
 8009e12:	d01a      	beq.n	8009e4a <HAL_TIM_ConfigClockSource+0xa6>
 8009e14:	2b70      	cmp	r3, #112	; 0x70
 8009e16:	d87b      	bhi.n	8009f10 <HAL_TIM_ConfigClockSource+0x16c>
 8009e18:	2b60      	cmp	r3, #96	; 0x60
 8009e1a:	d050      	beq.n	8009ebe <HAL_TIM_ConfigClockSource+0x11a>
 8009e1c:	2b60      	cmp	r3, #96	; 0x60
 8009e1e:	d877      	bhi.n	8009f10 <HAL_TIM_ConfigClockSource+0x16c>
 8009e20:	2b50      	cmp	r3, #80	; 0x50
 8009e22:	d03c      	beq.n	8009e9e <HAL_TIM_ConfigClockSource+0xfa>
 8009e24:	2b50      	cmp	r3, #80	; 0x50
 8009e26:	d873      	bhi.n	8009f10 <HAL_TIM_ConfigClockSource+0x16c>
 8009e28:	2b40      	cmp	r3, #64	; 0x40
 8009e2a:	d058      	beq.n	8009ede <HAL_TIM_ConfigClockSource+0x13a>
 8009e2c:	2b40      	cmp	r3, #64	; 0x40
 8009e2e:	d86f      	bhi.n	8009f10 <HAL_TIM_ConfigClockSource+0x16c>
 8009e30:	2b30      	cmp	r3, #48	; 0x30
 8009e32:	d064      	beq.n	8009efe <HAL_TIM_ConfigClockSource+0x15a>
 8009e34:	2b30      	cmp	r3, #48	; 0x30
 8009e36:	d86b      	bhi.n	8009f10 <HAL_TIM_ConfigClockSource+0x16c>
 8009e38:	2b20      	cmp	r3, #32
 8009e3a:	d060      	beq.n	8009efe <HAL_TIM_ConfigClockSource+0x15a>
 8009e3c:	2b20      	cmp	r3, #32
 8009e3e:	d867      	bhi.n	8009f10 <HAL_TIM_ConfigClockSource+0x16c>
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d05c      	beq.n	8009efe <HAL_TIM_ConfigClockSource+0x15a>
 8009e44:	2b10      	cmp	r3, #16
 8009e46:	d05a      	beq.n	8009efe <HAL_TIM_ConfigClockSource+0x15a>
 8009e48:	e062      	b.n	8009f10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6818      	ldr	r0, [r3, #0]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	6899      	ldr	r1, [r3, #8]
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f000 fa53 	bl	800a304 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009e6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	609a      	str	r2, [r3, #8]
      break;
 8009e76:	e04f      	b.n	8009f18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6818      	ldr	r0, [r3, #0]
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	6899      	ldr	r1, [r3, #8]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	685a      	ldr	r2, [r3, #4]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	f000 fa3c 	bl	800a304 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	689a      	ldr	r2, [r3, #8]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e9a:	609a      	str	r2, [r3, #8]
      break;
 8009e9c:	e03c      	b.n	8009f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6818      	ldr	r0, [r3, #0]
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	6859      	ldr	r1, [r3, #4]
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	f000 f9b3 	bl	800a216 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2150      	movs	r1, #80	; 0x50
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f000 fa0a 	bl	800a2d0 <TIM_ITRx_SetConfig>
      break;
 8009ebc:	e02c      	b.n	8009f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6818      	ldr	r0, [r3, #0]
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	6859      	ldr	r1, [r3, #4]
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	f000 f9d1 	bl	800a272 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2160      	movs	r1, #96	; 0x60
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f000 f9fa 	bl	800a2d0 <TIM_ITRx_SetConfig>
      break;
 8009edc:	e01c      	b.n	8009f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6818      	ldr	r0, [r3, #0]
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	6859      	ldr	r1, [r3, #4]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	461a      	mov	r2, r3
 8009eec:	f000 f993 	bl	800a216 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2140      	movs	r1, #64	; 0x40
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 f9ea 	bl	800a2d0 <TIM_ITRx_SetConfig>
      break;
 8009efc:	e00c      	b.n	8009f18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4619      	mov	r1, r3
 8009f08:	4610      	mov	r0, r2
 8009f0a:	f000 f9e1 	bl	800a2d0 <TIM_ITRx_SetConfig>
      break;
 8009f0e:	e003      	b.n	8009f18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	73fb      	strb	r3, [r7, #15]
      break;
 8009f14:	e000      	b.n	8009f18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009f16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b082      	sub	sp, #8
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
 8009f3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d101      	bne.n	8009f4a <HAL_TIM_SlaveConfigSynchro+0x18>
 8009f46:	2302      	movs	r3, #2
 8009f48:	e031      	b.n	8009fae <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2202      	movs	r2, #2
 8009f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f8c9 	bl	800a0f4 <TIM_SlaveTimer_SetConfig>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d009      	beq.n	8009f7c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e018      	b.n	8009fae <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68da      	ldr	r2, [r3, #12]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f8a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68da      	ldr	r2, [r3, #12]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009f9a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3708      	adds	r7, #8
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	b083      	sub	sp, #12
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009fbe:	bf00      	nop
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bc80      	pop	{r7}
 8009fc6:	4770      	bx	lr

08009fc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bc80      	pop	{r7}
 8009fd8:	4770      	bx	lr

08009fda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009fda:	b480      	push	{r7}
 8009fdc:	b083      	sub	sp, #12
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009fe2:	bf00      	nop
 8009fe4:	370c      	adds	r7, #12
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bc80      	pop	{r7}
 8009fea:	4770      	bx	lr

08009fec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ff4:	bf00      	nop
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bc80      	pop	{r7}
 8009ffc:	4770      	bx	lr
	...

0800a000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a33      	ldr	r2, [pc, #204]	; (800a0e0 <TIM_Base_SetConfig+0xe0>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d013      	beq.n	800a040 <TIM_Base_SetConfig+0x40>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a32      	ldr	r2, [pc, #200]	; (800a0e4 <TIM_Base_SetConfig+0xe4>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d00f      	beq.n	800a040 <TIM_Base_SetConfig+0x40>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a026:	d00b      	beq.n	800a040 <TIM_Base_SetConfig+0x40>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a2f      	ldr	r2, [pc, #188]	; (800a0e8 <TIM_Base_SetConfig+0xe8>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d007      	beq.n	800a040 <TIM_Base_SetConfig+0x40>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a2e      	ldr	r2, [pc, #184]	; (800a0ec <TIM_Base_SetConfig+0xec>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d003      	beq.n	800a040 <TIM_Base_SetConfig+0x40>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4a2d      	ldr	r2, [pc, #180]	; (800a0f0 <TIM_Base_SetConfig+0xf0>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d108      	bne.n	800a052 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	4313      	orrs	r3, r2
 800a050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a22      	ldr	r2, [pc, #136]	; (800a0e0 <TIM_Base_SetConfig+0xe0>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d013      	beq.n	800a082 <TIM_Base_SetConfig+0x82>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a21      	ldr	r2, [pc, #132]	; (800a0e4 <TIM_Base_SetConfig+0xe4>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d00f      	beq.n	800a082 <TIM_Base_SetConfig+0x82>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a068:	d00b      	beq.n	800a082 <TIM_Base_SetConfig+0x82>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a1e      	ldr	r2, [pc, #120]	; (800a0e8 <TIM_Base_SetConfig+0xe8>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d007      	beq.n	800a082 <TIM_Base_SetConfig+0x82>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a1d      	ldr	r2, [pc, #116]	; (800a0ec <TIM_Base_SetConfig+0xec>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d003      	beq.n	800a082 <TIM_Base_SetConfig+0x82>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a1c      	ldr	r2, [pc, #112]	; (800a0f0 <TIM_Base_SetConfig+0xf0>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d108      	bne.n	800a094 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	4313      	orrs	r3, r2
 800a092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	695b      	ldr	r3, [r3, #20]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	689a      	ldr	r2, [r3, #8]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a09      	ldr	r2, [pc, #36]	; (800a0e0 <TIM_Base_SetConfig+0xe0>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d003      	beq.n	800a0c8 <TIM_Base_SetConfig+0xc8>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4a08      	ldr	r2, [pc, #32]	; (800a0e4 <TIM_Base_SetConfig+0xe4>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d103      	bne.n	800a0d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	691a      	ldr	r2, [r3, #16]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	615a      	str	r2, [r3, #20]
}
 800a0d6:	bf00      	nop
 800a0d8:	3714      	adds	r7, #20
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bc80      	pop	{r7}
 800a0de:	4770      	bx	lr
 800a0e0:	40012c00 	.word	0x40012c00
 800a0e4:	40013400 	.word	0x40013400
 800a0e8:	40000400 	.word	0x40000400
 800a0ec:	40000800 	.word	0x40000800
 800a0f0:	40000c00 	.word	0x40000c00

0800a0f4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a110:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	693a      	ldr	r2, [r7, #16]
 800a118:	4313      	orrs	r3, r2
 800a11a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	f023 0307 	bic.w	r3, r3, #7
 800a122:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	2b70      	cmp	r3, #112	; 0x70
 800a13c:	d01a      	beq.n	800a174 <TIM_SlaveTimer_SetConfig+0x80>
 800a13e:	2b70      	cmp	r3, #112	; 0x70
 800a140:	d860      	bhi.n	800a204 <TIM_SlaveTimer_SetConfig+0x110>
 800a142:	2b60      	cmp	r3, #96	; 0x60
 800a144:	d054      	beq.n	800a1f0 <TIM_SlaveTimer_SetConfig+0xfc>
 800a146:	2b60      	cmp	r3, #96	; 0x60
 800a148:	d85c      	bhi.n	800a204 <TIM_SlaveTimer_SetConfig+0x110>
 800a14a:	2b50      	cmp	r3, #80	; 0x50
 800a14c:	d046      	beq.n	800a1dc <TIM_SlaveTimer_SetConfig+0xe8>
 800a14e:	2b50      	cmp	r3, #80	; 0x50
 800a150:	d858      	bhi.n	800a204 <TIM_SlaveTimer_SetConfig+0x110>
 800a152:	2b40      	cmp	r3, #64	; 0x40
 800a154:	d019      	beq.n	800a18a <TIM_SlaveTimer_SetConfig+0x96>
 800a156:	2b40      	cmp	r3, #64	; 0x40
 800a158:	d854      	bhi.n	800a204 <TIM_SlaveTimer_SetConfig+0x110>
 800a15a:	2b30      	cmp	r3, #48	; 0x30
 800a15c:	d055      	beq.n	800a20a <TIM_SlaveTimer_SetConfig+0x116>
 800a15e:	2b30      	cmp	r3, #48	; 0x30
 800a160:	d850      	bhi.n	800a204 <TIM_SlaveTimer_SetConfig+0x110>
 800a162:	2b20      	cmp	r3, #32
 800a164:	d051      	beq.n	800a20a <TIM_SlaveTimer_SetConfig+0x116>
 800a166:	2b20      	cmp	r3, #32
 800a168:	d84c      	bhi.n	800a204 <TIM_SlaveTimer_SetConfig+0x110>
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d04d      	beq.n	800a20a <TIM_SlaveTimer_SetConfig+0x116>
 800a16e:	2b10      	cmp	r3, #16
 800a170:	d04b      	beq.n	800a20a <TIM_SlaveTimer_SetConfig+0x116>
 800a172:	e047      	b.n	800a204 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6818      	ldr	r0, [r3, #0]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	68d9      	ldr	r1, [r3, #12]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	689a      	ldr	r2, [r3, #8]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	f000 f8be 	bl	800a304 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800a188:	e040      	b.n	800a20c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2b05      	cmp	r3, #5
 800a190:	d101      	bne.n	800a196 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e03b      	b.n	800a20e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	6a1b      	ldr	r3, [r3, #32]
 800a19c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	6a1a      	ldr	r2, [r3, #32]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f022 0201 	bic.w	r2, r2, #1
 800a1ac:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1bc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	011b      	lsls	r3, r3, #4
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	621a      	str	r2, [r3, #32]
      break;
 800a1da:	e017      	b.n	800a20c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6818      	ldr	r0, [r3, #0]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	6899      	ldr	r1, [r3, #8]
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	691b      	ldr	r3, [r3, #16]
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	f000 f814 	bl	800a216 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a1ee:	e00d      	b.n	800a20c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6818      	ldr	r0, [r3, #0]
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	6899      	ldr	r1, [r3, #8]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	691b      	ldr	r3, [r3, #16]
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	f000 f838 	bl	800a272 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a202:	e003      	b.n	800a20c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	75fb      	strb	r3, [r7, #23]
      break;
 800a208:	e000      	b.n	800a20c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800a20a:	bf00      	nop
  }

  return status;
 800a20c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3718      	adds	r7, #24
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a216:	b480      	push	{r7}
 800a218:	b087      	sub	sp, #28
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	60f8      	str	r0, [r7, #12]
 800a21e:	60b9      	str	r1, [r7, #8]
 800a220:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6a1b      	ldr	r3, [r3, #32]
 800a22c:	f023 0201 	bic.w	r2, r3, #1
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a240:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	011b      	lsls	r3, r3, #4
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	4313      	orrs	r3, r2
 800a24a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	f023 030a 	bic.w	r3, r3, #10
 800a252:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a254:	697a      	ldr	r2, [r7, #20]
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	4313      	orrs	r3, r2
 800a25a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	697a      	ldr	r2, [r7, #20]
 800a266:	621a      	str	r2, [r3, #32]
}
 800a268:	bf00      	nop
 800a26a:	371c      	adds	r7, #28
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bc80      	pop	{r7}
 800a270:	4770      	bx	lr

0800a272 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a272:	b480      	push	{r7}
 800a274:	b087      	sub	sp, #28
 800a276:	af00      	add	r7, sp, #0
 800a278:	60f8      	str	r0, [r7, #12]
 800a27a:	60b9      	str	r1, [r7, #8]
 800a27c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6a1b      	ldr	r3, [r3, #32]
 800a282:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6a1b      	ldr	r3, [r3, #32]
 800a288:	f023 0210 	bic.w	r2, r3, #16
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	699b      	ldr	r3, [r3, #24]
 800a294:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a29c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	031b      	lsls	r3, r3, #12
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a2ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	011b      	lsls	r3, r3, #4
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	693a      	ldr	r2, [r7, #16]
 800a2be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	697a      	ldr	r2, [r7, #20]
 800a2c4:	621a      	str	r2, [r3, #32]
}
 800a2c6:	bf00      	nop
 800a2c8:	371c      	adds	r7, #28
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bc80      	pop	{r7}
 800a2ce:	4770      	bx	lr

0800a2d0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	f043 0307 	orr.w	r3, r3, #7
 800a2f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	609a      	str	r2, [r3, #8]
}
 800a2fa:	bf00      	nop
 800a2fc:	3714      	adds	r7, #20
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bc80      	pop	{r7}
 800a302:	4770      	bx	lr

0800a304 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a304:	b480      	push	{r7}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
 800a310:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a31e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	021a      	lsls	r2, r3, #8
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	431a      	orrs	r2, r3
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	697a      	ldr	r2, [r7, #20]
 800a32e:	4313      	orrs	r3, r2
 800a330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	697a      	ldr	r2, [r7, #20]
 800a336:	609a      	str	r2, [r3, #8]
}
 800a338:	bf00      	nop
 800a33a:	371c      	adds	r7, #28
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bc80      	pop	{r7}
 800a340:	4770      	bx	lr
	...

0800a344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a354:	2b01      	cmp	r3, #1
 800a356:	d101      	bne.n	800a35c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a358:	2302      	movs	r3, #2
 800a35a:	e050      	b.n	800a3fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2201      	movs	r2, #1
 800a360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2202      	movs	r2, #2
 800a368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a1b      	ldr	r2, [pc, #108]	; (800a408 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d018      	beq.n	800a3d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a19      	ldr	r2, [pc, #100]	; (800a40c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d013      	beq.n	800a3d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3b2:	d00e      	beq.n	800a3d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a15      	ldr	r2, [pc, #84]	; (800a410 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d009      	beq.n	800a3d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a14      	ldr	r2, [pc, #80]	; (800a414 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d004      	beq.n	800a3d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a12      	ldr	r2, [pc, #72]	; (800a418 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d10c      	bne.n	800a3ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3714      	adds	r7, #20
 800a402:	46bd      	mov	sp, r7
 800a404:	bc80      	pop	{r7}
 800a406:	4770      	bx	lr
 800a408:	40012c00 	.word	0x40012c00
 800a40c:	40013400 	.word	0x40013400
 800a410:	40000400 	.word	0x40000400
 800a414:	40000800 	.word	0x40000800
 800a418:	40000c00 	.word	0x40000c00

0800a41c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	bc80      	pop	{r7}
 800a42c:	4770      	bx	lr

0800a42e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a42e:	b480      	push	{r7}
 800a430:	b083      	sub	sp, #12
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a436:	bf00      	nop
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bc80      	pop	{r7}
 800a43e:	4770      	bx	lr

0800a440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d101      	bne.n	800a452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	e042      	b.n	800a4d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d106      	bne.n	800a46c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f7f8 fc58 	bl	8002d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2224      	movs	r2, #36	; 0x24
 800a470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	68da      	ldr	r2, [r3, #12]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 fcd5 	bl	800ae34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	691a      	ldr	r2, [r3, #16]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	695a      	ldr	r2, [r3, #20]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68da      	ldr	r2, [r3, #12]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2220      	movs	r2, #32
 800a4c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2220      	movs	r2, #32
 800a4cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	2b20      	cmp	r3, #32
 800a4f8:	d112      	bne.n	800a520 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d002      	beq.n	800a506 <HAL_UART_Receive_IT+0x26>
 800a500:	88fb      	ldrh	r3, [r7, #6]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d101      	bne.n	800a50a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a506:	2301      	movs	r3, #1
 800a508:	e00b      	b.n	800a522 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a510:	88fb      	ldrh	r3, [r7, #6]
 800a512:	461a      	mov	r2, r3
 800a514:	68b9      	ldr	r1, [r7, #8]
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f000 fab7 	bl	800aa8a <UART_Start_Receive_IT>
 800a51c:	4603      	mov	r3, r0
 800a51e:	e000      	b.n	800a522 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a520:	2302      	movs	r3, #2
  }
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
	...

0800a52c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b0ba      	sub	sp, #232	; 0xe8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	695b      	ldr	r3, [r3, #20]
 800a54e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a552:	2300      	movs	r3, #0
 800a554:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a558:	2300      	movs	r3, #0
 800a55a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a55e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a562:	f003 030f 	and.w	r3, r3, #15
 800a566:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a56a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10f      	bne.n	800a592 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a576:	f003 0320 	and.w	r3, r3, #32
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d009      	beq.n	800a592 <HAL_UART_IRQHandler+0x66>
 800a57e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a582:	f003 0320 	and.w	r3, r3, #32
 800a586:	2b00      	cmp	r3, #0
 800a588:	d003      	beq.n	800a592 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fb93 	bl	800acb6 <UART_Receive_IT>
      return;
 800a590:	e25b      	b.n	800aa4a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a596:	2b00      	cmp	r3, #0
 800a598:	f000 80de 	beq.w	800a758 <HAL_UART_IRQHandler+0x22c>
 800a59c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5a0:	f003 0301 	and.w	r3, r3, #1
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d106      	bne.n	800a5b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a5a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f000 80d1 	beq.w	800a758 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a5b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00b      	beq.n	800a5da <HAL_UART_IRQHandler+0xae>
 800a5c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d005      	beq.n	800a5da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5d2:	f043 0201 	orr.w	r2, r3, #1
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a5da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5de:	f003 0304 	and.w	r3, r3, #4
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00b      	beq.n	800a5fe <HAL_UART_IRQHandler+0xd2>
 800a5e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5ea:	f003 0301 	and.w	r3, r3, #1
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d005      	beq.n	800a5fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f6:	f043 0202 	orr.w	r2, r3, #2
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a5fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a602:	f003 0302 	and.w	r3, r3, #2
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00b      	beq.n	800a622 <HAL_UART_IRQHandler+0xf6>
 800a60a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a60e:	f003 0301 	and.w	r3, r3, #1
 800a612:	2b00      	cmp	r3, #0
 800a614:	d005      	beq.n	800a622 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a61a:	f043 0204 	orr.w	r2, r3, #4
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a626:	f003 0308 	and.w	r3, r3, #8
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d011      	beq.n	800a652 <HAL_UART_IRQHandler+0x126>
 800a62e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a632:	f003 0320 	and.w	r3, r3, #32
 800a636:	2b00      	cmp	r3, #0
 800a638:	d105      	bne.n	800a646 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a63a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a63e:	f003 0301 	and.w	r3, r3, #1
 800a642:	2b00      	cmp	r3, #0
 800a644:	d005      	beq.n	800a652 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a64a:	f043 0208 	orr.w	r2, r3, #8
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a656:	2b00      	cmp	r3, #0
 800a658:	f000 81f2 	beq.w	800aa40 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a65c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a660:	f003 0320 	and.w	r3, r3, #32
 800a664:	2b00      	cmp	r3, #0
 800a666:	d008      	beq.n	800a67a <HAL_UART_IRQHandler+0x14e>
 800a668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a66c:	f003 0320 	and.w	r3, r3, #32
 800a670:	2b00      	cmp	r3, #0
 800a672:	d002      	beq.n	800a67a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fb1e 	bl	800acb6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	695b      	ldr	r3, [r3, #20]
 800a680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a684:	2b00      	cmp	r3, #0
 800a686:	bf14      	ite	ne
 800a688:	2301      	movne	r3, #1
 800a68a:	2300      	moveq	r3, #0
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a696:	f003 0308 	and.w	r3, r3, #8
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d103      	bne.n	800a6a6 <HAL_UART_IRQHandler+0x17a>
 800a69e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d04f      	beq.n	800a746 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 fa28 	bl	800aafc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d041      	beq.n	800a73e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	3314      	adds	r3, #20
 800a6c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a6c8:	e853 3f00 	ldrex	r3, [r3]
 800a6cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a6d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a6d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	3314      	adds	r3, #20
 800a6e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a6e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a6ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a6f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a6f6:	e841 2300 	strex	r3, r2, [r1]
 800a6fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a6fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1d9      	bne.n	800a6ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d013      	beq.n	800a736 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a712:	4a7e      	ldr	r2, [pc, #504]	; (800a90c <HAL_UART_IRQHandler+0x3e0>)
 800a714:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7f9 fc9e 	bl	800405c <HAL_DMA_Abort_IT>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d016      	beq.n	800a754 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a730:	4610      	mov	r0, r2
 800a732:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a734:	e00e      	b.n	800a754 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f993 	bl	800aa62 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a73c:	e00a      	b.n	800a754 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f98f 	bl	800aa62 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a744:	e006      	b.n	800a754 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 f98b 	bl	800aa62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800a752:	e175      	b.n	800aa40 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a754:	bf00      	nop
    return;
 800a756:	e173      	b.n	800aa40 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	f040 814f 	bne.w	800aa00 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a766:	f003 0310 	and.w	r3, r3, #16
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f000 8148 	beq.w	800aa00 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a774:	f003 0310 	and.w	r3, r3, #16
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f000 8141 	beq.w	800aa00 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a77e:	2300      	movs	r3, #0
 800a780:	60bb      	str	r3, [r7, #8]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	60bb      	str	r3, [r7, #8]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	60bb      	str	r3, [r7, #8]
 800a792:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	695b      	ldr	r3, [r3, #20]
 800a79a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f000 80b6 	beq.w	800a910 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a7b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f000 8145 	beq.w	800aa44 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a7be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	f080 813e 	bcs.w	800aa44 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a7ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	2b20      	cmp	r3, #32
 800a7d8:	f000 8088 	beq.w	800a8ec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	330c      	adds	r3, #12
 800a7e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a7ea:	e853 3f00 	ldrex	r3, [r3]
 800a7ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a7f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a7f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	330c      	adds	r3, #12
 800a804:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a808:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a80c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a810:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a814:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a818:	e841 2300 	strex	r3, r2, [r1]
 800a81c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a820:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1d9      	bne.n	800a7dc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	3314      	adds	r3, #20
 800a82e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a832:	e853 3f00 	ldrex	r3, [r3]
 800a836:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a838:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a83a:	f023 0301 	bic.w	r3, r3, #1
 800a83e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	3314      	adds	r3, #20
 800a848:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a84c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a850:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a852:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a854:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a858:	e841 2300 	strex	r3, r2, [r1]
 800a85c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a85e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a860:	2b00      	cmp	r3, #0
 800a862:	d1e1      	bne.n	800a828 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	3314      	adds	r3, #20
 800a86a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a86c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a86e:	e853 3f00 	ldrex	r3, [r3]
 800a872:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a87a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	3314      	adds	r3, #20
 800a884:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a888:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a88a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a88e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a890:	e841 2300 	strex	r3, r2, [r1]
 800a894:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a896:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1e3      	bne.n	800a864 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2220      	movs	r2, #32
 800a8a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	330c      	adds	r3, #12
 800a8b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8b4:	e853 3f00 	ldrex	r3, [r3]
 800a8b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a8ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8bc:	f023 0310 	bic.w	r3, r3, #16
 800a8c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	330c      	adds	r3, #12
 800a8ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a8ce:	65ba      	str	r2, [r7, #88]	; 0x58
 800a8d0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a8d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8d6:	e841 2300 	strex	r3, r2, [r1]
 800a8da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a8dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d1e3      	bne.n	800a8aa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7f9 fb7c 	bl	8003fe4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2202      	movs	r2, #2
 800a8f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	4619      	mov	r1, r3
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 f8b6 	bl	800aa74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a908:	e09c      	b.n	800aa44 <HAL_UART_IRQHandler+0x518>
 800a90a:	bf00      	nop
 800a90c:	0800abc1 	.word	0x0800abc1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a918:	b29b      	uxth	r3, r3
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a924:	b29b      	uxth	r3, r3
 800a926:	2b00      	cmp	r3, #0
 800a928:	f000 808e 	beq.w	800aa48 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a92c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a930:	2b00      	cmp	r3, #0
 800a932:	f000 8089 	beq.w	800aa48 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	330c      	adds	r3, #12
 800a93c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a940:	e853 3f00 	ldrex	r3, [r3]
 800a944:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a948:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a94c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	330c      	adds	r3, #12
 800a956:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a95a:	647a      	str	r2, [r7, #68]	; 0x44
 800a95c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a960:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a962:	e841 2300 	strex	r3, r2, [r1]
 800a966:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d1e3      	bne.n	800a936 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	3314      	adds	r3, #20
 800a974:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a978:	e853 3f00 	ldrex	r3, [r3]
 800a97c:	623b      	str	r3, [r7, #32]
   return(result);
 800a97e:	6a3b      	ldr	r3, [r7, #32]
 800a980:	f023 0301 	bic.w	r3, r3, #1
 800a984:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3314      	adds	r3, #20
 800a98e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a992:	633a      	str	r2, [r7, #48]	; 0x30
 800a994:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a99a:	e841 2300 	strex	r3, r2, [r1]
 800a99e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d1e3      	bne.n	800a96e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2220      	movs	r2, #32
 800a9aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	330c      	adds	r3, #12
 800a9ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	e853 3f00 	ldrex	r3, [r3]
 800a9c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f023 0310 	bic.w	r3, r3, #16
 800a9ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	330c      	adds	r3, #12
 800a9d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a9d8:	61fa      	str	r2, [r7, #28]
 800a9da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9dc:	69b9      	ldr	r1, [r7, #24]
 800a9de:	69fa      	ldr	r2, [r7, #28]
 800a9e0:	e841 2300 	strex	r3, r2, [r1]
 800a9e4:	617b      	str	r3, [r7, #20]
   return(result);
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1e3      	bne.n	800a9b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2202      	movs	r2, #2
 800a9f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a9f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f83b 	bl	800aa74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a9fe:	e023      	b.n	800aa48 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aa00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d009      	beq.n	800aa20 <HAL_UART_IRQHandler+0x4f4>
 800aa0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d003      	beq.n	800aa20 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 f8e5 	bl	800abe8 <UART_Transmit_IT>
    return;
 800aa1e:	e014      	b.n	800aa4a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aa20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d00e      	beq.n	800aa4a <HAL_UART_IRQHandler+0x51e>
 800aa2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d008      	beq.n	800aa4a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 f924 	bl	800ac86 <UART_EndTransmit_IT>
    return;
 800aa3e:	e004      	b.n	800aa4a <HAL_UART_IRQHandler+0x51e>
    return;
 800aa40:	bf00      	nop
 800aa42:	e002      	b.n	800aa4a <HAL_UART_IRQHandler+0x51e>
      return;
 800aa44:	bf00      	nop
 800aa46:	e000      	b.n	800aa4a <HAL_UART_IRQHandler+0x51e>
      return;
 800aa48:	bf00      	nop
  }
}
 800aa4a:	37e8      	adds	r7, #232	; 0xe8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bc80      	pop	{r7}
 800aa60:	4770      	bx	lr

0800aa62 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa62:	b480      	push	{r7}
 800aa64:	b083      	sub	sp, #12
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aa6a:	bf00      	nop
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bc80      	pop	{r7}
 800aa72:	4770      	bx	lr

0800aa74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bc80      	pop	{r7}
 800aa88:	4770      	bx	lr

0800aa8a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa8a:	b480      	push	{r7}
 800aa8c:	b085      	sub	sp, #20
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	60f8      	str	r0, [r7, #12]
 800aa92:	60b9      	str	r1, [r7, #8]
 800aa94:	4613      	mov	r3, r2
 800aa96:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	68ba      	ldr	r2, [r7, #8]
 800aa9c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	88fa      	ldrh	r2, [r7, #6]
 800aaa2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	88fa      	ldrh	r2, [r7, #6]
 800aaa8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2222      	movs	r2, #34	; 0x22
 800aab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d007      	beq.n	800aad0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	68da      	ldr	r2, [r3, #12]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aace:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	695a      	ldr	r2, [r3, #20]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f042 0201 	orr.w	r2, r2, #1
 800aade:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	68da      	ldr	r2, [r3, #12]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f042 0220 	orr.w	r2, r2, #32
 800aaee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3714      	adds	r7, #20
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bc80      	pop	{r7}
 800aafa:	4770      	bx	lr

0800aafc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b095      	sub	sp, #84	; 0x54
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	330c      	adds	r3, #12
 800ab0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab0e:	e853 3f00 	ldrex	r3, [r3]
 800ab12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	330c      	adds	r3, #12
 800ab22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab24:	643a      	str	r2, [r7, #64]	; 0x40
 800ab26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab2c:	e841 2300 	strex	r3, r2, [r1]
 800ab30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1e5      	bne.n	800ab04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	3314      	adds	r3, #20
 800ab3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab40:	6a3b      	ldr	r3, [r7, #32]
 800ab42:	e853 3f00 	ldrex	r3, [r3]
 800ab46:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	f023 0301 	bic.w	r3, r3, #1
 800ab4e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	3314      	adds	r3, #20
 800ab56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab58:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ab5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab60:	e841 2300 	strex	r3, r2, [r1]
 800ab64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1e5      	bne.n	800ab38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d119      	bne.n	800aba8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	330c      	adds	r3, #12
 800ab7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	e853 3f00 	ldrex	r3, [r3]
 800ab82:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	f023 0310 	bic.w	r3, r3, #16
 800ab8a:	647b      	str	r3, [r7, #68]	; 0x44
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	330c      	adds	r3, #12
 800ab92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab94:	61ba      	str	r2, [r7, #24]
 800ab96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab98:	6979      	ldr	r1, [r7, #20]
 800ab9a:	69ba      	ldr	r2, [r7, #24]
 800ab9c:	e841 2300 	strex	r3, r2, [r1]
 800aba0:	613b      	str	r3, [r7, #16]
   return(result);
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1e5      	bne.n	800ab74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2220      	movs	r2, #32
 800abac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800abb6:	bf00      	nop
 800abb8:	3754      	adds	r7, #84	; 0x54
 800abba:	46bd      	mov	sp, r7
 800abbc:	bc80      	pop	{r7}
 800abbe:	4770      	bx	lr

0800abc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2200      	movs	r2, #0
 800abd2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2200      	movs	r2, #0
 800abd8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f7ff ff41 	bl	800aa62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abe0:	bf00      	nop
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	2b21      	cmp	r3, #33	; 0x21
 800abfa:	d13e      	bne.n	800ac7a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac04:	d114      	bne.n	800ac30 <UART_Transmit_IT+0x48>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d110      	bne.n	800ac30 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	881b      	ldrh	r3, [r3, #0]
 800ac18:	461a      	mov	r2, r3
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac22:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6a1b      	ldr	r3, [r3, #32]
 800ac28:	1c9a      	adds	r2, r3, #2
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	621a      	str	r2, [r3, #32]
 800ac2e:	e008      	b.n	800ac42 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6a1b      	ldr	r3, [r3, #32]
 800ac34:	1c59      	adds	r1, r3, #1
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	6211      	str	r1, [r2, #32]
 800ac3a:	781a      	ldrb	r2, [r3, #0]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d10f      	bne.n	800ac76 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	68da      	ldr	r2, [r3, #12]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	68da      	ldr	r2, [r3, #12]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	e000      	b.n	800ac7c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ac7a:	2302      	movs	r3, #2
  }
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3714      	adds	r7, #20
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bc80      	pop	{r7}
 800ac84:	4770      	bx	lr

0800ac86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b082      	sub	sp, #8
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	68da      	ldr	r2, [r3, #12]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2220      	movs	r2, #32
 800aca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7ff fed2 	bl	800aa50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b08c      	sub	sp, #48	; 0x30
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	2b22      	cmp	r3, #34	; 0x22
 800acc8:	f040 80ae 	bne.w	800ae28 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acd4:	d117      	bne.n	800ad06 <UART_Receive_IT+0x50>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d113      	bne.n	800ad06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800acde:	2300      	movs	r3, #0
 800ace0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	b29b      	uxth	r3, r3
 800acf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acfe:	1c9a      	adds	r2, r3, #2
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	629a      	str	r2, [r3, #40]	; 0x28
 800ad04:	e026      	b.n	800ad54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad18:	d007      	beq.n	800ad2a <UART_Receive_IT+0x74>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d10a      	bne.n	800ad38 <UART_Receive_IT+0x82>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d106      	bne.n	800ad38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	b2da      	uxtb	r2, r3
 800ad32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad34:	701a      	strb	r2, [r3, #0]
 800ad36:	e008      	b.n	800ad4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad4e:	1c5a      	adds	r2, r3, #1
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	3b01      	subs	r3, #1
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	4619      	mov	r1, r3
 800ad62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d15d      	bne.n	800ae24 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	68da      	ldr	r2, [r3, #12]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f022 0220 	bic.w	r2, r2, #32
 800ad76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68da      	ldr	r2, [r3, #12]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ad86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	695a      	ldr	r2, [r3, #20]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f022 0201 	bic.w	r2, r2, #1
 800ad96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2220      	movs	r2, #32
 800ad9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d135      	bne.n	800ae1a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	330c      	adds	r3, #12
 800adba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	e853 3f00 	ldrex	r3, [r3]
 800adc2:	613b      	str	r3, [r7, #16]
   return(result);
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	f023 0310 	bic.w	r3, r3, #16
 800adca:	627b      	str	r3, [r7, #36]	; 0x24
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	330c      	adds	r3, #12
 800add2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800add4:	623a      	str	r2, [r7, #32]
 800add6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add8:	69f9      	ldr	r1, [r7, #28]
 800adda:	6a3a      	ldr	r2, [r7, #32]
 800addc:	e841 2300 	strex	r3, r2, [r1]
 800ade0:	61bb      	str	r3, [r7, #24]
   return(result);
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1e5      	bne.n	800adb4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f003 0310 	and.w	r3, r3, #16
 800adf2:	2b10      	cmp	r3, #16
 800adf4:	d10a      	bne.n	800ae0c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800adf6:	2300      	movs	r3, #0
 800adf8:	60fb      	str	r3, [r7, #12]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	60fb      	str	r3, [r7, #12]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	60fb      	str	r3, [r7, #12]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ae10:	4619      	mov	r1, r3
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f7ff fe2e 	bl	800aa74 <HAL_UARTEx_RxEventCallback>
 800ae18:	e002      	b.n	800ae20 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7f7 f80c 	bl	8001e38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	e002      	b.n	800ae2a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ae24:	2300      	movs	r3, #0
 800ae26:	e000      	b.n	800ae2a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ae28:	2302      	movs	r3, #2
  }
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3730      	adds	r7, #48	; 0x30
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
	...

0800ae34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	68da      	ldr	r2, [r3, #12]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	430a      	orrs	r2, r1
 800ae50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	689a      	ldr	r2, [r3, #8]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	691b      	ldr	r3, [r3, #16]
 800ae5a:	431a      	orrs	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	695b      	ldr	r3, [r3, #20]
 800ae60:	4313      	orrs	r3, r2
 800ae62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800ae6e:	f023 030c 	bic.w	r3, r3, #12
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	6812      	ldr	r2, [r2, #0]
 800ae76:	68b9      	ldr	r1, [r7, #8]
 800ae78:	430b      	orrs	r3, r1
 800ae7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	695b      	ldr	r3, [r3, #20]
 800ae82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	699a      	ldr	r2, [r3, #24]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	430a      	orrs	r2, r1
 800ae90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a2c      	ldr	r2, [pc, #176]	; (800af48 <UART_SetConfig+0x114>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d103      	bne.n	800aea4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800ae9c:	f7fc ff94 	bl	8007dc8 <HAL_RCC_GetPCLK2Freq>
 800aea0:	60f8      	str	r0, [r7, #12]
 800aea2:	e002      	b.n	800aeaa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800aea4:	f7fc ff7c 	bl	8007da0 <HAL_RCC_GetPCLK1Freq>
 800aea8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	4613      	mov	r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4413      	add	r3, r2
 800aeb2:	009a      	lsls	r2, r3, #2
 800aeb4:	441a      	add	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aec0:	4a22      	ldr	r2, [pc, #136]	; (800af4c <UART_SetConfig+0x118>)
 800aec2:	fba2 2303 	umull	r2, r3, r2, r3
 800aec6:	095b      	lsrs	r3, r3, #5
 800aec8:	0119      	lsls	r1, r3, #4
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	4613      	mov	r3, r2
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	4413      	add	r3, r2
 800aed2:	009a      	lsls	r2, r3, #2
 800aed4:	441a      	add	r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	fbb2 f2f3 	udiv	r2, r2, r3
 800aee0:	4b1a      	ldr	r3, [pc, #104]	; (800af4c <UART_SetConfig+0x118>)
 800aee2:	fba3 0302 	umull	r0, r3, r3, r2
 800aee6:	095b      	lsrs	r3, r3, #5
 800aee8:	2064      	movs	r0, #100	; 0x64
 800aeea:	fb00 f303 	mul.w	r3, r0, r3
 800aeee:	1ad3      	subs	r3, r2, r3
 800aef0:	011b      	lsls	r3, r3, #4
 800aef2:	3332      	adds	r3, #50	; 0x32
 800aef4:	4a15      	ldr	r2, [pc, #84]	; (800af4c <UART_SetConfig+0x118>)
 800aef6:	fba2 2303 	umull	r2, r3, r2, r3
 800aefa:	095b      	lsrs	r3, r3, #5
 800aefc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af00:	4419      	add	r1, r3
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	4613      	mov	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	4413      	add	r3, r2
 800af0a:	009a      	lsls	r2, r3, #2
 800af0c:	441a      	add	r2, r3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	fbb2 f2f3 	udiv	r2, r2, r3
 800af18:	4b0c      	ldr	r3, [pc, #48]	; (800af4c <UART_SetConfig+0x118>)
 800af1a:	fba3 0302 	umull	r0, r3, r3, r2
 800af1e:	095b      	lsrs	r3, r3, #5
 800af20:	2064      	movs	r0, #100	; 0x64
 800af22:	fb00 f303 	mul.w	r3, r0, r3
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	011b      	lsls	r3, r3, #4
 800af2a:	3332      	adds	r3, #50	; 0x32
 800af2c:	4a07      	ldr	r2, [pc, #28]	; (800af4c <UART_SetConfig+0x118>)
 800af2e:	fba2 2303 	umull	r2, r3, r2, r3
 800af32:	095b      	lsrs	r3, r3, #5
 800af34:	f003 020f 	and.w	r2, r3, #15
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	440a      	add	r2, r1
 800af3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800af40:	bf00      	nop
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	40013800 	.word	0x40013800
 800af4c:	51eb851f 	.word	0x51eb851f

0800af50 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800af50:	b084      	sub	sp, #16
 800af52:	b480      	push	{r7}
 800af54:	b085      	sub	sp, #20
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	f107 001c 	add.w	r0, r7, #28
 800af5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800af62:	2300      	movs	r3, #0
 800af64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800af66:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800af68:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800af6a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800af6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800af6e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800af70:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800af72:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800af74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800af76:	431a      	orrs	r2, r3
             Init.ClockDiv
 800af78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800af7a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	4313      	orrs	r3, r2
 800af80:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800af8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af8e:	68fa      	ldr	r2, [r7, #12]
 800af90:	431a      	orrs	r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3714      	adds	r7, #20
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bc80      	pop	{r7}
 800afa0:	b004      	add	sp, #16
 800afa2:	4770      	bx	lr

0800afa4 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	370c      	adds	r7, #12
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bc80      	pop	{r7}
 800afba:	4770      	bx	lr

0800afbc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	370c      	adds	r7, #12
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bc80      	pop	{r7}
 800afda:	4770      	bx	lr

0800afdc <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2203      	movs	r2, #3
 800afe8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bc80      	pop	{r7}
 800aff4:	4770      	bx	lr

0800aff6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800aff6:	b480      	push	{r7}
 800aff8:	b083      	sub	sp, #12
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f003 0303 	and.w	r3, r3, #3
}
 800b006:	4618      	mov	r0, r3
 800b008:	370c      	adds	r7, #12
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bc80      	pop	{r7}
 800b00e:	4770      	bx	lr

0800b010 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b010:	b480      	push	{r7}
 800b012:	b085      	sub	sp, #20
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b02e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b034:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b03a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b03c:	68fa      	ldr	r2, [r7, #12]
 800b03e:	4313      	orrs	r3, r2
 800b040:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b04a:	f023 030f 	bic.w	r3, r3, #15
 800b04e:	68fa      	ldr	r2, [r7, #12]
 800b050:	431a      	orrs	r2, r3
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3714      	adds	r7, #20
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bc80      	pop	{r7}
 800b060:	4770      	bx	lr

0800b062 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b062:	b480      	push	{r7}
 800b064:	b083      	sub	sp, #12
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	b2db      	uxtb	r3, r3
}
 800b070:	4618      	mov	r0, r3
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	bc80      	pop	{r7}
 800b078:	4770      	bx	lr

0800b07a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b07a:	b480      	push	{r7}
 800b07c:	b085      	sub	sp, #20
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
 800b082:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	3314      	adds	r3, #20
 800b088:	461a      	mov	r2, r3
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	4413      	add	r3, r2
 800b08e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
}  
 800b094:	4618      	mov	r0, r3
 800b096:	3714      	adds	r7, #20
 800b098:	46bd      	mov	sp, r7
 800b09a:	bc80      	pop	{r7}
 800b09c:	4770      	bx	lr

0800b09e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b09e:	b480      	push	{r7}
 800b0a0:	b085      	sub	sp, #20
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	685a      	ldr	r2, [r3, #4]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b0c4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b0ca:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b0d0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0dc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	431a      	orrs	r2, r3
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b0e8:	2300      	movs	r3, #0

}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3714      	adds	r7, #20
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bc80      	pop	{r7}
 800b0f2:	4770      	bx	lr

0800b0f4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b088      	sub	sp, #32
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b102:	2310      	movs	r3, #16
 800b104:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b106:	2340      	movs	r3, #64	; 0x40
 800b108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b10a:	2300      	movs	r3, #0
 800b10c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b10e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b112:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b114:	f107 0308 	add.w	r3, r7, #8
 800b118:	4619      	mov	r1, r3
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f7ff ff78 	bl	800b010 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b120:	f241 3288 	movw	r2, #5000	; 0x1388
 800b124:	2110      	movs	r1, #16
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fa18 	bl	800b55c <SDMMC_GetCmdResp1>
 800b12c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b12e:	69fb      	ldr	r3, [r7, #28]
}
 800b130:	4618      	mov	r0, r3
 800b132:	3720      	adds	r7, #32
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b088      	sub	sp, #32
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b146:	2311      	movs	r3, #17
 800b148:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b14a:	2340      	movs	r3, #64	; 0x40
 800b14c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b14e:	2300      	movs	r3, #0
 800b150:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b156:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b158:	f107 0308 	add.w	r3, r7, #8
 800b15c:	4619      	mov	r1, r3
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f7ff ff56 	bl	800b010 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b164:	f241 3288 	movw	r2, #5000	; 0x1388
 800b168:	2111      	movs	r1, #17
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f9f6 	bl	800b55c <SDMMC_GetCmdResp1>
 800b170:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b172:	69fb      	ldr	r3, [r7, #28]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3720      	adds	r7, #32
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b088      	sub	sp, #32
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b18a:	2312      	movs	r3, #18
 800b18c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b18e:	2340      	movs	r3, #64	; 0x40
 800b190:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b192:	2300      	movs	r3, #0
 800b194:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b19a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b19c:	f107 0308 	add.w	r3, r7, #8
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f7ff ff34 	bl	800b010 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b1a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ac:	2112      	movs	r1, #18
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f9d4 	bl	800b55c <SDMMC_GetCmdResp1>
 800b1b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1b6:	69fb      	ldr	r3, [r7, #28]
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3720      	adds	r7, #32
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b088      	sub	sp, #32
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b1ce:	2318      	movs	r3, #24
 800b1d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b1d2:	2340      	movs	r3, #64	; 0x40
 800b1d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b1e0:	f107 0308 	add.w	r3, r7, #8
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f7ff ff12 	bl	800b010 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b1ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1f0:	2118      	movs	r1, #24
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f9b2 	bl	800b55c <SDMMC_GetCmdResp1>
 800b1f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1fa:	69fb      	ldr	r3, [r7, #28]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3720      	adds	r7, #32
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b088      	sub	sp, #32
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b212:	2319      	movs	r3, #25
 800b214:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b216:	2340      	movs	r3, #64	; 0x40
 800b218:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b21a:	2300      	movs	r3, #0
 800b21c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b21e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b222:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b224:	f107 0308 	add.w	r3, r7, #8
 800b228:	4619      	mov	r1, r3
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7ff fef0 	bl	800b010 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b230:	f241 3288 	movw	r2, #5000	; 0x1388
 800b234:	2119      	movs	r1, #25
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f990 	bl	800b55c <SDMMC_GetCmdResp1>
 800b23c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b23e:	69fb      	ldr	r3, [r7, #28]
}
 800b240:	4618      	mov	r0, r3
 800b242:	3720      	adds	r7, #32
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b088      	sub	sp, #32
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b250:	2300      	movs	r3, #0
 800b252:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b254:	230c      	movs	r3, #12
 800b256:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b258:	2340      	movs	r3, #64	; 0x40
 800b25a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b25c:	2300      	movs	r3, #0
 800b25e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b264:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b266:	f107 0308 	add.w	r3, r7, #8
 800b26a:	4619      	mov	r1, r3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f7ff fecf 	bl	800b010 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b272:	4a05      	ldr	r2, [pc, #20]	; (800b288 <SDMMC_CmdStopTransfer+0x40>)
 800b274:	210c      	movs	r1, #12
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f970 	bl	800b55c <SDMMC_GetCmdResp1>
 800b27c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b27e:	69fb      	ldr	r3, [r7, #28]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3720      	adds	r7, #32
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	05f5e100 	.word	0x05f5e100

0800b28c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b08a      	sub	sp, #40	; 0x28
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b29c:	2307      	movs	r3, #7
 800b29e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2a0:	2340      	movs	r3, #64	; 0x40
 800b2a2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ac:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2ae:	f107 0310 	add.w	r3, r7, #16
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f7ff feab 	bl	800b010 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b2ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2be:	2107      	movs	r1, #7
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f000 f94b 	bl	800b55c <SDMMC_GetCmdResp1>
 800b2c6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3728      	adds	r7, #40	; 0x28
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b088      	sub	sp, #32
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2f0:	f107 0308 	add.w	r3, r7, #8
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f7ff fe8a 	bl	800b010 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fb63 	bl	800b9c8 <SDMMC_GetCmdError>
 800b302:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b304:	69fb      	ldr	r3, [r7, #28]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3720      	adds	r7, #32
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b088      	sub	sp, #32
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b316:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b31a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b31c:	2308      	movs	r3, #8
 800b31e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b320:	2340      	movs	r3, #64	; 0x40
 800b322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b324:	2300      	movs	r3, #0
 800b326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b32c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b32e:	f107 0308 	add.w	r3, r7, #8
 800b332:	4619      	mov	r1, r3
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f7ff fe6b 	bl	800b010 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 faf6 	bl	800b92c <SDMMC_GetCmdResp7>
 800b340:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b342:	69fb      	ldr	r3, [r7, #28]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3720      	adds	r7, #32
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b088      	sub	sp, #32
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b35a:	2337      	movs	r3, #55	; 0x37
 800b35c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b35e:	2340      	movs	r3, #64	; 0x40
 800b360:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b362:	2300      	movs	r3, #0
 800b364:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b36a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b36c:	f107 0308 	add.w	r3, r7, #8
 800b370:	4619      	mov	r1, r3
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f7ff fe4c 	bl	800b010 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b378:	f241 3288 	movw	r2, #5000	; 0x1388
 800b37c:	2137      	movs	r1, #55	; 0x37
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f8ec 	bl	800b55c <SDMMC_GetCmdResp1>
 800b384:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b386:	69fb      	ldr	r3, [r7, #28]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3720      	adds	r7, #32
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b088      	sub	sp, #32
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b3a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b3a6:	2329      	movs	r3, #41	; 0x29
 800b3a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b3aa:	2340      	movs	r3, #64	; 0x40
 800b3ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3b8:	f107 0308 	add.w	r3, r7, #8
 800b3bc:	4619      	mov	r1, r3
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7ff fe26 	bl	800b010 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 f9ff 	bl	800b7c8 <SDMMC_GetCmdResp3>
 800b3ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3cc:	69fb      	ldr	r3, [r7, #28]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3720      	adds	r7, #32
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b088      	sub	sp, #32
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b3e4:	2306      	movs	r3, #6
 800b3e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b3e8:	2340      	movs	r3, #64	; 0x40
 800b3ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3f6:	f107 0308 	add.w	r3, r7, #8
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7ff fe07 	bl	800b010 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800b402:	f241 3288 	movw	r2, #5000	; 0x1388
 800b406:	2106      	movs	r1, #6
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 f8a7 	bl	800b55c <SDMMC_GetCmdResp1>
 800b40e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b410:	69fb      	ldr	r3, [r7, #28]
}
 800b412:	4618      	mov	r0, r3
 800b414:	3720      	adds	r7, #32
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b088      	sub	sp, #32
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b422:	2300      	movs	r3, #0
 800b424:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b426:	2333      	movs	r3, #51	; 0x33
 800b428:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b42a:	2340      	movs	r3, #64	; 0x40
 800b42c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b42e:	2300      	movs	r3, #0
 800b430:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b436:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b438:	f107 0308 	add.w	r3, r7, #8
 800b43c:	4619      	mov	r1, r3
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7ff fde6 	bl	800b010 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800b444:	f241 3288 	movw	r2, #5000	; 0x1388
 800b448:	2133      	movs	r1, #51	; 0x33
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f886 	bl	800b55c <SDMMC_GetCmdResp1>
 800b450:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b452:	69fb      	ldr	r3, [r7, #28]
}
 800b454:	4618      	mov	r0, r3
 800b456:	3720      	adds	r7, #32
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b088      	sub	sp, #32
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b464:	2300      	movs	r3, #0
 800b466:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b468:	2302      	movs	r3, #2
 800b46a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b46c:	23c0      	movs	r3, #192	; 0xc0
 800b46e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b470:	2300      	movs	r3, #0
 800b472:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b478:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b47a:	f107 0308 	add.w	r3, r7, #8
 800b47e:	4619      	mov	r1, r3
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f7ff fdc5 	bl	800b010 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 f956 	bl	800b738 <SDMMC_GetCmdResp2>
 800b48c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b48e:	69fb      	ldr	r3, [r7, #28]
}
 800b490:	4618      	mov	r0, r3
 800b492:	3720      	adds	r7, #32
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b088      	sub	sp, #32
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b4a6:	2309      	movs	r3, #9
 800b4a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b4aa:	23c0      	movs	r3, #192	; 0xc0
 800b4ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4b8:	f107 0308 	add.w	r3, r7, #8
 800b4bc:	4619      	mov	r1, r3
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f7ff fda6 	bl	800b010 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 f937 	bl	800b738 <SDMMC_GetCmdResp2>
 800b4ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4cc:	69fb      	ldr	r3, [r7, #28]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3720      	adds	r7, #32
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b088      	sub	sp, #32
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
 800b4de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b4e4:	2303      	movs	r3, #3
 800b4e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b4e8:	2340      	movs	r3, #64	; 0x40
 800b4ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4f6:	f107 0308 	add.w	r3, r7, #8
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f7ff fd87 	bl	800b010 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b502:	683a      	ldr	r2, [r7, #0]
 800b504:	2103      	movs	r1, #3
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f99a 	bl	800b840 <SDMMC_GetCmdResp6>
 800b50c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b50e:	69fb      	ldr	r3, [r7, #28]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3720      	adds	r7, #32
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b088      	sub	sp, #32
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b526:	230d      	movs	r3, #13
 800b528:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b52a:	2340      	movs	r3, #64	; 0x40
 800b52c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b52e:	2300      	movs	r3, #0
 800b530:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b536:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b538:	f107 0308 	add.w	r3, r7, #8
 800b53c:	4619      	mov	r1, r3
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7ff fd66 	bl	800b010 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b544:	f241 3288 	movw	r2, #5000	; 0x1388
 800b548:	210d      	movs	r1, #13
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f806 	bl	800b55c <SDMMC_GetCmdResp1>
 800b550:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b552:	69fb      	ldr	r3, [r7, #28]
}
 800b554:	4618      	mov	r0, r3
 800b556:	3720      	adds	r7, #32
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b088      	sub	sp, #32
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	460b      	mov	r3, r1
 800b566:	607a      	str	r2, [r7, #4]
 800b568:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b56a:	4b70      	ldr	r3, [pc, #448]	; (800b72c <SDMMC_GetCmdResp1+0x1d0>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a70      	ldr	r2, [pc, #448]	; (800b730 <SDMMC_GetCmdResp1+0x1d4>)
 800b570:	fba2 2303 	umull	r2, r3, r2, r3
 800b574:	0a5a      	lsrs	r2, r3, #9
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	fb02 f303 	mul.w	r3, r2, r3
 800b57c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b57e:	69fb      	ldr	r3, [r7, #28]
 800b580:	1e5a      	subs	r2, r3, #1
 800b582:	61fa      	str	r2, [r7, #28]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d102      	bne.n	800b58e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b588:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b58c:	e0c9      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b592:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d0ef      	beq.n	800b57e <SDMMC_GetCmdResp1+0x22>
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1ea      	bne.n	800b57e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ac:	f003 0304 	and.w	r3, r3, #4
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d004      	beq.n	800b5be <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2204      	movs	r2, #4
 800b5b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5ba:	2304      	movs	r3, #4
 800b5bc:	e0b1      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5c2:	f003 0301 	and.w	r3, r3, #1
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d004      	beq.n	800b5d4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e0a6      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	22c5      	movs	r2, #197	; 0xc5
 800b5d8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f7ff fd41 	bl	800b062 <SDIO_GetCommandResponse>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	7afb      	ldrb	r3, [r7, #11]
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d001      	beq.n	800b5ee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e099      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f7ff fd42 	bl	800b07a <SDIO_GetResponse>
 800b5f6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b5f8:	697a      	ldr	r2, [r7, #20]
 800b5fa:	4b4e      	ldr	r3, [pc, #312]	; (800b734 <SDMMC_GetCmdResp1+0x1d8>)
 800b5fc:	4013      	ands	r3, r2
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d101      	bne.n	800b606 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b602:	2300      	movs	r3, #0
 800b604:	e08d      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	da02      	bge.n	800b612 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b60c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b610:	e087      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d001      	beq.n	800b620 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b61c:	2340      	movs	r3, #64	; 0x40
 800b61e:	e080      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b626:	2b00      	cmp	r3, #0
 800b628:	d001      	beq.n	800b62e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b62a:	2380      	movs	r3, #128	; 0x80
 800b62c:	e079      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b634:	2b00      	cmp	r3, #0
 800b636:	d002      	beq.n	800b63e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b63c:	e071      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b644:	2b00      	cmp	r3, #0
 800b646:	d002      	beq.n	800b64e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b64c:	e069      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b654:	2b00      	cmp	r3, #0
 800b656:	d002      	beq.n	800b65e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b65c:	e061      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b664:	2b00      	cmp	r3, #0
 800b666:	d002      	beq.n	800b66e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b668:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b66c:	e059      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b674:	2b00      	cmp	r3, #0
 800b676:	d002      	beq.n	800b67e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b67c:	e051      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b684:	2b00      	cmp	r3, #0
 800b686:	d002      	beq.n	800b68e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b68c:	e049      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b698:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b69c:	e041      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d002      	beq.n	800b6ae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b6a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6ac:	e039      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d002      	beq.n	800b6be <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b6b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b6bc:	e031      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d002      	beq.n	800b6ce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b6c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b6cc:	e029      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d002      	beq.n	800b6de <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b6d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b6dc:	e021      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d002      	beq.n	800b6ee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b6e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b6ec:	e019      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d002      	beq.n	800b6fe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b6f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b6fc:	e011      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b704:	2b00      	cmp	r3, #0
 800b706:	d002      	beq.n	800b70e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b708:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b70c:	e009      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	f003 0308 	and.w	r3, r3, #8
 800b714:	2b00      	cmp	r3, #0
 800b716:	d002      	beq.n	800b71e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b718:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b71c:	e001      	b.n	800b722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b71e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b722:	4618      	mov	r0, r3
 800b724:	3720      	adds	r7, #32
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	20000080 	.word	0x20000080
 800b730:	10624dd3 	.word	0x10624dd3
 800b734:	fdffe008 	.word	0xfdffe008

0800b738 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b738:	b480      	push	{r7}
 800b73a:	b085      	sub	sp, #20
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b740:	4b1f      	ldr	r3, [pc, #124]	; (800b7c0 <SDMMC_GetCmdResp2+0x88>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a1f      	ldr	r2, [pc, #124]	; (800b7c4 <SDMMC_GetCmdResp2+0x8c>)
 800b746:	fba2 2303 	umull	r2, r3, r2, r3
 800b74a:	0a5b      	lsrs	r3, r3, #9
 800b74c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b750:	fb02 f303 	mul.w	r3, r2, r3
 800b754:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	1e5a      	subs	r2, r3, #1
 800b75a:	60fa      	str	r2, [r7, #12]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d102      	bne.n	800b766 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b760:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b764:	e026      	b.n	800b7b4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b76a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b772:	2b00      	cmp	r3, #0
 800b774:	d0ef      	beq.n	800b756 <SDMMC_GetCmdResp2+0x1e>
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d1ea      	bne.n	800b756 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b784:	f003 0304 	and.w	r3, r3, #4
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d004      	beq.n	800b796 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2204      	movs	r2, #4
 800b790:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b792:	2304      	movs	r3, #4
 800b794:	e00e      	b.n	800b7b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b79a:	f003 0301 	and.w	r3, r3, #1
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d004      	beq.n	800b7ac <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	e003      	b.n	800b7b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	22c5      	movs	r2, #197	; 0xc5
 800b7b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3714      	adds	r7, #20
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bc80      	pop	{r7}
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop
 800b7c0:	20000080 	.word	0x20000080
 800b7c4:	10624dd3 	.word	0x10624dd3

0800b7c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7d0:	4b19      	ldr	r3, [pc, #100]	; (800b838 <SDMMC_GetCmdResp3+0x70>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a19      	ldr	r2, [pc, #100]	; (800b83c <SDMMC_GetCmdResp3+0x74>)
 800b7d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7da:	0a5b      	lsrs	r3, r3, #9
 800b7dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7e0:	fb02 f303 	mul.w	r3, r2, r3
 800b7e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	1e5a      	subs	r2, r3, #1
 800b7ea:	60fa      	str	r2, [r7, #12]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d102      	bne.n	800b7f6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7f4:	e01b      	b.n	800b82e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b802:	2b00      	cmp	r3, #0
 800b804:	d0ef      	beq.n	800b7e6 <SDMMC_GetCmdResp3+0x1e>
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d1ea      	bne.n	800b7e6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b814:	f003 0304 	and.w	r3, r3, #4
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d004      	beq.n	800b826 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2204      	movs	r2, #4
 800b820:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b822:	2304      	movs	r3, #4
 800b824:	e003      	b.n	800b82e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	22c5      	movs	r2, #197	; 0xc5
 800b82a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3714      	adds	r7, #20
 800b832:	46bd      	mov	sp, r7
 800b834:	bc80      	pop	{r7}
 800b836:	4770      	bx	lr
 800b838:	20000080 	.word	0x20000080
 800b83c:	10624dd3 	.word	0x10624dd3

0800b840 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b088      	sub	sp, #32
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	460b      	mov	r3, r1
 800b84a:	607a      	str	r2, [r7, #4]
 800b84c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b84e:	4b35      	ldr	r3, [pc, #212]	; (800b924 <SDMMC_GetCmdResp6+0xe4>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a35      	ldr	r2, [pc, #212]	; (800b928 <SDMMC_GetCmdResp6+0xe8>)
 800b854:	fba2 2303 	umull	r2, r3, r2, r3
 800b858:	0a5b      	lsrs	r3, r3, #9
 800b85a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b85e:	fb02 f303 	mul.w	r3, r2, r3
 800b862:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b864:	69fb      	ldr	r3, [r7, #28]
 800b866:	1e5a      	subs	r2, r3, #1
 800b868:	61fa      	str	r2, [r7, #28]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d102      	bne.n	800b874 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b86e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b872:	e052      	b.n	800b91a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b878:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b880:	2b00      	cmp	r3, #0
 800b882:	d0ef      	beq.n	800b864 <SDMMC_GetCmdResp6+0x24>
 800b884:	69bb      	ldr	r3, [r7, #24]
 800b886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1ea      	bne.n	800b864 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b892:	f003 0304 	and.w	r3, r3, #4
 800b896:	2b00      	cmp	r3, #0
 800b898:	d004      	beq.n	800b8a4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2204      	movs	r2, #4
 800b89e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8a0:	2304      	movs	r3, #4
 800b8a2:	e03a      	b.n	800b91a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8a8:	f003 0301 	and.w	r3, r3, #1
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d004      	beq.n	800b8ba <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e02f      	b.n	800b91a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f7ff fbd1 	bl	800b062 <SDIO_GetCommandResponse>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	7afb      	ldrb	r3, [r7, #11]
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d001      	beq.n	800b8ce <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e025      	b.n	800b91a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	22c5      	movs	r2, #197	; 0xc5
 800b8d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	68f8      	ldr	r0, [r7, #12]
 800b8d8:	f7ff fbcf 	bl	800b07a <SDIO_GetResponse>
 800b8dc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d106      	bne.n	800b8f6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	0c1b      	lsrs	r3, r3, #16
 800b8ec:	b29a      	uxth	r2, r3
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	e011      	b.n	800b91a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d002      	beq.n	800b906 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b904:	e009      	b.n	800b91a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d002      	beq.n	800b916 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b914:	e001      	b.n	800b91a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b916:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3720      	adds	r7, #32
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	20000080 	.word	0x20000080
 800b928:	10624dd3 	.word	0x10624dd3

0800b92c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b934:	4b22      	ldr	r3, [pc, #136]	; (800b9c0 <SDMMC_GetCmdResp7+0x94>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a22      	ldr	r2, [pc, #136]	; (800b9c4 <SDMMC_GetCmdResp7+0x98>)
 800b93a:	fba2 2303 	umull	r2, r3, r2, r3
 800b93e:	0a5b      	lsrs	r3, r3, #9
 800b940:	f241 3288 	movw	r2, #5000	; 0x1388
 800b944:	fb02 f303 	mul.w	r3, r2, r3
 800b948:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	1e5a      	subs	r2, r3, #1
 800b94e:	60fa      	str	r2, [r7, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d102      	bne.n	800b95a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b954:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b958:	e02c      	b.n	800b9b4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b95e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b966:	2b00      	cmp	r3, #0
 800b968:	d0ef      	beq.n	800b94a <SDMMC_GetCmdResp7+0x1e>
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1ea      	bne.n	800b94a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b978:	f003 0304 	and.w	r3, r3, #4
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d004      	beq.n	800b98a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2204      	movs	r2, #4
 800b984:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b986:	2304      	movs	r3, #4
 800b988:	e014      	b.n	800b9b4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b98e:	f003 0301 	and.w	r3, r3, #1
 800b992:	2b00      	cmp	r3, #0
 800b994:	d004      	beq.n	800b9a0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2201      	movs	r2, #1
 800b99a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b99c:	2301      	movs	r3, #1
 800b99e:	e009      	b.n	800b9b4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d002      	beq.n	800b9b2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2240      	movs	r2, #64	; 0x40
 800b9b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b9b2:	2300      	movs	r3, #0
  
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3714      	adds	r7, #20
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bc80      	pop	{r7}
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	20000080 	.word	0x20000080
 800b9c4:	10624dd3 	.word	0x10624dd3

0800b9c8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9d0:	4b10      	ldr	r3, [pc, #64]	; (800ba14 <SDMMC_GetCmdError+0x4c>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a10      	ldr	r2, [pc, #64]	; (800ba18 <SDMMC_GetCmdError+0x50>)
 800b9d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b9da:	0a5b      	lsrs	r3, r3, #9
 800b9dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9e0:	fb02 f303 	mul.w	r3, r2, r3
 800b9e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	1e5a      	subs	r2, r3, #1
 800b9ea:	60fa      	str	r2, [r7, #12]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d102      	bne.n	800b9f6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9f4:	e009      	b.n	800ba0a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d0f1      	beq.n	800b9e6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	22c5      	movs	r2, #197	; 0xc5
 800ba06:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3714      	adds	r7, #20
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bc80      	pop	{r7}
 800ba12:	4770      	bx	lr
 800ba14:	20000080 	.word	0x20000080
 800ba18:	10624dd3 	.word	0x10624dd3

0800ba1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ba1c:	b084      	sub	sp, #16
 800ba1e:	b480      	push	{r7}
 800ba20:	b083      	sub	sp, #12
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
 800ba26:	f107 0014 	add.w	r0, r7, #20
 800ba2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	370c      	adds	r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bc80      	pop	{r7}
 800ba38:	b004      	add	sp, #16
 800ba3a:	4770      	bx	lr

0800ba3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b085      	sub	sp, #20
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ba4c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800ba50:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	b29a      	uxth	r2, r3
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3714      	adds	r7, #20
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bc80      	pop	{r7}
 800ba66:	4770      	bx	lr

0800ba68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ba70:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800ba74:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	43db      	mvns	r3, r3
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	4013      	ands	r3, r2
 800ba88:	b29a      	uxth	r2, r3
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bc80      	pop	{r7}
 800ba9a:	4770      	bx	lr

0800ba9c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	460b      	mov	r3, r1
 800baa6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	bc80      	pop	{r7}
 800bab2:	4770      	bx	lr

0800bab4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bab4:	b084      	sub	sp, #16
 800bab6:	b480      	push	{r7}
 800bab8:	b083      	sub	sp, #12
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	f107 0014 	add.w	r0, r7, #20
 800bac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2201      	movs	r2, #1
 800baca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	370c      	adds	r7, #12
 800baec:	46bd      	mov	sp, r7
 800baee:	bc80      	pop	{r7}
 800baf0:	b004      	add	sp, #16
 800baf2:	4770      	bx	lr

0800baf4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b09d      	sub	sp, #116	; 0x74
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bafe:	2300      	movs	r3, #0
 800bb00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	4413      	add	r3, r2
 800bb0e:	881b      	ldrh	r3, [r3, #0]
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800bb16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb1a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	78db      	ldrb	r3, [r3, #3]
 800bb22:	2b03      	cmp	r3, #3
 800bb24:	d81f      	bhi.n	800bb66 <USB_ActivateEndpoint+0x72>
 800bb26:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <USB_ActivateEndpoint+0x38>)
 800bb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2c:	0800bb3d 	.word	0x0800bb3d
 800bb30:	0800bb59 	.word	0x0800bb59
 800bb34:	0800bb6f 	.word	0x0800bb6f
 800bb38:	0800bb4b 	.word	0x0800bb4b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bb3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bb40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb44:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800bb48:	e012      	b.n	800bb70 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bb4a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bb4e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800bb52:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800bb56:	e00b      	b.n	800bb70 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bb58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bb5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bb60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800bb64:	e004      	b.n	800bb70 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800bb66:	2301      	movs	r3, #1
 800bb68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800bb6c:	e000      	b.n	800bb70 <USB_ActivateEndpoint+0x7c>
      break;
 800bb6e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	441a      	add	r2, r3
 800bb7a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bb7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	4413      	add	r3, r2
 800bb9c:	881b      	ldrh	r3, [r3, #0]
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bba8:	b29a      	uxth	r2, r3
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	441a      	add	r2, r3
 800bbc0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800bbc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	7b1b      	ldrb	r3, [r3, #12]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f040 8178 	bne.w	800bed2 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	785b      	ldrb	r3, [r3, #1]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f000 8084 	beq.w	800bcf4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	61bb      	str	r3, [r7, #24]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	4413      	add	r3, r2
 800bbfe:	61bb      	str	r3, [r7, #24]
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	011a      	lsls	r2, r3, #4
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	4413      	add	r3, r2
 800bc0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc0e:	617b      	str	r3, [r7, #20]
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	88db      	ldrh	r3, [r3, #6]
 800bc14:	085b      	lsrs	r3, r3, #1
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	005b      	lsls	r3, r3, #1
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	4413      	add	r3, r2
 800bc2a:	881b      	ldrh	r3, [r3, #0]
 800bc2c:	827b      	strh	r3, [r7, #18]
 800bc2e:	8a7b      	ldrh	r3, [r7, #18]
 800bc30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d01b      	beq.n	800bc70 <USB_ActivateEndpoint+0x17c>
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4413      	add	r3, r2
 800bc42:	881b      	ldrh	r3, [r3, #0]
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc4e:	823b      	strh	r3, [r7, #16]
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	009b      	lsls	r3, r3, #2
 800bc58:	441a      	add	r2, r3
 800bc5a:	8a3b      	ldrh	r3, [r7, #16]
 800bc5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	78db      	ldrb	r3, [r3, #3]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d020      	beq.n	800bcba <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	4413      	add	r3, r2
 800bc82:	881b      	ldrh	r3, [r3, #0]
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc8e:	81bb      	strh	r3, [r7, #12]
 800bc90:	89bb      	ldrh	r3, [r7, #12]
 800bc92:	f083 0320 	eor.w	r3, r3, #32
 800bc96:	81bb      	strh	r3, [r7, #12]
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	009b      	lsls	r3, r3, #2
 800bca0:	441a      	add	r2, r3
 800bca2:	89bb      	ldrh	r3, [r7, #12]
 800bca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	8013      	strh	r3, [r2, #0]
 800bcb8:	e2d5      	b.n	800c266 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	4413      	add	r3, r2
 800bcc4:	881b      	ldrh	r3, [r3, #0]
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcd0:	81fb      	strh	r3, [r7, #14]
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	441a      	add	r2, r3
 800bcdc:	89fb      	ldrh	r3, [r7, #14]
 800bcde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	8013      	strh	r3, [r2, #0]
 800bcf2:	e2b8      	b.n	800c266 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	633b      	str	r3, [r7, #48]	; 0x30
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	461a      	mov	r2, r3
 800bd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd04:	4413      	add	r3, r2
 800bd06:	633b      	str	r3, [r7, #48]	; 0x30
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	011a      	lsls	r2, r3, #4
 800bd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd10:	4413      	add	r3, r2
 800bd12:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800bd16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	88db      	ldrh	r3, [r3, #6]
 800bd1c:	085b      	lsrs	r3, r3, #1
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	005b      	lsls	r3, r3, #1
 800bd22:	b29a      	uxth	r2, r3
 800bd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd26:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	461a      	mov	r2, r3
 800bd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd38:	4413      	add	r3, r2
 800bd3a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	011a      	lsls	r2, r3, #4
 800bd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd44:	4413      	add	r3, r2
 800bd46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bd4a:	627b      	str	r3, [r7, #36]	; 0x24
 800bd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4e:	881b      	ldrh	r3, [r3, #0]
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd56:	b29a      	uxth	r2, r3
 800bd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5a:	801a      	strh	r2, [r3, #0]
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	2b3e      	cmp	r3, #62	; 0x3e
 800bd62:	d91d      	bls.n	800bda0 <USB_ActivateEndpoint+0x2ac>
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	691b      	ldr	r3, [r3, #16]
 800bd68:	095b      	lsrs	r3, r3, #5
 800bd6a:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	691b      	ldr	r3, [r3, #16]
 800bd70:	f003 031f 	and.w	r3, r3, #31
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d102      	bne.n	800bd7e <USB_ActivateEndpoint+0x28a>
 800bd78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd80:	881b      	ldrh	r3, [r3, #0]
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	029b      	lsls	r3, r3, #10
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd98:	b29a      	uxth	r2, r3
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9c:	801a      	strh	r2, [r3, #0]
 800bd9e:	e026      	b.n	800bdee <USB_ActivateEndpoint+0x2fa>
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	691b      	ldr	r3, [r3, #16]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d10a      	bne.n	800bdbe <USB_ActivateEndpoint+0x2ca>
 800bda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdaa:	881b      	ldrh	r3, [r3, #0]
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bdb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdb6:	b29a      	uxth	r2, r3
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdba:	801a      	strh	r2, [r3, #0]
 800bdbc:	e017      	b.n	800bdee <USB_ActivateEndpoint+0x2fa>
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	085b      	lsrs	r3, r3, #1
 800bdc4:	66bb      	str	r3, [r7, #104]	; 0x68
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	691b      	ldr	r3, [r3, #16]
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d002      	beq.n	800bdd8 <USB_ActivateEndpoint+0x2e4>
 800bdd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	66bb      	str	r3, [r7, #104]	; 0x68
 800bdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdda:	881b      	ldrh	r3, [r3, #0]
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	029b      	lsls	r3, r3, #10
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	4313      	orrs	r3, r2
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	4413      	add	r3, r2
 800bdf8:	881b      	ldrh	r3, [r3, #0]
 800bdfa:	847b      	strh	r3, [r7, #34]	; 0x22
 800bdfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be02:	2b00      	cmp	r3, #0
 800be04:	d01b      	beq.n	800be3e <USB_ActivateEndpoint+0x34a>
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	4413      	add	r3, r2
 800be10:	881b      	ldrh	r3, [r3, #0]
 800be12:	b29b      	uxth	r3, r3
 800be14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be1c:	843b      	strh	r3, [r7, #32]
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	441a      	add	r2, r3
 800be28:	8c3b      	ldrh	r3, [r7, #32]
 800be2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800be36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d124      	bne.n	800be90 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	4413      	add	r3, r2
 800be50:	881b      	ldrh	r3, [r3, #0]
 800be52:	b29b      	uxth	r3, r3
 800be54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be5c:	83bb      	strh	r3, [r7, #28]
 800be5e:	8bbb      	ldrh	r3, [r7, #28]
 800be60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800be64:	83bb      	strh	r3, [r7, #28]
 800be66:	8bbb      	ldrh	r3, [r7, #28]
 800be68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800be6c:	83bb      	strh	r3, [r7, #28]
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	441a      	add	r2, r3
 800be78:	8bbb      	ldrh	r3, [r7, #28]
 800be7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	8013      	strh	r3, [r2, #0]
 800be8e:	e1ea      	b.n	800c266 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	4413      	add	r3, r2
 800be9a:	881b      	ldrh	r3, [r3, #0]
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bea6:	83fb      	strh	r3, [r7, #30]
 800bea8:	8bfb      	ldrh	r3, [r7, #30]
 800beaa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800beae:	83fb      	strh	r3, [r7, #30]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	441a      	add	r2, r3
 800beba:	8bfb      	ldrh	r3, [r7, #30]
 800bebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800becc:	b29b      	uxth	r3, r3
 800bece:	8013      	strh	r3, [r2, #0]
 800bed0:	e1c9      	b.n	800c266 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	78db      	ldrb	r3, [r3, #3]
 800bed6:	2b02      	cmp	r3, #2
 800bed8:	d11e      	bne.n	800bf18 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	4413      	add	r3, r2
 800bee4:	881b      	ldrh	r3, [r3, #0]
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800beec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bef0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	441a      	add	r2, r3
 800befe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bf02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf0a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800bf0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	8013      	strh	r3, [r2, #0]
 800bf16:	e01d      	b.n	800bf54 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	4413      	add	r3, r2
 800bf22:	881b      	ldrh	r3, [r3, #0]
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bf2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf2e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	441a      	add	r2, r3
 800bf3c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800bf40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	461a      	mov	r2, r3
 800bf62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf64:	4413      	add	r3, r2
 800bf66:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	011a      	lsls	r2, r3, #4
 800bf6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf70:	4413      	add	r3, r2
 800bf72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf76:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	891b      	ldrh	r3, [r3, #8]
 800bf7c:	085b      	lsrs	r3, r3, #1
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	005b      	lsls	r3, r3, #1
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf86:	801a      	strh	r2, [r3, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	657b      	str	r3, [r7, #84]	; 0x54
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	461a      	mov	r2, r3
 800bf96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf98:	4413      	add	r3, r2
 800bf9a:	657b      	str	r3, [r7, #84]	; 0x54
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	011a      	lsls	r2, r3, #4
 800bfa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfa4:	4413      	add	r3, r2
 800bfa6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800bfaa:	653b      	str	r3, [r7, #80]	; 0x50
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	895b      	ldrh	r3, [r3, #10]
 800bfb0:	085b      	lsrs	r3, r3, #1
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	005b      	lsls	r3, r3, #1
 800bfb6:	b29a      	uxth	r2, r3
 800bfb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	785b      	ldrb	r3, [r3, #1]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	f040 8093 	bne.w	800c0ec <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	4413      	add	r3, r2
 800bfd0:	881b      	ldrh	r3, [r3, #0]
 800bfd2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800bfd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bfda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d01b      	beq.n	800c01a <USB_ActivateEndpoint+0x526>
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	4413      	add	r3, r2
 800bfec:	881b      	ldrh	r3, [r3, #0]
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bff8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	441a      	add	r2, r3
 800c004:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c00a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c00e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c016:	b29b      	uxth	r3, r3
 800c018:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	4413      	add	r3, r2
 800c024:	881b      	ldrh	r3, [r3, #0]
 800c026:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c028:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c02a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d01b      	beq.n	800c06a <USB_ActivateEndpoint+0x576>
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	4413      	add	r3, r2
 800c03c:	881b      	ldrh	r3, [r3, #0]
 800c03e:	b29b      	uxth	r3, r3
 800c040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c048:	877b      	strh	r3, [r7, #58]	; 0x3a
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	441a      	add	r2, r3
 800c054:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c05a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c05e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c062:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c066:	b29b      	uxth	r3, r3
 800c068:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	4413      	add	r3, r2
 800c074:	881b      	ldrh	r3, [r3, #0]
 800c076:	b29b      	uxth	r3, r3
 800c078:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c07c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c080:	873b      	strh	r3, [r7, #56]	; 0x38
 800c082:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c084:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c088:	873b      	strh	r3, [r7, #56]	; 0x38
 800c08a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c08c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c090:	873b      	strh	r3, [r7, #56]	; 0x38
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	441a      	add	r2, r3
 800c09c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c09e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	4413      	add	r3, r2
 800c0bc:	881b      	ldrh	r3, [r3, #0]
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0c8:	86fb      	strh	r3, [r7, #54]	; 0x36
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	441a      	add	r2, r3
 800c0d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c0d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	8013      	strh	r3, [r2, #0]
 800c0ea:	e0bc      	b.n	800c266 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	4413      	add	r3, r2
 800c0f6:	881b      	ldrh	r3, [r3, #0]
 800c0f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800c0fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c104:	2b00      	cmp	r3, #0
 800c106:	d01d      	beq.n	800c144 <USB_ActivateEndpoint+0x650>
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	4413      	add	r3, r2
 800c112:	881b      	ldrh	r3, [r3, #0]
 800c114:	b29b      	uxth	r3, r3
 800c116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c11a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c11e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	441a      	add	r2, r3
 800c12c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c138:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c140:	b29b      	uxth	r3, r3
 800c142:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	4413      	add	r3, r2
 800c14e:	881b      	ldrh	r3, [r3, #0]
 800c150:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c154:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d01d      	beq.n	800c19c <USB_ActivateEndpoint+0x6a8>
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	4413      	add	r3, r2
 800c16a:	881b      	ldrh	r3, [r3, #0]
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c176:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	441a      	add	r2, r3
 800c184:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c18c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c194:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c198:	b29b      	uxth	r3, r3
 800c19a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	78db      	ldrb	r3, [r3, #3]
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d024      	beq.n	800c1ee <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4413      	add	r3, r2
 800c1ae:	881b      	ldrh	r3, [r3, #0]
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c1be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c1c2:	f083 0320 	eor.w	r3, r3, #32
 800c1c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	441a      	add	r2, r3
 800c1d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c1d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	8013      	strh	r3, [r2, #0]
 800c1ec:	e01d      	b.n	800c22a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	4413      	add	r3, r2
 800c1f8:	881b      	ldrh	r3, [r3, #0]
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c204:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	441a      	add	r2, r3
 800c212:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c21a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c21e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c226:	b29b      	uxth	r3, r3
 800c228:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	4413      	add	r3, r2
 800c234:	881b      	ldrh	r3, [r3, #0]
 800c236:	b29b      	uxth	r3, r3
 800c238:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c23c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c240:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	441a      	add	r2, r3
 800c24e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c25a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c25e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c262:	b29b      	uxth	r3, r3
 800c264:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c266:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3774      	adds	r7, #116	; 0x74
 800c26e:	46bd      	mov	sp, r7
 800c270:	bc80      	pop	{r7}
 800c272:	4770      	bx	lr

0800c274 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c274:	b480      	push	{r7}
 800c276:	b08d      	sub	sp, #52	; 0x34
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	7b1b      	ldrb	r3, [r3, #12]
 800c282:	2b00      	cmp	r3, #0
 800c284:	f040 808e 	bne.w	800c3a4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	785b      	ldrb	r3, [r3, #1]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d044      	beq.n	800c31a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	4413      	add	r3, r2
 800c29a:	881b      	ldrh	r3, [r3, #0]
 800c29c:	81bb      	strh	r3, [r7, #12]
 800c29e:	89bb      	ldrh	r3, [r7, #12]
 800c2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d01b      	beq.n	800c2e0 <USB_DeactivateEndpoint+0x6c>
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	881b      	ldrh	r3, [r3, #0]
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2be:	817b      	strh	r3, [r7, #10]
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	009b      	lsls	r3, r3, #2
 800c2c8:	441a      	add	r2, r3
 800c2ca:	897b      	ldrh	r3, [r7, #10]
 800c2cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	4413      	add	r3, r2
 800c2ea:	881b      	ldrh	r3, [r3, #0]
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2f6:	813b      	strh	r3, [r7, #8]
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	441a      	add	r2, r3
 800c302:	893b      	ldrh	r3, [r7, #8]
 800c304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c30c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c314:	b29b      	uxth	r3, r3
 800c316:	8013      	strh	r3, [r2, #0]
 800c318:	e192      	b.n	800c640 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	4413      	add	r3, r2
 800c324:	881b      	ldrh	r3, [r3, #0]
 800c326:	827b      	strh	r3, [r7, #18]
 800c328:	8a7b      	ldrh	r3, [r7, #18]
 800c32a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d01b      	beq.n	800c36a <USB_DeactivateEndpoint+0xf6>
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	4413      	add	r3, r2
 800c33c:	881b      	ldrh	r3, [r3, #0]
 800c33e:	b29b      	uxth	r3, r3
 800c340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c348:	823b      	strh	r3, [r7, #16]
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	441a      	add	r2, r3
 800c354:	8a3b      	ldrh	r3, [r7, #16]
 800c356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c35a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c35e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c366:	b29b      	uxth	r3, r3
 800c368:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	4413      	add	r3, r2
 800c374:	881b      	ldrh	r3, [r3, #0]
 800c376:	b29b      	uxth	r3, r3
 800c378:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c37c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c380:	81fb      	strh	r3, [r7, #14]
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	441a      	add	r2, r3
 800c38c:	89fb      	ldrh	r3, [r7, #14]
 800c38e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c39a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	8013      	strh	r3, [r2, #0]
 800c3a2:	e14d      	b.n	800c640 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	785b      	ldrb	r3, [r3, #1]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	f040 80a5 	bne.w	800c4f8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	009b      	lsls	r3, r3, #2
 800c3b6:	4413      	add	r3, r2
 800c3b8:	881b      	ldrh	r3, [r3, #0]
 800c3ba:	843b      	strh	r3, [r7, #32]
 800c3bc:	8c3b      	ldrh	r3, [r7, #32]
 800c3be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d01b      	beq.n	800c3fe <USB_DeactivateEndpoint+0x18a>
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	4413      	add	r3, r2
 800c3d0:	881b      	ldrh	r3, [r3, #0]
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3dc:	83fb      	strh	r3, [r7, #30]
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	441a      	add	r2, r3
 800c3e8:	8bfb      	ldrh	r3, [r7, #30]
 800c3ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c3f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	4413      	add	r3, r2
 800c408:	881b      	ldrh	r3, [r3, #0]
 800c40a:	83bb      	strh	r3, [r7, #28]
 800c40c:	8bbb      	ldrh	r3, [r7, #28]
 800c40e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c412:	2b00      	cmp	r3, #0
 800c414:	d01b      	beq.n	800c44e <USB_DeactivateEndpoint+0x1da>
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	4413      	add	r3, r2
 800c420:	881b      	ldrh	r3, [r3, #0]
 800c422:	b29b      	uxth	r3, r3
 800c424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c42c:	837b      	strh	r3, [r7, #26]
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	441a      	add	r2, r3
 800c438:	8b7b      	ldrh	r3, [r7, #26]
 800c43a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c43e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c446:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c44e:	687a      	ldr	r2, [r7, #4]
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	4413      	add	r3, r2
 800c458:	881b      	ldrh	r3, [r3, #0]
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c464:	833b      	strh	r3, [r7, #24]
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	441a      	add	r2, r3
 800c470:	8b3b      	ldrh	r3, [r7, #24]
 800c472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c47a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c47e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c482:	b29b      	uxth	r3, r3
 800c484:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	4413      	add	r3, r2
 800c490:	881b      	ldrh	r3, [r3, #0]
 800c492:	b29b      	uxth	r3, r3
 800c494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c49c:	82fb      	strh	r3, [r7, #22]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	441a      	add	r2, r3
 800c4a8:	8afb      	ldrh	r3, [r7, #22]
 800c4aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	4413      	add	r3, r2
 800c4c8:	881b      	ldrh	r3, [r3, #0]
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4d4:	82bb      	strh	r3, [r7, #20]
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	441a      	add	r2, r3
 800c4e0:	8abb      	ldrh	r3, [r7, #20]
 800c4e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	8013      	strh	r3, [r2, #0]
 800c4f6:	e0a3      	b.n	800c640 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	4413      	add	r3, r2
 800c502:	881b      	ldrh	r3, [r3, #0]
 800c504:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c506:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d01b      	beq.n	800c548 <USB_DeactivateEndpoint+0x2d4>
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	4413      	add	r3, r2
 800c51a:	881b      	ldrh	r3, [r3, #0]
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c526:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	441a      	add	r2, r3
 800c532:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c53c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c544:	b29b      	uxth	r3, r3
 800c546:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	009b      	lsls	r3, r3, #2
 800c550:	4413      	add	r3, r2
 800c552:	881b      	ldrh	r3, [r3, #0]
 800c554:	857b      	strh	r3, [r7, #42]	; 0x2a
 800c556:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d01b      	beq.n	800c598 <USB_DeactivateEndpoint+0x324>
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	4413      	add	r3, r2
 800c56a:	881b      	ldrh	r3, [r3, #0]
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c576:	853b      	strh	r3, [r7, #40]	; 0x28
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	441a      	add	r2, r3
 800c582:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c58c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c590:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c594:	b29b      	uxth	r3, r3
 800c596:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	009b      	lsls	r3, r3, #2
 800c5a0:	4413      	add	r3, r2
 800c5a2:	881b      	ldrh	r3, [r3, #0]
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	441a      	add	r2, r3
 800c5ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c5bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c5c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	4413      	add	r3, r2
 800c5da:	881b      	ldrh	r3, [r3, #0]
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	441a      	add	r2, r3
 800c5f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c604:	b29b      	uxth	r3, r3
 800c606:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	4413      	add	r3, r2
 800c612:	881b      	ldrh	r3, [r3, #0]
 800c614:	b29b      	uxth	r3, r3
 800c616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c61a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c61e:	847b      	strh	r3, [r7, #34]	; 0x22
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	441a      	add	r2, r3
 800c62a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c62c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3734      	adds	r7, #52	; 0x34
 800c646:	46bd      	mov	sp, r7
 800c648:	bc80      	pop	{r7}
 800c64a:	4770      	bx	lr

0800c64c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b0c2      	sub	sp, #264	; 0x108
 800c650:	af00      	add	r7, sp, #0
 800c652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c656:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c65a:	6018      	str	r0, [r3, #0]
 800c65c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c664:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c66a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	785b      	ldrb	r3, [r3, #1]
 800c672:	2b01      	cmp	r3, #1
 800c674:	f040 86b7 	bne.w	800d3e6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c67c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	699a      	ldr	r2, [r3, #24]
 800c684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	691b      	ldr	r3, [r3, #16]
 800c690:	429a      	cmp	r2, r3
 800c692:	d908      	bls.n	800c6a6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800c694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c6a4:	e007      	b.n	800c6b6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800c6a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	699b      	ldr	r3, [r3, #24]
 800c6b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c6b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	7b1b      	ldrb	r3, [r3, #12]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d13a      	bne.n	800c73c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c6c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	6959      	ldr	r1, [r3, #20]
 800c6d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	88da      	ldrh	r2, [r3, #6]
 800c6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c6e8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c6ec:	6800      	ldr	r0, [r0, #0]
 800c6ee:	f001 fc9c 	bl	800e02a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c6f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	613b      	str	r3, [r7, #16]
 800c6fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	461a      	mov	r2, r3
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	4413      	add	r3, r2
 800c714:	613b      	str	r3, [r7, #16]
 800c716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c71a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	011a      	lsls	r2, r3, #4
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	4413      	add	r3, r2
 800c728:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c72c:	60fb      	str	r3, [r7, #12]
 800c72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c732:	b29a      	uxth	r2, r3
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	801a      	strh	r2, [r3, #0]
 800c738:	f000 be1f 	b.w	800d37a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c73c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	78db      	ldrb	r3, [r3, #3]
 800c748:	2b02      	cmp	r3, #2
 800c74a:	f040 8462 	bne.w	800d012 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c74e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	6a1a      	ldr	r2, [r3, #32]
 800c75a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c75e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	691b      	ldr	r3, [r3, #16]
 800c766:	429a      	cmp	r2, r3
 800c768:	f240 83df 	bls.w	800cf2a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c76c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c770:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c77a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	4413      	add	r3, r2
 800c786:	881b      	ldrh	r3, [r3, #0]
 800c788:	b29b      	uxth	r3, r3
 800c78a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c78e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c792:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800c796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c79a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	009b      	lsls	r3, r3, #2
 800c7ae:	441a      	add	r2, r3
 800c7b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c7b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7bc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c7c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c7c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	6a1a      	ldr	r2, [r3, #32]
 800c7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7d8:	1ad2      	subs	r2, r2, r3
 800c7da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c7e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	4413      	add	r3, r2
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	b29b      	uxth	r3, r3
 800c804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f000 81c7 	beq.w	800cb9c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c80e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c812:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	633b      	str	r3, [r7, #48]	; 0x30
 800c81a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c81e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	785b      	ldrb	r3, [r3, #1]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d177      	bne.n	800c91a <USB_EPStartXfer+0x2ce>
 800c82a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c82e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	62bb      	str	r3, [r7, #40]	; 0x28
 800c836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c83a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c844:	b29b      	uxth	r3, r3
 800c846:	461a      	mov	r2, r3
 800c848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84a:	4413      	add	r3, r2
 800c84c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c84e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	011a      	lsls	r2, r3, #4
 800c85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85e:	4413      	add	r3, r2
 800c860:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c864:	627b      	str	r3, [r7, #36]	; 0x24
 800c866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c868:	881b      	ldrh	r3, [r3, #0]
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c870:	b29a      	uxth	r2, r3
 800c872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c874:	801a      	strh	r2, [r3, #0]
 800c876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c87a:	2b3e      	cmp	r3, #62	; 0x3e
 800c87c:	d921      	bls.n	800c8c2 <USB_EPStartXfer+0x276>
 800c87e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c882:	095b      	lsrs	r3, r3, #5
 800c884:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c88c:	f003 031f 	and.w	r3, r3, #31
 800c890:	2b00      	cmp	r3, #0
 800c892:	d104      	bne.n	800c89e <USB_EPStartXfer+0x252>
 800c894:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c898:	3b01      	subs	r3, #1
 800c89a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a0:	881b      	ldrh	r3, [r3, #0]
 800c8a2:	b29a      	uxth	r2, r3
 800c8a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	029b      	lsls	r3, r3, #10
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8be:	801a      	strh	r2, [r3, #0]
 800c8c0:	e050      	b.n	800c964 <USB_EPStartXfer+0x318>
 800c8c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d10a      	bne.n	800c8e0 <USB_EPStartXfer+0x294>
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8cc:	881b      	ldrh	r3, [r3, #0]
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8d8:	b29a      	uxth	r2, r3
 800c8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8dc:	801a      	strh	r2, [r3, #0]
 800c8de:	e041      	b.n	800c964 <USB_EPStartXfer+0x318>
 800c8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8e4:	085b      	lsrs	r3, r3, #1
 800c8e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ee:	f003 0301 	and.w	r3, r3, #1
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d004      	beq.n	800c900 <USB_EPStartXfer+0x2b4>
 800c8f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c902:	881b      	ldrh	r3, [r3, #0]
 800c904:	b29a      	uxth	r2, r3
 800c906:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	029b      	lsls	r3, r3, #10
 800c90e:	b29b      	uxth	r3, r3
 800c910:	4313      	orrs	r3, r2
 800c912:	b29a      	uxth	r2, r3
 800c914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c916:	801a      	strh	r2, [r3, #0]
 800c918:	e024      	b.n	800c964 <USB_EPStartXfer+0x318>
 800c91a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c91e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	785b      	ldrb	r3, [r3, #1]
 800c926:	2b01      	cmp	r3, #1
 800c928:	d11c      	bne.n	800c964 <USB_EPStartXfer+0x318>
 800c92a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c92e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c938:	b29b      	uxth	r3, r3
 800c93a:	461a      	mov	r2, r3
 800c93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c93e:	4413      	add	r3, r2
 800c940:	633b      	str	r3, [r7, #48]	; 0x30
 800c942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	011a      	lsls	r2, r3, #4
 800c950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c952:	4413      	add	r3, r2
 800c954:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c95e:	b29a      	uxth	r2, r3
 800c960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c962:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	895b      	ldrh	r3, [r3, #10]
 800c970:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	6959      	ldr	r1, [r3, #20]
 800c980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c984:	b29b      	uxth	r3, r3
 800c986:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c98a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c98e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c992:	6800      	ldr	r0, [r0, #0]
 800c994:	f001 fb49 	bl	800e02a <USB_WritePMA>
            ep->xfer_buff += len;
 800c998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c99c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	695a      	ldr	r2, [r3, #20]
 800c9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9a8:	441a      	add	r2, r3
 800c9aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c9b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	6a1a      	ldr	r2, [r3, #32]
 800c9c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	691b      	ldr	r3, [r3, #16]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d90f      	bls.n	800c9f2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800c9d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	6a1a      	ldr	r2, [r3, #32]
 800c9de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9e2:	1ad2      	subs	r2, r2, r3
 800c9e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	621a      	str	r2, [r3, #32]
 800c9f0:	e00e      	b.n	800ca10 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800c9f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	6a1b      	ldr	r3, [r3, #32]
 800c9fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ca02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ca10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	785b      	ldrb	r3, [r3, #1]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d177      	bne.n	800cb10 <USB_EPStartXfer+0x4c4>
 800ca20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	61bb      	str	r3, [r7, #24]
 800ca2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	69bb      	ldr	r3, [r7, #24]
 800ca40:	4413      	add	r3, r2
 800ca42:	61bb      	str	r3, [r7, #24]
 800ca44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	011a      	lsls	r2, r3, #4
 800ca52:	69bb      	ldr	r3, [r7, #24]
 800ca54:	4413      	add	r3, r2
 800ca56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ca5a:	617b      	str	r3, [r7, #20]
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	881b      	ldrh	r3, [r3, #0]
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca66:	b29a      	uxth	r2, r3
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	801a      	strh	r2, [r3, #0]
 800ca6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca70:	2b3e      	cmp	r3, #62	; 0x3e
 800ca72:	d921      	bls.n	800cab8 <USB_EPStartXfer+0x46c>
 800ca74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca78:	095b      	lsrs	r3, r3, #5
 800ca7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ca7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca82:	f003 031f 	and.w	r3, r3, #31
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d104      	bne.n	800ca94 <USB_EPStartXfer+0x448>
 800ca8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca8e:	3b01      	subs	r3, #1
 800ca90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	881b      	ldrh	r3, [r3, #0]
 800ca98:	b29a      	uxth	r2, r3
 800ca9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	029b      	lsls	r3, r3, #10
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	4313      	orrs	r3, r2
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800caac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cab0:	b29a      	uxth	r2, r3
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	801a      	strh	r2, [r3, #0]
 800cab6:	e056      	b.n	800cb66 <USB_EPStartXfer+0x51a>
 800cab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d10a      	bne.n	800cad6 <USB_EPStartXfer+0x48a>
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	881b      	ldrh	r3, [r3, #0]
 800cac4:	b29b      	uxth	r3, r3
 800cac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800caca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cace:	b29a      	uxth	r2, r3
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	801a      	strh	r2, [r3, #0]
 800cad4:	e047      	b.n	800cb66 <USB_EPStartXfer+0x51a>
 800cad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cada:	085b      	lsrs	r3, r3, #1
 800cadc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cae4:	f003 0301 	and.w	r3, r3, #1
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d004      	beq.n	800caf6 <USB_EPStartXfer+0x4aa>
 800caec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800caf0:	3301      	adds	r3, #1
 800caf2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	881b      	ldrh	r3, [r3, #0]
 800cafa:	b29a      	uxth	r2, r3
 800cafc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	029b      	lsls	r3, r3, #10
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	4313      	orrs	r3, r2
 800cb08:	b29a      	uxth	r2, r3
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	801a      	strh	r2, [r3, #0]
 800cb0e:	e02a      	b.n	800cb66 <USB_EPStartXfer+0x51a>
 800cb10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	785b      	ldrb	r3, [r3, #1]
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d122      	bne.n	800cb66 <USB_EPStartXfer+0x51a>
 800cb20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	623b      	str	r3, [r7, #32]
 800cb2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	6a3b      	ldr	r3, [r7, #32]
 800cb40:	4413      	add	r3, r2
 800cb42:	623b      	str	r3, [r7, #32]
 800cb44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	011a      	lsls	r2, r3, #4
 800cb52:	6a3b      	ldr	r3, [r7, #32]
 800cb54:	4413      	add	r3, r2
 800cb56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cb5a:	61fb      	str	r3, [r7, #28]
 800cb5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb60:	b29a      	uxth	r2, r3
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cb66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	891b      	ldrh	r3, [r3, #8]
 800cb72:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cb76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	6959      	ldr	r1, [r3, #20]
 800cb82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cb8c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cb90:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cb94:	6800      	ldr	r0, [r0, #0]
 800cb96:	f001 fa48 	bl	800e02a <USB_WritePMA>
 800cb9a:	e3ee      	b.n	800d37a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cb9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	785b      	ldrb	r3, [r3, #1]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d177      	bne.n	800cc9c <USB_EPStartXfer+0x650>
 800cbac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	461a      	mov	r2, r3
 800cbca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbcc:	4413      	add	r3, r2
 800cbce:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	011a      	lsls	r2, r3, #4
 800cbde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbe0:	4413      	add	r3, r2
 800cbe2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cbe6:	647b      	str	r3, [r7, #68]	; 0x44
 800cbe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbea:	881b      	ldrh	r3, [r3, #0]
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cbf2:	b29a      	uxth	r2, r3
 800cbf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbf6:	801a      	strh	r2, [r3, #0]
 800cbf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbfc:	2b3e      	cmp	r3, #62	; 0x3e
 800cbfe:	d921      	bls.n	800cc44 <USB_EPStartXfer+0x5f8>
 800cc00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc04:	095b      	lsrs	r3, r3, #5
 800cc06:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cc0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc0e:	f003 031f 	and.w	r3, r3, #31
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d104      	bne.n	800cc20 <USB_EPStartXfer+0x5d4>
 800cc16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cc1a:	3b01      	subs	r3, #1
 800cc1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cc20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc22:	881b      	ldrh	r3, [r3, #0]
 800cc24:	b29a      	uxth	r2, r3
 800cc26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	029b      	lsls	r3, r3, #10
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	4313      	orrs	r3, r2
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc3c:	b29a      	uxth	r2, r3
 800cc3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc40:	801a      	strh	r2, [r3, #0]
 800cc42:	e056      	b.n	800ccf2 <USB_EPStartXfer+0x6a6>
 800cc44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d10a      	bne.n	800cc62 <USB_EPStartXfer+0x616>
 800cc4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc4e:	881b      	ldrh	r3, [r3, #0]
 800cc50:	b29b      	uxth	r3, r3
 800cc52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc5a:	b29a      	uxth	r2, r3
 800cc5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc5e:	801a      	strh	r2, [r3, #0]
 800cc60:	e047      	b.n	800ccf2 <USB_EPStartXfer+0x6a6>
 800cc62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc66:	085b      	lsrs	r3, r3, #1
 800cc68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cc6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc70:	f003 0301 	and.w	r3, r3, #1
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d004      	beq.n	800cc82 <USB_EPStartXfer+0x636>
 800cc78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cc82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc84:	881b      	ldrh	r3, [r3, #0]
 800cc86:	b29a      	uxth	r2, r3
 800cc88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	029b      	lsls	r3, r3, #10
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	4313      	orrs	r3, r2
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc98:	801a      	strh	r2, [r3, #0]
 800cc9a:	e02a      	b.n	800ccf2 <USB_EPStartXfer+0x6a6>
 800cc9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	785b      	ldrb	r3, [r3, #1]
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d122      	bne.n	800ccf2 <USB_EPStartXfer+0x6a6>
 800ccac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	653b      	str	r3, [r7, #80]	; 0x50
 800ccb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	461a      	mov	r2, r3
 800ccca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cccc:	4413      	add	r3, r2
 800ccce:	653b      	str	r3, [r7, #80]	; 0x50
 800ccd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	011a      	lsls	r2, r3, #4
 800ccde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cce0:	4413      	add	r3, r2
 800cce2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccf0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ccf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	891b      	ldrh	r3, [r3, #8]
 800ccfe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	6959      	ldr	r1, [r3, #20]
 800cd0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cd18:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cd1c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cd20:	6800      	ldr	r0, [r0, #0]
 800cd22:	f001 f982 	bl	800e02a <USB_WritePMA>
            ep->xfer_buff += len;
 800cd26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	695a      	ldr	r2, [r3, #20]
 800cd32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd36:	441a      	add	r2, r3
 800cd38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cd44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	6a1a      	ldr	r2, [r3, #32]
 800cd50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	691b      	ldr	r3, [r3, #16]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d90f      	bls.n	800cd80 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800cd60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	6a1a      	ldr	r2, [r3, #32]
 800cd6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd70:	1ad2      	subs	r2, r2, r3
 800cd72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	621a      	str	r2, [r3, #32]
 800cd7e:	e00e      	b.n	800cd9e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800cd80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	6a1b      	ldr	r3, [r3, #32]
 800cd8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800cd90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cd9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cda2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	643b      	str	r3, [r7, #64]	; 0x40
 800cdaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	785b      	ldrb	r3, [r3, #1]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d177      	bne.n	800ceaa <USB_EPStartXfer+0x85e>
 800cdba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cdd4:	b29b      	uxth	r3, r3
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdda:	4413      	add	r3, r2
 800cddc:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cde2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	011a      	lsls	r2, r3, #4
 800cdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdee:	4413      	add	r3, r2
 800cdf0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cdf4:	637b      	str	r3, [r7, #52]	; 0x34
 800cdf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf8:	881b      	ldrh	r3, [r3, #0]
 800cdfa:	b29b      	uxth	r3, r3
 800cdfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce04:	801a      	strh	r2, [r3, #0]
 800ce06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce0a:	2b3e      	cmp	r3, #62	; 0x3e
 800ce0c:	d921      	bls.n	800ce52 <USB_EPStartXfer+0x806>
 800ce0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce12:	095b      	lsrs	r3, r3, #5
 800ce14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ce18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce1c:	f003 031f 	and.w	r3, r3, #31
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d104      	bne.n	800ce2e <USB_EPStartXfer+0x7e2>
 800ce24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce28:	3b01      	subs	r3, #1
 800ce2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ce2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce30:	881b      	ldrh	r3, [r3, #0]
 800ce32:	b29a      	uxth	r2, r3
 800ce34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	029b      	lsls	r3, r3, #10
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce4a:	b29a      	uxth	r2, r3
 800ce4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce4e:	801a      	strh	r2, [r3, #0]
 800ce50:	e050      	b.n	800cef4 <USB_EPStartXfer+0x8a8>
 800ce52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d10a      	bne.n	800ce70 <USB_EPStartXfer+0x824>
 800ce5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce5c:	881b      	ldrh	r3, [r3, #0]
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce68:	b29a      	uxth	r2, r3
 800ce6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce6c:	801a      	strh	r2, [r3, #0]
 800ce6e:	e041      	b.n	800cef4 <USB_EPStartXfer+0x8a8>
 800ce70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce74:	085b      	lsrs	r3, r3, #1
 800ce76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ce7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce7e:	f003 0301 	and.w	r3, r3, #1
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d004      	beq.n	800ce90 <USB_EPStartXfer+0x844>
 800ce86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ce90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce92:	881b      	ldrh	r3, [r3, #0]
 800ce94:	b29a      	uxth	r2, r3
 800ce96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce9a:	b29b      	uxth	r3, r3
 800ce9c:	029b      	lsls	r3, r3, #10
 800ce9e:	b29b      	uxth	r3, r3
 800cea0:	4313      	orrs	r3, r2
 800cea2:	b29a      	uxth	r2, r3
 800cea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea6:	801a      	strh	r2, [r3, #0]
 800cea8:	e024      	b.n	800cef4 <USB_EPStartXfer+0x8a8>
 800ceaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ceae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	785b      	ldrb	r3, [r3, #1]
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d11c      	bne.n	800cef4 <USB_EPStartXfer+0x8a8>
 800ceba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cebe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	461a      	mov	r2, r3
 800cecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cece:	4413      	add	r3, r2
 800ced0:	643b      	str	r3, [r7, #64]	; 0x40
 800ced2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ced6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	011a      	lsls	r2, r3, #4
 800cee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cee2:	4413      	add	r3, r2
 800cee4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ceea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ceee:	b29a      	uxth	r2, r3
 800cef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cef2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	895b      	ldrh	r3, [r3, #10]
 800cf00:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	6959      	ldr	r1, [r3, #20]
 800cf10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cf1a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cf1e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cf22:	6800      	ldr	r0, [r0, #0]
 800cf24:	f001 f881 	bl	800e02a <USB_WritePMA>
 800cf28:	e227      	b.n	800d37a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800cf2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	6a1b      	ldr	r3, [r3, #32]
 800cf36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800cf3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf42:	681a      	ldr	r2, [r3, #0]
 800cf44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	4413      	add	r3, r2
 800cf54:	881b      	ldrh	r3, [r3, #0]
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800cf5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf60:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800cf64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf6c:	681a      	ldr	r2, [r3, #0]
 800cf6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	441a      	add	r2, r3
 800cf7e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800cf82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cf96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfb6:	4413      	add	r3, r2
 800cfb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	011a      	lsls	r2, r3, #4
 800cfc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfca:	4413      	add	r3, r2
 800cfcc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cfd0:	65bb      	str	r3, [r7, #88]	; 0x58
 800cfd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfd6:	b29a      	uxth	r2, r3
 800cfd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cfda:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cfdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	891b      	ldrh	r3, [r3, #8]
 800cfe8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cfec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	6959      	ldr	r1, [r3, #20]
 800cff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d002:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d006:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d00a:	6800      	ldr	r0, [r0, #0]
 800d00c:	f001 f80d 	bl	800e02a <USB_WritePMA>
 800d010:	e1b3      	b.n	800d37a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	6a1a      	ldr	r2, [r3, #32]
 800d01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d022:	1ad2      	subs	r2, r2, r3
 800d024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d03e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	4413      	add	r3, r2
 800d04a:	881b      	ldrh	r3, [r3, #0]
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d052:	2b00      	cmp	r3, #0
 800d054:	f000 80c6 	beq.w	800d1e4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d05c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	673b      	str	r3, [r7, #112]	; 0x70
 800d064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	785b      	ldrb	r3, [r3, #1]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d177      	bne.n	800d164 <USB_EPStartXfer+0xb18>
 800d074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d078:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d084:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d08e:	b29b      	uxth	r3, r3
 800d090:	461a      	mov	r2, r3
 800d092:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d094:	4413      	add	r3, r2
 800d096:	66bb      	str	r3, [r7, #104]	; 0x68
 800d098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d09c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	011a      	lsls	r2, r3, #4
 800d0a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0a8:	4413      	add	r3, r2
 800d0aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d0ae:	667b      	str	r3, [r7, #100]	; 0x64
 800d0b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0b2:	881b      	ldrh	r3, [r3, #0]
 800d0b4:	b29b      	uxth	r3, r3
 800d0b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0be:	801a      	strh	r2, [r3, #0]
 800d0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0c4:	2b3e      	cmp	r3, #62	; 0x3e
 800d0c6:	d921      	bls.n	800d10c <USB_EPStartXfer+0xac0>
 800d0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0cc:	095b      	lsrs	r3, r3, #5
 800d0ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d0d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0d6:	f003 031f 	and.w	r3, r3, #31
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d104      	bne.n	800d0e8 <USB_EPStartXfer+0xa9c>
 800d0de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d0e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0ea:	881b      	ldrh	r3, [r3, #0]
 800d0ec:	b29a      	uxth	r2, r3
 800d0ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	029b      	lsls	r3, r3, #10
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	4313      	orrs	r3, r2
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d104:	b29a      	uxth	r2, r3
 800d106:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d108:	801a      	strh	r2, [r3, #0]
 800d10a:	e050      	b.n	800d1ae <USB_EPStartXfer+0xb62>
 800d10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d110:	2b00      	cmp	r3, #0
 800d112:	d10a      	bne.n	800d12a <USB_EPStartXfer+0xade>
 800d114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d116:	881b      	ldrh	r3, [r3, #0]
 800d118:	b29b      	uxth	r3, r3
 800d11a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d11e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d122:	b29a      	uxth	r2, r3
 800d124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d126:	801a      	strh	r2, [r3, #0]
 800d128:	e041      	b.n	800d1ae <USB_EPStartXfer+0xb62>
 800d12a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d12e:	085b      	lsrs	r3, r3, #1
 800d130:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d138:	f003 0301 	and.w	r3, r3, #1
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d004      	beq.n	800d14a <USB_EPStartXfer+0xafe>
 800d140:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d144:	3301      	adds	r3, #1
 800d146:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d14a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d14c:	881b      	ldrh	r3, [r3, #0]
 800d14e:	b29a      	uxth	r2, r3
 800d150:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d154:	b29b      	uxth	r3, r3
 800d156:	029b      	lsls	r3, r3, #10
 800d158:	b29b      	uxth	r3, r3
 800d15a:	4313      	orrs	r3, r2
 800d15c:	b29a      	uxth	r2, r3
 800d15e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d160:	801a      	strh	r2, [r3, #0]
 800d162:	e024      	b.n	800d1ae <USB_EPStartXfer+0xb62>
 800d164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	785b      	ldrb	r3, [r3, #1]
 800d170:	2b01      	cmp	r3, #1
 800d172:	d11c      	bne.n	800d1ae <USB_EPStartXfer+0xb62>
 800d174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d178:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d182:	b29b      	uxth	r3, r3
 800d184:	461a      	mov	r2, r3
 800d186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d188:	4413      	add	r3, r2
 800d18a:	673b      	str	r3, [r7, #112]	; 0x70
 800d18c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	011a      	lsls	r2, r3, #4
 800d19a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d19c:	4413      	add	r3, r2
 800d19e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d1a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1a8:	b29a      	uxth	r2, r3
 800d1aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d1ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	895b      	ldrh	r3, [r3, #10]
 800d1ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d1be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	6959      	ldr	r1, [r3, #20]
 800d1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d1d4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d1d8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d1dc:	6800      	ldr	r0, [r0, #0]
 800d1de:	f000 ff24 	bl	800e02a <USB_WritePMA>
 800d1e2:	e0ca      	b.n	800d37a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	785b      	ldrb	r3, [r3, #1]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d177      	bne.n	800d2e4 <USB_EPStartXfer+0xc98>
 800d1f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d204:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d20e:	b29b      	uxth	r3, r3
 800d210:	461a      	mov	r2, r3
 800d212:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d214:	4413      	add	r3, r2
 800d216:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d21c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	011a      	lsls	r2, r3, #4
 800d226:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d228:	4413      	add	r3, r2
 800d22a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d22e:	67bb      	str	r3, [r7, #120]	; 0x78
 800d230:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d232:	881b      	ldrh	r3, [r3, #0]
 800d234:	b29b      	uxth	r3, r3
 800d236:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d23e:	801a      	strh	r2, [r3, #0]
 800d240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d244:	2b3e      	cmp	r3, #62	; 0x3e
 800d246:	d921      	bls.n	800d28c <USB_EPStartXfer+0xc40>
 800d248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d24c:	095b      	lsrs	r3, r3, #5
 800d24e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d256:	f003 031f 	and.w	r3, r3, #31
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d104      	bne.n	800d268 <USB_EPStartXfer+0xc1c>
 800d25e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d262:	3b01      	subs	r3, #1
 800d264:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d26a:	881b      	ldrh	r3, [r3, #0]
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d272:	b29b      	uxth	r3, r3
 800d274:	029b      	lsls	r3, r3, #10
 800d276:	b29b      	uxth	r3, r3
 800d278:	4313      	orrs	r3, r2
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d284:	b29a      	uxth	r2, r3
 800d286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d288:	801a      	strh	r2, [r3, #0]
 800d28a:	e05c      	b.n	800d346 <USB_EPStartXfer+0xcfa>
 800d28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d290:	2b00      	cmp	r3, #0
 800d292:	d10a      	bne.n	800d2aa <USB_EPStartXfer+0xc5e>
 800d294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d296:	881b      	ldrh	r3, [r3, #0]
 800d298:	b29b      	uxth	r3, r3
 800d29a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d29e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2a2:	b29a      	uxth	r2, r3
 800d2a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2a6:	801a      	strh	r2, [r3, #0]
 800d2a8:	e04d      	b.n	800d346 <USB_EPStartXfer+0xcfa>
 800d2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2ae:	085b      	lsrs	r3, r3, #1
 800d2b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2b8:	f003 0301 	and.w	r3, r3, #1
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d004      	beq.n	800d2ca <USB_EPStartXfer+0xc7e>
 800d2c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d2ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2cc:	881b      	ldrh	r3, [r3, #0]
 800d2ce:	b29a      	uxth	r2, r3
 800d2d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	029b      	lsls	r3, r3, #10
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	b29a      	uxth	r2, r3
 800d2de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2e0:	801a      	strh	r2, [r3, #0]
 800d2e2:	e030      	b.n	800d346 <USB_EPStartXfer+0xcfa>
 800d2e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	785b      	ldrb	r3, [r3, #1]
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d128      	bne.n	800d346 <USB_EPStartXfer+0xcfa>
 800d2f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d306:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d310:	b29b      	uxth	r3, r3
 800d312:	461a      	mov	r2, r3
 800d314:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d318:	4413      	add	r3, r2
 800d31a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d31e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	011a      	lsls	r2, r3, #4
 800d32c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d330:	4413      	add	r3, r2
 800d332:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d336:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d33e:	b29a      	uxth	r2, r3
 800d340:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d344:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d34a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	891b      	ldrh	r3, [r3, #8]
 800d352:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d35a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	6959      	ldr	r1, [r3, #20]
 800d362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d366:	b29b      	uxth	r3, r3
 800d368:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d36c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d370:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d374:	6800      	ldr	r0, [r0, #0]
 800d376:	f000 fe58 	bl	800e02a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d37a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d37e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	009b      	lsls	r3, r3, #2
 800d392:	4413      	add	r3, r2
 800d394:	881b      	ldrh	r3, [r3, #0]
 800d396:	b29b      	uxth	r3, r3
 800d398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d39c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3a0:	817b      	strh	r3, [r7, #10]
 800d3a2:	897b      	ldrh	r3, [r7, #10]
 800d3a4:	f083 0310 	eor.w	r3, r3, #16
 800d3a8:	817b      	strh	r3, [r7, #10]
 800d3aa:	897b      	ldrh	r3, [r7, #10]
 800d3ac:	f083 0320 	eor.w	r3, r3, #32
 800d3b0:	817b      	strh	r3, [r7, #10]
 800d3b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	441a      	add	r2, r3
 800d3cc:	897b      	ldrh	r3, [r7, #10]
 800d3ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	8013      	strh	r3, [r2, #0]
 800d3e2:	f000 bcde 	b.w	800dda2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d3e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	7b1b      	ldrb	r3, [r3, #12]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f040 80bb 	bne.w	800d56e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d3f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	699a      	ldr	r2, [r3, #24]
 800d404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	691b      	ldr	r3, [r3, #16]
 800d410:	429a      	cmp	r2, r3
 800d412:	d917      	bls.n	800d444 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800d414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	691b      	ldr	r3, [r3, #16]
 800d420:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800d424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	699a      	ldr	r2, [r3, #24]
 800d430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d434:	1ad2      	subs	r2, r2, r3
 800d436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d43a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	619a      	str	r2, [r3, #24]
 800d442:	e00e      	b.n	800d462 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800d444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	699b      	ldr	r3, [r3, #24]
 800d450:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800d454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	2200      	movs	r2, #0
 800d460:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d466:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d474:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d47e:	b29b      	uxth	r3, r3
 800d480:	461a      	mov	r2, r3
 800d482:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d486:	4413      	add	r3, r2
 800d488:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d48c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	011a      	lsls	r2, r3, #4
 800d49a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d49e:	4413      	add	r3, r2
 800d4a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d4a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d4a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d4ac:	881b      	ldrh	r3, [r3, #0]
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d4b4:	b29a      	uxth	r2, r3
 800d4b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d4ba:	801a      	strh	r2, [r3, #0]
 800d4bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4c0:	2b3e      	cmp	r3, #62	; 0x3e
 800d4c2:	d924      	bls.n	800d50e <USB_EPStartXfer+0xec2>
 800d4c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4c8:	095b      	lsrs	r3, r3, #5
 800d4ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d4ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4d2:	f003 031f 	and.w	r3, r3, #31
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d104      	bne.n	800d4e4 <USB_EPStartXfer+0xe98>
 800d4da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d4de:	3b01      	subs	r3, #1
 800d4e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d4e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d4e8:	881b      	ldrh	r3, [r3, #0]
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	029b      	lsls	r3, r3, #10
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d502:	b29a      	uxth	r2, r3
 800d504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d508:	801a      	strh	r2, [r3, #0]
 800d50a:	f000 bc10 	b.w	800dd2e <USB_EPStartXfer+0x16e2>
 800d50e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d512:	2b00      	cmp	r3, #0
 800d514:	d10c      	bne.n	800d530 <USB_EPStartXfer+0xee4>
 800d516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d51a:	881b      	ldrh	r3, [r3, #0]
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d526:	b29a      	uxth	r2, r3
 800d528:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d52c:	801a      	strh	r2, [r3, #0]
 800d52e:	e3fe      	b.n	800dd2e <USB_EPStartXfer+0x16e2>
 800d530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d534:	085b      	lsrs	r3, r3, #1
 800d536:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d53e:	f003 0301 	and.w	r3, r3, #1
 800d542:	2b00      	cmp	r3, #0
 800d544:	d004      	beq.n	800d550 <USB_EPStartXfer+0xf04>
 800d546:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d54a:	3301      	adds	r3, #1
 800d54c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d550:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d554:	881b      	ldrh	r3, [r3, #0]
 800d556:	b29a      	uxth	r2, r3
 800d558:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d55c:	b29b      	uxth	r3, r3
 800d55e:	029b      	lsls	r3, r3, #10
 800d560:	b29b      	uxth	r3, r3
 800d562:	4313      	orrs	r3, r2
 800d564:	b29a      	uxth	r2, r3
 800d566:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d56a:	801a      	strh	r2, [r3, #0]
 800d56c:	e3df      	b.n	800dd2e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	78db      	ldrb	r3, [r3, #3]
 800d57a:	2b02      	cmp	r3, #2
 800d57c:	f040 8218 	bne.w	800d9b0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	785b      	ldrb	r3, [r3, #1]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	f040 809d 	bne.w	800d6cc <USB_EPStartXfer+0x1080>
 800d592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d5a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d5b6:	4413      	add	r3, r2
 800d5b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	011a      	lsls	r2, r3, #4
 800d5ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d5ce:	4413      	add	r3, r2
 800d5d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d5d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d5d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d5dc:	881b      	ldrh	r3, [r3, #0]
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d5e4:	b29a      	uxth	r2, r3
 800d5e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d5ea:	801a      	strh	r2, [r3, #0]
 800d5ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	691b      	ldr	r3, [r3, #16]
 800d5f8:	2b3e      	cmp	r3, #62	; 0x3e
 800d5fa:	d92b      	bls.n	800d654 <USB_EPStartXfer+0x1008>
 800d5fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	691b      	ldr	r3, [r3, #16]
 800d608:	095b      	lsrs	r3, r3, #5
 800d60a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d60e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	691b      	ldr	r3, [r3, #16]
 800d61a:	f003 031f 	and.w	r3, r3, #31
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d104      	bne.n	800d62c <USB_EPStartXfer+0xfe0>
 800d622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d626:	3b01      	subs	r3, #1
 800d628:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d62c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d630:	881b      	ldrh	r3, [r3, #0]
 800d632:	b29a      	uxth	r2, r3
 800d634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d638:	b29b      	uxth	r3, r3
 800d63a:	029b      	lsls	r3, r3, #10
 800d63c:	b29b      	uxth	r3, r3
 800d63e:	4313      	orrs	r3, r2
 800d640:	b29b      	uxth	r3, r3
 800d642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d64a:	b29a      	uxth	r2, r3
 800d64c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d650:	801a      	strh	r2, [r3, #0]
 800d652:	e070      	b.n	800d736 <USB_EPStartXfer+0x10ea>
 800d654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	691b      	ldr	r3, [r3, #16]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d10c      	bne.n	800d67e <USB_EPStartXfer+0x1032>
 800d664:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d668:	881b      	ldrh	r3, [r3, #0]
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d674:	b29a      	uxth	r2, r3
 800d676:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d67a:	801a      	strh	r2, [r3, #0]
 800d67c:	e05b      	b.n	800d736 <USB_EPStartXfer+0x10ea>
 800d67e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	691b      	ldr	r3, [r3, #16]
 800d68a:	085b      	lsrs	r3, r3, #1
 800d68c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	691b      	ldr	r3, [r3, #16]
 800d69c:	f003 0301 	and.w	r3, r3, #1
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d004      	beq.n	800d6ae <USB_EPStartXfer+0x1062>
 800d6a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d6ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d6b2:	881b      	ldrh	r3, [r3, #0]
 800d6b4:	b29a      	uxth	r2, r3
 800d6b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	029b      	lsls	r3, r3, #10
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	b29a      	uxth	r2, r3
 800d6c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d6c8:	801a      	strh	r2, [r3, #0]
 800d6ca:	e034      	b.n	800d736 <USB_EPStartXfer+0x10ea>
 800d6cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	785b      	ldrb	r3, [r3, #1]
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d12c      	bne.n	800d736 <USB_EPStartXfer+0x10ea>
 800d6dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d6ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d700:	4413      	add	r3, r2
 800d702:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d70a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	011a      	lsls	r2, r3, #4
 800d714:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d718:	4413      	add	r3, r2
 800d71a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d71e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	691b      	ldr	r3, [r3, #16]
 800d72e:	b29a      	uxth	r2, r3
 800d730:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d734:	801a      	strh	r2, [r3, #0]
 800d736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d73a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	785b      	ldrb	r3, [r3, #1]
 800d750:	2b00      	cmp	r3, #0
 800d752:	f040 809d 	bne.w	800d890 <USB_EPStartXfer+0x1244>
 800d756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d75a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d768:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d772:	b29b      	uxth	r3, r3
 800d774:	461a      	mov	r2, r3
 800d776:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d77a:	4413      	add	r3, r2
 800d77c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	011a      	lsls	r2, r3, #4
 800d78e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d792:	4413      	add	r3, r2
 800d794:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d798:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d79c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d7a0:	881b      	ldrh	r3, [r3, #0]
 800d7a2:	b29b      	uxth	r3, r3
 800d7a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d7a8:	b29a      	uxth	r2, r3
 800d7aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d7ae:	801a      	strh	r2, [r3, #0]
 800d7b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	691b      	ldr	r3, [r3, #16]
 800d7bc:	2b3e      	cmp	r3, #62	; 0x3e
 800d7be:	d92b      	bls.n	800d818 <USB_EPStartXfer+0x11cc>
 800d7c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	691b      	ldr	r3, [r3, #16]
 800d7cc:	095b      	lsrs	r3, r3, #5
 800d7ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d7d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	691b      	ldr	r3, [r3, #16]
 800d7de:	f003 031f 	and.w	r3, r3, #31
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d104      	bne.n	800d7f0 <USB_EPStartXfer+0x11a4>
 800d7e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7ea:	3b01      	subs	r3, #1
 800d7ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d7f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d7f4:	881b      	ldrh	r3, [r3, #0]
 800d7f6:	b29a      	uxth	r2, r3
 800d7f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	029b      	lsls	r3, r3, #10
 800d800:	b29b      	uxth	r3, r3
 800d802:	4313      	orrs	r3, r2
 800d804:	b29b      	uxth	r3, r3
 800d806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d80a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d80e:	b29a      	uxth	r2, r3
 800d810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d814:	801a      	strh	r2, [r3, #0]
 800d816:	e069      	b.n	800d8ec <USB_EPStartXfer+0x12a0>
 800d818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d81c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	691b      	ldr	r3, [r3, #16]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d10c      	bne.n	800d842 <USB_EPStartXfer+0x11f6>
 800d828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d82c:	881b      	ldrh	r3, [r3, #0]
 800d82e:	b29b      	uxth	r3, r3
 800d830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d838:	b29a      	uxth	r2, r3
 800d83a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d83e:	801a      	strh	r2, [r3, #0]
 800d840:	e054      	b.n	800d8ec <USB_EPStartXfer+0x12a0>
 800d842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	691b      	ldr	r3, [r3, #16]
 800d84e:	085b      	lsrs	r3, r3, #1
 800d850:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	691b      	ldr	r3, [r3, #16]
 800d860:	f003 0301 	and.w	r3, r3, #1
 800d864:	2b00      	cmp	r3, #0
 800d866:	d004      	beq.n	800d872 <USB_EPStartXfer+0x1226>
 800d868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d86c:	3301      	adds	r3, #1
 800d86e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d872:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d876:	881b      	ldrh	r3, [r3, #0]
 800d878:	b29a      	uxth	r2, r3
 800d87a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d87e:	b29b      	uxth	r3, r3
 800d880:	029b      	lsls	r3, r3, #10
 800d882:	b29b      	uxth	r3, r3
 800d884:	4313      	orrs	r3, r2
 800d886:	b29a      	uxth	r2, r3
 800d888:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d88c:	801a      	strh	r2, [r3, #0]
 800d88e:	e02d      	b.n	800d8ec <USB_EPStartXfer+0x12a0>
 800d890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	785b      	ldrb	r3, [r3, #1]
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	d125      	bne.n	800d8ec <USB_EPStartXfer+0x12a0>
 800d8a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d8b6:	4413      	add	r3, r2
 800d8b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d8bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	011a      	lsls	r2, r3, #4
 800d8ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d8ce:	4413      	add	r3, r2
 800d8d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d8d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d8d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	691b      	ldr	r3, [r3, #16]
 800d8e4:	b29a      	uxth	r2, r3
 800d8e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d8ea:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d8ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	69db      	ldr	r3, [r3, #28]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f000 8218 	beq.w	800dd2e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d8fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d902:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d90c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	009b      	lsls	r3, r3, #2
 800d916:	4413      	add	r3, r2
 800d918:	881b      	ldrh	r3, [r3, #0]
 800d91a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d91e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d926:	2b00      	cmp	r3, #0
 800d928:	d005      	beq.n	800d936 <USB_EPStartXfer+0x12ea>
 800d92a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d92e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d932:	2b00      	cmp	r3, #0
 800d934:	d10d      	bne.n	800d952 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d936:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d93a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d93e:	2b00      	cmp	r3, #0
 800d940:	f040 81f5 	bne.w	800dd2e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d944:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	f040 81ee 	bne.w	800dd2e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d956:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	009b      	lsls	r3, r3, #2
 800d96a:	4413      	add	r3, r2
 800d96c:	881b      	ldrh	r3, [r3, #0]
 800d96e:	b29b      	uxth	r3, r3
 800d970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d978:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800d97c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d980:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d98a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	441a      	add	r2, r3
 800d996:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800d99a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d99e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d9a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	8013      	strh	r3, [r2, #0]
 800d9ae:	e1be      	b.n	800dd2e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d9b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	78db      	ldrb	r3, [r3, #3]
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	f040 81b4 	bne.w	800dd2a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d9c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	699a      	ldr	r2, [r3, #24]
 800d9ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	691b      	ldr	r3, [r3, #16]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d917      	bls.n	800da0e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800d9de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	691b      	ldr	r3, [r3, #16]
 800d9ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800d9ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	699a      	ldr	r2, [r3, #24]
 800d9fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9fe:	1ad2      	subs	r2, r2, r3
 800da00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	619a      	str	r2, [r3, #24]
 800da0c:	e00e      	b.n	800da2c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800da0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	699b      	ldr	r3, [r3, #24]
 800da1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800da1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2200      	movs	r2, #0
 800da2a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800da2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	785b      	ldrb	r3, [r3, #1]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	f040 8085 	bne.w	800db48 <USB_EPStartXfer+0x14fc>
 800da3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800da4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da5a:	b29b      	uxth	r3, r3
 800da5c:	461a      	mov	r2, r3
 800da5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800da62:	4413      	add	r3, r2
 800da64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800da68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	011a      	lsls	r2, r3, #4
 800da76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800da7a:	4413      	add	r3, r2
 800da7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800da80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800da84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800da88:	881b      	ldrh	r3, [r3, #0]
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da90:	b29a      	uxth	r2, r3
 800da92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800da96:	801a      	strh	r2, [r3, #0]
 800da98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da9c:	2b3e      	cmp	r3, #62	; 0x3e
 800da9e:	d923      	bls.n	800dae8 <USB_EPStartXfer+0x149c>
 800daa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800daa4:	095b      	lsrs	r3, r3, #5
 800daa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800daaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800daae:	f003 031f 	and.w	r3, r3, #31
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d104      	bne.n	800dac0 <USB_EPStartXfer+0x1474>
 800dab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800daba:	3b01      	subs	r3, #1
 800dabc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800dac0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dac4:	881b      	ldrh	r3, [r3, #0]
 800dac6:	b29a      	uxth	r2, r3
 800dac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dacc:	b29b      	uxth	r3, r3
 800dace:	029b      	lsls	r3, r3, #10
 800dad0:	b29b      	uxth	r3, r3
 800dad2:	4313      	orrs	r3, r2
 800dad4:	b29b      	uxth	r3, r3
 800dad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dade:	b29a      	uxth	r2, r3
 800dae0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dae4:	801a      	strh	r2, [r3, #0]
 800dae6:	e060      	b.n	800dbaa <USB_EPStartXfer+0x155e>
 800dae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800daec:	2b00      	cmp	r3, #0
 800daee:	d10c      	bne.n	800db0a <USB_EPStartXfer+0x14be>
 800daf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800daf4:	881b      	ldrh	r3, [r3, #0]
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dafc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db00:	b29a      	uxth	r2, r3
 800db02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800db06:	801a      	strh	r2, [r3, #0]
 800db08:	e04f      	b.n	800dbaa <USB_EPStartXfer+0x155e>
 800db0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db0e:	085b      	lsrs	r3, r3, #1
 800db10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800db14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db18:	f003 0301 	and.w	r3, r3, #1
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d004      	beq.n	800db2a <USB_EPStartXfer+0x14de>
 800db20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db24:	3301      	adds	r3, #1
 800db26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800db2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800db2e:	881b      	ldrh	r3, [r3, #0]
 800db30:	b29a      	uxth	r2, r3
 800db32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db36:	b29b      	uxth	r3, r3
 800db38:	029b      	lsls	r3, r3, #10
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	4313      	orrs	r3, r2
 800db3e:	b29a      	uxth	r2, r3
 800db40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800db44:	801a      	strh	r2, [r3, #0]
 800db46:	e030      	b.n	800dbaa <USB_EPStartXfer+0x155e>
 800db48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	785b      	ldrb	r3, [r3, #1]
 800db54:	2b01      	cmp	r3, #1
 800db56:	d128      	bne.n	800dbaa <USB_EPStartXfer+0x155e>
 800db58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800db66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800db74:	b29b      	uxth	r3, r3
 800db76:	461a      	mov	r2, r3
 800db78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800db7c:	4413      	add	r3, r2
 800db7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800db82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	011a      	lsls	r2, r3, #4
 800db90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800db94:	4413      	add	r3, r2
 800db96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800db9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800db9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dba2:	b29a      	uxth	r2, r3
 800dba4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800dba8:	801a      	strh	r2, [r3, #0]
 800dbaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dbb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	785b      	ldrb	r3, [r3, #1]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	f040 8085 	bne.w	800dcd4 <USB_EPStartXfer+0x1688>
 800dbca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800dbd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	461a      	mov	r2, r3
 800dbea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800dbee:	4413      	add	r3, r2
 800dbf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800dbf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	011a      	lsls	r2, r3, #4
 800dc02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800dc06:	4413      	add	r3, r2
 800dc08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dc0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dc10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dc14:	881b      	ldrh	r3, [r3, #0]
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc1c:	b29a      	uxth	r2, r3
 800dc1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dc22:	801a      	strh	r2, [r3, #0]
 800dc24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc28:	2b3e      	cmp	r3, #62	; 0x3e
 800dc2a:	d923      	bls.n	800dc74 <USB_EPStartXfer+0x1628>
 800dc2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc30:	095b      	lsrs	r3, r3, #5
 800dc32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dc36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc3a:	f003 031f 	and.w	r3, r3, #31
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d104      	bne.n	800dc4c <USB_EPStartXfer+0x1600>
 800dc42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dc46:	3b01      	subs	r3, #1
 800dc48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dc4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dc50:	881b      	ldrh	r3, [r3, #0]
 800dc52:	b29a      	uxth	r2, r3
 800dc54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dc58:	b29b      	uxth	r3, r3
 800dc5a:	029b      	lsls	r3, r3, #10
 800dc5c:	b29b      	uxth	r3, r3
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc6a:	b29a      	uxth	r2, r3
 800dc6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dc70:	801a      	strh	r2, [r3, #0]
 800dc72:	e05c      	b.n	800dd2e <USB_EPStartXfer+0x16e2>
 800dc74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d10c      	bne.n	800dc96 <USB_EPStartXfer+0x164a>
 800dc7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dc80:	881b      	ldrh	r3, [r3, #0]
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc8c:	b29a      	uxth	r2, r3
 800dc8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dc92:	801a      	strh	r2, [r3, #0]
 800dc94:	e04b      	b.n	800dd2e <USB_EPStartXfer+0x16e2>
 800dc96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc9a:	085b      	lsrs	r3, r3, #1
 800dc9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dca4:	f003 0301 	and.w	r3, r3, #1
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d004      	beq.n	800dcb6 <USB_EPStartXfer+0x166a>
 800dcac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dcb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dcba:	881b      	ldrh	r3, [r3, #0]
 800dcbc:	b29a      	uxth	r2, r3
 800dcbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	029b      	lsls	r3, r3, #10
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	4313      	orrs	r3, r2
 800dcca:	b29a      	uxth	r2, r3
 800dccc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dcd0:	801a      	strh	r2, [r3, #0]
 800dcd2:	e02c      	b.n	800dd2e <USB_EPStartXfer+0x16e2>
 800dcd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	785b      	ldrb	r3, [r3, #1]
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	d124      	bne.n	800dd2e <USB_EPStartXfer+0x16e2>
 800dce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dce8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800dcfa:	4413      	add	r3, r2
 800dcfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dd00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	011a      	lsls	r2, r3, #4
 800dd0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800dd12:	4413      	add	r3, r2
 800dd14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dd18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dd1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd20:	b29a      	uxth	r2, r3
 800dd22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dd26:	801a      	strh	r2, [r3, #0]
 800dd28:	e001      	b.n	800dd2e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	e03a      	b.n	800dda4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dd2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd36:	681a      	ldr	r2, [r3, #0]
 800dd38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	009b      	lsls	r3, r3, #2
 800dd46:	4413      	add	r3, r2
 800dd48:	881b      	ldrh	r3, [r3, #0]
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dd50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd54:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800dd58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800dd5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800dd60:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800dd64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800dd68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800dd6c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800dd70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd78:	681a      	ldr	r2, [r3, #0]
 800dd7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	441a      	add	r2, r3
 800dd8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800dd8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800dda2:	2300      	movs	r3, #0
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}

0800ddae <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ddae:	b480      	push	{r7}
 800ddb0:	b085      	sub	sp, #20
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	6078      	str	r0, [r7, #4]
 800ddb6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	785b      	ldrb	r3, [r3, #1]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d020      	beq.n	800de02 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	4413      	add	r3, r2
 800ddca:	881b      	ldrh	r3, [r3, #0]
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ddd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddd6:	81bb      	strh	r3, [r7, #12]
 800ddd8:	89bb      	ldrh	r3, [r7, #12]
 800ddda:	f083 0310 	eor.w	r3, r3, #16
 800ddde:	81bb      	strh	r3, [r7, #12]
 800dde0:	687a      	ldr	r2, [r7, #4]
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	009b      	lsls	r3, r3, #2
 800dde8:	441a      	add	r2, r3
 800ddea:	89bb      	ldrh	r3, [r7, #12]
 800ddec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ddf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ddf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ddf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	8013      	strh	r3, [r2, #0]
 800de00:	e01f      	b.n	800de42 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	009b      	lsls	r3, r3, #2
 800de0a:	4413      	add	r3, r2
 800de0c:	881b      	ldrh	r3, [r3, #0]
 800de0e:	b29b      	uxth	r3, r3
 800de10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800de14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de18:	81fb      	strh	r3, [r7, #14]
 800de1a:	89fb      	ldrh	r3, [r7, #14]
 800de1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800de20:	81fb      	strh	r3, [r7, #14]
 800de22:	687a      	ldr	r2, [r7, #4]
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	441a      	add	r2, r3
 800de2c:	89fb      	ldrh	r3, [r7, #14]
 800de2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de3e:	b29b      	uxth	r3, r3
 800de40:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800de42:	2300      	movs	r3, #0
}
 800de44:	4618      	mov	r0, r3
 800de46:	3714      	adds	r7, #20
 800de48:	46bd      	mov	sp, r7
 800de4a:	bc80      	pop	{r7}
 800de4c:	4770      	bx	lr

0800de4e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800de4e:	b480      	push	{r7}
 800de50:	b087      	sub	sp, #28
 800de52:	af00      	add	r7, sp, #0
 800de54:	6078      	str	r0, [r7, #4]
 800de56:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	7b1b      	ldrb	r3, [r3, #12]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	f040 809d 	bne.w	800df9c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	785b      	ldrb	r3, [r3, #1]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d04c      	beq.n	800df04 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	009b      	lsls	r3, r3, #2
 800de72:	4413      	add	r3, r2
 800de74:	881b      	ldrh	r3, [r3, #0]
 800de76:	823b      	strh	r3, [r7, #16]
 800de78:	8a3b      	ldrh	r3, [r7, #16]
 800de7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d01b      	beq.n	800deba <USB_EPClearStall+0x6c>
 800de82:	687a      	ldr	r2, [r7, #4]
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	009b      	lsls	r3, r3, #2
 800de8a:	4413      	add	r3, r2
 800de8c:	881b      	ldrh	r3, [r3, #0]
 800de8e:	b29b      	uxth	r3, r3
 800de90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de98:	81fb      	strh	r3, [r7, #14]
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	009b      	lsls	r3, r3, #2
 800dea2:	441a      	add	r2, r3
 800dea4:	89fb      	ldrh	r3, [r7, #14]
 800dea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800deaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800deae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800deb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	78db      	ldrb	r3, [r3, #3]
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d06c      	beq.n	800df9c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dec2:	687a      	ldr	r2, [r7, #4]
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	4413      	add	r3, r2
 800decc:	881b      	ldrh	r3, [r3, #0]
 800dece:	b29b      	uxth	r3, r3
 800ded0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ded4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ded8:	81bb      	strh	r3, [r7, #12]
 800deda:	89bb      	ldrh	r3, [r7, #12]
 800dedc:	f083 0320 	eor.w	r3, r3, #32
 800dee0:	81bb      	strh	r3, [r7, #12]
 800dee2:	687a      	ldr	r2, [r7, #4]
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	009b      	lsls	r3, r3, #2
 800deea:	441a      	add	r2, r3
 800deec:	89bb      	ldrh	r3, [r7, #12]
 800deee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800def2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800def6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800defa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800defe:	b29b      	uxth	r3, r3
 800df00:	8013      	strh	r3, [r2, #0]
 800df02:	e04b      	b.n	800df9c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	4413      	add	r3, r2
 800df0e:	881b      	ldrh	r3, [r3, #0]
 800df10:	82fb      	strh	r3, [r7, #22]
 800df12:	8afb      	ldrh	r3, [r7, #22]
 800df14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d01b      	beq.n	800df54 <USB_EPClearStall+0x106>
 800df1c:	687a      	ldr	r2, [r7, #4]
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	4413      	add	r3, r2
 800df26:	881b      	ldrh	r3, [r3, #0]
 800df28:	b29b      	uxth	r3, r3
 800df2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df32:	82bb      	strh	r3, [r7, #20]
 800df34:	687a      	ldr	r2, [r7, #4]
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	009b      	lsls	r3, r3, #2
 800df3c:	441a      	add	r2, r3
 800df3e:	8abb      	ldrh	r3, [r7, #20]
 800df40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800df4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df50:	b29b      	uxth	r3, r3
 800df52:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800df54:	687a      	ldr	r2, [r7, #4]
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	009b      	lsls	r3, r3, #2
 800df5c:	4413      	add	r3, r2
 800df5e:	881b      	ldrh	r3, [r3, #0]
 800df60:	b29b      	uxth	r3, r3
 800df62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800df66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df6a:	827b      	strh	r3, [r7, #18]
 800df6c:	8a7b      	ldrh	r3, [r7, #18]
 800df6e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800df72:	827b      	strh	r3, [r7, #18]
 800df74:	8a7b      	ldrh	r3, [r7, #18]
 800df76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800df7a:	827b      	strh	r3, [r7, #18]
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	009b      	lsls	r3, r3, #2
 800df84:	441a      	add	r2, r3
 800df86:	8a7b      	ldrh	r3, [r7, #18]
 800df88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df98:	b29b      	uxth	r3, r3
 800df9a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800df9c:	2300      	movs	r3, #0
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	371c      	adds	r7, #28
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bc80      	pop	{r7}
 800dfa6:	4770      	bx	lr

0800dfa8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800dfb4:	78fb      	ldrb	r3, [r7, #3]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d103      	bne.n	800dfc2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2280      	movs	r2, #128	; 0x80
 800dfbe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800dfc2:	2300      	movs	r3, #0
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	370c      	adds	r7, #12
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bc80      	pop	{r7}
 800dfcc:	4770      	bx	lr

0800dfce <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800dfce:	b480      	push	{r7}
 800dfd0:	b083      	sub	sp, #12
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800dfd6:	2300      	movs	r3, #0
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	370c      	adds	r7, #12
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bc80      	pop	{r7}
 800dfe0:	4770      	bx	lr

0800dfe2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800dfe2:	b480      	push	{r7}
 800dfe4:	b083      	sub	sp, #12
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800dfea:	2300      	movs	r3, #0
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	370c      	adds	r7, #12
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bc80      	pop	{r7}
 800dff4:	4770      	bx	lr

0800dff6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800dff6:	b480      	push	{r7}
 800dff8:	b085      	sub	sp, #20
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e004:	b29b      	uxth	r3, r3
 800e006:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e008:	68fb      	ldr	r3, [r7, #12]
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3714      	adds	r7, #20
 800e00e:	46bd      	mov	sp, r7
 800e010:	bc80      	pop	{r7}
 800e012:	4770      	bx	lr

0800e014 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800e014:	b480      	push	{r7}
 800e016:	b083      	sub	sp, #12
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800e01e:	2300      	movs	r3, #0
}
 800e020:	4618      	mov	r0, r3
 800e022:	370c      	adds	r7, #12
 800e024:	46bd      	mov	sp, r7
 800e026:	bc80      	pop	{r7}
 800e028:	4770      	bx	lr

0800e02a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e02a:	b480      	push	{r7}
 800e02c:	b08b      	sub	sp, #44	; 0x2c
 800e02e:	af00      	add	r7, sp, #0
 800e030:	60f8      	str	r0, [r7, #12]
 800e032:	60b9      	str	r1, [r7, #8]
 800e034:	4611      	mov	r1, r2
 800e036:	461a      	mov	r2, r3
 800e038:	460b      	mov	r3, r1
 800e03a:	80fb      	strh	r3, [r7, #6]
 800e03c:	4613      	mov	r3, r2
 800e03e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e040:	88bb      	ldrh	r3, [r7, #4]
 800e042:	3301      	adds	r3, #1
 800e044:	085b      	lsrs	r3, r3, #1
 800e046:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e050:	88fb      	ldrh	r3, [r7, #6]
 800e052:	005a      	lsls	r2, r3, #1
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	4413      	add	r3, r2
 800e058:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e05c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e05e:	69bb      	ldr	r3, [r7, #24]
 800e060:	627b      	str	r3, [r7, #36]	; 0x24
 800e062:	e01e      	b.n	800e0a2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	3301      	adds	r3, #1
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	021b      	lsls	r3, r3, #8
 800e072:	b21a      	sxth	r2, r3
 800e074:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e078:	4313      	orrs	r3, r2
 800e07a:	b21b      	sxth	r3, r3
 800e07c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e07e:	6a3b      	ldr	r3, [r7, #32]
 800e080:	8a7a      	ldrh	r2, [r7, #18]
 800e082:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e084:	6a3b      	ldr	r3, [r7, #32]
 800e086:	3302      	adds	r3, #2
 800e088:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800e08a:	6a3b      	ldr	r3, [r7, #32]
 800e08c:	3302      	adds	r3, #2
 800e08e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	3301      	adds	r3, #1
 800e094:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e096:	69fb      	ldr	r3, [r7, #28]
 800e098:	3301      	adds	r3, #1
 800e09a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09e:	3b01      	subs	r3, #1
 800e0a0:	627b      	str	r3, [r7, #36]	; 0x24
 800e0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d1dd      	bne.n	800e064 <USB_WritePMA+0x3a>
  }
}
 800e0a8:	bf00      	nop
 800e0aa:	bf00      	nop
 800e0ac:	372c      	adds	r7, #44	; 0x2c
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bc80      	pop	{r7}
 800e0b2:	4770      	bx	lr

0800e0b4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b08b      	sub	sp, #44	; 0x2c
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	4611      	mov	r1, r2
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	460b      	mov	r3, r1
 800e0c4:	80fb      	strh	r3, [r7, #6]
 800e0c6:	4613      	mov	r3, r2
 800e0c8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e0ca:	88bb      	ldrh	r3, [r7, #4]
 800e0cc:	085b      	lsrs	r3, r3, #1
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e0da:	88fb      	ldrh	r3, [r7, #6]
 800e0dc:	005a      	lsls	r2, r3, #1
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	4413      	add	r3, r2
 800e0e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e0e6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e0e8:	69bb      	ldr	r3, [r7, #24]
 800e0ea:	627b      	str	r3, [r7, #36]	; 0x24
 800e0ec:	e01b      	b.n	800e126 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e0ee:	6a3b      	ldr	r3, [r7, #32]
 800e0f0:	881b      	ldrh	r3, [r3, #0]
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e0f6:	6a3b      	ldr	r3, [r7, #32]
 800e0f8:	3302      	adds	r3, #2
 800e0fa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	b2da      	uxtb	r2, r3
 800e100:	69fb      	ldr	r3, [r7, #28]
 800e102:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	3301      	adds	r3, #1
 800e108:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	0a1b      	lsrs	r3, r3, #8
 800e10e:	b2da      	uxtb	r2, r3
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e114:	69fb      	ldr	r3, [r7, #28]
 800e116:	3301      	adds	r3, #1
 800e118:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800e11a:	6a3b      	ldr	r3, [r7, #32]
 800e11c:	3302      	adds	r3, #2
 800e11e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800e120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e122:	3b01      	subs	r3, #1
 800e124:	627b      	str	r3, [r7, #36]	; 0x24
 800e126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d1e0      	bne.n	800e0ee <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e12c:	88bb      	ldrh	r3, [r7, #4]
 800e12e:	f003 0301 	and.w	r3, r3, #1
 800e132:	b29b      	uxth	r3, r3
 800e134:	2b00      	cmp	r3, #0
 800e136:	d007      	beq.n	800e148 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800e138:	6a3b      	ldr	r3, [r7, #32]
 800e13a:	881b      	ldrh	r3, [r3, #0]
 800e13c:	b29b      	uxth	r3, r3
 800e13e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	b2da      	uxtb	r2, r3
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	701a      	strb	r2, [r3, #0]
  }
}
 800e148:	bf00      	nop
 800e14a:	372c      	adds	r7, #44	; 0x2c
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bc80      	pop	{r7}
 800e150:	4770      	bx	lr
	...

0800e154 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e158:	4904      	ldr	r1, [pc, #16]	; (800e16c <MX_FATFS_Init+0x18>)
 800e15a:	4805      	ldr	r0, [pc, #20]	; (800e170 <MX_FATFS_Init+0x1c>)
 800e15c:	f004 f81e 	bl	801219c <FATFS_LinkDriver>
 800e160:	4603      	mov	r3, r0
 800e162:	461a      	mov	r2, r3
 800e164:	4b03      	ldr	r3, [pc, #12]	; (800e174 <MX_FATFS_Init+0x20>)
 800e166:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e168:	bf00      	nop
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	20000ca8 	.word	0x20000ca8
 800e170:	08030588 	.word	0x08030588
 800e174:	20000ca4 	.word	0x20000ca4

0800e178 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e178:	b480      	push	{r7}
 800e17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e17c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e17e:	4618      	mov	r0, r3
 800e180:	46bd      	mov	sp, r7
 800e182:	bc80      	pop	{r7}
 800e184:	4770      	bx	lr
	...

0800e188 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e18e:	2300      	movs	r3, #0
 800e190:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e192:	f000 f879 	bl	800e288 <BSP_SD_IsDetected>
 800e196:	4603      	mov	r3, r0
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d001      	beq.n	800e1a0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e19c:	2301      	movs	r3, #1
 800e19e:	e012      	b.n	800e1c6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e1a0:	480b      	ldr	r0, [pc, #44]	; (800e1d0 <BSP_SD_Init+0x48>)
 800e1a2:	f7f9 ffd1 	bl	8008148 <HAL_SD_Init>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e1aa:	79fb      	ldrb	r3, [r7, #7]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d109      	bne.n	800e1c4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800e1b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e1b4:	4806      	ldr	r0, [pc, #24]	; (800e1d0 <BSP_SD_Init+0x48>)
 800e1b6:	f7fa fdab 	bl	8008d10 <HAL_SD_ConfigWideBusOperation>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d001      	beq.n	800e1c4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e1c4:	79fb      	ldrb	r3, [r7, #7]
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3708      	adds	r7, #8
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	20000a10 	.word	0x20000a10

0800e1d4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b088      	sub	sp, #32
 800e1d8:	af02      	add	r7, sp, #8
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	607a      	str	r2, [r7, #4]
 800e1e0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	9300      	str	r3, [sp, #0]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	68ba      	ldr	r2, [r7, #8]
 800e1ee:	68f9      	ldr	r1, [r7, #12]
 800e1f0:	4806      	ldr	r0, [pc, #24]	; (800e20c <BSP_SD_ReadBlocks+0x38>)
 800e1f2:	f7fa f859 	bl	80082a8 <HAL_SD_ReadBlocks>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d001      	beq.n	800e200 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e200:	7dfb      	ldrb	r3, [r7, #23]
}
 800e202:	4618      	mov	r0, r3
 800e204:	3718      	adds	r7, #24
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	bf00      	nop
 800e20c:	20000a10 	.word	0x20000a10

0800e210 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b088      	sub	sp, #32
 800e214:	af02      	add	r7, sp, #8
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	607a      	str	r2, [r7, #4]
 800e21c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e21e:	2300      	movs	r3, #0
 800e220:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	9300      	str	r3, [sp, #0]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	68ba      	ldr	r2, [r7, #8]
 800e22a:	68f9      	ldr	r1, [r7, #12]
 800e22c:	4806      	ldr	r0, [pc, #24]	; (800e248 <BSP_SD_WriteBlocks+0x38>)
 800e22e:	f7fa fa19 	bl	8008664 <HAL_SD_WriteBlocks>
 800e232:	4603      	mov	r3, r0
 800e234:	2b00      	cmp	r3, #0
 800e236:	d001      	beq.n	800e23c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e238:	2301      	movs	r3, #1
 800e23a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e23c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3718      	adds	r7, #24
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop
 800e248:	20000a10 	.word	0x20000a10

0800e24c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e250:	4805      	ldr	r0, [pc, #20]	; (800e268 <BSP_SD_GetCardState+0x1c>)
 800e252:	f7fa fdf7 	bl	8008e44 <HAL_SD_GetCardState>
 800e256:	4603      	mov	r3, r0
 800e258:	2b04      	cmp	r3, #4
 800e25a:	bf14      	ite	ne
 800e25c:	2301      	movne	r3, #1
 800e25e:	2300      	moveq	r3, #0
 800e260:	b2db      	uxtb	r3, r3
}
 800e262:	4618      	mov	r0, r3
 800e264:	bd80      	pop	{r7, pc}
 800e266:	bf00      	nop
 800e268:	20000a10 	.word	0x20000a10

0800e26c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e274:	6879      	ldr	r1, [r7, #4]
 800e276:	4803      	ldr	r0, [pc, #12]	; (800e284 <BSP_SD_GetCardInfo+0x18>)
 800e278:	f7fa fd1e 	bl	8008cb8 <HAL_SD_GetCardInfo>
}
 800e27c:	bf00      	nop
 800e27e:	3708      	adds	r7, #8
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	20000a10 	.word	0x20000a10

0800e288 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e28e:	2301      	movs	r3, #1
 800e290:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800e292:	79fb      	ldrb	r3, [r7, #7]
 800e294:	b2db      	uxtb	r3, r3
}
 800e296:	4618      	mov	r0, r3
 800e298:	370c      	adds	r7, #12
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bc80      	pop	{r7}
 800e29e:	4770      	bx	lr

0800e2a0 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800e2b0:	2302      	movs	r3, #2
 800e2b2:	2203      	movs	r2, #3
 800e2b4:	2181      	movs	r1, #129	; 0x81
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f005 fe89 	bl	8013fce <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2201      	movs	r2, #1
 800e2c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800e2c2:	2302      	movs	r3, #2
 800e2c4:	2203      	movs	r2, #3
 800e2c6:	2101      	movs	r1, #1
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f005 fe80 	bl	8013fce <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800e2d6:	2018      	movs	r0, #24
 800e2d8:	f005 ff8e 	bl	80141f8 <USBD_static_malloc>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d102      	bne.n	800e2f4 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	73fb      	strb	r3, [r7, #15]
 800e2f2:	e011      	b.n	800e318 <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2fa:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	2200      	movs	r2, #0
 800e300:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800e30c:	68ba      	ldr	r2, [r7, #8]
 800e30e:	2302      	movs	r3, #2
 800e310:	2101      	movs	r1, #1
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f005 ff4c 	bl	80141b0 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800e318:	7bfb      	ldrb	r3, [r7, #15]
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3710      	adds	r7, #16
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}

0800e322 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 800e322:	b580      	push	{r7, lr}
 800e324:	b082      	sub	sp, #8
 800e326:	af00      	add	r7, sp, #0
 800e328:	6078      	str	r0, [r7, #4]
 800e32a:	460b      	mov	r3, r1
 800e32c:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800e32e:	2181      	movs	r1, #129	; 0x81
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f005 fe72 	bl	801401a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2200      	movs	r2, #0
 800e33a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800e33c:	2101      	movs	r1, #1
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f005 fe6b 	bl	801401a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2200      	movs	r2, #0
 800e348:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e352:	2b00      	cmp	r3, #0
 800e354:	d00e      	beq.n	800e374 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e35c:	689b      	ldr	r3, [r3, #8]
 800e35e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e366:	4618      	mov	r0, r3
 800e368:	f005 ff52 	bl	8014210 <USBD_static_free>
    pdev->pClassData = NULL;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2200      	movs	r2, #0
 800e370:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 800e374:	2300      	movs	r3, #0
}
 800e376:	4618      	mov	r0, r3
 800e378:	3708      	adds	r7, #8
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
	...

0800e380 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b088      	sub	sp, #32
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e390:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800e392:	2300      	movs	r3, #0
 800e394:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800e396:	2300      	movs	r3, #0
 800e398:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800e39a:	2300      	movs	r3, #0
 800e39c:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d051      	beq.n	800e452 <USBD_CUSTOM_HID_Setup+0xd2>
 800e3ae:	2b20      	cmp	r3, #32
 800e3b0:	f040 80e1 	bne.w	800e576 <USBD_CUSTOM_HID_Setup+0x1f6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	785b      	ldrb	r3, [r3, #1]
 800e3b8:	3b02      	subs	r3, #2
 800e3ba:	2b09      	cmp	r3, #9
 800e3bc:	d841      	bhi.n	800e442 <USBD_CUSTOM_HID_Setup+0xc2>
 800e3be:	a201      	add	r2, pc, #4	; (adr r2, 800e3c4 <USBD_CUSTOM_HID_Setup+0x44>)
 800e3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3c4:	0800e41d 	.word	0x0800e41d
 800e3c8:	0800e3fb 	.word	0x0800e3fb
 800e3cc:	0800e443 	.word	0x0800e443
 800e3d0:	0800e443 	.word	0x0800e443
 800e3d4:	0800e443 	.word	0x0800e443
 800e3d8:	0800e443 	.word	0x0800e443
 800e3dc:	0800e443 	.word	0x0800e443
 800e3e0:	0800e42d 	.word	0x0800e42d
 800e3e4:	0800e40b 	.word	0x0800e40b
 800e3e8:	0800e3ed 	.word	0x0800e3ed
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	885b      	ldrh	r3, [r3, #2]
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	693b      	ldr	r3, [r7, #16]
 800e3f6:	605a      	str	r2, [r3, #4]
          break;
 800e3f8:	e02a      	b.n	800e450 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	3304      	adds	r3, #4
 800e3fe:	2201      	movs	r2, #1
 800e400:	4619      	mov	r1, r3
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f001 f9bb 	bl	800f77e <USBD_CtlSendData>
          break;
 800e408:	e022      	b.n	800e450 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	885b      	ldrh	r3, [r3, #2]
 800e40e:	0a1b      	lsrs	r3, r3, #8
 800e410:	b29b      	uxth	r3, r3
 800e412:	b2db      	uxtb	r3, r3
 800e414:	461a      	mov	r2, r3
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	609a      	str	r2, [r3, #8]
          break;
 800e41a:	e019      	b.n	800e450 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	3308      	adds	r3, #8
 800e420:	2201      	movs	r2, #1
 800e422:	4619      	mov	r1, r3
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f001 f9aa 	bl	800f77e <USBD_CtlSendData>
          break;
 800e42a:	e011      	b.n	800e450 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	2201      	movs	r2, #1
 800e430:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800e432:	6939      	ldr	r1, [r7, #16]
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	88db      	ldrh	r3, [r3, #6]
 800e438:	461a      	mov	r2, r3
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f001 f9cd 	bl	800f7da <USBD_CtlPrepareRx>
          break;
 800e440:	e006      	b.n	800e450 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800e442:	6839      	ldr	r1, [r7, #0]
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f001 f930 	bl	800f6aa <USBD_CtlError>
          ret = USBD_FAIL;
 800e44a:	2302      	movs	r3, #2
 800e44c:	75fb      	strb	r3, [r7, #23]
          break;
 800e44e:	bf00      	nop
      }
      break;
 800e450:	e098      	b.n	800e584 <USBD_CUSTOM_HID_Setup+0x204>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	785b      	ldrb	r3, [r3, #1]
 800e456:	2b0b      	cmp	r3, #11
 800e458:	f200 8085 	bhi.w	800e566 <USBD_CUSTOM_HID_Setup+0x1e6>
 800e45c:	a201      	add	r2, pc, #4	; (adr r2, 800e464 <USBD_CUSTOM_HID_Setup+0xe4>)
 800e45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e462:	bf00      	nop
 800e464:	0800e495 	.word	0x0800e495
 800e468:	0800e567 	.word	0x0800e567
 800e46c:	0800e567 	.word	0x0800e567
 800e470:	0800e567 	.word	0x0800e567
 800e474:	0800e567 	.word	0x0800e567
 800e478:	0800e567 	.word	0x0800e567
 800e47c:	0800e4bd 	.word	0x0800e4bd
 800e480:	0800e567 	.word	0x0800e567
 800e484:	0800e567 	.word	0x0800e567
 800e488:	0800e567 	.word	0x0800e567
 800e48c:	0800e519 	.word	0x0800e519
 800e490:	0800e541 	.word	0x0800e541
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e49a:	2b03      	cmp	r3, #3
 800e49c:	d107      	bne.n	800e4ae <USBD_CUSTOM_HID_Setup+0x12e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800e49e:	f107 030e 	add.w	r3, r7, #14
 800e4a2:	2202      	movs	r2, #2
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f001 f969 	bl	800f77e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e4ac:	e062      	b.n	800e574 <USBD_CUSTOM_HID_Setup+0x1f4>
            USBD_CtlError(pdev, req);
 800e4ae:	6839      	ldr	r1, [r7, #0]
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f001 f8fa 	bl	800f6aa <USBD_CtlError>
            ret = USBD_FAIL;
 800e4b6:	2302      	movs	r3, #2
 800e4b8:	75fb      	strb	r3, [r7, #23]
          break;
 800e4ba:	e05b      	b.n	800e574 <USBD_CUSTOM_HID_Setup+0x1f4>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	885b      	ldrh	r3, [r3, #2]
 800e4c0:	0a1b      	lsrs	r3, r3, #8
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	2b22      	cmp	r3, #34	; 0x22
 800e4c6:	d10d      	bne.n	800e4e4 <USBD_CUSTOM_HID_Setup+0x164>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	88da      	ldrh	r2, [r3, #6]
 800e4cc:	4b30      	ldr	r3, [pc, #192]	; (800e590 <USBD_CUSTOM_HID_Setup+0x210>)
 800e4ce:	881b      	ldrh	r3, [r3, #0]
 800e4d0:	4293      	cmp	r3, r2
 800e4d2:	bf28      	it	cs
 800e4d4:	4613      	movcs	r3, r2
 800e4d6:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	61bb      	str	r3, [r7, #24]
 800e4e2:	e012      	b.n	800e50a <USBD_CUSTOM_HID_Setup+0x18a>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	885b      	ldrh	r3, [r3, #2]
 800e4e8:	0a1b      	lsrs	r3, r3, #8
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	2b21      	cmp	r3, #33	; 0x21
 800e4ee:	d10c      	bne.n	800e50a <USBD_CUSTOM_HID_Setup+0x18a>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800e4f0:	4b28      	ldr	r3, [pc, #160]	; (800e594 <USBD_CUSTOM_HID_Setup+0x214>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	88db      	ldrh	r3, [r3, #6]
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	4b26      	ldr	r3, [pc, #152]	; (800e598 <USBD_CUSTOM_HID_Setup+0x218>)
 800e4fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e502:	4293      	cmp	r3, r2
 800e504:	bfa8      	it	ge
 800e506:	4613      	movge	r3, r2
 800e508:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800e50a:	8bfb      	ldrh	r3, [r7, #30]
 800e50c:	461a      	mov	r2, r3
 800e50e:	69b9      	ldr	r1, [r7, #24]
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f001 f934 	bl	800f77e <USBD_CtlSendData>
          break;
 800e516:	e02d      	b.n	800e574 <USBD_CUSTOM_HID_Setup+0x1f4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e51e:	2b03      	cmp	r3, #3
 800e520:	d107      	bne.n	800e532 <USBD_CUSTOM_HID_Setup+0x1b2>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	330c      	adds	r3, #12
 800e526:	2201      	movs	r2, #1
 800e528:	4619      	mov	r1, r3
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f001 f927 	bl	800f77e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e530:	e020      	b.n	800e574 <USBD_CUSTOM_HID_Setup+0x1f4>
            USBD_CtlError(pdev, req);
 800e532:	6839      	ldr	r1, [r7, #0]
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f001 f8b8 	bl	800f6aa <USBD_CtlError>
            ret = USBD_FAIL;
 800e53a:	2302      	movs	r3, #2
 800e53c:	75fb      	strb	r3, [r7, #23]
          break;
 800e53e:	e019      	b.n	800e574 <USBD_CUSTOM_HID_Setup+0x1f4>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e546:	2b03      	cmp	r3, #3
 800e548:	d106      	bne.n	800e558 <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	885b      	ldrh	r3, [r3, #2]
 800e54e:	b2db      	uxtb	r3, r3
 800e550:	461a      	mov	r2, r3
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e556:	e00d      	b.n	800e574 <USBD_CUSTOM_HID_Setup+0x1f4>
            USBD_CtlError(pdev, req);
 800e558:	6839      	ldr	r1, [r7, #0]
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f001 f8a5 	bl	800f6aa <USBD_CtlError>
            ret = USBD_FAIL;
 800e560:	2302      	movs	r3, #2
 800e562:	75fb      	strb	r3, [r7, #23]
          break;
 800e564:	e006      	b.n	800e574 <USBD_CUSTOM_HID_Setup+0x1f4>

        default:
          USBD_CtlError(pdev, req);
 800e566:	6839      	ldr	r1, [r7, #0]
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f001 f89e 	bl	800f6aa <USBD_CtlError>
          ret = USBD_FAIL;
 800e56e:	2302      	movs	r3, #2
 800e570:	75fb      	strb	r3, [r7, #23]
          break;
 800e572:	bf00      	nop
      }
      break;
 800e574:	e006      	b.n	800e584 <USBD_CUSTOM_HID_Setup+0x204>

    default:
      USBD_CtlError(pdev, req);
 800e576:	6839      	ldr	r1, [r7, #0]
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f001 f896 	bl	800f6aa <USBD_CtlError>
      ret = USBD_FAIL;
 800e57e:	2302      	movs	r3, #2
 800e580:	75fb      	strb	r3, [r7, #23]
      break;
 800e582:	bf00      	nop
  }
  return ret;
 800e584:	7dfb      	ldrb	r3, [r7, #23]
}
 800e586:	4618      	mov	r0, r3
 800e588:	3720      	adds	r7, #32
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	200010a4 	.word	0x200010a4
 800e594:	20000cb8 	.word	0x20000cb8
 800e598:	20000cbe 	.word	0x20000cbe

0800e59c <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b086      	sub	sp, #24
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	60f8      	str	r0, [r7, #12]
 800e5a4:	60b9      	str	r1, [r7, #8]
 800e5a6:	4613      	mov	r3, r2
 800e5a8:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5b0:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5b8:	2b03      	cmp	r3, #3
 800e5ba:	d10f      	bne.n	800e5dc <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	7d1b      	ldrb	r3, [r3, #20]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d109      	bne.n	800e5d8 <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800e5ca:	88fb      	ldrh	r3, [r7, #6]
 800e5cc:	68ba      	ldr	r2, [r7, #8]
 800e5ce:	2181      	movs	r1, #129	; 0x81
 800e5d0:	68f8      	ldr	r0, [r7, #12]
 800e5d2:	f005 fdca 	bl	801416a <USBD_LL_Transmit>
 800e5d6:	e001      	b.n	800e5dc <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 800e5d8:	2301      	movs	r3, #1
 800e5da:	e000      	b.n	800e5de <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 800e5dc:	2300      	movs	r3, #0
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3718      	adds	r7, #24
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
	...

0800e5e8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
//  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
  *length = USB_CUSTOM_HID_CONFIG_DESC_SIZ;
 800e5f0:	4b06      	ldr	r3, [pc, #24]	; (800e60c <USBD_CUSTOM_HID_GetFSCfgDesc+0x24>)
 800e5f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5f6:	b29a      	uxth	r2, r3
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800e5fc:	4b04      	ldr	r3, [pc, #16]	; (800e610 <USBD_CUSTOM_HID_GetFSCfgDesc+0x28>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
}
 800e600:	4618      	mov	r0, r3
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	bc80      	pop	{r7}
 800e608:	4770      	bx	lr
 800e60a:	bf00      	nop
 800e60c:	20000cbc 	.word	0x20000cbc
 800e610:	20000cac 	.word	0x20000cac

0800e614 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
//  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
  *length = USB_CUSTOM_HID_CONFIG_DESC_SIZ;
 800e61c:	4b06      	ldr	r3, [pc, #24]	; (800e638 <USBD_CUSTOM_HID_GetHSCfgDesc+0x24>)
 800e61e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e622:	b29a      	uxth	r2, r3
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800e628:	4b04      	ldr	r3, [pc, #16]	; (800e63c <USBD_CUSTOM_HID_GetHSCfgDesc+0x28>)
 800e62a:	681b      	ldr	r3, [r3, #0]
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	370c      	adds	r7, #12
 800e630:	46bd      	mov	sp, r7
 800e632:	bc80      	pop	{r7}
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop
 800e638:	20000cbc 	.word	0x20000cbc
 800e63c:	20000cb0 	.word	0x20000cb0

0800e640 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e640:	b480      	push	{r7}
 800e642:	b083      	sub	sp, #12
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
//  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
  *length = USB_CUSTOM_HID_CONFIG_DESC_SIZ;
 800e648:	4b06      	ldr	r3, [pc, #24]	; (800e664 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x24>)
 800e64a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e64e:	b29a      	uxth	r2, r3
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800e654:	4b04      	ldr	r3, [pc, #16]	; (800e668 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x28>)
 800e656:	681b      	ldr	r3, [r3, #0]
}
 800e658:	4618      	mov	r0, r3
 800e65a:	370c      	adds	r7, #12
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bc80      	pop	{r7}
 800e660:	4770      	bx	lr
 800e662:	bf00      	nop
 800e664:	20000cbc 	.word	0x20000cbc
 800e668:	20000cb4 	.word	0x20000cb4

0800e66c <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	460b      	mov	r3, r1
 800e676:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e67e:	2200      	movs	r2, #0
 800e680:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 800e682:	2300      	movs	r3, #0
}
 800e684:	4618      	mov	r0, r3
 800e686:	370c      	adds	r7, #12
 800e688:	46bd      	mov	sp, r7
 800e68a:	bc80      	pop	{r7}
 800e68c:	4770      	bx	lr

0800e68e <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800e68e:	b580      	push	{r7, lr}
 800e690:	b084      	sub	sp, #16
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]
 800e696:	460b      	mov	r3, r1
 800e698:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6a0:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6a8:	68db      	ldr	r3, [r3, #12]
 800e6aa:	68fa      	ldr	r2, [r7, #12]
 800e6ac:	7810      	ldrb	r0, [r2, #0]
 800e6ae:	68fa      	ldr	r2, [r7, #12]
 800e6b0:	7852      	ldrb	r2, [r2, #1]
 800e6b2:	4611      	mov	r1, r2
 800e6b4:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800e6b6:	68fa      	ldr	r2, [r7, #12]
 800e6b8:	2302      	movs	r3, #2
 800e6ba:	2101      	movs	r1, #1
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f005 fd77 	bl	80141b0 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800e6c2:	2300      	movs	r3, #0
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3710      	adds	r7, #16
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6da:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	691b      	ldr	r3, [r3, #16]
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	d10c      	bne.n	800e6fe <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	68fa      	ldr	r2, [r7, #12]
 800e6ee:	7810      	ldrb	r0, [r2, #0]
 800e6f0:	68fa      	ldr	r2, [r7, #12]
 800e6f2:	7852      	ldrb	r2, [r2, #1]
 800e6f4:	4611      	mov	r1, r2
 800e6f6:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	3710      	adds	r7, #16
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	220a      	movs	r2, #10
 800e714:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800e716:	4b03      	ldr	r3, [pc, #12]	; (800e724 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800e718:	4618      	mov	r0, r3
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bc80      	pop	{r7}
 800e720:	4770      	bx	lr
 800e722:	bf00      	nop
 800e724:	2000008c 	.word	0x2000008c

0800e728 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800e728:	b480      	push	{r7}
 800e72a:	b085      	sub	sp, #20
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800e732:	2302      	movs	r3, #2
 800e734:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d005      	beq.n	800e748 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	683a      	ldr	r2, [r7, #0]
 800e740:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800e744:	2300      	movs	r3, #0
 800e746:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e748:	7bfb      	ldrb	r3, [r7, #15]
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3714      	adds	r7, #20
 800e74e:	46bd      	mov	sp, r7
 800e750:	bc80      	pop	{r7}
 800e752:	4770      	bx	lr

0800e754 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b084      	sub	sp, #16
 800e758:	af00      	add	r7, sp, #0
 800e75a:	60f8      	str	r0, [r7, #12]
 800e75c:	60b9      	str	r1, [r7, #8]
 800e75e:	4613      	mov	r3, r2
 800e760:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d101      	bne.n	800e76c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e768:	2302      	movs	r3, #2
 800e76a:	e01a      	b.n	800e7a2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e772:	2b00      	cmp	r3, #0
 800e774:	d003      	beq.n	800e77e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	2200      	movs	r2, #0
 800e77a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d003      	beq.n	800e78c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	68ba      	ldr	r2, [r7, #8]
 800e788:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2201      	movs	r2, #1
 800e790:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	79fa      	ldrb	r2, [r7, #7]
 800e798:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800e79a:	68f8      	ldr	r0, [r7, #12]
 800e79c:	f005 fbac 	bl	8013ef8 <USBD_LL_Init>

  return USBD_OK;
 800e7a0:	2300      	movs	r3, #0
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3710      	adds	r7, #16
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}

0800e7aa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e7aa:	b480      	push	{r7}
 800e7ac:	b085      	sub	sp, #20
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
 800e7b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d006      	beq.n	800e7cc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	683a      	ldr	r2, [r7, #0]
 800e7c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	73fb      	strb	r3, [r7, #15]
 800e7ca:	e001      	b.n	800e7d0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800e7cc:	2302      	movs	r3, #2
 800e7ce:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3714      	adds	r7, #20
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bc80      	pop	{r7}
 800e7da:	4770      	bx	lr

0800e7dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f005 fbd7 	bl	8013f98 <USBD_LL_Start>

  return USBD_OK;
 800e7ea:	2300      	movs	r3, #0
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e7fc:	2300      	movs	r3, #0
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	370c      	adds	r7, #12
 800e802:	46bd      	mov	sp, r7
 800e804:	bc80      	pop	{r7}
 800e806:	4770      	bx	lr

0800e808 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b084      	sub	sp, #16
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	460b      	mov	r3, r1
 800e812:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e814:	2302      	movs	r3, #2
 800e816:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d00c      	beq.n	800e83c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	78fa      	ldrb	r2, [r7, #3]
 800e82c:	4611      	mov	r1, r2
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	4798      	blx	r3
 800e832:	4603      	mov	r3, r0
 800e834:	2b00      	cmp	r3, #0
 800e836:	d101      	bne.n	800e83c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800e838:	2300      	movs	r3, #0
 800e83a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800e83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3710      	adds	r7, #16
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}

0800e846 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e846:	b580      	push	{r7, lr}
 800e848:	b082      	sub	sp, #8
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
 800e84e:	460b      	mov	r3, r1
 800e850:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	78fa      	ldrb	r2, [r7, #3]
 800e85c:	4611      	mov	r1, r2
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	4798      	blx	r3

  return USBD_OK;
 800e862:	2300      	movs	r3, #0
}
 800e864:	4618      	mov	r0, r3
 800e866:	3708      	adds	r7, #8
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b082      	sub	sp, #8
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e87c:	6839      	ldr	r1, [r7, #0]
 800e87e:	4618      	mov	r0, r3
 800e880:	f000 fed7 	bl	800f632 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2201      	movs	r2, #1
 800e888:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e892:	461a      	mov	r2, r3
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e8a0:	f003 031f 	and.w	r3, r3, #31
 800e8a4:	2b02      	cmp	r3, #2
 800e8a6:	d016      	beq.n	800e8d6 <USBD_LL_SetupStage+0x6a>
 800e8a8:	2b02      	cmp	r3, #2
 800e8aa:	d81c      	bhi.n	800e8e6 <USBD_LL_SetupStage+0x7a>
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d002      	beq.n	800e8b6 <USBD_LL_SetupStage+0x4a>
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	d008      	beq.n	800e8c6 <USBD_LL_SetupStage+0x5a>
 800e8b4:	e017      	b.n	800e8e6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e8bc:	4619      	mov	r1, r3
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f000 f9ca 	bl	800ec58 <USBD_StdDevReq>
      break;
 800e8c4:	e01a      	b.n	800e8fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f000 fa2c 	bl	800ed2c <USBD_StdItfReq>
      break;
 800e8d4:	e012      	b.n	800e8fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e8dc:	4619      	mov	r1, r3
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f000 fa6c 	bl	800edbc <USBD_StdEPReq>
      break;
 800e8e4:	e00a      	b.n	800e8fc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e8ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f005 fbaf 	bl	8014058 <USBD_LL_StallEP>
      break;
 800e8fa:	bf00      	nop
  }

  return USBD_OK;
 800e8fc:	2300      	movs	r3, #0
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3708      	adds	r7, #8
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}

0800e906 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e906:	b580      	push	{r7, lr}
 800e908:	b086      	sub	sp, #24
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	60f8      	str	r0, [r7, #12]
 800e90e:	460b      	mov	r3, r1
 800e910:	607a      	str	r2, [r7, #4]
 800e912:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800e914:	7afb      	ldrb	r3, [r7, #11]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d14b      	bne.n	800e9b2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e920:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e928:	2b03      	cmp	r3, #3
 800e92a:	d134      	bne.n	800e996 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	68da      	ldr	r2, [r3, #12]
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	691b      	ldr	r3, [r3, #16]
 800e934:	429a      	cmp	r2, r3
 800e936:	d919      	bls.n	800e96c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	68da      	ldr	r2, [r3, #12]
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	691b      	ldr	r3, [r3, #16]
 800e940:	1ad2      	subs	r2, r2, r3
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	68da      	ldr	r2, [r3, #12]
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800e94e:	429a      	cmp	r2, r3
 800e950:	d203      	bcs.n	800e95a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800e956:	b29b      	uxth	r3, r3
 800e958:	e002      	b.n	800e960 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800e95e:	b29b      	uxth	r3, r3
 800e960:	461a      	mov	r2, r3
 800e962:	6879      	ldr	r1, [r7, #4]
 800e964:	68f8      	ldr	r0, [r7, #12]
 800e966:	f000 ff56 	bl	800f816 <USBD_CtlContinueRx>
 800e96a:	e038      	b.n	800e9de <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e972:	691b      	ldr	r3, [r3, #16]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d00a      	beq.n	800e98e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e97e:	2b03      	cmp	r3, #3
 800e980:	d105      	bne.n	800e98e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e988:	691b      	ldr	r3, [r3, #16]
 800e98a:	68f8      	ldr	r0, [r7, #12]
 800e98c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800e98e:	68f8      	ldr	r0, [r7, #12]
 800e990:	f000 ff53 	bl	800f83a <USBD_CtlSendStatus>
 800e994:	e023      	b.n	800e9de <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e99c:	2b05      	cmp	r3, #5
 800e99e:	d11e      	bne.n	800e9de <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800e9a8:	2100      	movs	r1, #0
 800e9aa:	68f8      	ldr	r0, [r7, #12]
 800e9ac:	f005 fb54 	bl	8014058 <USBD_LL_StallEP>
 800e9b0:	e015      	b.n	800e9de <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9b8:	699b      	ldr	r3, [r3, #24]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d00d      	beq.n	800e9da <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e9c4:	2b03      	cmp	r3, #3
 800e9c6:	d108      	bne.n	800e9da <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9ce:	699b      	ldr	r3, [r3, #24]
 800e9d0:	7afa      	ldrb	r2, [r7, #11]
 800e9d2:	4611      	mov	r1, r2
 800e9d4:	68f8      	ldr	r0, [r7, #12]
 800e9d6:	4798      	blx	r3
 800e9d8:	e001      	b.n	800e9de <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e9da:	2302      	movs	r3, #2
 800e9dc:	e000      	b.n	800e9e0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800e9de:	2300      	movs	r3, #0
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3718      	adds	r7, #24
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b086      	sub	sp, #24
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	607a      	str	r2, [r7, #4]
 800e9f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800e9f6:	7afb      	ldrb	r3, [r7, #11]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d17f      	bne.n	800eafc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	3314      	adds	r3, #20
 800ea00:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ea08:	2b02      	cmp	r3, #2
 800ea0a:	d15c      	bne.n	800eac6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	68da      	ldr	r2, [r3, #12]
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	691b      	ldr	r3, [r3, #16]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d915      	bls.n	800ea44 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	68da      	ldr	r2, [r3, #12]
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	691b      	ldr	r3, [r3, #16]
 800ea20:	1ad2      	subs	r2, r2, r3
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	68db      	ldr	r3, [r3, #12]
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	6879      	ldr	r1, [r7, #4]
 800ea30:	68f8      	ldr	r0, [r7, #12]
 800ea32:	f000 fec0 	bl	800f7b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ea36:	2300      	movs	r3, #0
 800ea38:	2200      	movs	r2, #0
 800ea3a:	2100      	movs	r1, #0
 800ea3c:	68f8      	ldr	r0, [r7, #12]
 800ea3e:	f005 fbb7 	bl	80141b0 <USBD_LL_PrepareReceive>
 800ea42:	e04e      	b.n	800eae2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	689b      	ldr	r3, [r3, #8]
 800ea48:	697a      	ldr	r2, [r7, #20]
 800ea4a:	6912      	ldr	r2, [r2, #16]
 800ea4c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea50:	fb01 f202 	mul.w	r2, r1, r2
 800ea54:	1a9b      	subs	r3, r3, r2
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d11c      	bne.n	800ea94 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	689a      	ldr	r2, [r3, #8]
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d316      	bcc.n	800ea94 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	689a      	ldr	r2, [r3, #8]
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d20f      	bcs.n	800ea94 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ea74:	2200      	movs	r2, #0
 800ea76:	2100      	movs	r1, #0
 800ea78:	68f8      	ldr	r0, [r7, #12]
 800ea7a:	f000 fe9c 	bl	800f7b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	2200      	movs	r2, #0
 800ea82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ea86:	2300      	movs	r3, #0
 800ea88:	2200      	movs	r2, #0
 800ea8a:	2100      	movs	r1, #0
 800ea8c:	68f8      	ldr	r0, [r7, #12]
 800ea8e:	f005 fb8f 	bl	80141b0 <USBD_LL_PrepareReceive>
 800ea92:	e026      	b.n	800eae2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea9a:	68db      	ldr	r3, [r3, #12]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d00a      	beq.n	800eab6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800eaa6:	2b03      	cmp	r3, #3
 800eaa8:	d105      	bne.n	800eab6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eab0:	68db      	ldr	r3, [r3, #12]
 800eab2:	68f8      	ldr	r0, [r7, #12]
 800eab4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800eab6:	2180      	movs	r1, #128	; 0x80
 800eab8:	68f8      	ldr	r0, [r7, #12]
 800eaba:	f005 facd 	bl	8014058 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	f000 fece 	bl	800f860 <USBD_CtlReceiveStatus>
 800eac4:	e00d      	b.n	800eae2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eacc:	2b04      	cmp	r3, #4
 800eace:	d004      	beq.n	800eada <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d103      	bne.n	800eae2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800eada:	2180      	movs	r1, #128	; 0x80
 800eadc:	68f8      	ldr	r0, [r7, #12]
 800eade:	f005 fabb 	bl	8014058 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800eae8:	2b01      	cmp	r3, #1
 800eaea:	d11d      	bne.n	800eb28 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800eaec:	68f8      	ldr	r0, [r7, #12]
 800eaee:	f7ff fe81 	bl	800e7f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800eafa:	e015      	b.n	800eb28 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb02:	695b      	ldr	r3, [r3, #20]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d00d      	beq.n	800eb24 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800eb0e:	2b03      	cmp	r3, #3
 800eb10:	d108      	bne.n	800eb24 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb18:	695b      	ldr	r3, [r3, #20]
 800eb1a:	7afa      	ldrb	r2, [r7, #11]
 800eb1c:	4611      	mov	r1, r2
 800eb1e:	68f8      	ldr	r0, [r7, #12]
 800eb20:	4798      	blx	r3
 800eb22:	e001      	b.n	800eb28 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800eb24:	2302      	movs	r3, #2
 800eb26:	e000      	b.n	800eb2a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800eb28:	2300      	movs	r3, #0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3718      	adds	r7, #24
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}

0800eb32 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800eb32:	b580      	push	{r7, lr}
 800eb34:	b082      	sub	sp, #8
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb3a:	2340      	movs	r3, #64	; 0x40
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	2100      	movs	r1, #0
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f005 fa44 	bl	8013fce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2201      	movs	r2, #1
 800eb4a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2240      	movs	r2, #64	; 0x40
 800eb52:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb56:	2340      	movs	r3, #64	; 0x40
 800eb58:	2200      	movs	r2, #0
 800eb5a:	2180      	movs	r1, #128	; 0x80
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f005 fa36 	bl	8013fce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2201      	movs	r2, #1
 800eb66:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2240      	movs	r2, #64	; 0x40
 800eb6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2201      	movs	r2, #1
 800eb72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2200      	movs	r2, #0
 800eb82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2200      	movs	r2, #0
 800eb88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d009      	beq.n	800ebaa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	687a      	ldr	r2, [r7, #4]
 800eba0:	6852      	ldr	r2, [r2, #4]
 800eba2:	b2d2      	uxtb	r2, r2
 800eba4:	4611      	mov	r1, r2
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	4798      	blx	r3
  }

  return USBD_OK;
 800ebaa:	2300      	movs	r3, #0
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3708      	adds	r7, #8
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b083      	sub	sp, #12
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
 800ebbc:	460b      	mov	r3, r1
 800ebbe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	78fa      	ldrb	r2, [r7, #3]
 800ebc4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ebc6:	2300      	movs	r3, #0
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bc80      	pop	{r7}
 800ebd0:	4770      	bx	lr

0800ebd2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ebd2:	b480      	push	{r7}
 800ebd4:	b083      	sub	sp, #12
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2204      	movs	r2, #4
 800ebea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ebee:	2300      	movs	r3, #0
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	370c      	adds	r7, #12
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bc80      	pop	{r7}
 800ebf8:	4770      	bx	lr

0800ebfa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ebfa:	b480      	push	{r7}
 800ebfc:	b083      	sub	sp, #12
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec08:	2b04      	cmp	r3, #4
 800ec0a:	d105      	bne.n	800ec18 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ec18:	2300      	movs	r3, #0
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	370c      	adds	r7, #12
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bc80      	pop	{r7}
 800ec22:	4770      	bx	lr

0800ec24 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec32:	2b03      	cmp	r3, #3
 800ec34:	d10b      	bne.n	800ec4e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec3c:	69db      	ldr	r3, [r3, #28]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d005      	beq.n	800ec4e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec48:	69db      	ldr	r3, [r3, #28]
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ec4e:	2300      	movs	r3, #0
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3708      	adds	r7, #8
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}

0800ec58 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec62:	2300      	movs	r3, #0
 800ec64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ec6e:	2b40      	cmp	r3, #64	; 0x40
 800ec70:	d005      	beq.n	800ec7e <USBD_StdDevReq+0x26>
 800ec72:	2b40      	cmp	r3, #64	; 0x40
 800ec74:	d84f      	bhi.n	800ed16 <USBD_StdDevReq+0xbe>
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d009      	beq.n	800ec8e <USBD_StdDevReq+0x36>
 800ec7a:	2b20      	cmp	r3, #32
 800ec7c:	d14b      	bne.n	800ed16 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ec84:	689b      	ldr	r3, [r3, #8]
 800ec86:	6839      	ldr	r1, [r7, #0]
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	4798      	blx	r3
      break;
 800ec8c:	e048      	b.n	800ed20 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	785b      	ldrb	r3, [r3, #1]
 800ec92:	2b09      	cmp	r3, #9
 800ec94:	d839      	bhi.n	800ed0a <USBD_StdDevReq+0xb2>
 800ec96:	a201      	add	r2, pc, #4	; (adr r2, 800ec9c <USBD_StdDevReq+0x44>)
 800ec98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec9c:	0800eced 	.word	0x0800eced
 800eca0:	0800ed01 	.word	0x0800ed01
 800eca4:	0800ed0b 	.word	0x0800ed0b
 800eca8:	0800ecf7 	.word	0x0800ecf7
 800ecac:	0800ed0b 	.word	0x0800ed0b
 800ecb0:	0800eccf 	.word	0x0800eccf
 800ecb4:	0800ecc5 	.word	0x0800ecc5
 800ecb8:	0800ed0b 	.word	0x0800ed0b
 800ecbc:	0800ece3 	.word	0x0800ece3
 800ecc0:	0800ecd9 	.word	0x0800ecd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ecc4:	6839      	ldr	r1, [r7, #0]
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f000 f9dc 	bl	800f084 <USBD_GetDescriptor>
          break;
 800eccc:	e022      	b.n	800ed14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ecce:	6839      	ldr	r1, [r7, #0]
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f000 fb3f 	bl	800f354 <USBD_SetAddress>
          break;
 800ecd6:	e01d      	b.n	800ed14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ecd8:	6839      	ldr	r1, [r7, #0]
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f000 fb7e 	bl	800f3dc <USBD_SetConfig>
          break;
 800ece0:	e018      	b.n	800ed14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ece2:	6839      	ldr	r1, [r7, #0]
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f000 fc07 	bl	800f4f8 <USBD_GetConfig>
          break;
 800ecea:	e013      	b.n	800ed14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ecec:	6839      	ldr	r1, [r7, #0]
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f000 fc37 	bl	800f562 <USBD_GetStatus>
          break;
 800ecf4:	e00e      	b.n	800ed14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ecf6:	6839      	ldr	r1, [r7, #0]
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f000 fc65 	bl	800f5c8 <USBD_SetFeature>
          break;
 800ecfe:	e009      	b.n	800ed14 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ed00:	6839      	ldr	r1, [r7, #0]
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 fc74 	bl	800f5f0 <USBD_ClrFeature>
          break;
 800ed08:	e004      	b.n	800ed14 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ed0a:	6839      	ldr	r1, [r7, #0]
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f000 fccc 	bl	800f6aa <USBD_CtlError>
          break;
 800ed12:	bf00      	nop
      }
      break;
 800ed14:	e004      	b.n	800ed20 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ed16:	6839      	ldr	r1, [r7, #0]
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f000 fcc6 	bl	800f6aa <USBD_CtlError>
      break;
 800ed1e:	bf00      	nop
  }

  return ret;
 800ed20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3710      	adds	r7, #16
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
 800ed2a:	bf00      	nop

0800ed2c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b084      	sub	sp, #16
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed36:	2300      	movs	r3, #0
 800ed38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ed42:	2b40      	cmp	r3, #64	; 0x40
 800ed44:	d005      	beq.n	800ed52 <USBD_StdItfReq+0x26>
 800ed46:	2b40      	cmp	r3, #64	; 0x40
 800ed48:	d82e      	bhi.n	800eda8 <USBD_StdItfReq+0x7c>
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d001      	beq.n	800ed52 <USBD_StdItfReq+0x26>
 800ed4e:	2b20      	cmp	r3, #32
 800ed50:	d12a      	bne.n	800eda8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed58:	3b01      	subs	r3, #1
 800ed5a:	2b02      	cmp	r3, #2
 800ed5c:	d81d      	bhi.n	800ed9a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	889b      	ldrh	r3, [r3, #4]
 800ed62:	b2db      	uxtb	r3, r3
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d813      	bhi.n	800ed90 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed6e:	689b      	ldr	r3, [r3, #8]
 800ed70:	6839      	ldr	r1, [r7, #0]
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	4798      	blx	r3
 800ed76:	4603      	mov	r3, r0
 800ed78:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	88db      	ldrh	r3, [r3, #6]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d110      	bne.n	800eda4 <USBD_StdItfReq+0x78>
 800ed82:	7bfb      	ldrb	r3, [r7, #15]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d10d      	bne.n	800eda4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f000 fd56 	bl	800f83a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ed8e:	e009      	b.n	800eda4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800ed90:	6839      	ldr	r1, [r7, #0]
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f000 fc89 	bl	800f6aa <USBD_CtlError>
          break;
 800ed98:	e004      	b.n	800eda4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800ed9a:	6839      	ldr	r1, [r7, #0]
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 fc84 	bl	800f6aa <USBD_CtlError>
          break;
 800eda2:	e000      	b.n	800eda6 <USBD_StdItfReq+0x7a>
          break;
 800eda4:	bf00      	nop
      }
      break;
 800eda6:	e004      	b.n	800edb2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800eda8:	6839      	ldr	r1, [r7, #0]
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f000 fc7d 	bl	800f6aa <USBD_CtlError>
      break;
 800edb0:	bf00      	nop
  }

  return USBD_OK;
 800edb2:	2300      	movs	r3, #0
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3710      	adds	r7, #16
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800edc6:	2300      	movs	r3, #0
 800edc8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	889b      	ldrh	r3, [r3, #4]
 800edce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800edd8:	2b40      	cmp	r3, #64	; 0x40
 800edda:	d007      	beq.n	800edec <USBD_StdEPReq+0x30>
 800eddc:	2b40      	cmp	r3, #64	; 0x40
 800edde:	f200 8146 	bhi.w	800f06e <USBD_StdEPReq+0x2b2>
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d00a      	beq.n	800edfc <USBD_StdEPReq+0x40>
 800ede6:	2b20      	cmp	r3, #32
 800ede8:	f040 8141 	bne.w	800f06e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edf2:	689b      	ldr	r3, [r3, #8]
 800edf4:	6839      	ldr	r1, [r7, #0]
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	4798      	blx	r3
      break;
 800edfa:	e13d      	b.n	800f078 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ee04:	2b20      	cmp	r3, #32
 800ee06:	d10a      	bne.n	800ee1e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee0e:	689b      	ldr	r3, [r3, #8]
 800ee10:	6839      	ldr	r1, [r7, #0]
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	4798      	blx	r3
 800ee16:	4603      	mov	r3, r0
 800ee18:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ee1a:	7bfb      	ldrb	r3, [r7, #15]
 800ee1c:	e12d      	b.n	800f07a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	785b      	ldrb	r3, [r3, #1]
 800ee22:	2b03      	cmp	r3, #3
 800ee24:	d007      	beq.n	800ee36 <USBD_StdEPReq+0x7a>
 800ee26:	2b03      	cmp	r3, #3
 800ee28:	f300 811b 	bgt.w	800f062 <USBD_StdEPReq+0x2a6>
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d072      	beq.n	800ef16 <USBD_StdEPReq+0x15a>
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d03a      	beq.n	800eeaa <USBD_StdEPReq+0xee>
 800ee34:	e115      	b.n	800f062 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee3c:	2b02      	cmp	r3, #2
 800ee3e:	d002      	beq.n	800ee46 <USBD_StdEPReq+0x8a>
 800ee40:	2b03      	cmp	r3, #3
 800ee42:	d015      	beq.n	800ee70 <USBD_StdEPReq+0xb4>
 800ee44:	e02b      	b.n	800ee9e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee46:	7bbb      	ldrb	r3, [r7, #14]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d00c      	beq.n	800ee66 <USBD_StdEPReq+0xaa>
 800ee4c:	7bbb      	ldrb	r3, [r7, #14]
 800ee4e:	2b80      	cmp	r3, #128	; 0x80
 800ee50:	d009      	beq.n	800ee66 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ee52:	7bbb      	ldrb	r3, [r7, #14]
 800ee54:	4619      	mov	r1, r3
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f005 f8fe 	bl	8014058 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ee5c:	2180      	movs	r1, #128	; 0x80
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f005 f8fa 	bl	8014058 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ee64:	e020      	b.n	800eea8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800ee66:	6839      	ldr	r1, [r7, #0]
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f000 fc1e 	bl	800f6aa <USBD_CtlError>
              break;
 800ee6e:	e01b      	b.n	800eea8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	885b      	ldrh	r3, [r3, #2]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d10e      	bne.n	800ee96 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ee78:	7bbb      	ldrb	r3, [r7, #14]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d00b      	beq.n	800ee96 <USBD_StdEPReq+0xda>
 800ee7e:	7bbb      	ldrb	r3, [r7, #14]
 800ee80:	2b80      	cmp	r3, #128	; 0x80
 800ee82:	d008      	beq.n	800ee96 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	88db      	ldrh	r3, [r3, #6]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d104      	bne.n	800ee96 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ee8c:	7bbb      	ldrb	r3, [r7, #14]
 800ee8e:	4619      	mov	r1, r3
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f005 f8e1 	bl	8014058 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f000 fccf 	bl	800f83a <USBD_CtlSendStatus>

              break;
 800ee9c:	e004      	b.n	800eea8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800ee9e:	6839      	ldr	r1, [r7, #0]
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f000 fc02 	bl	800f6aa <USBD_CtlError>
              break;
 800eea6:	bf00      	nop
          }
          break;
 800eea8:	e0e0      	b.n	800f06c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eeb0:	2b02      	cmp	r3, #2
 800eeb2:	d002      	beq.n	800eeba <USBD_StdEPReq+0xfe>
 800eeb4:	2b03      	cmp	r3, #3
 800eeb6:	d015      	beq.n	800eee4 <USBD_StdEPReq+0x128>
 800eeb8:	e026      	b.n	800ef08 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eeba:	7bbb      	ldrb	r3, [r7, #14]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d00c      	beq.n	800eeda <USBD_StdEPReq+0x11e>
 800eec0:	7bbb      	ldrb	r3, [r7, #14]
 800eec2:	2b80      	cmp	r3, #128	; 0x80
 800eec4:	d009      	beq.n	800eeda <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800eec6:	7bbb      	ldrb	r3, [r7, #14]
 800eec8:	4619      	mov	r1, r3
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f005 f8c4 	bl	8014058 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800eed0:	2180      	movs	r1, #128	; 0x80
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f005 f8c0 	bl	8014058 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eed8:	e01c      	b.n	800ef14 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800eeda:	6839      	ldr	r1, [r7, #0]
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f000 fbe4 	bl	800f6aa <USBD_CtlError>
              break;
 800eee2:	e017      	b.n	800ef14 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	885b      	ldrh	r3, [r3, #2]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d112      	bne.n	800ef12 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800eeec:	7bbb      	ldrb	r3, [r7, #14]
 800eeee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d004      	beq.n	800ef00 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800eef6:	7bbb      	ldrb	r3, [r7, #14]
 800eef8:	4619      	mov	r1, r3
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f005 f8cb 	bl	8014096 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f000 fc9a 	bl	800f83a <USBD_CtlSendStatus>
              }
              break;
 800ef06:	e004      	b.n	800ef12 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ef08:	6839      	ldr	r1, [r7, #0]
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 fbcd 	bl	800f6aa <USBD_CtlError>
              break;
 800ef10:	e000      	b.n	800ef14 <USBD_StdEPReq+0x158>
              break;
 800ef12:	bf00      	nop
          }
          break;
 800ef14:	e0aa      	b.n	800f06c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef1c:	2b02      	cmp	r3, #2
 800ef1e:	d002      	beq.n	800ef26 <USBD_StdEPReq+0x16a>
 800ef20:	2b03      	cmp	r3, #3
 800ef22:	d032      	beq.n	800ef8a <USBD_StdEPReq+0x1ce>
 800ef24:	e097      	b.n	800f056 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef26:	7bbb      	ldrb	r3, [r7, #14]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d007      	beq.n	800ef3c <USBD_StdEPReq+0x180>
 800ef2c:	7bbb      	ldrb	r3, [r7, #14]
 800ef2e:	2b80      	cmp	r3, #128	; 0x80
 800ef30:	d004      	beq.n	800ef3c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800ef32:	6839      	ldr	r1, [r7, #0]
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f000 fbb8 	bl	800f6aa <USBD_CtlError>
                break;
 800ef3a:	e091      	b.n	800f060 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	da0b      	bge.n	800ef5c <USBD_StdEPReq+0x1a0>
 800ef44:	7bbb      	ldrb	r3, [r7, #14]
 800ef46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ef4a:	4613      	mov	r3, r2
 800ef4c:	009b      	lsls	r3, r3, #2
 800ef4e:	4413      	add	r3, r2
 800ef50:	009b      	lsls	r3, r3, #2
 800ef52:	3310      	adds	r3, #16
 800ef54:	687a      	ldr	r2, [r7, #4]
 800ef56:	4413      	add	r3, r2
 800ef58:	3304      	adds	r3, #4
 800ef5a:	e00b      	b.n	800ef74 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ef5c:	7bbb      	ldrb	r3, [r7, #14]
 800ef5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef62:	4613      	mov	r3, r2
 800ef64:	009b      	lsls	r3, r3, #2
 800ef66:	4413      	add	r3, r2
 800ef68:	009b      	lsls	r3, r3, #2
 800ef6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ef6e:	687a      	ldr	r2, [r7, #4]
 800ef70:	4413      	add	r3, r2
 800ef72:	3304      	adds	r3, #4
 800ef74:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	2202      	movs	r2, #2
 800ef80:	4619      	mov	r1, r3
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f000 fbfb 	bl	800f77e <USBD_CtlSendData>
              break;
 800ef88:	e06a      	b.n	800f060 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ef8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	da11      	bge.n	800efb6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ef92:	7bbb      	ldrb	r3, [r7, #14]
 800ef94:	f003 020f 	and.w	r2, r3, #15
 800ef98:	6879      	ldr	r1, [r7, #4]
 800ef9a:	4613      	mov	r3, r2
 800ef9c:	009b      	lsls	r3, r3, #2
 800ef9e:	4413      	add	r3, r2
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	440b      	add	r3, r1
 800efa4:	3318      	adds	r3, #24
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d117      	bne.n	800efdc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800efac:	6839      	ldr	r1, [r7, #0]
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f000 fb7b 	bl	800f6aa <USBD_CtlError>
                  break;
 800efb4:	e054      	b.n	800f060 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800efb6:	7bbb      	ldrb	r3, [r7, #14]
 800efb8:	f003 020f 	and.w	r2, r3, #15
 800efbc:	6879      	ldr	r1, [r7, #4]
 800efbe:	4613      	mov	r3, r2
 800efc0:	009b      	lsls	r3, r3, #2
 800efc2:	4413      	add	r3, r2
 800efc4:	009b      	lsls	r3, r3, #2
 800efc6:	440b      	add	r3, r1
 800efc8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d104      	bne.n	800efdc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800efd2:	6839      	ldr	r1, [r7, #0]
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f000 fb68 	bl	800f6aa <USBD_CtlError>
                  break;
 800efda:	e041      	b.n	800f060 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800efdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	da0b      	bge.n	800effc <USBD_StdEPReq+0x240>
 800efe4:	7bbb      	ldrb	r3, [r7, #14]
 800efe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800efea:	4613      	mov	r3, r2
 800efec:	009b      	lsls	r3, r3, #2
 800efee:	4413      	add	r3, r2
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	3310      	adds	r3, #16
 800eff4:	687a      	ldr	r2, [r7, #4]
 800eff6:	4413      	add	r3, r2
 800eff8:	3304      	adds	r3, #4
 800effa:	e00b      	b.n	800f014 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800effc:	7bbb      	ldrb	r3, [r7, #14]
 800effe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f002:	4613      	mov	r3, r2
 800f004:	009b      	lsls	r3, r3, #2
 800f006:	4413      	add	r3, r2
 800f008:	009b      	lsls	r3, r3, #2
 800f00a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f00e:	687a      	ldr	r2, [r7, #4]
 800f010:	4413      	add	r3, r2
 800f012:	3304      	adds	r3, #4
 800f014:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f016:	7bbb      	ldrb	r3, [r7, #14]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d002      	beq.n	800f022 <USBD_StdEPReq+0x266>
 800f01c:	7bbb      	ldrb	r3, [r7, #14]
 800f01e:	2b80      	cmp	r3, #128	; 0x80
 800f020:	d103      	bne.n	800f02a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	2200      	movs	r2, #0
 800f026:	601a      	str	r2, [r3, #0]
 800f028:	e00e      	b.n	800f048 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800f02a:	7bbb      	ldrb	r3, [r7, #14]
 800f02c:	4619      	mov	r1, r3
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f005 f850 	bl	80140d4 <USBD_LL_IsStallEP>
 800f034:	4603      	mov	r3, r0
 800f036:	2b00      	cmp	r3, #0
 800f038:	d003      	beq.n	800f042 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	2201      	movs	r2, #1
 800f03e:	601a      	str	r2, [r3, #0]
 800f040:	e002      	b.n	800f048 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	2200      	movs	r2, #0
 800f046:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	2202      	movs	r2, #2
 800f04c:	4619      	mov	r1, r3
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f000 fb95 	bl	800f77e <USBD_CtlSendData>
              break;
 800f054:	e004      	b.n	800f060 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800f056:	6839      	ldr	r1, [r7, #0]
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f000 fb26 	bl	800f6aa <USBD_CtlError>
              break;
 800f05e:	bf00      	nop
          }
          break;
 800f060:	e004      	b.n	800f06c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800f062:	6839      	ldr	r1, [r7, #0]
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f000 fb20 	bl	800f6aa <USBD_CtlError>
          break;
 800f06a:	bf00      	nop
      }
      break;
 800f06c:	e004      	b.n	800f078 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800f06e:	6839      	ldr	r1, [r7, #0]
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f000 fb1a 	bl	800f6aa <USBD_CtlError>
      break;
 800f076:	bf00      	nop
  }

  return ret;
 800f078:	7bfb      	ldrb	r3, [r7, #15]
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3710      	adds	r7, #16
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
	...

0800f084 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b084      	sub	sp, #16
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f08e:	2300      	movs	r3, #0
 800f090:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f092:	2300      	movs	r3, #0
 800f094:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f096:	2300      	movs	r3, #0
 800f098:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	885b      	ldrh	r3, [r3, #2]
 800f09e:	0a1b      	lsrs	r3, r3, #8
 800f0a0:	b29b      	uxth	r3, r3
 800f0a2:	3b01      	subs	r3, #1
 800f0a4:	2b06      	cmp	r3, #6
 800f0a6:	f200 8128 	bhi.w	800f2fa <USBD_GetDescriptor+0x276>
 800f0aa:	a201      	add	r2, pc, #4	; (adr r2, 800f0b0 <USBD_GetDescriptor+0x2c>)
 800f0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0b0:	0800f0cd 	.word	0x0800f0cd
 800f0b4:	0800f0e5 	.word	0x0800f0e5
 800f0b8:	0800f125 	.word	0x0800f125
 800f0bc:	0800f2fb 	.word	0x0800f2fb
 800f0c0:	0800f2fb 	.word	0x0800f2fb
 800f0c4:	0800f29b 	.word	0x0800f29b
 800f0c8:	0800f2c7 	.word	0x0800f2c7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	687a      	ldr	r2, [r7, #4]
 800f0d6:	7c12      	ldrb	r2, [r2, #16]
 800f0d8:	f107 0108 	add.w	r1, r7, #8
 800f0dc:	4610      	mov	r0, r2
 800f0de:	4798      	blx	r3
 800f0e0:	60f8      	str	r0, [r7, #12]
      break;
 800f0e2:	e112      	b.n	800f30a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	7c1b      	ldrb	r3, [r3, #16]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d10d      	bne.n	800f108 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0f4:	f107 0208 	add.w	r2, r7, #8
 800f0f8:	4610      	mov	r0, r2
 800f0fa:	4798      	blx	r3
 800f0fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	3301      	adds	r3, #1
 800f102:	2202      	movs	r2, #2
 800f104:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f106:	e100      	b.n	800f30a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f110:	f107 0208 	add.w	r2, r7, #8
 800f114:	4610      	mov	r0, r2
 800f116:	4798      	blx	r3
 800f118:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	3301      	adds	r3, #1
 800f11e:	2202      	movs	r2, #2
 800f120:	701a      	strb	r2, [r3, #0]
      break;
 800f122:	e0f2      	b.n	800f30a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	885b      	ldrh	r3, [r3, #2]
 800f128:	b2db      	uxtb	r3, r3
 800f12a:	2b05      	cmp	r3, #5
 800f12c:	f200 80ac 	bhi.w	800f288 <USBD_GetDescriptor+0x204>
 800f130:	a201      	add	r2, pc, #4	; (adr r2, 800f138 <USBD_GetDescriptor+0xb4>)
 800f132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f136:	bf00      	nop
 800f138:	0800f151 	.word	0x0800f151
 800f13c:	0800f185 	.word	0x0800f185
 800f140:	0800f1b9 	.word	0x0800f1b9
 800f144:	0800f1ed 	.word	0x0800f1ed
 800f148:	0800f221 	.word	0x0800f221
 800f14c:	0800f255 	.word	0x0800f255
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d00b      	beq.n	800f174 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f162:	685b      	ldr	r3, [r3, #4]
 800f164:	687a      	ldr	r2, [r7, #4]
 800f166:	7c12      	ldrb	r2, [r2, #16]
 800f168:	f107 0108 	add.w	r1, r7, #8
 800f16c:	4610      	mov	r0, r2
 800f16e:	4798      	blx	r3
 800f170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f172:	e091      	b.n	800f298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f174:	6839      	ldr	r1, [r7, #0]
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f000 fa97 	bl	800f6aa <USBD_CtlError>
            err++;
 800f17c:	7afb      	ldrb	r3, [r7, #11]
 800f17e:	3301      	adds	r3, #1
 800f180:	72fb      	strb	r3, [r7, #11]
          break;
 800f182:	e089      	b.n	800f298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f18a:	689b      	ldr	r3, [r3, #8]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d00b      	beq.n	800f1a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f196:	689b      	ldr	r3, [r3, #8]
 800f198:	687a      	ldr	r2, [r7, #4]
 800f19a:	7c12      	ldrb	r2, [r2, #16]
 800f19c:	f107 0108 	add.w	r1, r7, #8
 800f1a0:	4610      	mov	r0, r2
 800f1a2:	4798      	blx	r3
 800f1a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f1a6:	e077      	b.n	800f298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f1a8:	6839      	ldr	r1, [r7, #0]
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f000 fa7d 	bl	800f6aa <USBD_CtlError>
            err++;
 800f1b0:	7afb      	ldrb	r3, [r7, #11]
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	72fb      	strb	r3, [r7, #11]
          break;
 800f1b6:	e06f      	b.n	800f298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f1be:	68db      	ldr	r3, [r3, #12]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d00b      	beq.n	800f1dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	687a      	ldr	r2, [r7, #4]
 800f1ce:	7c12      	ldrb	r2, [r2, #16]
 800f1d0:	f107 0108 	add.w	r1, r7, #8
 800f1d4:	4610      	mov	r0, r2
 800f1d6:	4798      	blx	r3
 800f1d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f1da:	e05d      	b.n	800f298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f1dc:	6839      	ldr	r1, [r7, #0]
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f000 fa63 	bl	800f6aa <USBD_CtlError>
            err++;
 800f1e4:	7afb      	ldrb	r3, [r7, #11]
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	72fb      	strb	r3, [r7, #11]
          break;
 800f1ea:	e055      	b.n	800f298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f1f2:	691b      	ldr	r3, [r3, #16]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d00b      	beq.n	800f210 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f1fe:	691b      	ldr	r3, [r3, #16]
 800f200:	687a      	ldr	r2, [r7, #4]
 800f202:	7c12      	ldrb	r2, [r2, #16]
 800f204:	f107 0108 	add.w	r1, r7, #8
 800f208:	4610      	mov	r0, r2
 800f20a:	4798      	blx	r3
 800f20c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f20e:	e043      	b.n	800f298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f210:	6839      	ldr	r1, [r7, #0]
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 fa49 	bl	800f6aa <USBD_CtlError>
            err++;
 800f218:	7afb      	ldrb	r3, [r7, #11]
 800f21a:	3301      	adds	r3, #1
 800f21c:	72fb      	strb	r3, [r7, #11]
          break;
 800f21e:	e03b      	b.n	800f298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f226:	695b      	ldr	r3, [r3, #20]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d00b      	beq.n	800f244 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f232:	695b      	ldr	r3, [r3, #20]
 800f234:	687a      	ldr	r2, [r7, #4]
 800f236:	7c12      	ldrb	r2, [r2, #16]
 800f238:	f107 0108 	add.w	r1, r7, #8
 800f23c:	4610      	mov	r0, r2
 800f23e:	4798      	blx	r3
 800f240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f242:	e029      	b.n	800f298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f244:	6839      	ldr	r1, [r7, #0]
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f000 fa2f 	bl	800f6aa <USBD_CtlError>
            err++;
 800f24c:	7afb      	ldrb	r3, [r7, #11]
 800f24e:	3301      	adds	r3, #1
 800f250:	72fb      	strb	r3, [r7, #11]
          break;
 800f252:	e021      	b.n	800f298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f25a:	699b      	ldr	r3, [r3, #24]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d00b      	beq.n	800f278 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f266:	699b      	ldr	r3, [r3, #24]
 800f268:	687a      	ldr	r2, [r7, #4]
 800f26a:	7c12      	ldrb	r2, [r2, #16]
 800f26c:	f107 0108 	add.w	r1, r7, #8
 800f270:	4610      	mov	r0, r2
 800f272:	4798      	blx	r3
 800f274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f276:	e00f      	b.n	800f298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f278:	6839      	ldr	r1, [r7, #0]
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f000 fa15 	bl	800f6aa <USBD_CtlError>
            err++;
 800f280:	7afb      	ldrb	r3, [r7, #11]
 800f282:	3301      	adds	r3, #1
 800f284:	72fb      	strb	r3, [r7, #11]
          break;
 800f286:	e007      	b.n	800f298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800f288:	6839      	ldr	r1, [r7, #0]
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f000 fa0d 	bl	800f6aa <USBD_CtlError>
          err++;
 800f290:	7afb      	ldrb	r3, [r7, #11]
 800f292:	3301      	adds	r3, #1
 800f294:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800f296:	e038      	b.n	800f30a <USBD_GetDescriptor+0x286>
 800f298:	e037      	b.n	800f30a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	7c1b      	ldrb	r3, [r3, #16]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d109      	bne.n	800f2b6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2aa:	f107 0208 	add.w	r2, r7, #8
 800f2ae:	4610      	mov	r0, r2
 800f2b0:	4798      	blx	r3
 800f2b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f2b4:	e029      	b.n	800f30a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f2b6:	6839      	ldr	r1, [r7, #0]
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f000 f9f6 	bl	800f6aa <USBD_CtlError>
        err++;
 800f2be:	7afb      	ldrb	r3, [r7, #11]
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	72fb      	strb	r3, [r7, #11]
      break;
 800f2c4:	e021      	b.n	800f30a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	7c1b      	ldrb	r3, [r3, #16]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d10d      	bne.n	800f2ea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2d6:	f107 0208 	add.w	r2, r7, #8
 800f2da:	4610      	mov	r0, r2
 800f2dc:	4798      	blx	r3
 800f2de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	2207      	movs	r2, #7
 800f2e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f2e8:	e00f      	b.n	800f30a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f2ea:	6839      	ldr	r1, [r7, #0]
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f000 f9dc 	bl	800f6aa <USBD_CtlError>
        err++;
 800f2f2:	7afb      	ldrb	r3, [r7, #11]
 800f2f4:	3301      	adds	r3, #1
 800f2f6:	72fb      	strb	r3, [r7, #11]
      break;
 800f2f8:	e007      	b.n	800f30a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f2fa:	6839      	ldr	r1, [r7, #0]
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 f9d4 	bl	800f6aa <USBD_CtlError>
      err++;
 800f302:	7afb      	ldrb	r3, [r7, #11]
 800f304:	3301      	adds	r3, #1
 800f306:	72fb      	strb	r3, [r7, #11]
      break;
 800f308:	bf00      	nop
  }

  if (err != 0U)
 800f30a:	7afb      	ldrb	r3, [r7, #11]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d11c      	bne.n	800f34a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800f310:	893b      	ldrh	r3, [r7, #8]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d011      	beq.n	800f33a <USBD_GetDescriptor+0x2b6>
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	88db      	ldrh	r3, [r3, #6]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d00d      	beq.n	800f33a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	88da      	ldrh	r2, [r3, #6]
 800f322:	893b      	ldrh	r3, [r7, #8]
 800f324:	4293      	cmp	r3, r2
 800f326:	bf28      	it	cs
 800f328:	4613      	movcs	r3, r2
 800f32a:	b29b      	uxth	r3, r3
 800f32c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f32e:	893b      	ldrh	r3, [r7, #8]
 800f330:	461a      	mov	r2, r3
 800f332:	68f9      	ldr	r1, [r7, #12]
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f000 fa22 	bl	800f77e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	88db      	ldrh	r3, [r3, #6]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d104      	bne.n	800f34c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 fa79 	bl	800f83a <USBD_CtlSendStatus>
 800f348:	e000      	b.n	800f34c <USBD_GetDescriptor+0x2c8>
    return;
 800f34a:	bf00      	nop
    }
  }
}
 800f34c:	3710      	adds	r7, #16
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
 800f352:	bf00      	nop

0800f354 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	889b      	ldrh	r3, [r3, #4]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d130      	bne.n	800f3c8 <USBD_SetAddress+0x74>
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	88db      	ldrh	r3, [r3, #6]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d12c      	bne.n	800f3c8 <USBD_SetAddress+0x74>
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	885b      	ldrh	r3, [r3, #2]
 800f372:	2b7f      	cmp	r3, #127	; 0x7f
 800f374:	d828      	bhi.n	800f3c8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	885b      	ldrh	r3, [r3, #2]
 800f37a:	b2db      	uxtb	r3, r3
 800f37c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f380:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f388:	2b03      	cmp	r3, #3
 800f38a:	d104      	bne.n	800f396 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f38c:	6839      	ldr	r1, [r7, #0]
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f000 f98b 	bl	800f6aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f394:	e01d      	b.n	800f3d2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	7bfa      	ldrb	r2, [r7, #15]
 800f39a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f39e:	7bfb      	ldrb	r3, [r7, #15]
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f004 fec2 	bl	801412c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f000 fa46 	bl	800f83a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f3ae:	7bfb      	ldrb	r3, [r7, #15]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d004      	beq.n	800f3be <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2202      	movs	r2, #2
 800f3b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3bc:	e009      	b.n	800f3d2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2201      	movs	r2, #1
 800f3c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3c6:	e004      	b.n	800f3d2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f3c8:	6839      	ldr	r1, [r7, #0]
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f000 f96d 	bl	800f6aa <USBD_CtlError>
  }
}
 800f3d0:	bf00      	nop
 800f3d2:	bf00      	nop
 800f3d4:	3710      	adds	r7, #16
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
	...

0800f3dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b082      	sub	sp, #8
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	885b      	ldrh	r3, [r3, #2]
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	4b41      	ldr	r3, [pc, #260]	; (800f4f4 <USBD_SetConfig+0x118>)
 800f3ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f3f0:	4b40      	ldr	r3, [pc, #256]	; (800f4f4 <USBD_SetConfig+0x118>)
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	d904      	bls.n	800f402 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800f3f8:	6839      	ldr	r1, [r7, #0]
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f000 f955 	bl	800f6aa <USBD_CtlError>
 800f400:	e075      	b.n	800f4ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f408:	2b02      	cmp	r3, #2
 800f40a:	d002      	beq.n	800f412 <USBD_SetConfig+0x36>
 800f40c:	2b03      	cmp	r3, #3
 800f40e:	d023      	beq.n	800f458 <USBD_SetConfig+0x7c>
 800f410:	e062      	b.n	800f4d8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800f412:	4b38      	ldr	r3, [pc, #224]	; (800f4f4 <USBD_SetConfig+0x118>)
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d01a      	beq.n	800f450 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800f41a:	4b36      	ldr	r3, [pc, #216]	; (800f4f4 <USBD_SetConfig+0x118>)
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	461a      	mov	r2, r3
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2203      	movs	r2, #3
 800f428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f42c:	4b31      	ldr	r3, [pc, #196]	; (800f4f4 <USBD_SetConfig+0x118>)
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	4619      	mov	r1, r3
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f7ff f9e8 	bl	800e808 <USBD_SetClassConfig>
 800f438:	4603      	mov	r3, r0
 800f43a:	2b02      	cmp	r3, #2
 800f43c:	d104      	bne.n	800f448 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800f43e:	6839      	ldr	r1, [r7, #0]
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f000 f932 	bl	800f6aa <USBD_CtlError>
            return;
 800f446:	e052      	b.n	800f4ee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f000 f9f6 	bl	800f83a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800f44e:	e04e      	b.n	800f4ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f000 f9f2 	bl	800f83a <USBD_CtlSendStatus>
        break;
 800f456:	e04a      	b.n	800f4ee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800f458:	4b26      	ldr	r3, [pc, #152]	; (800f4f4 <USBD_SetConfig+0x118>)
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d112      	bne.n	800f486 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2202      	movs	r2, #2
 800f464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800f468:	4b22      	ldr	r3, [pc, #136]	; (800f4f4 <USBD_SetConfig+0x118>)
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	461a      	mov	r2, r3
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800f472:	4b20      	ldr	r3, [pc, #128]	; (800f4f4 <USBD_SetConfig+0x118>)
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	4619      	mov	r1, r3
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f7ff f9e4 	bl	800e846 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f000 f9db 	bl	800f83a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800f484:	e033      	b.n	800f4ee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800f486:	4b1b      	ldr	r3, [pc, #108]	; (800f4f4 <USBD_SetConfig+0x118>)
 800f488:	781b      	ldrb	r3, [r3, #0]
 800f48a:	461a      	mov	r2, r3
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	429a      	cmp	r2, r3
 800f492:	d01d      	beq.n	800f4d0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	685b      	ldr	r3, [r3, #4]
 800f498:	b2db      	uxtb	r3, r3
 800f49a:	4619      	mov	r1, r3
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f7ff f9d2 	bl	800e846 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800f4a2:	4b14      	ldr	r3, [pc, #80]	; (800f4f4 <USBD_SetConfig+0x118>)
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f4ac:	4b11      	ldr	r3, [pc, #68]	; (800f4f4 <USBD_SetConfig+0x118>)
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f7ff f9a8 	bl	800e808 <USBD_SetClassConfig>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	2b02      	cmp	r3, #2
 800f4bc:	d104      	bne.n	800f4c8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800f4be:	6839      	ldr	r1, [r7, #0]
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 f8f2 	bl	800f6aa <USBD_CtlError>
            return;
 800f4c6:	e012      	b.n	800f4ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f000 f9b6 	bl	800f83a <USBD_CtlSendStatus>
        break;
 800f4ce:	e00e      	b.n	800f4ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f000 f9b2 	bl	800f83a <USBD_CtlSendStatus>
        break;
 800f4d6:	e00a      	b.n	800f4ee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800f4d8:	6839      	ldr	r1, [r7, #0]
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f000 f8e5 	bl	800f6aa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800f4e0:	4b04      	ldr	r3, [pc, #16]	; (800f4f4 <USBD_SetConfig+0x118>)
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7ff f9ad 	bl	800e846 <USBD_ClrClassConfig>
        break;
 800f4ec:	bf00      	nop
    }
  }
}
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	20000cc0 	.word	0x20000cc0

0800f4f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	88db      	ldrh	r3, [r3, #6]
 800f506:	2b01      	cmp	r3, #1
 800f508:	d004      	beq.n	800f514 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f50a:	6839      	ldr	r1, [r7, #0]
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f000 f8cc 	bl	800f6aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f512:	e022      	b.n	800f55a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f51a:	2b02      	cmp	r3, #2
 800f51c:	dc02      	bgt.n	800f524 <USBD_GetConfig+0x2c>
 800f51e:	2b00      	cmp	r3, #0
 800f520:	dc03      	bgt.n	800f52a <USBD_GetConfig+0x32>
 800f522:	e015      	b.n	800f550 <USBD_GetConfig+0x58>
 800f524:	2b03      	cmp	r3, #3
 800f526:	d00b      	beq.n	800f540 <USBD_GetConfig+0x48>
 800f528:	e012      	b.n	800f550 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2200      	movs	r2, #0
 800f52e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	3308      	adds	r3, #8
 800f534:	2201      	movs	r2, #1
 800f536:	4619      	mov	r1, r3
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f000 f920 	bl	800f77e <USBD_CtlSendData>
        break;
 800f53e:	e00c      	b.n	800f55a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	3304      	adds	r3, #4
 800f544:	2201      	movs	r2, #1
 800f546:	4619      	mov	r1, r3
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f000 f918 	bl	800f77e <USBD_CtlSendData>
        break;
 800f54e:	e004      	b.n	800f55a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800f550:	6839      	ldr	r1, [r7, #0]
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f000 f8a9 	bl	800f6aa <USBD_CtlError>
        break;
 800f558:	bf00      	nop
}
 800f55a:	bf00      	nop
 800f55c:	3708      	adds	r7, #8
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}

0800f562 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f562:	b580      	push	{r7, lr}
 800f564:	b082      	sub	sp, #8
 800f566:	af00      	add	r7, sp, #0
 800f568:	6078      	str	r0, [r7, #4]
 800f56a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f572:	3b01      	subs	r3, #1
 800f574:	2b02      	cmp	r3, #2
 800f576:	d81e      	bhi.n	800f5b6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	88db      	ldrh	r3, [r3, #6]
 800f57c:	2b02      	cmp	r3, #2
 800f57e:	d004      	beq.n	800f58a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800f580:	6839      	ldr	r1, [r7, #0]
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f000 f891 	bl	800f6aa <USBD_CtlError>
        break;
 800f588:	e01a      	b.n	800f5c0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	2201      	movs	r2, #1
 800f58e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f596:	2b00      	cmp	r3, #0
 800f598:	d005      	beq.n	800f5a6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	68db      	ldr	r3, [r3, #12]
 800f59e:	f043 0202 	orr.w	r2, r3, #2
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	330c      	adds	r3, #12
 800f5aa:	2202      	movs	r2, #2
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f000 f8e5 	bl	800f77e <USBD_CtlSendData>
      break;
 800f5b4:	e004      	b.n	800f5c0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800f5b6:	6839      	ldr	r1, [r7, #0]
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f000 f876 	bl	800f6aa <USBD_CtlError>
      break;
 800f5be:	bf00      	nop
  }
}
 800f5c0:	bf00      	nop
 800f5c2:	3708      	adds	r7, #8
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}

0800f5c8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	885b      	ldrh	r3, [r3, #2]
 800f5d6:	2b01      	cmp	r3, #1
 800f5d8:	d106      	bne.n	800f5e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2201      	movs	r2, #1
 800f5de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f000 f929 	bl	800f83a <USBD_CtlSendStatus>
  }
}
 800f5e8:	bf00      	nop
 800f5ea:	3708      	adds	r7, #8
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}

0800f5f0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b082      	sub	sp, #8
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f600:	3b01      	subs	r3, #1
 800f602:	2b02      	cmp	r3, #2
 800f604:	d80b      	bhi.n	800f61e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	885b      	ldrh	r3, [r3, #2]
 800f60a:	2b01      	cmp	r3, #1
 800f60c:	d10c      	bne.n	800f628 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2200      	movs	r2, #0
 800f612:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f000 f90f 	bl	800f83a <USBD_CtlSendStatus>
      }
      break;
 800f61c:	e004      	b.n	800f628 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f61e:	6839      	ldr	r1, [r7, #0]
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f000 f842 	bl	800f6aa <USBD_CtlError>
      break;
 800f626:	e000      	b.n	800f62a <USBD_ClrFeature+0x3a>
      break;
 800f628:	bf00      	nop
  }
}
 800f62a:	bf00      	nop
 800f62c:	3708      	adds	r7, #8
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}

0800f632 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f632:	b480      	push	{r7}
 800f634:	b083      	sub	sp, #12
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
 800f63a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	781a      	ldrb	r2, [r3, #0]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	785a      	ldrb	r2, [r3, #1]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	3302      	adds	r3, #2
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	b29a      	uxth	r2, r3
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	3303      	adds	r3, #3
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	021b      	lsls	r3, r3, #8
 800f65e:	b29b      	uxth	r3, r3
 800f660:	4413      	add	r3, r2
 800f662:	b29a      	uxth	r2, r3
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	3304      	adds	r3, #4
 800f66c:	781b      	ldrb	r3, [r3, #0]
 800f66e:	b29a      	uxth	r2, r3
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	3305      	adds	r3, #5
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	b29b      	uxth	r3, r3
 800f678:	021b      	lsls	r3, r3, #8
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	4413      	add	r3, r2
 800f67e:	b29a      	uxth	r2, r3
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	3306      	adds	r3, #6
 800f688:	781b      	ldrb	r3, [r3, #0]
 800f68a:	b29a      	uxth	r2, r3
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	3307      	adds	r3, #7
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	b29b      	uxth	r3, r3
 800f694:	021b      	lsls	r3, r3, #8
 800f696:	b29b      	uxth	r3, r3
 800f698:	4413      	add	r3, r2
 800f69a:	b29a      	uxth	r2, r3
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	80da      	strh	r2, [r3, #6]

}
 800f6a0:	bf00      	nop
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bc80      	pop	{r7}
 800f6a8:	4770      	bx	lr

0800f6aa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800f6aa:	b580      	push	{r7, lr}
 800f6ac:	b082      	sub	sp, #8
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
 800f6b2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800f6b4:	2180      	movs	r1, #128	; 0x80
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f004 fcce 	bl	8014058 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800f6bc:	2100      	movs	r1, #0
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f004 fcca 	bl	8014058 <USBD_LL_StallEP>
}
 800f6c4:	bf00      	nop
 800f6c6:	3708      	adds	r7, #8
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b086      	sub	sp, #24
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	60f8      	str	r0, [r7, #12]
 800f6d4:	60b9      	str	r1, [r7, #8]
 800f6d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d032      	beq.n	800f748 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800f6e2:	68f8      	ldr	r0, [r7, #12]
 800f6e4:	f000 f834 	bl	800f750 <USBD_GetLen>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	005b      	lsls	r3, r3, #1
 800f6f0:	b29a      	uxth	r2, r3
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800f6f6:	7dfb      	ldrb	r3, [r7, #23]
 800f6f8:	1c5a      	adds	r2, r3, #1
 800f6fa:	75fa      	strb	r2, [r7, #23]
 800f6fc:	461a      	mov	r2, r3
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	4413      	add	r3, r2
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	7812      	ldrb	r2, [r2, #0]
 800f706:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800f708:	7dfb      	ldrb	r3, [r7, #23]
 800f70a:	1c5a      	adds	r2, r3, #1
 800f70c:	75fa      	strb	r2, [r7, #23]
 800f70e:	461a      	mov	r2, r3
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	4413      	add	r3, r2
 800f714:	2203      	movs	r2, #3
 800f716:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800f718:	e012      	b.n	800f740 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	1c5a      	adds	r2, r3, #1
 800f71e:	60fa      	str	r2, [r7, #12]
 800f720:	7dfa      	ldrb	r2, [r7, #23]
 800f722:	1c51      	adds	r1, r2, #1
 800f724:	75f9      	strb	r1, [r7, #23]
 800f726:	4611      	mov	r1, r2
 800f728:	68ba      	ldr	r2, [r7, #8]
 800f72a:	440a      	add	r2, r1
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800f730:	7dfb      	ldrb	r3, [r7, #23]
 800f732:	1c5a      	adds	r2, r3, #1
 800f734:	75fa      	strb	r2, [r7, #23]
 800f736:	461a      	mov	r2, r3
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	4413      	add	r3, r2
 800f73c:	2200      	movs	r2, #0
 800f73e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d1e8      	bne.n	800f71a <USBD_GetString+0x4e>
    }
  }
}
 800f748:	bf00      	nop
 800f74a:	3718      	adds	r7, #24
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}

0800f750 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f750:	b480      	push	{r7}
 800f752:	b085      	sub	sp, #20
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f758:	2300      	movs	r3, #0
 800f75a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800f75c:	e005      	b.n	800f76a <USBD_GetLen+0x1a>
  {
    len++;
 800f75e:	7bfb      	ldrb	r3, [r7, #15]
 800f760:	3301      	adds	r3, #1
 800f762:	73fb      	strb	r3, [r7, #15]
    buf++;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	3301      	adds	r3, #1
 800f768:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d1f5      	bne.n	800f75e <USBD_GetLen+0xe>
  }

  return len;
 800f772:	7bfb      	ldrb	r3, [r7, #15]
}
 800f774:	4618      	mov	r0, r3
 800f776:	3714      	adds	r7, #20
 800f778:	46bd      	mov	sp, r7
 800f77a:	bc80      	pop	{r7}
 800f77c:	4770      	bx	lr

0800f77e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800f77e:	b580      	push	{r7, lr}
 800f780:	b084      	sub	sp, #16
 800f782:	af00      	add	r7, sp, #0
 800f784:	60f8      	str	r0, [r7, #12]
 800f786:	60b9      	str	r1, [r7, #8]
 800f788:	4613      	mov	r3, r2
 800f78a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2202      	movs	r2, #2
 800f790:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f794:	88fa      	ldrh	r2, [r7, #6]
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800f79a:	88fa      	ldrh	r2, [r7, #6]
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f7a0:	88fb      	ldrh	r3, [r7, #6]
 800f7a2:	68ba      	ldr	r2, [r7, #8]
 800f7a4:	2100      	movs	r1, #0
 800f7a6:	68f8      	ldr	r0, [r7, #12]
 800f7a8:	f004 fcdf 	bl	801416a <USBD_LL_Transmit>

  return USBD_OK;
 800f7ac:	2300      	movs	r3, #0
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3710      	adds	r7, #16
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}

0800f7b6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800f7b6:	b580      	push	{r7, lr}
 800f7b8:	b084      	sub	sp, #16
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	60f8      	str	r0, [r7, #12]
 800f7be:	60b9      	str	r1, [r7, #8]
 800f7c0:	4613      	mov	r3, r2
 800f7c2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f7c4:	88fb      	ldrh	r3, [r7, #6]
 800f7c6:	68ba      	ldr	r2, [r7, #8]
 800f7c8:	2100      	movs	r1, #0
 800f7ca:	68f8      	ldr	r0, [r7, #12]
 800f7cc:	f004 fccd 	bl	801416a <USBD_LL_Transmit>

  return USBD_OK;
 800f7d0:	2300      	movs	r3, #0
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3710      	adds	r7, #16
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}

0800f7da <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800f7da:	b580      	push	{r7, lr}
 800f7dc:	b084      	sub	sp, #16
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	60f8      	str	r0, [r7, #12]
 800f7e2:	60b9      	str	r1, [r7, #8]
 800f7e4:	4613      	mov	r3, r2
 800f7e6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2203      	movs	r2, #3
 800f7ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f7f0:	88fa      	ldrh	r2, [r7, #6]
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800f7f8:	88fa      	ldrh	r2, [r7, #6]
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f800:	88fb      	ldrh	r3, [r7, #6]
 800f802:	68ba      	ldr	r2, [r7, #8]
 800f804:	2100      	movs	r1, #0
 800f806:	68f8      	ldr	r0, [r7, #12]
 800f808:	f004 fcd2 	bl	80141b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f80c:	2300      	movs	r3, #0
}
 800f80e:	4618      	mov	r0, r3
 800f810:	3710      	adds	r7, #16
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}

0800f816 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800f816:	b580      	push	{r7, lr}
 800f818:	b084      	sub	sp, #16
 800f81a:	af00      	add	r7, sp, #0
 800f81c:	60f8      	str	r0, [r7, #12]
 800f81e:	60b9      	str	r1, [r7, #8]
 800f820:	4613      	mov	r3, r2
 800f822:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f824:	88fb      	ldrh	r3, [r7, #6]
 800f826:	68ba      	ldr	r2, [r7, #8]
 800f828:	2100      	movs	r1, #0
 800f82a:	68f8      	ldr	r0, [r7, #12]
 800f82c:	f004 fcc0 	bl	80141b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f830:	2300      	movs	r3, #0
}
 800f832:	4618      	mov	r0, r3
 800f834:	3710      	adds	r7, #16
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}

0800f83a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f83a:	b580      	push	{r7, lr}
 800f83c:	b082      	sub	sp, #8
 800f83e:	af00      	add	r7, sp, #0
 800f840:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2204      	movs	r2, #4
 800f846:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f84a:	2300      	movs	r3, #0
 800f84c:	2200      	movs	r2, #0
 800f84e:	2100      	movs	r1, #0
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f004 fc8a 	bl	801416a <USBD_LL_Transmit>

  return USBD_OK;
 800f856:	2300      	movs	r3, #0
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3708      	adds	r7, #8
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}

0800f860 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b082      	sub	sp, #8
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2205      	movs	r2, #5
 800f86c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f870:	2300      	movs	r3, #0
 800f872:	2200      	movs	r2, #0
 800f874:	2100      	movs	r1, #0
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f004 fc9a 	bl	80141b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f87c:	2300      	movs	r3, #0
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3708      	adds	r7, #8
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
	...

0800f888 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b084      	sub	sp, #16
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	4603      	mov	r3, r0
 800f890:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f892:	79fb      	ldrb	r3, [r7, #7]
 800f894:	4a08      	ldr	r2, [pc, #32]	; (800f8b8 <disk_status+0x30>)
 800f896:	009b      	lsls	r3, r3, #2
 800f898:	4413      	add	r3, r2
 800f89a:	685b      	ldr	r3, [r3, #4]
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	79fa      	ldrb	r2, [r7, #7]
 800f8a0:	4905      	ldr	r1, [pc, #20]	; (800f8b8 <disk_status+0x30>)
 800f8a2:	440a      	add	r2, r1
 800f8a4:	7a12      	ldrb	r2, [r2, #8]
 800f8a6:	4610      	mov	r0, r2
 800f8a8:	4798      	blx	r3
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3710      	adds	r7, #16
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}
 800f8b8:	20000ce4 	.word	0x20000ce4

0800f8bc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b084      	sub	sp, #16
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800f8ca:	79fb      	ldrb	r3, [r7, #7]
 800f8cc:	4a0d      	ldr	r2, [pc, #52]	; (800f904 <disk_initialize+0x48>)
 800f8ce:	5cd3      	ldrb	r3, [r2, r3]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d111      	bne.n	800f8f8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800f8d4:	79fb      	ldrb	r3, [r7, #7]
 800f8d6:	4a0b      	ldr	r2, [pc, #44]	; (800f904 <disk_initialize+0x48>)
 800f8d8:	2101      	movs	r1, #1
 800f8da:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f8dc:	79fb      	ldrb	r3, [r7, #7]
 800f8de:	4a09      	ldr	r2, [pc, #36]	; (800f904 <disk_initialize+0x48>)
 800f8e0:	009b      	lsls	r3, r3, #2
 800f8e2:	4413      	add	r3, r2
 800f8e4:	685b      	ldr	r3, [r3, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	79fa      	ldrb	r2, [r7, #7]
 800f8ea:	4906      	ldr	r1, [pc, #24]	; (800f904 <disk_initialize+0x48>)
 800f8ec:	440a      	add	r2, r1
 800f8ee:	7a12      	ldrb	r2, [r2, #8]
 800f8f0:	4610      	mov	r0, r2
 800f8f2:	4798      	blx	r3
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3710      	adds	r7, #16
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}
 800f902:	bf00      	nop
 800f904:	20000ce4 	.word	0x20000ce4

0800f908 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f908:	b590      	push	{r4, r7, lr}
 800f90a:	b087      	sub	sp, #28
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	60b9      	str	r1, [r7, #8]
 800f910:	607a      	str	r2, [r7, #4]
 800f912:	603b      	str	r3, [r7, #0]
 800f914:	4603      	mov	r3, r0
 800f916:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f918:	7bfb      	ldrb	r3, [r7, #15]
 800f91a:	4a0a      	ldr	r2, [pc, #40]	; (800f944 <disk_read+0x3c>)
 800f91c:	009b      	lsls	r3, r3, #2
 800f91e:	4413      	add	r3, r2
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	689c      	ldr	r4, [r3, #8]
 800f924:	7bfb      	ldrb	r3, [r7, #15]
 800f926:	4a07      	ldr	r2, [pc, #28]	; (800f944 <disk_read+0x3c>)
 800f928:	4413      	add	r3, r2
 800f92a:	7a18      	ldrb	r0, [r3, #8]
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	687a      	ldr	r2, [r7, #4]
 800f930:	68b9      	ldr	r1, [r7, #8]
 800f932:	47a0      	blx	r4
 800f934:	4603      	mov	r3, r0
 800f936:	75fb      	strb	r3, [r7, #23]
  return res;
 800f938:	7dfb      	ldrb	r3, [r7, #23]
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	371c      	adds	r7, #28
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd90      	pop	{r4, r7, pc}
 800f942:	bf00      	nop
 800f944:	20000ce4 	.word	0x20000ce4

0800f948 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f948:	b590      	push	{r4, r7, lr}
 800f94a:	b087      	sub	sp, #28
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	60b9      	str	r1, [r7, #8]
 800f950:	607a      	str	r2, [r7, #4]
 800f952:	603b      	str	r3, [r7, #0]
 800f954:	4603      	mov	r3, r0
 800f956:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f958:	7bfb      	ldrb	r3, [r7, #15]
 800f95a:	4a0a      	ldr	r2, [pc, #40]	; (800f984 <disk_write+0x3c>)
 800f95c:	009b      	lsls	r3, r3, #2
 800f95e:	4413      	add	r3, r2
 800f960:	685b      	ldr	r3, [r3, #4]
 800f962:	68dc      	ldr	r4, [r3, #12]
 800f964:	7bfb      	ldrb	r3, [r7, #15]
 800f966:	4a07      	ldr	r2, [pc, #28]	; (800f984 <disk_write+0x3c>)
 800f968:	4413      	add	r3, r2
 800f96a:	7a18      	ldrb	r0, [r3, #8]
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	687a      	ldr	r2, [r7, #4]
 800f970:	68b9      	ldr	r1, [r7, #8]
 800f972:	47a0      	blx	r4
 800f974:	4603      	mov	r3, r0
 800f976:	75fb      	strb	r3, [r7, #23]
  return res;
 800f978:	7dfb      	ldrb	r3, [r7, #23]
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	371c      	adds	r7, #28
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd90      	pop	{r4, r7, pc}
 800f982:	bf00      	nop
 800f984:	20000ce4 	.word	0x20000ce4

0800f988 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b084      	sub	sp, #16
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	4603      	mov	r3, r0
 800f990:	603a      	str	r2, [r7, #0]
 800f992:	71fb      	strb	r3, [r7, #7]
 800f994:	460b      	mov	r3, r1
 800f996:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f998:	79fb      	ldrb	r3, [r7, #7]
 800f99a:	4a09      	ldr	r2, [pc, #36]	; (800f9c0 <disk_ioctl+0x38>)
 800f99c:	009b      	lsls	r3, r3, #2
 800f99e:	4413      	add	r3, r2
 800f9a0:	685b      	ldr	r3, [r3, #4]
 800f9a2:	691b      	ldr	r3, [r3, #16]
 800f9a4:	79fa      	ldrb	r2, [r7, #7]
 800f9a6:	4906      	ldr	r1, [pc, #24]	; (800f9c0 <disk_ioctl+0x38>)
 800f9a8:	440a      	add	r2, r1
 800f9aa:	7a10      	ldrb	r0, [r2, #8]
 800f9ac:	79b9      	ldrb	r1, [r7, #6]
 800f9ae:	683a      	ldr	r2, [r7, #0]
 800f9b0:	4798      	blx	r3
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	73fb      	strb	r3, [r7, #15]
  return res;
 800f9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	3710      	adds	r7, #16
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}
 800f9c0:	20000ce4 	.word	0x20000ce4

0800f9c4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f9c4:	b480      	push	{r7}
 800f9c6:	b087      	sub	sp, #28
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	60f8      	str	r0, [r7, #12]
 800f9cc:	60b9      	str	r1, [r7, #8]
 800f9ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800f9d8:	e007      	b.n	800f9ea <mem_cpy+0x26>
		*d++ = *s++;
 800f9da:	693a      	ldr	r2, [r7, #16]
 800f9dc:	1c53      	adds	r3, r2, #1
 800f9de:	613b      	str	r3, [r7, #16]
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	1c59      	adds	r1, r3, #1
 800f9e4:	6179      	str	r1, [r7, #20]
 800f9e6:	7812      	ldrb	r2, [r2, #0]
 800f9e8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	1e5a      	subs	r2, r3, #1
 800f9ee:	607a      	str	r2, [r7, #4]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d1f2      	bne.n	800f9da <mem_cpy+0x16>
}
 800f9f4:	bf00      	nop
 800f9f6:	bf00      	nop
 800f9f8:	371c      	adds	r7, #28
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bc80      	pop	{r7}
 800f9fe:	4770      	bx	lr

0800fa00 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800fa00:	b480      	push	{r7}
 800fa02:	b087      	sub	sp, #28
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	60f8      	str	r0, [r7, #12]
 800fa08:	60b9      	str	r1, [r7, #8]
 800fa0a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800fa10:	e005      	b.n	800fa1e <mem_set+0x1e>
		*d++ = (BYTE)val;
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	1c5a      	adds	r2, r3, #1
 800fa16:	617a      	str	r2, [r7, #20]
 800fa18:	68ba      	ldr	r2, [r7, #8]
 800fa1a:	b2d2      	uxtb	r2, r2
 800fa1c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	1e5a      	subs	r2, r3, #1
 800fa22:	607a      	str	r2, [r7, #4]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d1f4      	bne.n	800fa12 <mem_set+0x12>
}
 800fa28:	bf00      	nop
 800fa2a:	bf00      	nop
 800fa2c:	371c      	adds	r7, #28
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bc80      	pop	{r7}
 800fa32:	4770      	bx	lr

0800fa34 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800fa34:	b480      	push	{r7}
 800fa36:	b089      	sub	sp, #36	; 0x24
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	60f8      	str	r0, [r7, #12]
 800fa3c:	60b9      	str	r1, [r7, #8]
 800fa3e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	61fb      	str	r3, [r7, #28]
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800fa4c:	bf00      	nop
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	1e5a      	subs	r2, r3, #1
 800fa52:	607a      	str	r2, [r7, #4]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d00d      	beq.n	800fa74 <mem_cmp+0x40>
 800fa58:	69fb      	ldr	r3, [r7, #28]
 800fa5a:	1c5a      	adds	r2, r3, #1
 800fa5c:	61fa      	str	r2, [r7, #28]
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	4619      	mov	r1, r3
 800fa62:	69bb      	ldr	r3, [r7, #24]
 800fa64:	1c5a      	adds	r2, r3, #1
 800fa66:	61ba      	str	r2, [r7, #24]
 800fa68:	781b      	ldrb	r3, [r3, #0]
 800fa6a:	1acb      	subs	r3, r1, r3
 800fa6c:	617b      	str	r3, [r7, #20]
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d0ec      	beq.n	800fa4e <mem_cmp+0x1a>
	return r;
 800fa74:	697b      	ldr	r3, [r7, #20]
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3724      	adds	r7, #36	; 0x24
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bc80      	pop	{r7}
 800fa7e:	4770      	bx	lr

0800fa80 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fa8a:	e002      	b.n	800fa92 <chk_chr+0x12>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	3301      	adds	r3, #1
 800fa90:	607b      	str	r3, [r7, #4]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d005      	beq.n	800faa6 <chk_chr+0x26>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	781b      	ldrb	r3, [r3, #0]
 800fa9e:	461a      	mov	r2, r3
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	4293      	cmp	r3, r2
 800faa4:	d1f2      	bne.n	800fa8c <chk_chr+0xc>
	return *str;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	781b      	ldrb	r3, [r3, #0]
}
 800faaa:	4618      	mov	r0, r3
 800faac:	370c      	adds	r7, #12
 800faae:	46bd      	mov	sp, r7
 800fab0:	bc80      	pop	{r7}
 800fab2:	4770      	bx	lr

0800fab4 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800fac2:	4618      	mov	r0, r3
 800fac4:	f002 fc68 	bl	8012398 <ff_req_grant>
 800fac8:	4603      	mov	r3, r0
}
 800faca:	4618      	mov	r0, r3
 800facc:	3708      	adds	r7, #8
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}

0800fad2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800fad2:	b580      	push	{r7, lr}
 800fad4:	b082      	sub	sp, #8
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	6078      	str	r0, [r7, #4]
 800fada:	460b      	mov	r3, r1
 800fadc:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d011      	beq.n	800fb08 <unlock_fs+0x36>
 800fae4:	78fb      	ldrb	r3, [r7, #3]
 800fae6:	2b0c      	cmp	r3, #12
 800fae8:	d00e      	beq.n	800fb08 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800faea:	78fb      	ldrb	r3, [r7, #3]
 800faec:	2b0b      	cmp	r3, #11
 800faee:	d00b      	beq.n	800fb08 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800faf0:	78fb      	ldrb	r3, [r7, #3]
 800faf2:	2b09      	cmp	r3, #9
 800faf4:	d008      	beq.n	800fb08 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 800faf6:	78fb      	ldrb	r3, [r7, #3]
 800faf8:	2b0f      	cmp	r3, #15
 800fafa:	d005      	beq.n	800fb08 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800fb02:	4618      	mov	r0, r3
 800fb04:	f002 fc5d 	bl	80123c2 <ff_rel_grant>
	}
}
 800fb08:	bf00      	nop
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fb10:	b480      	push	{r7}
 800fb12:	b085      	sub	sp, #20
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	60bb      	str	r3, [r7, #8]
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	60fb      	str	r3, [r7, #12]
 800fb22:	e038      	b.n	800fb96 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800fb24:	492f      	ldr	r1, [pc, #188]	; (800fbe4 <chk_lock+0xd4>)
 800fb26:	68fa      	ldr	r2, [r7, #12]
 800fb28:	4613      	mov	r3, r2
 800fb2a:	005b      	lsls	r3, r3, #1
 800fb2c:	4413      	add	r3, r2
 800fb2e:	009b      	lsls	r3, r3, #2
 800fb30:	440b      	add	r3, r1
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d029      	beq.n	800fb8c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800fb38:	492a      	ldr	r1, [pc, #168]	; (800fbe4 <chk_lock+0xd4>)
 800fb3a:	68fa      	ldr	r2, [r7, #12]
 800fb3c:	4613      	mov	r3, r2
 800fb3e:	005b      	lsls	r3, r3, #1
 800fb40:	4413      	add	r3, r2
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	440b      	add	r3, r1
 800fb46:	681a      	ldr	r2, [r3, #0]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d11e      	bne.n	800fb90 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800fb52:	4924      	ldr	r1, [pc, #144]	; (800fbe4 <chk_lock+0xd4>)
 800fb54:	68fa      	ldr	r2, [r7, #12]
 800fb56:	4613      	mov	r3, r2
 800fb58:	005b      	lsls	r3, r3, #1
 800fb5a:	4413      	add	r3, r2
 800fb5c:	009b      	lsls	r3, r3, #2
 800fb5e:	440b      	add	r3, r1
 800fb60:	3304      	adds	r3, #4
 800fb62:	681a      	ldr	r2, [r3, #0]
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	d110      	bne.n	800fb90 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800fb6e:	491d      	ldr	r1, [pc, #116]	; (800fbe4 <chk_lock+0xd4>)
 800fb70:	68fa      	ldr	r2, [r7, #12]
 800fb72:	4613      	mov	r3, r2
 800fb74:	005b      	lsls	r3, r3, #1
 800fb76:	4413      	add	r3, r2
 800fb78:	009b      	lsls	r3, r3, #2
 800fb7a:	440b      	add	r3, r1
 800fb7c:	3308      	adds	r3, #8
 800fb7e:	881a      	ldrh	r2, [r3, #0]
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d102      	bne.n	800fb90 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800fb8a:	e007      	b.n	800fb9c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	3301      	adds	r3, #1
 800fb94:	60fb      	str	r3, [r7, #12]
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	2b01      	cmp	r3, #1
 800fb9a:	d9c3      	bls.n	800fb24 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	2b02      	cmp	r3, #2
 800fba0:	d109      	bne.n	800fbb6 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d102      	bne.n	800fbae <chk_lock+0x9e>
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	2b02      	cmp	r3, #2
 800fbac:	d101      	bne.n	800fbb2 <chk_lock+0xa2>
 800fbae:	2300      	movs	r3, #0
 800fbb0:	e013      	b.n	800fbda <chk_lock+0xca>
 800fbb2:	2312      	movs	r3, #18
 800fbb4:	e011      	b.n	800fbda <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d10b      	bne.n	800fbd4 <chk_lock+0xc4>
 800fbbc:	4909      	ldr	r1, [pc, #36]	; (800fbe4 <chk_lock+0xd4>)
 800fbbe:	68fa      	ldr	r2, [r7, #12]
 800fbc0:	4613      	mov	r3, r2
 800fbc2:	005b      	lsls	r3, r3, #1
 800fbc4:	4413      	add	r3, r2
 800fbc6:	009b      	lsls	r3, r3, #2
 800fbc8:	440b      	add	r3, r1
 800fbca:	330a      	adds	r3, #10
 800fbcc:	881b      	ldrh	r3, [r3, #0]
 800fbce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbd2:	d101      	bne.n	800fbd8 <chk_lock+0xc8>
 800fbd4:	2310      	movs	r3, #16
 800fbd6:	e000      	b.n	800fbda <chk_lock+0xca>
 800fbd8:	2300      	movs	r3, #0
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3714      	adds	r7, #20
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bc80      	pop	{r7}
 800fbe2:	4770      	bx	lr
 800fbe4:	20000ccc 	.word	0x20000ccc

0800fbe8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	607b      	str	r3, [r7, #4]
 800fbf2:	e002      	b.n	800fbfa <enq_lock+0x12>
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	3301      	adds	r3, #1
 800fbf8:	607b      	str	r3, [r7, #4]
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2b01      	cmp	r3, #1
 800fbfe:	d809      	bhi.n	800fc14 <enq_lock+0x2c>
 800fc00:	490a      	ldr	r1, [pc, #40]	; (800fc2c <enq_lock+0x44>)
 800fc02:	687a      	ldr	r2, [r7, #4]
 800fc04:	4613      	mov	r3, r2
 800fc06:	005b      	lsls	r3, r3, #1
 800fc08:	4413      	add	r3, r2
 800fc0a:	009b      	lsls	r3, r3, #2
 800fc0c:	440b      	add	r3, r1
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d1ef      	bne.n	800fbf4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2b02      	cmp	r3, #2
 800fc18:	bf14      	ite	ne
 800fc1a:	2301      	movne	r3, #1
 800fc1c:	2300      	moveq	r3, #0
 800fc1e:	b2db      	uxtb	r3, r3
}
 800fc20:	4618      	mov	r0, r3
 800fc22:	370c      	adds	r7, #12
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bc80      	pop	{r7}
 800fc28:	4770      	bx	lr
 800fc2a:	bf00      	nop
 800fc2c:	20000ccc 	.word	0x20000ccc

0800fc30 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b085      	sub	sp, #20
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	60fb      	str	r3, [r7, #12]
 800fc3e:	e02b      	b.n	800fc98 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800fc40:	4955      	ldr	r1, [pc, #340]	; (800fd98 <inc_lock+0x168>)
 800fc42:	68fa      	ldr	r2, [r7, #12]
 800fc44:	4613      	mov	r3, r2
 800fc46:	005b      	lsls	r3, r3, #1
 800fc48:	4413      	add	r3, r2
 800fc4a:	009b      	lsls	r3, r3, #2
 800fc4c:	440b      	add	r3, r1
 800fc4e:	681a      	ldr	r2, [r3, #0]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d11b      	bne.n	800fc92 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800fc5a:	494f      	ldr	r1, [pc, #316]	; (800fd98 <inc_lock+0x168>)
 800fc5c:	68fa      	ldr	r2, [r7, #12]
 800fc5e:	4613      	mov	r3, r2
 800fc60:	005b      	lsls	r3, r3, #1
 800fc62:	4413      	add	r3, r2
 800fc64:	009b      	lsls	r3, r3, #2
 800fc66:	440b      	add	r3, r1
 800fc68:	3304      	adds	r3, #4
 800fc6a:	681a      	ldr	r2, [r3, #0]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800fc72:	429a      	cmp	r2, r3
 800fc74:	d10d      	bne.n	800fc92 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800fc76:	4948      	ldr	r1, [pc, #288]	; (800fd98 <inc_lock+0x168>)
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	4613      	mov	r3, r2
 800fc7c:	005b      	lsls	r3, r3, #1
 800fc7e:	4413      	add	r3, r2
 800fc80:	009b      	lsls	r3, r3, #2
 800fc82:	440b      	add	r3, r1
 800fc84:	3308      	adds	r3, #8
 800fc86:	881a      	ldrh	r2, [r3, #0]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d006      	beq.n	800fca0 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	3301      	adds	r3, #1
 800fc96:	60fb      	str	r3, [r7, #12]
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2b01      	cmp	r3, #1
 800fc9c:	d9d0      	bls.n	800fc40 <inc_lock+0x10>
 800fc9e:	e000      	b.n	800fca2 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800fca0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	2b02      	cmp	r3, #2
 800fca6:	d145      	bne.n	800fd34 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	60fb      	str	r3, [r7, #12]
 800fcac:	e002      	b.n	800fcb4 <inc_lock+0x84>
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	60fb      	str	r3, [r7, #12]
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2b01      	cmp	r3, #1
 800fcb8:	d809      	bhi.n	800fcce <inc_lock+0x9e>
 800fcba:	4937      	ldr	r1, [pc, #220]	; (800fd98 <inc_lock+0x168>)
 800fcbc:	68fa      	ldr	r2, [r7, #12]
 800fcbe:	4613      	mov	r3, r2
 800fcc0:	005b      	lsls	r3, r3, #1
 800fcc2:	4413      	add	r3, r2
 800fcc4:	009b      	lsls	r3, r3, #2
 800fcc6:	440b      	add	r3, r1
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d1ef      	bne.n	800fcae <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	2b02      	cmp	r3, #2
 800fcd2:	d101      	bne.n	800fcd8 <inc_lock+0xa8>
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	e05a      	b.n	800fd8e <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800fcde:	482e      	ldr	r0, [pc, #184]	; (800fd98 <inc_lock+0x168>)
 800fce0:	68fa      	ldr	r2, [r7, #12]
 800fce2:	4613      	mov	r3, r2
 800fce4:	005b      	lsls	r3, r3, #1
 800fce6:	4413      	add	r3, r2
 800fce8:	009b      	lsls	r3, r3, #2
 800fcea:	4403      	add	r3, r0
 800fcec:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800fcf4:	4828      	ldr	r0, [pc, #160]	; (800fd98 <inc_lock+0x168>)
 800fcf6:	68fa      	ldr	r2, [r7, #12]
 800fcf8:	4613      	mov	r3, r2
 800fcfa:	005b      	lsls	r3, r3, #1
 800fcfc:	4413      	add	r3, r2
 800fcfe:	009b      	lsls	r3, r3, #2
 800fd00:	4403      	add	r3, r0
 800fd02:	3304      	adds	r3, #4
 800fd04:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800fd0c:	4922      	ldr	r1, [pc, #136]	; (800fd98 <inc_lock+0x168>)
 800fd0e:	68fa      	ldr	r2, [r7, #12]
 800fd10:	4613      	mov	r3, r2
 800fd12:	005b      	lsls	r3, r3, #1
 800fd14:	4413      	add	r3, r2
 800fd16:	009b      	lsls	r3, r3, #2
 800fd18:	440b      	add	r3, r1
 800fd1a:	3308      	adds	r3, #8
 800fd1c:	4602      	mov	r2, r0
 800fd1e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800fd20:	491d      	ldr	r1, [pc, #116]	; (800fd98 <inc_lock+0x168>)
 800fd22:	68fa      	ldr	r2, [r7, #12]
 800fd24:	4613      	mov	r3, r2
 800fd26:	005b      	lsls	r3, r3, #1
 800fd28:	4413      	add	r3, r2
 800fd2a:	009b      	lsls	r3, r3, #2
 800fd2c:	440b      	add	r3, r1
 800fd2e:	330a      	adds	r3, #10
 800fd30:	2200      	movs	r2, #0
 800fd32:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d00c      	beq.n	800fd54 <inc_lock+0x124>
 800fd3a:	4917      	ldr	r1, [pc, #92]	; (800fd98 <inc_lock+0x168>)
 800fd3c:	68fa      	ldr	r2, [r7, #12]
 800fd3e:	4613      	mov	r3, r2
 800fd40:	005b      	lsls	r3, r3, #1
 800fd42:	4413      	add	r3, r2
 800fd44:	009b      	lsls	r3, r3, #2
 800fd46:	440b      	add	r3, r1
 800fd48:	330a      	adds	r3, #10
 800fd4a:	881b      	ldrh	r3, [r3, #0]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d001      	beq.n	800fd54 <inc_lock+0x124>
 800fd50:	2300      	movs	r3, #0
 800fd52:	e01c      	b.n	800fd8e <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d10b      	bne.n	800fd72 <inc_lock+0x142>
 800fd5a:	490f      	ldr	r1, [pc, #60]	; (800fd98 <inc_lock+0x168>)
 800fd5c:	68fa      	ldr	r2, [r7, #12]
 800fd5e:	4613      	mov	r3, r2
 800fd60:	005b      	lsls	r3, r3, #1
 800fd62:	4413      	add	r3, r2
 800fd64:	009b      	lsls	r3, r3, #2
 800fd66:	440b      	add	r3, r1
 800fd68:	330a      	adds	r3, #10
 800fd6a:	881b      	ldrh	r3, [r3, #0]
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	b299      	uxth	r1, r3
 800fd70:	e001      	b.n	800fd76 <inc_lock+0x146>
 800fd72:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fd76:	4808      	ldr	r0, [pc, #32]	; (800fd98 <inc_lock+0x168>)
 800fd78:	68fa      	ldr	r2, [r7, #12]
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	005b      	lsls	r3, r3, #1
 800fd7e:	4413      	add	r3, r2
 800fd80:	009b      	lsls	r3, r3, #2
 800fd82:	4403      	add	r3, r0
 800fd84:	330a      	adds	r3, #10
 800fd86:	460a      	mov	r2, r1
 800fd88:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	3301      	adds	r3, #1
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3714      	adds	r7, #20
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bc80      	pop	{r7}
 800fd96:	4770      	bx	lr
 800fd98:	20000ccc 	.word	0x20000ccc

0800fd9c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b085      	sub	sp, #20
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	3b01      	subs	r3, #1
 800fda8:	607b      	str	r3, [r7, #4]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	d82e      	bhi.n	800fe0e <dec_lock+0x72>
		n = Files[i].ctr;
 800fdb0:	491b      	ldr	r1, [pc, #108]	; (800fe20 <dec_lock+0x84>)
 800fdb2:	687a      	ldr	r2, [r7, #4]
 800fdb4:	4613      	mov	r3, r2
 800fdb6:	005b      	lsls	r3, r3, #1
 800fdb8:	4413      	add	r3, r2
 800fdba:	009b      	lsls	r3, r3, #2
 800fdbc:	440b      	add	r3, r1
 800fdbe:	330a      	adds	r3, #10
 800fdc0:	881b      	ldrh	r3, [r3, #0]
 800fdc2:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fdc4:	89fb      	ldrh	r3, [r7, #14]
 800fdc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdca:	d101      	bne.n	800fdd0 <dec_lock+0x34>
 800fdcc:	2300      	movs	r3, #0
 800fdce:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800fdd0:	89fb      	ldrh	r3, [r7, #14]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d002      	beq.n	800fddc <dec_lock+0x40>
 800fdd6:	89fb      	ldrh	r3, [r7, #14]
 800fdd8:	3b01      	subs	r3, #1
 800fdda:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fddc:	4910      	ldr	r1, [pc, #64]	; (800fe20 <dec_lock+0x84>)
 800fdde:	687a      	ldr	r2, [r7, #4]
 800fde0:	4613      	mov	r3, r2
 800fde2:	005b      	lsls	r3, r3, #1
 800fde4:	4413      	add	r3, r2
 800fde6:	009b      	lsls	r3, r3, #2
 800fde8:	440b      	add	r3, r1
 800fdea:	330a      	adds	r3, #10
 800fdec:	89fa      	ldrh	r2, [r7, #14]
 800fdee:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fdf0:	89fb      	ldrh	r3, [r7, #14]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d108      	bne.n	800fe08 <dec_lock+0x6c>
 800fdf6:	490a      	ldr	r1, [pc, #40]	; (800fe20 <dec_lock+0x84>)
 800fdf8:	687a      	ldr	r2, [r7, #4]
 800fdfa:	4613      	mov	r3, r2
 800fdfc:	005b      	lsls	r3, r3, #1
 800fdfe:	4413      	add	r3, r2
 800fe00:	009b      	lsls	r3, r3, #2
 800fe02:	440b      	add	r3, r1
 800fe04:	2200      	movs	r2, #0
 800fe06:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	737b      	strb	r3, [r7, #13]
 800fe0c:	e001      	b.n	800fe12 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fe0e:	2302      	movs	r3, #2
 800fe10:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fe12:	7b7b      	ldrb	r3, [r7, #13]
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3714      	adds	r7, #20
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bc80      	pop	{r7}
 800fe1c:	4770      	bx	lr
 800fe1e:	bf00      	nop
 800fe20:	20000ccc 	.word	0x20000ccc

0800fe24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fe24:	b480      	push	{r7}
 800fe26:	b085      	sub	sp, #20
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	60fb      	str	r3, [r7, #12]
 800fe30:	e016      	b.n	800fe60 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fe32:	4910      	ldr	r1, [pc, #64]	; (800fe74 <clear_lock+0x50>)
 800fe34:	68fa      	ldr	r2, [r7, #12]
 800fe36:	4613      	mov	r3, r2
 800fe38:	005b      	lsls	r3, r3, #1
 800fe3a:	4413      	add	r3, r2
 800fe3c:	009b      	lsls	r3, r3, #2
 800fe3e:	440b      	add	r3, r1
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d108      	bne.n	800fe5a <clear_lock+0x36>
 800fe48:	490a      	ldr	r1, [pc, #40]	; (800fe74 <clear_lock+0x50>)
 800fe4a:	68fa      	ldr	r2, [r7, #12]
 800fe4c:	4613      	mov	r3, r2
 800fe4e:	005b      	lsls	r3, r3, #1
 800fe50:	4413      	add	r3, r2
 800fe52:	009b      	lsls	r3, r3, #2
 800fe54:	440b      	add	r3, r1
 800fe56:	2200      	movs	r2, #0
 800fe58:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	3301      	adds	r3, #1
 800fe5e:	60fb      	str	r3, [r7, #12]
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	2b01      	cmp	r3, #1
 800fe64:	d9e5      	bls.n	800fe32 <clear_lock+0xe>
	}
}
 800fe66:	bf00      	nop
 800fe68:	bf00      	nop
 800fe6a:	3714      	adds	r7, #20
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bc80      	pop	{r7}
 800fe70:	4770      	bx	lr
 800fe72:	bf00      	nop
 800fe74:	20000ccc 	.word	0x20000ccc

0800fe78 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b086      	sub	sp, #24
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fe80:	2300      	movs	r3, #0
 800fe82:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d038      	beq.n	800ff00 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800fe94:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800fe9c:	6879      	ldr	r1, [r7, #4]
 800fe9e:	2301      	movs	r3, #1
 800fea0:	697a      	ldr	r2, [r7, #20]
 800fea2:	f7ff fd51 	bl	800f948 <disk_write>
 800fea6:	4603      	mov	r3, r0
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d002      	beq.n	800feb2 <sync_window+0x3a>
			res = FR_DISK_ERR;
 800feac:	2301      	movs	r3, #1
 800feae:	73fb      	strb	r3, [r7, #15]
 800feb0:	e026      	b.n	800ff00 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2200      	movs	r2, #0
 800feb6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800fec0:	697a      	ldr	r2, [r7, #20]
 800fec2:	1ad2      	subs	r2, r2, r3
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800feca:	429a      	cmp	r2, r3
 800fecc:	d218      	bcs.n	800ff00 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800fed4:	613b      	str	r3, [r7, #16]
 800fed6:	e010      	b.n	800fefa <sync_window+0x82>
					wsect += fs->fsize;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fede:	697a      	ldr	r2, [r7, #20]
 800fee0:	4413      	add	r3, r2
 800fee2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800feea:	6879      	ldr	r1, [r7, #4]
 800feec:	2301      	movs	r3, #1
 800feee:	697a      	ldr	r2, [r7, #20]
 800fef0:	f7ff fd2a 	bl	800f948 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	3b01      	subs	r3, #1
 800fef8:	613b      	str	r3, [r7, #16]
 800fefa:	693b      	ldr	r3, [r7, #16]
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d8eb      	bhi.n	800fed8 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800ff00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	3718      	adds	r7, #24
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}

0800ff0a <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800ff0a:	b580      	push	{r7, lr}
 800ff0c:	b084      	sub	sp, #16
 800ff0e:	af00      	add	r7, sp, #0
 800ff10:	6078      	str	r0, [r7, #4]
 800ff12:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ff14:	2300      	movs	r3, #0
 800ff16:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800ff1e:	683a      	ldr	r2, [r7, #0]
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d01b      	beq.n	800ff5c <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f7ff ffa7 	bl	800fe78 <sync_window>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ff2e:	7bfb      	ldrb	r3, [r7, #15]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d113      	bne.n	800ff5c <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800ff3a:	6879      	ldr	r1, [r7, #4]
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	683a      	ldr	r2, [r7, #0]
 800ff40:	f7ff fce2 	bl	800f908 <disk_read>
 800ff44:	4603      	mov	r3, r0
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d004      	beq.n	800ff54 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ff4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ff4e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ff50:	2301      	movs	r3, #1
 800ff52:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	683a      	ldr	r2, [r7, #0]
 800ff58:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 800ff5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff5e:	4618      	mov	r0, r3
 800ff60:	3710      	adds	r7, #16
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}

0800ff66 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800ff66:	b580      	push	{r7, lr}
 800ff68:	b084      	sub	sp, #16
 800ff6a:	af00      	add	r7, sp, #0
 800ff6c:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f7ff ff82 	bl	800fe78 <sync_window>
 800ff74:	4603      	mov	r3, r0
 800ff76:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ff78:	7bfb      	ldrb	r3, [r7, #15]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	f040 809b 	bne.w	80100b6 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ff86:	2b03      	cmp	r3, #3
 800ff88:	f040 8088 	bne.w	801009c <sync_fs+0x136>
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	f040 8082 	bne.w	801009c <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ff9e:	2100      	movs	r1, #0
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f7ff fd2d 	bl	800fa00 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2255      	movs	r2, #85	; 0x55
 800ffaa:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	22aa      	movs	r2, #170	; 0xaa
 800ffb2:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2252      	movs	r2, #82	; 0x52
 800ffba:	701a      	strb	r2, [r3, #0]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2252      	movs	r2, #82	; 0x52
 800ffc0:	705a      	strb	r2, [r3, #1]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2261      	movs	r2, #97	; 0x61
 800ffc6:	709a      	strb	r2, [r3, #2]
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2241      	movs	r2, #65	; 0x41
 800ffcc:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2272      	movs	r2, #114	; 0x72
 800ffd2:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	2272      	movs	r2, #114	; 0x72
 800ffda:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2241      	movs	r2, #65	; 0x41
 800ffe2:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2261      	movs	r2, #97	; 0x61
 800ffea:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fff4:	b2da      	uxtb	r2, r3
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010002:	b29b      	uxth	r3, r3
 8010004:	0a1b      	lsrs	r3, r3, #8
 8010006:	b29b      	uxth	r3, r3
 8010008:	b2da      	uxtb	r2, r3
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010016:	0c1b      	lsrs	r3, r3, #16
 8010018:	b2da      	uxtb	r2, r3
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010026:	0e1b      	lsrs	r3, r3, #24
 8010028:	b2da      	uxtb	r2, r3
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010036:	b2da      	uxtb	r2, r3
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010044:	b29b      	uxth	r3, r3
 8010046:	0a1b      	lsrs	r3, r3, #8
 8010048:	b29b      	uxth	r3, r3
 801004a:	b2da      	uxtb	r2, r3
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010058:	0c1b      	lsrs	r3, r3, #16
 801005a:	b2da      	uxtb	r2, r3
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010068:	0e1b      	lsrs	r3, r3, #24
 801006a:	b2da      	uxtb	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8010078:	1c5a      	adds	r2, r3, #1
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010086:	6879      	ldr	r1, [r7, #4]
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 801008e:	2301      	movs	r3, #1
 8010090:	f7ff fc5a 	bl	800f948 <disk_write>
			fs->fsi_flag = 0;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2200      	movs	r2, #0
 8010098:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80100a2:	2200      	movs	r2, #0
 80100a4:	2100      	movs	r1, #0
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7ff fc6e 	bl	800f988 <disk_ioctl>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d001      	beq.n	80100b6 <sync_fs+0x150>
			res = FR_DISK_ERR;
 80100b2:	2301      	movs	r3, #1
 80100b4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80100b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3710      	adds	r7, #16
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b083      	sub	sp, #12
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	3b02      	subs	r3, #2
 80100ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80100d6:	3b02      	subs	r3, #2
 80100d8:	683a      	ldr	r2, [r7, #0]
 80100da:	429a      	cmp	r2, r3
 80100dc:	d301      	bcc.n	80100e2 <clust2sect+0x22>
 80100de:	2300      	movs	r3, #0
 80100e0:	e00a      	b.n	80100f8 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80100e8:	461a      	mov	r2, r3
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	fb03 f202 	mul.w	r2, r3, r2
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80100f6:	4413      	add	r3, r2
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	370c      	adds	r7, #12
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bc80      	pop	{r7}
 8010100:	4770      	bx	lr

08010102 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8010102:	b580      	push	{r7, lr}
 8010104:	b086      	sub	sp, #24
 8010106:	af00      	add	r7, sp, #0
 8010108:	6078      	str	r0, [r7, #4]
 801010a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	2b01      	cmp	r3, #1
 8010110:	d905      	bls.n	801011e <get_fat+0x1c>
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010118:	683a      	ldr	r2, [r7, #0]
 801011a:	429a      	cmp	r2, r3
 801011c:	d302      	bcc.n	8010124 <get_fat+0x22>
		val = 1;	/* Internal error */
 801011e:	2301      	movs	r3, #1
 8010120:	617b      	str	r3, [r7, #20]
 8010122:	e0a3      	b.n	801026c <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010124:	f04f 33ff 	mov.w	r3, #4294967295
 8010128:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010130:	2b03      	cmp	r3, #3
 8010132:	d068      	beq.n	8010206 <get_fat+0x104>
 8010134:	2b03      	cmp	r3, #3
 8010136:	f300 808f 	bgt.w	8010258 <get_fat+0x156>
 801013a:	2b01      	cmp	r3, #1
 801013c:	d002      	beq.n	8010144 <get_fat+0x42>
 801013e:	2b02      	cmp	r3, #2
 8010140:	d040      	beq.n	80101c4 <get_fat+0xc2>
 8010142:	e089      	b.n	8010258 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	60fb      	str	r3, [r7, #12]
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	085b      	lsrs	r3, r3, #1
 801014c:	68fa      	ldr	r2, [r7, #12]
 801014e:	4413      	add	r3, r2
 8010150:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	0a5b      	lsrs	r3, r3, #9
 801015c:	4413      	add	r3, r2
 801015e:	4619      	mov	r1, r3
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f7ff fed2 	bl	800ff0a <move_window>
 8010166:	4603      	mov	r3, r0
 8010168:	2b00      	cmp	r3, #0
 801016a:	d178      	bne.n	801025e <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	1c5a      	adds	r2, r3, #1
 8010170:	60fa      	str	r2, [r7, #12]
 8010172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010176:	687a      	ldr	r2, [r7, #4]
 8010178:	5cd3      	ldrb	r3, [r2, r3]
 801017a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	0a5b      	lsrs	r3, r3, #9
 8010186:	4413      	add	r3, r2
 8010188:	4619      	mov	r1, r3
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f7ff febd 	bl	800ff0a <move_window>
 8010190:	4603      	mov	r3, r0
 8010192:	2b00      	cmp	r3, #0
 8010194:	d165      	bne.n	8010262 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801019c:	687a      	ldr	r2, [r7, #4]
 801019e:	5cd3      	ldrb	r3, [r2, r3]
 80101a0:	021b      	lsls	r3, r3, #8
 80101a2:	461a      	mov	r2, r3
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	4313      	orrs	r3, r2
 80101a8:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	f003 0301 	and.w	r3, r3, #1
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d002      	beq.n	80101ba <get_fat+0xb8>
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	091b      	lsrs	r3, r3, #4
 80101b8:	e002      	b.n	80101c0 <get_fat+0xbe>
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80101c0:	617b      	str	r3, [r7, #20]
			break;
 80101c2:	e053      	b.n	801026c <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	0a1b      	lsrs	r3, r3, #8
 80101ce:	4413      	add	r3, r2
 80101d0:	4619      	mov	r1, r3
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f7ff fe99 	bl	800ff0a <move_window>
 80101d8:	4603      	mov	r3, r0
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d143      	bne.n	8010266 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	005b      	lsls	r3, r3, #1
 80101e2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	4413      	add	r3, r2
 80101ea:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80101ec:	693b      	ldr	r3, [r7, #16]
 80101ee:	3301      	adds	r3, #1
 80101f0:	781b      	ldrb	r3, [r3, #0]
 80101f2:	021b      	lsls	r3, r3, #8
 80101f4:	b21a      	sxth	r2, r3
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	b21b      	sxth	r3, r3
 80101fc:	4313      	orrs	r3, r2
 80101fe:	b21b      	sxth	r3, r3
 8010200:	b29b      	uxth	r3, r3
 8010202:	617b      	str	r3, [r7, #20]
			break;
 8010204:	e032      	b.n	801026c <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	09db      	lsrs	r3, r3, #7
 8010210:	4413      	add	r3, r2
 8010212:	4619      	mov	r1, r3
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f7ff fe78 	bl	800ff0a <move_window>
 801021a:	4603      	mov	r3, r0
 801021c:	2b00      	cmp	r3, #0
 801021e:	d124      	bne.n	801026a <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	009b      	lsls	r3, r3, #2
 8010224:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	4413      	add	r3, r2
 801022c:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 801022e:	693b      	ldr	r3, [r7, #16]
 8010230:	3303      	adds	r3, #3
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	061a      	lsls	r2, r3, #24
 8010236:	693b      	ldr	r3, [r7, #16]
 8010238:	3302      	adds	r3, #2
 801023a:	781b      	ldrb	r3, [r3, #0]
 801023c:	041b      	lsls	r3, r3, #16
 801023e:	4313      	orrs	r3, r2
 8010240:	693a      	ldr	r2, [r7, #16]
 8010242:	3201      	adds	r2, #1
 8010244:	7812      	ldrb	r2, [r2, #0]
 8010246:	0212      	lsls	r2, r2, #8
 8010248:	4313      	orrs	r3, r2
 801024a:	693a      	ldr	r2, [r7, #16]
 801024c:	7812      	ldrb	r2, [r2, #0]
 801024e:	4313      	orrs	r3, r2
 8010250:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010254:	617b      	str	r3, [r7, #20]
			break;
 8010256:	e009      	b.n	801026c <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8010258:	2301      	movs	r3, #1
 801025a:	617b      	str	r3, [r7, #20]
 801025c:	e006      	b.n	801026c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801025e:	bf00      	nop
 8010260:	e004      	b.n	801026c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010262:	bf00      	nop
 8010264:	e002      	b.n	801026c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010266:	bf00      	nop
 8010268:	e000      	b.n	801026c <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801026a:	bf00      	nop
		}
	}

	return val;
 801026c:	697b      	ldr	r3, [r7, #20]
}
 801026e:	4618      	mov	r0, r3
 8010270:	3718      	adds	r7, #24
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}

08010276 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8010276:	b580      	push	{r7, lr}
 8010278:	b088      	sub	sp, #32
 801027a:	af00      	add	r7, sp, #0
 801027c:	60f8      	str	r0, [r7, #12]
 801027e:	60b9      	str	r1, [r7, #8]
 8010280:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	2b01      	cmp	r3, #1
 8010286:	d905      	bls.n	8010294 <put_fat+0x1e>
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801028e:	68ba      	ldr	r2, [r7, #8]
 8010290:	429a      	cmp	r2, r3
 8010292:	d302      	bcc.n	801029a <put_fat+0x24>
		res = FR_INT_ERR;
 8010294:	2302      	movs	r3, #2
 8010296:	77fb      	strb	r3, [r7, #31]
 8010298:	e0f6      	b.n	8010488 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80102a0:	2b03      	cmp	r3, #3
 80102a2:	f000 809e 	beq.w	80103e2 <put_fat+0x16c>
 80102a6:	2b03      	cmp	r3, #3
 80102a8:	f300 80e4 	bgt.w	8010474 <put_fat+0x1fe>
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	d002      	beq.n	80102b6 <put_fat+0x40>
 80102b0:	2b02      	cmp	r3, #2
 80102b2:	d06f      	beq.n	8010394 <put_fat+0x11e>
 80102b4:	e0de      	b.n	8010474 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	617b      	str	r3, [r7, #20]
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	085b      	lsrs	r3, r3, #1
 80102be:	697a      	ldr	r2, [r7, #20]
 80102c0:	4413      	add	r3, r2
 80102c2:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	0a5b      	lsrs	r3, r3, #9
 80102ce:	4413      	add	r3, r2
 80102d0:	4619      	mov	r1, r3
 80102d2:	68f8      	ldr	r0, [r7, #12]
 80102d4:	f7ff fe19 	bl	800ff0a <move_window>
 80102d8:	4603      	mov	r3, r0
 80102da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80102dc:	7ffb      	ldrb	r3, [r7, #31]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	f040 80cb 	bne.w	801047a <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	1c5a      	adds	r2, r3, #1
 80102e8:	617a      	str	r2, [r7, #20]
 80102ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102ee:	68fa      	ldr	r2, [r7, #12]
 80102f0:	4413      	add	r3, r2
 80102f2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	f003 0301 	and.w	r3, r3, #1
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d00d      	beq.n	801031a <put_fat+0xa4>
 80102fe:	69bb      	ldr	r3, [r7, #24]
 8010300:	781b      	ldrb	r3, [r3, #0]
 8010302:	b25b      	sxtb	r3, r3
 8010304:	f003 030f 	and.w	r3, r3, #15
 8010308:	b25a      	sxtb	r2, r3
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	b2db      	uxtb	r3, r3
 801030e:	011b      	lsls	r3, r3, #4
 8010310:	b25b      	sxtb	r3, r3
 8010312:	4313      	orrs	r3, r2
 8010314:	b25b      	sxtb	r3, r3
 8010316:	b2db      	uxtb	r3, r3
 8010318:	e001      	b.n	801031e <put_fat+0xa8>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	b2db      	uxtb	r3, r3
 801031e:	69ba      	ldr	r2, [r7, #24]
 8010320:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	2201      	movs	r2, #1
 8010326:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	0a5b      	lsrs	r3, r3, #9
 8010334:	4413      	add	r3, r2
 8010336:	4619      	mov	r1, r3
 8010338:	68f8      	ldr	r0, [r7, #12]
 801033a:	f7ff fde6 	bl	800ff0a <move_window>
 801033e:	4603      	mov	r3, r0
 8010340:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010342:	7ffb      	ldrb	r3, [r7, #31]
 8010344:	2b00      	cmp	r3, #0
 8010346:	f040 809a 	bne.w	801047e <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010350:	68fa      	ldr	r2, [r7, #12]
 8010352:	4413      	add	r3, r2
 8010354:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	f003 0301 	and.w	r3, r3, #1
 801035c:	2b00      	cmp	r3, #0
 801035e:	d003      	beq.n	8010368 <put_fat+0xf2>
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	091b      	lsrs	r3, r3, #4
 8010364:	b2db      	uxtb	r3, r3
 8010366:	e00e      	b.n	8010386 <put_fat+0x110>
 8010368:	69bb      	ldr	r3, [r7, #24]
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	b25b      	sxtb	r3, r3
 801036e:	f023 030f 	bic.w	r3, r3, #15
 8010372:	b25a      	sxtb	r2, r3
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	0a1b      	lsrs	r3, r3, #8
 8010378:	b25b      	sxtb	r3, r3
 801037a:	f003 030f 	and.w	r3, r3, #15
 801037e:	b25b      	sxtb	r3, r3
 8010380:	4313      	orrs	r3, r2
 8010382:	b25b      	sxtb	r3, r3
 8010384:	b2db      	uxtb	r3, r3
 8010386:	69ba      	ldr	r2, [r7, #24]
 8010388:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	2201      	movs	r2, #1
 801038e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8010392:	e079      	b.n	8010488 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	0a1b      	lsrs	r3, r3, #8
 801039e:	4413      	add	r3, r2
 80103a0:	4619      	mov	r1, r3
 80103a2:	68f8      	ldr	r0, [r7, #12]
 80103a4:	f7ff fdb1 	bl	800ff0a <move_window>
 80103a8:	4603      	mov	r3, r0
 80103aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80103ac:	7ffb      	ldrb	r3, [r7, #31]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d167      	bne.n	8010482 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	005b      	lsls	r3, r3, #1
 80103b6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80103ba:	68fa      	ldr	r2, [r7, #12]
 80103bc:	4413      	add	r3, r2
 80103be:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	b2da      	uxtb	r2, r3
 80103c4:	69bb      	ldr	r3, [r7, #24]
 80103c6:	701a      	strb	r2, [r3, #0]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	b29b      	uxth	r3, r3
 80103cc:	0a1b      	lsrs	r3, r3, #8
 80103ce:	b29a      	uxth	r2, r3
 80103d0:	69bb      	ldr	r3, [r7, #24]
 80103d2:	3301      	adds	r3, #1
 80103d4:	b2d2      	uxtb	r2, r2
 80103d6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	2201      	movs	r2, #1
 80103dc:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80103e0:	e052      	b.n	8010488 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	09db      	lsrs	r3, r3, #7
 80103ec:	4413      	add	r3, r2
 80103ee:	4619      	mov	r1, r3
 80103f0:	68f8      	ldr	r0, [r7, #12]
 80103f2:	f7ff fd8a 	bl	800ff0a <move_window>
 80103f6:	4603      	mov	r3, r0
 80103f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80103fa:	7ffb      	ldrb	r3, [r7, #31]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d142      	bne.n	8010486 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8010400:	68bb      	ldr	r3, [r7, #8]
 8010402:	009b      	lsls	r3, r3, #2
 8010404:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010408:	68fa      	ldr	r2, [r7, #12]
 801040a:	4413      	add	r3, r2
 801040c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 801040e:	69bb      	ldr	r3, [r7, #24]
 8010410:	3303      	adds	r3, #3
 8010412:	781b      	ldrb	r3, [r3, #0]
 8010414:	061a      	lsls	r2, r3, #24
 8010416:	69bb      	ldr	r3, [r7, #24]
 8010418:	3302      	adds	r3, #2
 801041a:	781b      	ldrb	r3, [r3, #0]
 801041c:	041b      	lsls	r3, r3, #16
 801041e:	4313      	orrs	r3, r2
 8010420:	69ba      	ldr	r2, [r7, #24]
 8010422:	3201      	adds	r2, #1
 8010424:	7812      	ldrb	r2, [r2, #0]
 8010426:	0212      	lsls	r2, r2, #8
 8010428:	4313      	orrs	r3, r2
 801042a:	69ba      	ldr	r2, [r7, #24]
 801042c:	7812      	ldrb	r2, [r2, #0]
 801042e:	4313      	orrs	r3, r2
 8010430:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010434:	687a      	ldr	r2, [r7, #4]
 8010436:	4313      	orrs	r3, r2
 8010438:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	b2da      	uxtb	r2, r3
 801043e:	69bb      	ldr	r3, [r7, #24]
 8010440:	701a      	strb	r2, [r3, #0]
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	b29b      	uxth	r3, r3
 8010446:	0a1b      	lsrs	r3, r3, #8
 8010448:	b29a      	uxth	r2, r3
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	3301      	adds	r3, #1
 801044e:	b2d2      	uxtb	r2, r2
 8010450:	701a      	strb	r2, [r3, #0]
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	0c1a      	lsrs	r2, r3, #16
 8010456:	69bb      	ldr	r3, [r7, #24]
 8010458:	3302      	adds	r3, #2
 801045a:	b2d2      	uxtb	r2, r2
 801045c:	701a      	strb	r2, [r3, #0]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	0e1a      	lsrs	r2, r3, #24
 8010462:	69bb      	ldr	r3, [r7, #24]
 8010464:	3303      	adds	r3, #3
 8010466:	b2d2      	uxtb	r2, r2
 8010468:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	2201      	movs	r2, #1
 801046e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8010472:	e009      	b.n	8010488 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8010474:	2302      	movs	r3, #2
 8010476:	77fb      	strb	r3, [r7, #31]
 8010478:	e006      	b.n	8010488 <put_fat+0x212>
			if (res != FR_OK) break;
 801047a:	bf00      	nop
 801047c:	e004      	b.n	8010488 <put_fat+0x212>
			if (res != FR_OK) break;
 801047e:	bf00      	nop
 8010480:	e002      	b.n	8010488 <put_fat+0x212>
			if (res != FR_OK) break;
 8010482:	bf00      	nop
 8010484:	e000      	b.n	8010488 <put_fat+0x212>
			if (res != FR_OK) break;
 8010486:	bf00      	nop
		}
	}

	return res;
 8010488:	7ffb      	ldrb	r3, [r7, #31]
}
 801048a:	4618      	mov	r0, r3
 801048c:	3720      	adds	r7, #32
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}

08010492 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8010492:	b580      	push	{r7, lr}
 8010494:	b084      	sub	sp, #16
 8010496:	af00      	add	r7, sp, #0
 8010498:	6078      	str	r0, [r7, #4]
 801049a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	2b01      	cmp	r3, #1
 80104a0:	d905      	bls.n	80104ae <remove_chain+0x1c>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80104a8:	683a      	ldr	r2, [r7, #0]
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d302      	bcc.n	80104b4 <remove_chain+0x22>
		res = FR_INT_ERR;
 80104ae:	2302      	movs	r3, #2
 80104b0:	73fb      	strb	r3, [r7, #15]
 80104b2:	e043      	b.n	801053c <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80104b4:	2300      	movs	r3, #0
 80104b6:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80104b8:	e036      	b.n	8010528 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80104ba:	6839      	ldr	r1, [r7, #0]
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f7ff fe20 	bl	8010102 <get_fat>
 80104c2:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d035      	beq.n	8010536 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	d102      	bne.n	80104d6 <remove_chain+0x44>
 80104d0:	2302      	movs	r3, #2
 80104d2:	73fb      	strb	r3, [r7, #15]
 80104d4:	e032      	b.n	801053c <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104dc:	d102      	bne.n	80104e4 <remove_chain+0x52>
 80104de:	2301      	movs	r3, #1
 80104e0:	73fb      	strb	r3, [r7, #15]
 80104e2:	e02b      	b.n	801053c <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80104e4:	2200      	movs	r2, #0
 80104e6:	6839      	ldr	r1, [r7, #0]
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f7ff fec4 	bl	8010276 <put_fat>
 80104ee:	4603      	mov	r3, r0
 80104f0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80104f2:	7bfb      	ldrb	r3, [r7, #15]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d120      	bne.n	801053a <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80104fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010502:	d00f      	beq.n	8010524 <remove_chain+0x92>
				fs->free_clust++;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801050a:	1c5a      	adds	r2, r3, #1
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8010518:	f043 0301 	orr.w	r3, r3, #1
 801051c:	b2da      	uxtb	r2, r3
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801052e:	683a      	ldr	r2, [r7, #0]
 8010530:	429a      	cmp	r2, r3
 8010532:	d3c2      	bcc.n	80104ba <remove_chain+0x28>
 8010534:	e002      	b.n	801053c <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8010536:	bf00      	nop
 8010538:	e000      	b.n	801053c <remove_chain+0xaa>
			if (res != FR_OK) break;
 801053a:	bf00      	nop
		}
	}

	return res;
 801053c:	7bfb      	ldrb	r3, [r7, #15]
}
 801053e:	4618      	mov	r0, r3
 8010540:	3710      	adds	r7, #16
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}

08010546 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8010546:	b580      	push	{r7, lr}
 8010548:	b086      	sub	sp, #24
 801054a:	af00      	add	r7, sp, #0
 801054c:	6078      	str	r0, [r7, #4]
 801054e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d10f      	bne.n	8010576 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801055c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d005      	beq.n	8010570 <create_chain+0x2a>
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801056a:	693a      	ldr	r2, [r7, #16]
 801056c:	429a      	cmp	r2, r3
 801056e:	d31c      	bcc.n	80105aa <create_chain+0x64>
 8010570:	2301      	movs	r3, #1
 8010572:	613b      	str	r3, [r7, #16]
 8010574:	e019      	b.n	80105aa <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8010576:	6839      	ldr	r1, [r7, #0]
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f7ff fdc2 	bl	8010102 <get_fat>
 801057e:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	2b01      	cmp	r3, #1
 8010584:	d801      	bhi.n	801058a <create_chain+0x44>
 8010586:	2301      	movs	r3, #1
 8010588:	e076      	b.n	8010678 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010590:	d101      	bne.n	8010596 <create_chain+0x50>
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	e070      	b.n	8010678 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801059c:	68ba      	ldr	r2, [r7, #8]
 801059e:	429a      	cmp	r2, r3
 80105a0:	d201      	bcs.n	80105a6 <create_chain+0x60>
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	e068      	b.n	8010678 <create_chain+0x132>
		scl = clst;
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	3301      	adds	r3, #1
 80105b2:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80105ba:	697a      	ldr	r2, [r7, #20]
 80105bc:	429a      	cmp	r2, r3
 80105be:	d307      	bcc.n	80105d0 <create_chain+0x8a>
			ncl = 2;
 80105c0:	2302      	movs	r3, #2
 80105c2:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80105c4:	697a      	ldr	r2, [r7, #20]
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d901      	bls.n	80105d0 <create_chain+0x8a>
 80105cc:	2300      	movs	r3, #0
 80105ce:	e053      	b.n	8010678 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80105d0:	6979      	ldr	r1, [r7, #20]
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f7ff fd95 	bl	8010102 <get_fat>
 80105d8:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d00e      	beq.n	80105fe <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105e6:	d002      	beq.n	80105ee <create_chain+0xa8>
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	2b01      	cmp	r3, #1
 80105ec:	d101      	bne.n	80105f2 <create_chain+0xac>
			return cs;
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	e042      	b.n	8010678 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 80105f2:	697a      	ldr	r2, [r7, #20]
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	429a      	cmp	r2, r3
 80105f8:	d1d9      	bne.n	80105ae <create_chain+0x68>
 80105fa:	2300      	movs	r3, #0
 80105fc:	e03c      	b.n	8010678 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 80105fe:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8010600:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8010604:	6979      	ldr	r1, [r7, #20]
 8010606:	6878      	ldr	r0, [r7, #4]
 8010608:	f7ff fe35 	bl	8010276 <put_fat>
 801060c:	4603      	mov	r3, r0
 801060e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8010610:	7bfb      	ldrb	r3, [r7, #15]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d109      	bne.n	801062a <create_chain+0xe4>
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d006      	beq.n	801062a <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 801061c:	697a      	ldr	r2, [r7, #20]
 801061e:	6839      	ldr	r1, [r7, #0]
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f7ff fe28 	bl	8010276 <put_fat>
 8010626:	4603      	mov	r3, r0
 8010628:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 801062a:	7bfb      	ldrb	r3, [r7, #15]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d11a      	bne.n	8010666 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	697a      	ldr	r2, [r7, #20]
 8010634:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801063e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010642:	d018      	beq.n	8010676 <create_chain+0x130>
			fs->free_clust--;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801064a:	1e5a      	subs	r2, r3, #1
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8010658:	f043 0301 	orr.w	r3, r3, #1
 801065c:	b2da      	uxtb	r2, r3
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8010664:	e007      	b.n	8010676 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8010666:	7bfb      	ldrb	r3, [r7, #15]
 8010668:	2b01      	cmp	r3, #1
 801066a:	d102      	bne.n	8010672 <create_chain+0x12c>
 801066c:	f04f 33ff 	mov.w	r3, #4294967295
 8010670:	e000      	b.n	8010674 <create_chain+0x12e>
 8010672:	2301      	movs	r3, #1
 8010674:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8010676:	697b      	ldr	r3, [r7, #20]
}
 8010678:	4618      	mov	r0, r3
 801067a:	3718      	adds	r7, #24
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}

08010680 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8010680:	b480      	push	{r7}
 8010682:	b087      	sub	sp, #28
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8010690:	3304      	adds	r3, #4
 8010692:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	0a5b      	lsrs	r3, r3, #9
 8010698:	687a      	ldr	r2, [r7, #4]
 801069a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 801069e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80106a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80106a6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	1d1a      	adds	r2, r3, #4
 80106ac:	613a      	str	r2, [r7, #16]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d101      	bne.n	80106bc <clmt_clust+0x3c>
 80106b8:	2300      	movs	r3, #0
 80106ba:	e010      	b.n	80106de <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80106bc:	697a      	ldr	r2, [r7, #20]
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d307      	bcc.n	80106d4 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80106c4:	697a      	ldr	r2, [r7, #20]
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	1ad3      	subs	r3, r2, r3
 80106ca:	617b      	str	r3, [r7, #20]
 80106cc:	693b      	ldr	r3, [r7, #16]
 80106ce:	3304      	adds	r3, #4
 80106d0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80106d2:	e7e9      	b.n	80106a8 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80106d4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	681a      	ldr	r2, [r3, #0]
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	4413      	add	r3, r2
}
 80106de:	4618      	mov	r0, r3
 80106e0:	371c      	adds	r7, #28
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bc80      	pop	{r7}
 80106e6:	4770      	bx	lr

080106e8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b086      	sub	sp, #24
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	b29a      	uxth	r2, r3
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010702:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	2b01      	cmp	r3, #1
 8010708:	d007      	beq.n	801071a <dir_sdi+0x32>
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010710:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010714:	697a      	ldr	r2, [r7, #20]
 8010716:	429a      	cmp	r2, r3
 8010718:	d301      	bcc.n	801071e <dir_sdi+0x36>
		return FR_INT_ERR;
 801071a:	2302      	movs	r3, #2
 801071c:	e074      	b.n	8010808 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d10c      	bne.n	801073e <dir_sdi+0x56>
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801072a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801072e:	2b03      	cmp	r3, #3
 8010730:	d105      	bne.n	801073e <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010738:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 801073c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801073e:	697b      	ldr	r3, [r7, #20]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d111      	bne.n	8010768 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801074a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 801074e:	461a      	mov	r2, r3
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	4293      	cmp	r3, r2
 8010754:	d301      	bcc.n	801075a <dir_sdi+0x72>
			return FR_INT_ERR;
 8010756:	2302      	movs	r3, #2
 8010758:	e056      	b.n	8010808 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010760:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8010764:	613b      	str	r3, [r7, #16]
 8010766:	e032      	b.n	80107ce <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801076e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010772:	011b      	lsls	r3, r3, #4
 8010774:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8010776:	e01e      	b.n	80107b6 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801077e:	6979      	ldr	r1, [r7, #20]
 8010780:	4618      	mov	r0, r3
 8010782:	f7ff fcbe 	bl	8010102 <get_fat>
 8010786:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801078e:	d101      	bne.n	8010794 <dir_sdi+0xac>
 8010790:	2301      	movs	r3, #1
 8010792:	e039      	b.n	8010808 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8010794:	697b      	ldr	r3, [r7, #20]
 8010796:	2b01      	cmp	r3, #1
 8010798:	d907      	bls.n	80107aa <dir_sdi+0xc2>
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80107a0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80107a4:	697a      	ldr	r2, [r7, #20]
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d301      	bcc.n	80107ae <dir_sdi+0xc6>
				return FR_INT_ERR;
 80107aa:	2302      	movs	r3, #2
 80107ac:	e02c      	b.n	8010808 <dir_sdi+0x120>
			idx -= ic;
 80107ae:	683a      	ldr	r2, [r7, #0]
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	1ad3      	subs	r3, r2, r3
 80107b4:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80107b6:	683a      	ldr	r2, [r7, #0]
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	429a      	cmp	r2, r3
 80107bc:	d2dc      	bcs.n	8010778 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80107c4:	6979      	ldr	r1, [r7, #20]
 80107c6:	4618      	mov	r0, r3
 80107c8:	f7ff fc7a 	bl	80100c0 <clust2sect>
 80107cc:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	697a      	ldr	r2, [r7, #20]
 80107d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80107d6:	693b      	ldr	r3, [r7, #16]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d101      	bne.n	80107e0 <dir_sdi+0xf8>
 80107dc:	2302      	movs	r3, #2
 80107de:	e013      	b.n	8010808 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	091a      	lsrs	r2, r3, #4
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	441a      	add	r2, r3
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80107f4:	461a      	mov	r2, r3
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	f003 030f 	and.w	r3, r3, #15
 80107fc:	015b      	lsls	r3, r3, #5
 80107fe:	441a      	add	r2, r3
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8010806:	2300      	movs	r3, #0
}
 8010808:	4618      	mov	r0, r3
 801080a:	3718      	adds	r7, #24
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}

08010810 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010810:	b590      	push	{r4, r7, lr}
 8010812:	b087      	sub	sp, #28
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8010820:	3301      	adds	r3, #1
 8010822:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	b29b      	uxth	r3, r3
 8010828:	2b00      	cmp	r3, #0
 801082a:	d004      	beq.n	8010836 <dir_next+0x26>
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010832:	2b00      	cmp	r3, #0
 8010834:	d101      	bne.n	801083a <dir_next+0x2a>
		return FR_NO_FILE;
 8010836:	2304      	movs	r3, #4
 8010838:	e0dd      	b.n	80109f6 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	f003 030f 	and.w	r3, r3, #15
 8010840:	2b00      	cmp	r3, #0
 8010842:	f040 80c6 	bne.w	80109d2 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801084c:	1c5a      	adds	r2, r3, #1
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801085a:	2b00      	cmp	r3, #0
 801085c:	d10b      	bne.n	8010876 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010864:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8010868:	461a      	mov	r2, r3
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	4293      	cmp	r3, r2
 801086e:	f0c0 80b0 	bcc.w	80109d2 <dir_next+0x1c2>
				return FR_NO_FILE;
 8010872:	2304      	movs	r3, #4
 8010874:	e0bf      	b.n	80109f6 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	091b      	lsrs	r3, r3, #4
 801087a:	687a      	ldr	r2, [r7, #4]
 801087c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8010880:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8010884:	3a01      	subs	r2, #1
 8010886:	4013      	ands	r3, r2
 8010888:	2b00      	cmp	r3, #0
 801088a:	f040 80a2 	bne.w	80109d2 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801089a:	4619      	mov	r1, r3
 801089c:	4610      	mov	r0, r2
 801089e:	f7ff fc30 	bl	8010102 <get_fat>
 80108a2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	2b01      	cmp	r3, #1
 80108a8:	d801      	bhi.n	80108ae <dir_next+0x9e>
 80108aa:	2302      	movs	r3, #2
 80108ac:	e0a3      	b.n	80109f6 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108b4:	d101      	bne.n	80108ba <dir_next+0xaa>
 80108b6:	2301      	movs	r3, #1
 80108b8:	e09d      	b.n	80109f6 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80108c0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80108c4:	697a      	ldr	r2, [r7, #20]
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d374      	bcc.n	80109b4 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d101      	bne.n	80108d4 <dir_next+0xc4>
 80108d0:	2304      	movs	r3, #4
 80108d2:	e090      	b.n	80109f6 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80108e0:	4619      	mov	r1, r3
 80108e2:	4610      	mov	r0, r2
 80108e4:	f7ff fe2f 	bl	8010546 <create_chain>
 80108e8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d101      	bne.n	80108f4 <dir_next+0xe4>
 80108f0:	2307      	movs	r3, #7
 80108f2:	e080      	b.n	80109f6 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	2b01      	cmp	r3, #1
 80108f8:	d101      	bne.n	80108fe <dir_next+0xee>
 80108fa:	2302      	movs	r3, #2
 80108fc:	e07b      	b.n	80109f6 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010904:	d101      	bne.n	801090a <dir_next+0xfa>
 8010906:	2301      	movs	r3, #1
 8010908:	e075      	b.n	80109f6 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010910:	4618      	mov	r0, r3
 8010912:	f7ff fab1 	bl	800fe78 <sync_window>
 8010916:	4603      	mov	r3, r0
 8010918:	2b00      	cmp	r3, #0
 801091a:	d001      	beq.n	8010920 <dir_next+0x110>
 801091c:	2301      	movs	r3, #1
 801091e:	e06a      	b.n	80109f6 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010926:	f44f 7200 	mov.w	r2, #512	; 0x200
 801092a:	2100      	movs	r1, #0
 801092c:	4618      	mov	r0, r3
 801092e:	f7ff f867 	bl	800fa00 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 801093e:	6979      	ldr	r1, [r7, #20]
 8010940:	4610      	mov	r0, r2
 8010942:	f7ff fbbd 	bl	80100c0 <clust2sect>
 8010946:	4603      	mov	r3, r0
 8010948:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 801094c:	2300      	movs	r3, #0
 801094e:	613b      	str	r3, [r7, #16]
 8010950:	e01b      	b.n	801098a <dir_next+0x17a>
						dp->fs->wflag = 1;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010958:	2201      	movs	r2, #1
 801095a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010964:	4618      	mov	r0, r3
 8010966:	f7ff fa87 	bl	800fe78 <sync_window>
 801096a:	4603      	mov	r3, r0
 801096c:	2b00      	cmp	r3, #0
 801096e:	d001      	beq.n	8010974 <dir_next+0x164>
 8010970:	2301      	movs	r3, #1
 8010972:	e040      	b.n	80109f6 <dir_next+0x1e6>
						dp->fs->winsect++;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801097a:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 801097e:	3201      	adds	r2, #1
 8010980:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8010984:	693b      	ldr	r3, [r7, #16]
 8010986:	3301      	adds	r3, #1
 8010988:	613b      	str	r3, [r7, #16]
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010990:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010994:	461a      	mov	r2, r3
 8010996:	693b      	ldr	r3, [r7, #16]
 8010998:	4293      	cmp	r3, r2
 801099a:	d3da      	bcc.n	8010952 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80109a2:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80109ac:	693a      	ldr	r2, [r7, #16]
 80109ae:	1a8a      	subs	r2, r1, r2
 80109b0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	697a      	ldr	r2, [r7, #20]
 80109b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80109c2:	6979      	ldr	r1, [r7, #20]
 80109c4:	4618      	mov	r0, r3
 80109c6:	f7ff fb7b 	bl	80100c0 <clust2sect>
 80109ca:	4602      	mov	r2, r0
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	b29a      	uxth	r2, r3
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80109e2:	461a      	mov	r2, r3
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f003 030f 	and.w	r3, r3, #15
 80109ea:	015b      	lsls	r3, r3, #5
 80109ec:	441a      	add	r2, r3
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80109f4:	2300      	movs	r3, #0
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	371c      	adds	r7, #28
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd90      	pop	{r4, r7, pc}

080109fe <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80109fe:	b580      	push	{r7, lr}
 8010a00:	b084      	sub	sp, #16
 8010a02:	af00      	add	r7, sp, #0
 8010a04:	6078      	str	r0, [r7, #4]
 8010a06:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8010a08:	2100      	movs	r1, #0
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	f7ff fe6c 	bl	80106e8 <dir_sdi>
 8010a10:	4603      	mov	r3, r0
 8010a12:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010a14:	7bfb      	ldrb	r3, [r7, #15]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d131      	bne.n	8010a7e <dir_alloc+0x80>
		n = 0;
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010a2a:	4619      	mov	r1, r3
 8010a2c:	4610      	mov	r0, r2
 8010a2e:	f7ff fa6c 	bl	800ff0a <move_window>
 8010a32:	4603      	mov	r3, r0
 8010a34:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8010a36:	7bfb      	ldrb	r3, [r7, #15]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d11f      	bne.n	8010a7c <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010a42:	781b      	ldrb	r3, [r3, #0]
 8010a44:	2be5      	cmp	r3, #229	; 0xe5
 8010a46:	d005      	beq.n	8010a54 <dir_alloc+0x56>
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d107      	bne.n	8010a64 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	3301      	adds	r3, #1
 8010a58:	60bb      	str	r3, [r7, #8]
 8010a5a:	68ba      	ldr	r2, [r7, #8]
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	d102      	bne.n	8010a68 <dir_alloc+0x6a>
 8010a62:	e00c      	b.n	8010a7e <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010a64:	2300      	movs	r3, #0
 8010a66:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8010a68:	2101      	movs	r1, #1
 8010a6a:	6878      	ldr	r0, [r7, #4]
 8010a6c:	f7ff fed0 	bl	8010810 <dir_next>
 8010a70:	4603      	mov	r3, r0
 8010a72:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8010a74:	7bfb      	ldrb	r3, [r7, #15]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d0d1      	beq.n	8010a1e <dir_alloc+0x20>
 8010a7a:	e000      	b.n	8010a7e <dir_alloc+0x80>
			if (res != FR_OK) break;
 8010a7c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010a7e:	7bfb      	ldrb	r3, [r7, #15]
 8010a80:	2b04      	cmp	r3, #4
 8010a82:	d101      	bne.n	8010a88 <dir_alloc+0x8a>
 8010a84:	2307      	movs	r3, #7
 8010a86:	73fb      	strb	r3, [r7, #15]
	return res;
 8010a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3710      	adds	r7, #16
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8010a92:	b480      	push	{r7}
 8010a94:	b085      	sub	sp, #20
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
 8010a9a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	331b      	adds	r3, #27
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	021b      	lsls	r3, r3, #8
 8010aa4:	b21a      	sxth	r2, r3
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	331a      	adds	r3, #26
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	b21b      	sxth	r3, r3
 8010aae:	4313      	orrs	r3, r2
 8010ab0:	b21b      	sxth	r3, r3
 8010ab2:	b29b      	uxth	r3, r3
 8010ab4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010abc:	2b03      	cmp	r3, #3
 8010abe:	d10f      	bne.n	8010ae0 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	3315      	adds	r3, #21
 8010ac4:	781b      	ldrb	r3, [r3, #0]
 8010ac6:	021b      	lsls	r3, r3, #8
 8010ac8:	b21a      	sxth	r2, r3
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	3314      	adds	r3, #20
 8010ace:	781b      	ldrb	r3, [r3, #0]
 8010ad0:	b21b      	sxth	r3, r3
 8010ad2:	4313      	orrs	r3, r2
 8010ad4:	b21b      	sxth	r3, r3
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	041b      	lsls	r3, r3, #16
 8010ada:	68fa      	ldr	r2, [r7, #12]
 8010adc:	4313      	orrs	r3, r2
 8010ade:	60fb      	str	r3, [r7, #12]

	return cl;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3714      	adds	r7, #20
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bc80      	pop	{r7}
 8010aea:	4770      	bx	lr

08010aec <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8010aec:	b480      	push	{r7}
 8010aee:	b083      	sub	sp, #12
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
 8010af4:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	331a      	adds	r3, #26
 8010afa:	683a      	ldr	r2, [r7, #0]
 8010afc:	b2d2      	uxtb	r2, r2
 8010afe:	701a      	strb	r2, [r3, #0]
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	b29b      	uxth	r3, r3
 8010b04:	0a1b      	lsrs	r3, r3, #8
 8010b06:	b29a      	uxth	r2, r3
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	331b      	adds	r3, #27
 8010b0c:	b2d2      	uxtb	r2, r2
 8010b0e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	0c1a      	lsrs	r2, r3, #16
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	3314      	adds	r3, #20
 8010b18:	b2d2      	uxtb	r2, r2
 8010b1a:	701a      	strb	r2, [r3, #0]
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	0c1b      	lsrs	r3, r3, #16
 8010b20:	b29b      	uxth	r3, r3
 8010b22:	0a1b      	lsrs	r3, r3, #8
 8010b24:	b29a      	uxth	r2, r3
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	3315      	adds	r3, #21
 8010b2a:	b2d2      	uxtb	r2, r2
 8010b2c:	701a      	strb	r2, [r3, #0]
}
 8010b2e:	bf00      	nop
 8010b30:	370c      	adds	r7, #12
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bc80      	pop	{r7}
 8010b36:	4770      	bx	lr

08010b38 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b086      	sub	sp, #24
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010b40:	2100      	movs	r1, #0
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f7ff fdd0 	bl	80106e8 <dir_sdi>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010b4c:	7dfb      	ldrb	r3, [r7, #23]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d001      	beq.n	8010b56 <dir_find+0x1e>
 8010b52:	7dfb      	ldrb	r3, [r7, #23]
 8010b54:	e03b      	b.n	8010bce <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010b62:	4619      	mov	r1, r3
 8010b64:	4610      	mov	r0, r2
 8010b66:	f7ff f9d0 	bl	800ff0a <move_window>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010b6e:	7dfb      	ldrb	r3, [r7, #23]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d128      	bne.n	8010bc6 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b7a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8010b7c:	693b      	ldr	r3, [r7, #16]
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010b82:	7bfb      	ldrb	r3, [r7, #15]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d102      	bne.n	8010b8e <dir_find+0x56>
 8010b88:	2304      	movs	r3, #4
 8010b8a:	75fb      	strb	r3, [r7, #23]
 8010b8c:	e01e      	b.n	8010bcc <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8010b8e:	693b      	ldr	r3, [r7, #16]
 8010b90:	330b      	adds	r3, #11
 8010b92:	781b      	ldrb	r3, [r3, #0]
 8010b94:	f003 0308 	and.w	r3, r3, #8
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d10a      	bne.n	8010bb2 <dir_find+0x7a>
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010ba2:	220b      	movs	r2, #11
 8010ba4:	4619      	mov	r1, r3
 8010ba6:	6938      	ldr	r0, [r7, #16]
 8010ba8:	f7fe ff44 	bl	800fa34 <mem_cmp>
 8010bac:	4603      	mov	r3, r0
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d00b      	beq.n	8010bca <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8010bb2:	2100      	movs	r1, #0
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f7ff fe2b 	bl	8010810 <dir_next>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010bbe:	7dfb      	ldrb	r3, [r7, #23]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d0c8      	beq.n	8010b56 <dir_find+0x1e>
 8010bc4:	e002      	b.n	8010bcc <dir_find+0x94>
		if (res != FR_OK) break;
 8010bc6:	bf00      	nop
 8010bc8:	e000      	b.n	8010bcc <dir_find+0x94>
			break;
 8010bca:	bf00      	nop

	return res;
 8010bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3718      	adds	r7, #24
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}

08010bd6 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010bd6:	b580      	push	{r7, lr}
 8010bd8:	b084      	sub	sp, #16
 8010bda:	af00      	add	r7, sp, #0
 8010bdc:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010bde:	2101      	movs	r1, #1
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f7ff ff0c 	bl	80109fe <dir_alloc>
 8010be6:	4603      	mov	r3, r0
 8010be8:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8010bea:	7bfb      	ldrb	r3, [r7, #15]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d126      	bne.n	8010c3e <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010bfc:	4619      	mov	r1, r3
 8010bfe:	4610      	mov	r0, r2
 8010c00:	f7ff f983 	bl	800ff0a <move_window>
 8010c04:	4603      	mov	r3, r0
 8010c06:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010c08:	7bfb      	ldrb	r3, [r7, #15]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d117      	bne.n	8010c3e <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010c14:	2220      	movs	r2, #32
 8010c16:	2100      	movs	r1, #0
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7fe fef1 	bl	800fa00 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010c2a:	220b      	movs	r2, #11
 8010c2c:	4619      	mov	r1, r3
 8010c2e:	f7fe fec9 	bl	800f9c4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010c38:	2201      	movs	r2, #1
 8010c3a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8010c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	3710      	adds	r7, #16
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}

08010c48 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b088      	sub	sp, #32
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
 8010c50:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	60fb      	str	r3, [r7, #12]
 8010c58:	e002      	b.n	8010c60 <create_name+0x18>
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	3301      	adds	r3, #1
 8010c5e:	60fb      	str	r3, [r7, #12]
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	781b      	ldrb	r3, [r3, #0]
 8010c64:	2b2f      	cmp	r3, #47	; 0x2f
 8010c66:	d0f8      	beq.n	8010c5a <create_name+0x12>
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	2b5c      	cmp	r3, #92	; 0x5c
 8010c6e:	d0f4      	beq.n	8010c5a <create_name+0x12>
	sfn = dp->fn;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010c76:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010c78:	220b      	movs	r2, #11
 8010c7a:	2120      	movs	r1, #32
 8010c7c:	68b8      	ldr	r0, [r7, #8]
 8010c7e:	f7fe febf 	bl	800fa00 <mem_set>
	si = i = b = 0; ni = 8;
 8010c82:	2300      	movs	r3, #0
 8010c84:	77fb      	strb	r3, [r7, #31]
 8010c86:	2300      	movs	r3, #0
 8010c88:	613b      	str	r3, [r7, #16]
 8010c8a:	693b      	ldr	r3, [r7, #16]
 8010c8c:	617b      	str	r3, [r7, #20]
 8010c8e:	2308      	movs	r3, #8
 8010c90:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	1c5a      	adds	r2, r3, #1
 8010c96:	617a      	str	r2, [r7, #20]
 8010c98:	68fa      	ldr	r2, [r7, #12]
 8010c9a:	4413      	add	r3, r2
 8010c9c:	781b      	ldrb	r3, [r3, #0]
 8010c9e:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8010ca0:	7fbb      	ldrb	r3, [r7, #30]
 8010ca2:	2b20      	cmp	r3, #32
 8010ca4:	d953      	bls.n	8010d4e <create_name+0x106>
 8010ca6:	7fbb      	ldrb	r3, [r7, #30]
 8010ca8:	2b2f      	cmp	r3, #47	; 0x2f
 8010caa:	d050      	beq.n	8010d4e <create_name+0x106>
 8010cac:	7fbb      	ldrb	r3, [r7, #30]
 8010cae:	2b5c      	cmp	r3, #92	; 0x5c
 8010cb0:	d04d      	beq.n	8010d4e <create_name+0x106>
		if (c == '.' || i >= ni) {
 8010cb2:	7fbb      	ldrb	r3, [r7, #30]
 8010cb4:	2b2e      	cmp	r3, #46	; 0x2e
 8010cb6:	d003      	beq.n	8010cc0 <create_name+0x78>
 8010cb8:	693a      	ldr	r2, [r7, #16]
 8010cba:	69bb      	ldr	r3, [r7, #24]
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	d30f      	bcc.n	8010ce0 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8010cc0:	69bb      	ldr	r3, [r7, #24]
 8010cc2:	2b08      	cmp	r3, #8
 8010cc4:	d102      	bne.n	8010ccc <create_name+0x84>
 8010cc6:	7fbb      	ldrb	r3, [r7, #30]
 8010cc8:	2b2e      	cmp	r3, #46	; 0x2e
 8010cca:	d001      	beq.n	8010cd0 <create_name+0x88>
 8010ccc:	2306      	movs	r3, #6
 8010cce:	e073      	b.n	8010db8 <create_name+0x170>
			i = 8; ni = 11;
 8010cd0:	2308      	movs	r3, #8
 8010cd2:	613b      	str	r3, [r7, #16]
 8010cd4:	230b      	movs	r3, #11
 8010cd6:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8010cd8:	7ffb      	ldrb	r3, [r7, #31]
 8010cda:	009b      	lsls	r3, r3, #2
 8010cdc:	77fb      	strb	r3, [r7, #31]
 8010cde:	e035      	b.n	8010d4c <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010ce0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	da08      	bge.n	8010cfa <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8010ce8:	7ffb      	ldrb	r3, [r7, #31]
 8010cea:	f043 0303 	orr.w	r3, r3, #3
 8010cee:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010cf0:	7fbb      	ldrb	r3, [r7, #30]
 8010cf2:	3b80      	subs	r3, #128	; 0x80
 8010cf4:	4a32      	ldr	r2, [pc, #200]	; (8010dc0 <create_name+0x178>)
 8010cf6:	5cd3      	ldrb	r3, [r2, r3]
 8010cf8:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8010cfa:	7fbb      	ldrb	r3, [r7, #30]
 8010cfc:	4619      	mov	r1, r3
 8010cfe:	4831      	ldr	r0, [pc, #196]	; (8010dc4 <create_name+0x17c>)
 8010d00:	f7fe febe 	bl	800fa80 <chk_chr>
 8010d04:	4603      	mov	r3, r0
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d001      	beq.n	8010d0e <create_name+0xc6>
				return FR_INVALID_NAME;
 8010d0a:	2306      	movs	r3, #6
 8010d0c:	e054      	b.n	8010db8 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8010d0e:	7fbb      	ldrb	r3, [r7, #30]
 8010d10:	2b40      	cmp	r3, #64	; 0x40
 8010d12:	d907      	bls.n	8010d24 <create_name+0xdc>
 8010d14:	7fbb      	ldrb	r3, [r7, #30]
 8010d16:	2b5a      	cmp	r3, #90	; 0x5a
 8010d18:	d804      	bhi.n	8010d24 <create_name+0xdc>
				b |= 2;
 8010d1a:	7ffb      	ldrb	r3, [r7, #31]
 8010d1c:	f043 0302 	orr.w	r3, r3, #2
 8010d20:	77fb      	strb	r3, [r7, #31]
 8010d22:	e00c      	b.n	8010d3e <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8010d24:	7fbb      	ldrb	r3, [r7, #30]
 8010d26:	2b60      	cmp	r3, #96	; 0x60
 8010d28:	d909      	bls.n	8010d3e <create_name+0xf6>
 8010d2a:	7fbb      	ldrb	r3, [r7, #30]
 8010d2c:	2b7a      	cmp	r3, #122	; 0x7a
 8010d2e:	d806      	bhi.n	8010d3e <create_name+0xf6>
					b |= 1; c -= 0x20;
 8010d30:	7ffb      	ldrb	r3, [r7, #31]
 8010d32:	f043 0301 	orr.w	r3, r3, #1
 8010d36:	77fb      	strb	r3, [r7, #31]
 8010d38:	7fbb      	ldrb	r3, [r7, #30]
 8010d3a:	3b20      	subs	r3, #32
 8010d3c:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8010d3e:	693b      	ldr	r3, [r7, #16]
 8010d40:	1c5a      	adds	r2, r3, #1
 8010d42:	613a      	str	r2, [r7, #16]
 8010d44:	68ba      	ldr	r2, [r7, #8]
 8010d46:	4413      	add	r3, r2
 8010d48:	7fba      	ldrb	r2, [r7, #30]
 8010d4a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010d4c:	e7a1      	b.n	8010c92 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010d4e:	68fa      	ldr	r2, [r7, #12]
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	441a      	add	r2, r3
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8010d58:	7fbb      	ldrb	r3, [r7, #30]
 8010d5a:	2b20      	cmp	r3, #32
 8010d5c:	d801      	bhi.n	8010d62 <create_name+0x11a>
 8010d5e:	2304      	movs	r3, #4
 8010d60:	e000      	b.n	8010d64 <create_name+0x11c>
 8010d62:	2300      	movs	r3, #0
 8010d64:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8010d66:	693b      	ldr	r3, [r7, #16]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d101      	bne.n	8010d70 <create_name+0x128>
 8010d6c:	2306      	movs	r3, #6
 8010d6e:	e023      	b.n	8010db8 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	781b      	ldrb	r3, [r3, #0]
 8010d74:	2be5      	cmp	r3, #229	; 0xe5
 8010d76:	d102      	bne.n	8010d7e <create_name+0x136>
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	2205      	movs	r2, #5
 8010d7c:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8010d7e:	69bb      	ldr	r3, [r7, #24]
 8010d80:	2b08      	cmp	r3, #8
 8010d82:	d102      	bne.n	8010d8a <create_name+0x142>
 8010d84:	7ffb      	ldrb	r3, [r7, #31]
 8010d86:	009b      	lsls	r3, r3, #2
 8010d88:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8010d8a:	7ffb      	ldrb	r3, [r7, #31]
 8010d8c:	f003 0303 	and.w	r3, r3, #3
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	d103      	bne.n	8010d9c <create_name+0x154>
 8010d94:	7fbb      	ldrb	r3, [r7, #30]
 8010d96:	f043 0310 	orr.w	r3, r3, #16
 8010d9a:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8010d9c:	7ffb      	ldrb	r3, [r7, #31]
 8010d9e:	f003 030c 	and.w	r3, r3, #12
 8010da2:	2b04      	cmp	r3, #4
 8010da4:	d103      	bne.n	8010dae <create_name+0x166>
 8010da6:	7fbb      	ldrb	r3, [r7, #30]
 8010da8:	f043 0308 	orr.w	r3, r3, #8
 8010dac:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8010dae:	68bb      	ldr	r3, [r7, #8]
 8010db0:	330b      	adds	r3, #11
 8010db2:	7fba      	ldrb	r2, [r7, #30]
 8010db4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010db6:	2300      	movs	r3, #0
#endif
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	3720      	adds	r7, #32
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}
 8010dc0:	08030508 	.word	0x08030508
 8010dc4:	0801721c 	.word	0x0801721c

08010dc8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b084      	sub	sp, #16
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
 8010dd0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	781b      	ldrb	r3, [r3, #0]
 8010dd6:	2b2f      	cmp	r3, #47	; 0x2f
 8010dd8:	d003      	beq.n	8010de2 <follow_path+0x1a>
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	781b      	ldrb	r3, [r3, #0]
 8010dde:	2b5c      	cmp	r3, #92	; 0x5c
 8010de0:	d102      	bne.n	8010de8 <follow_path+0x20>
		path++;
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	3301      	adds	r3, #1
 8010de6:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2200      	movs	r2, #0
 8010dec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	781b      	ldrb	r3, [r3, #0]
 8010df4:	2b1f      	cmp	r3, #31
 8010df6:	d80a      	bhi.n	8010e0e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8010df8:	2100      	movs	r1, #0
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f7ff fc74 	bl	80106e8 <dir_sdi>
 8010e00:	4603      	mov	r3, r0
 8010e02:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2200      	movs	r2, #0
 8010e08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8010e0c:	e045      	b.n	8010e9a <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010e0e:	463b      	mov	r3, r7
 8010e10:	4619      	mov	r1, r3
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f7ff ff18 	bl	8010c48 <create_name>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8010e1c:	7bfb      	ldrb	r3, [r7, #15]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d136      	bne.n	8010e90 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f7ff fe88 	bl	8010b38 <dir_find>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010e32:	7adb      	ldrb	r3, [r3, #11]
 8010e34:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8010e36:	7bfb      	ldrb	r3, [r7, #15]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d00a      	beq.n	8010e52 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010e3c:	7bfb      	ldrb	r3, [r7, #15]
 8010e3e:	2b04      	cmp	r3, #4
 8010e40:	d128      	bne.n	8010e94 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010e42:	7bbb      	ldrb	r3, [r7, #14]
 8010e44:	f003 0304 	and.w	r3, r3, #4
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d123      	bne.n	8010e94 <follow_path+0xcc>
 8010e4c:	2305      	movs	r3, #5
 8010e4e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8010e50:	e020      	b.n	8010e94 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010e52:	7bbb      	ldrb	r3, [r7, #14]
 8010e54:	f003 0304 	and.w	r3, r3, #4
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d11d      	bne.n	8010e98 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010e62:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	330b      	adds	r3, #11
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	f003 0310 	and.w	r3, r3, #16
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d102      	bne.n	8010e78 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8010e72:	2305      	movs	r3, #5
 8010e74:	73fb      	strb	r3, [r7, #15]
 8010e76:	e010      	b.n	8010e9a <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010e7e:	68b9      	ldr	r1, [r7, #8]
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7ff fe06 	bl	8010a92 <ld_clust>
 8010e86:	4602      	mov	r2, r0
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010e8e:	e7be      	b.n	8010e0e <follow_path+0x46>
			if (res != FR_OK) break;
 8010e90:	bf00      	nop
 8010e92:	e002      	b.n	8010e9a <follow_path+0xd2>
				break;
 8010e94:	bf00      	nop
 8010e96:	e000      	b.n	8010e9a <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010e98:	bf00      	nop
		}
	}

	return res;
 8010e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	3710      	adds	r7, #16
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}

08010ea4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010ea4:	b480      	push	{r7}
 8010ea6:	b087      	sub	sp, #28
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010eac:	f04f 33ff 	mov.w	r3, #4294967295
 8010eb0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d031      	beq.n	8010f1e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	617b      	str	r3, [r7, #20]
 8010ec0:	e002      	b.n	8010ec8 <get_ldnumber+0x24>
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	617b      	str	r3, [r7, #20]
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	781b      	ldrb	r3, [r3, #0]
 8010ecc:	2b20      	cmp	r3, #32
 8010ece:	d903      	bls.n	8010ed8 <get_ldnumber+0x34>
 8010ed0:	697b      	ldr	r3, [r7, #20]
 8010ed2:	781b      	ldrb	r3, [r3, #0]
 8010ed4:	2b3a      	cmp	r3, #58	; 0x3a
 8010ed6:	d1f4      	bne.n	8010ec2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010ed8:	697b      	ldr	r3, [r7, #20]
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	2b3a      	cmp	r3, #58	; 0x3a
 8010ede:	d11c      	bne.n	8010f1a <get_ldnumber+0x76>
			tp = *path;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	1c5a      	adds	r2, r3, #1
 8010eea:	60fa      	str	r2, [r7, #12]
 8010eec:	781b      	ldrb	r3, [r3, #0]
 8010eee:	3b30      	subs	r3, #48	; 0x30
 8010ef0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	2b09      	cmp	r3, #9
 8010ef6:	d80e      	bhi.n	8010f16 <get_ldnumber+0x72>
 8010ef8:	68fa      	ldr	r2, [r7, #12]
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d10a      	bne.n	8010f16 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d107      	bne.n	8010f16 <get_ldnumber+0x72>
					vol = (int)i;
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	617b      	str	r3, [r7, #20]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	697a      	ldr	r2, [r7, #20]
 8010f14:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010f16:	693b      	ldr	r3, [r7, #16]
 8010f18:	e002      	b.n	8010f20 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010f1e:	693b      	ldr	r3, [r7, #16]
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	371c      	adds	r7, #28
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bc80      	pop	{r7}
 8010f28:	4770      	bx	lr
	...

08010f2c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b082      	sub	sp, #8
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2200      	movs	r2, #0
 8010f3a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f04f 32ff 	mov.w	r2, #4294967295
 8010f44:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8010f48:	6839      	ldr	r1, [r7, #0]
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f7fe ffdd 	bl	800ff0a <move_window>
 8010f50:	4603      	mov	r3, r0
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d001      	beq.n	8010f5a <check_fs+0x2e>
		return 3;
 8010f56:	2303      	movs	r3, #3
 8010f58:	e04a      	b.n	8010ff0 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010f60:	3301      	adds	r3, #1
 8010f62:	781b      	ldrb	r3, [r3, #0]
 8010f64:	021b      	lsls	r3, r3, #8
 8010f66:	b21a      	sxth	r2, r3
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8010f6e:	b21b      	sxth	r3, r3
 8010f70:	4313      	orrs	r3, r2
 8010f72:	b21b      	sxth	r3, r3
 8010f74:	4a20      	ldr	r2, [pc, #128]	; (8010ff8 <check_fs+0xcc>)
 8010f76:	4293      	cmp	r3, r2
 8010f78:	d001      	beq.n	8010f7e <check_fs+0x52>
		return 2;
 8010f7a:	2302      	movs	r3, #2
 8010f7c:	e038      	b.n	8010ff0 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	3336      	adds	r3, #54	; 0x36
 8010f82:	3303      	adds	r3, #3
 8010f84:	781b      	ldrb	r3, [r3, #0]
 8010f86:	061a      	lsls	r2, r3, #24
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	3336      	adds	r3, #54	; 0x36
 8010f8c:	3302      	adds	r3, #2
 8010f8e:	781b      	ldrb	r3, [r3, #0]
 8010f90:	041b      	lsls	r3, r3, #16
 8010f92:	4313      	orrs	r3, r2
 8010f94:	687a      	ldr	r2, [r7, #4]
 8010f96:	3236      	adds	r2, #54	; 0x36
 8010f98:	3201      	adds	r2, #1
 8010f9a:	7812      	ldrb	r2, [r2, #0]
 8010f9c:	0212      	lsls	r2, r2, #8
 8010f9e:	4313      	orrs	r3, r2
 8010fa0:	687a      	ldr	r2, [r7, #4]
 8010fa2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8010fa6:	4313      	orrs	r3, r2
 8010fa8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010fac:	4a13      	ldr	r2, [pc, #76]	; (8010ffc <check_fs+0xd0>)
 8010fae:	4293      	cmp	r3, r2
 8010fb0:	d101      	bne.n	8010fb6 <check_fs+0x8a>
		return 0;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	e01c      	b.n	8010ff0 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	3352      	adds	r3, #82	; 0x52
 8010fba:	3303      	adds	r3, #3
 8010fbc:	781b      	ldrb	r3, [r3, #0]
 8010fbe:	061a      	lsls	r2, r3, #24
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	3352      	adds	r3, #82	; 0x52
 8010fc4:	3302      	adds	r3, #2
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	041b      	lsls	r3, r3, #16
 8010fca:	4313      	orrs	r3, r2
 8010fcc:	687a      	ldr	r2, [r7, #4]
 8010fce:	3252      	adds	r2, #82	; 0x52
 8010fd0:	3201      	adds	r2, #1
 8010fd2:	7812      	ldrb	r2, [r2, #0]
 8010fd4:	0212      	lsls	r2, r2, #8
 8010fd6:	4313      	orrs	r3, r2
 8010fd8:	687a      	ldr	r2, [r7, #4]
 8010fda:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8010fde:	4313      	orrs	r3, r2
 8010fe0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010fe4:	4a05      	ldr	r2, [pc, #20]	; (8010ffc <check_fs+0xd0>)
 8010fe6:	4293      	cmp	r3, r2
 8010fe8:	d101      	bne.n	8010fee <check_fs+0xc2>
		return 0;
 8010fea:	2300      	movs	r3, #0
 8010fec:	e000      	b.n	8010ff0 <check_fs+0xc4>

	return 1;
 8010fee:	2301      	movs	r3, #1
}
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	3708      	adds	r7, #8
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}
 8010ff8:	ffffaa55 	.word	0xffffaa55
 8010ffc:	00544146 	.word	0x00544146

08011000 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b096      	sub	sp, #88	; 0x58
 8011004:	af00      	add	r7, sp, #0
 8011006:	60f8      	str	r0, [r7, #12]
 8011008:	60b9      	str	r1, [r7, #8]
 801100a:	4613      	mov	r3, r2
 801100c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	2200      	movs	r2, #0
 8011012:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011014:	68b8      	ldr	r0, [r7, #8]
 8011016:	f7ff ff45 	bl	8010ea4 <get_ldnumber>
 801101a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801101c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801101e:	2b00      	cmp	r3, #0
 8011020:	da01      	bge.n	8011026 <find_volume+0x26>
 8011022:	230b      	movs	r3, #11
 8011024:	e2b0      	b.n	8011588 <find_volume+0x588>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011026:	4aa1      	ldr	r2, [pc, #644]	; (80112ac <find_volume+0x2ac>)
 8011028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801102a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801102e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011032:	2b00      	cmp	r3, #0
 8011034:	d101      	bne.n	801103a <find_volume+0x3a>
 8011036:	230c      	movs	r3, #12
 8011038:	e2a6      	b.n	8011588 <find_volume+0x588>

	ENTER_FF(fs);						/* Lock the volume */
 801103a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801103c:	f7fe fd3a 	bl	800fab4 <lock_fs>
 8011040:	4603      	mov	r3, r0
 8011042:	2b00      	cmp	r3, #0
 8011044:	d101      	bne.n	801104a <find_volume+0x4a>
 8011046:	230f      	movs	r3, #15
 8011048:	e29e      	b.n	8011588 <find_volume+0x588>
	*rfs = fs;							/* Return pointer to the file system object */
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801104e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8011050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011052:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011056:	2b00      	cmp	r3, #0
 8011058:	d01b      	beq.n	8011092 <find_volume+0x92>
		stat = disk_status(fs->drv);
 801105a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801105c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8011060:	4618      	mov	r0, r3
 8011062:	f7fe fc11 	bl	800f888 <disk_status>
 8011066:	4603      	mov	r3, r0
 8011068:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801106c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011070:	f003 0301 	and.w	r3, r3, #1
 8011074:	2b00      	cmp	r3, #0
 8011076:	d10c      	bne.n	8011092 <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8011078:	79fb      	ldrb	r3, [r7, #7]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d007      	beq.n	801108e <find_volume+0x8e>
 801107e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011082:	f003 0304 	and.w	r3, r3, #4
 8011086:	2b00      	cmp	r3, #0
 8011088:	d001      	beq.n	801108e <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 801108a:	230a      	movs	r3, #10
 801108c:	e27c      	b.n	8011588 <find_volume+0x588>
			return FR_OK;				/* The file system object is valid */
 801108e:	2300      	movs	r3, #0
 8011090:	e27a      	b.n	8011588 <find_volume+0x588>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011094:	2200      	movs	r2, #0
 8011096:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801109a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801109c:	b2da      	uxtb	r2, r3
 801109e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110a0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80110a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80110aa:	4618      	mov	r0, r3
 80110ac:	f7fe fc06 	bl	800f8bc <disk_initialize>
 80110b0:	4603      	mov	r3, r0
 80110b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80110b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80110ba:	f003 0301 	and.w	r3, r3, #1
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d001      	beq.n	80110c6 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80110c2:	2303      	movs	r3, #3
 80110c4:	e260      	b.n	8011588 <find_volume+0x588>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80110c6:	79fb      	ldrb	r3, [r7, #7]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d007      	beq.n	80110dc <find_volume+0xdc>
 80110cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80110d0:	f003 0304 	and.w	r3, r3, #4
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d001      	beq.n	80110dc <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 80110d8:	230a      	movs	r3, #10
 80110da:	e255      	b.n	8011588 <find_volume+0x588>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80110dc:	2300      	movs	r3, #0
 80110de:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80110e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80110e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80110e4:	f7ff ff22 	bl	8010f2c <check_fs>
 80110e8:	4603      	mov	r3, r0
 80110ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80110ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80110f2:	2b01      	cmp	r3, #1
 80110f4:	d153      	bne.n	801119e <find_volume+0x19e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80110f6:	2300      	movs	r3, #0
 80110f8:	643b      	str	r3, [r7, #64]	; 0x40
 80110fa:	e028      	b.n	801114e <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80110fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011100:	011b      	lsls	r3, r3, #4
 8011102:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011106:	4413      	add	r3, r2
 8011108:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 801110a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801110c:	3304      	adds	r3, #4
 801110e:	781b      	ldrb	r3, [r3, #0]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d012      	beq.n	801113a <find_volume+0x13a>
 8011114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011116:	330b      	adds	r3, #11
 8011118:	781b      	ldrb	r3, [r3, #0]
 801111a:	061a      	lsls	r2, r3, #24
 801111c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801111e:	330a      	adds	r3, #10
 8011120:	781b      	ldrb	r3, [r3, #0]
 8011122:	041b      	lsls	r3, r3, #16
 8011124:	4313      	orrs	r3, r2
 8011126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011128:	3209      	adds	r2, #9
 801112a:	7812      	ldrb	r2, [r2, #0]
 801112c:	0212      	lsls	r2, r2, #8
 801112e:	4313      	orrs	r3, r2
 8011130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011132:	3208      	adds	r2, #8
 8011134:	7812      	ldrb	r2, [r2, #0]
 8011136:	431a      	orrs	r2, r3
 8011138:	e000      	b.n	801113c <find_volume+0x13c>
 801113a:	2200      	movs	r2, #0
 801113c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801113e:	009b      	lsls	r3, r3, #2
 8011140:	3358      	adds	r3, #88	; 0x58
 8011142:	443b      	add	r3, r7
 8011144:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8011148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801114a:	3301      	adds	r3, #1
 801114c:	643b      	str	r3, [r7, #64]	; 0x40
 801114e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011150:	2b03      	cmp	r3, #3
 8011152:	d9d3      	bls.n	80110fc <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8011154:	2300      	movs	r3, #0
 8011156:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801115a:	2b00      	cmp	r3, #0
 801115c:	d002      	beq.n	8011164 <find_volume+0x164>
 801115e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011160:	3b01      	subs	r3, #1
 8011162:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8011164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011166:	009b      	lsls	r3, r3, #2
 8011168:	3358      	adds	r3, #88	; 0x58
 801116a:	443b      	add	r3, r7
 801116c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011170:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8011172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011174:	2b00      	cmp	r3, #0
 8011176:	d005      	beq.n	8011184 <find_volume+0x184>
 8011178:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801117a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801117c:	f7ff fed6 	bl	8010f2c <check_fs>
 8011180:	4603      	mov	r3, r0
 8011182:	e000      	b.n	8011186 <find_volume+0x186>
 8011184:	2302      	movs	r3, #2
 8011186:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 801118a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801118e:	2b00      	cmp	r3, #0
 8011190:	d005      	beq.n	801119e <find_volume+0x19e>
 8011192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011194:	3301      	adds	r3, #1
 8011196:	643b      	str	r3, [r7, #64]	; 0x40
 8011198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801119a:	2b03      	cmp	r3, #3
 801119c:	d9e2      	bls.n	8011164 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801119e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80111a2:	2b03      	cmp	r3, #3
 80111a4:	d101      	bne.n	80111aa <find_volume+0x1aa>
 80111a6:	2301      	movs	r3, #1
 80111a8:	e1ee      	b.n	8011588 <find_volume+0x588>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80111aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d001      	beq.n	80111b6 <find_volume+0x1b6>
 80111b2:	230d      	movs	r3, #13
 80111b4:	e1e8      	b.n	8011588 <find_volume+0x588>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80111b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b8:	7b1b      	ldrb	r3, [r3, #12]
 80111ba:	021b      	lsls	r3, r3, #8
 80111bc:	b21a      	sxth	r2, r3
 80111be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c0:	7adb      	ldrb	r3, [r3, #11]
 80111c2:	b21b      	sxth	r3, r3
 80111c4:	4313      	orrs	r3, r2
 80111c6:	b21b      	sxth	r3, r3
 80111c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111cc:	d001      	beq.n	80111d2 <find_volume+0x1d2>
		return FR_NO_FILESYSTEM;
 80111ce:	230d      	movs	r3, #13
 80111d0:	e1da      	b.n	8011588 <find_volume+0x588>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80111d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d4:	7ddb      	ldrb	r3, [r3, #23]
 80111d6:	021b      	lsls	r3, r3, #8
 80111d8:	b21a      	sxth	r2, r3
 80111da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111dc:	7d9b      	ldrb	r3, [r3, #22]
 80111de:	b21b      	sxth	r3, r3
 80111e0:	4313      	orrs	r3, r2
 80111e2:	b21b      	sxth	r3, r3
 80111e4:	b29b      	uxth	r3, r3
 80111e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80111e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d112      	bne.n	8011214 <find_volume+0x214>
 80111ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80111f4:	061a      	lsls	r2, r3, #24
 80111f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80111fc:	041b      	lsls	r3, r3, #16
 80111fe:	4313      	orrs	r3, r2
 8011200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011202:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8011206:	0212      	lsls	r2, r2, #8
 8011208:	4313      	orrs	r3, r2
 801120a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801120c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8011210:	4313      	orrs	r3, r2
 8011212:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8011214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011216:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011218:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 801121c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801121e:	7c1a      	ldrb	r2, [r3, #16]
 8011220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011222:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8011226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011228:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 801122c:	2b01      	cmp	r3, #1
 801122e:	d006      	beq.n	801123e <find_volume+0x23e>
 8011230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011232:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8011236:	2b02      	cmp	r3, #2
 8011238:	d001      	beq.n	801123e <find_volume+0x23e>
		return FR_NO_FILESYSTEM;
 801123a:	230d      	movs	r3, #13
 801123c:	e1a4      	b.n	8011588 <find_volume+0x588>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 801123e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011240:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8011244:	461a      	mov	r2, r3
 8011246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011248:	fb02 f303 	mul.w	r3, r2, r3
 801124c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 801124e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011250:	7b5a      	ldrb	r2, [r3, #13]
 8011252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011254:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8011258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801125a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 801125e:	2b00      	cmp	r3, #0
 8011260:	d00a      	beq.n	8011278 <find_volume+0x278>
 8011262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011264:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011268:	461a      	mov	r2, r3
 801126a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801126c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011270:	3b01      	subs	r3, #1
 8011272:	4013      	ands	r3, r2
 8011274:	2b00      	cmp	r3, #0
 8011276:	d001      	beq.n	801127c <find_volume+0x27c>
		return FR_NO_FILESYSTEM;
 8011278:	230d      	movs	r3, #13
 801127a:	e185      	b.n	8011588 <find_volume+0x588>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 801127c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801127e:	7c9b      	ldrb	r3, [r3, #18]
 8011280:	021b      	lsls	r3, r3, #8
 8011282:	b21a      	sxth	r2, r3
 8011284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011286:	7c5b      	ldrb	r3, [r3, #17]
 8011288:	b21b      	sxth	r3, r3
 801128a:	4313      	orrs	r3, r2
 801128c:	b21b      	sxth	r3, r3
 801128e:	b29a      	uxth	r2, r3
 8011290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011292:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8011296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011298:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 801129c:	f003 030f 	and.w	r3, r3, #15
 80112a0:	b29b      	uxth	r3, r3
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d004      	beq.n	80112b0 <find_volume+0x2b0>
		return FR_NO_FILESYSTEM;
 80112a6:	230d      	movs	r3, #13
 80112a8:	e16e      	b.n	8011588 <find_volume+0x588>
 80112aa:	bf00      	nop
 80112ac:	20000cc4 	.word	0x20000cc4

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80112b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b2:	7d1b      	ldrb	r3, [r3, #20]
 80112b4:	021b      	lsls	r3, r3, #8
 80112b6:	b21a      	sxth	r2, r3
 80112b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ba:	7cdb      	ldrb	r3, [r3, #19]
 80112bc:	b21b      	sxth	r3, r3
 80112be:	4313      	orrs	r3, r2
 80112c0:	b21b      	sxth	r3, r3
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80112c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d112      	bne.n	80112f2 <find_volume+0x2f2>
 80112cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ce:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80112d2:	061a      	lsls	r2, r3, #24
 80112d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80112da:	041b      	lsls	r3, r3, #16
 80112dc:	4313      	orrs	r3, r2
 80112de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112e0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80112e4:	0212      	lsls	r2, r2, #8
 80112e6:	4313      	orrs	r3, r2
 80112e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80112ee:	4313      	orrs	r3, r2
 80112f0:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80112f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f4:	7bdb      	ldrb	r3, [r3, #15]
 80112f6:	021b      	lsls	r3, r3, #8
 80112f8:	b21a      	sxth	r2, r3
 80112fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fc:	7b9b      	ldrb	r3, [r3, #14]
 80112fe:	b21b      	sxth	r3, r3
 8011300:	4313      	orrs	r3, r2
 8011302:	b21b      	sxth	r3, r3
 8011304:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8011306:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011308:	2b00      	cmp	r3, #0
 801130a:	d101      	bne.n	8011310 <find_volume+0x310>
 801130c:	230d      	movs	r3, #13
 801130e:	e13b      	b.n	8011588 <find_volume+0x588>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8011310:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011314:	4413      	add	r3, r2
 8011316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011318:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 801131c:	0912      	lsrs	r2, r2, #4
 801131e:	b292      	uxth	r2, r2
 8011320:	4413      	add	r3, r2
 8011322:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011324:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011328:	429a      	cmp	r2, r3
 801132a:	d201      	bcs.n	8011330 <find_volume+0x330>
 801132c:	230d      	movs	r3, #13
 801132e:	e12b      	b.n	8011588 <find_volume+0x588>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8011330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011334:	1ad3      	subs	r3, r2, r3
 8011336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011338:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 801133c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011340:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8011342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011344:	2b00      	cmp	r3, #0
 8011346:	d101      	bne.n	801134c <find_volume+0x34c>
 8011348:	230d      	movs	r3, #13
 801134a:	e11d      	b.n	8011588 <find_volume+0x588>
	fmt = FS_FAT12;
 801134c:	2301      	movs	r3, #1
 801134e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8011352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011354:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011358:	4293      	cmp	r3, r2
 801135a:	d902      	bls.n	8011362 <find_volume+0x362>
 801135c:	2302      	movs	r3, #2
 801135e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8011362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011364:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011368:	4293      	cmp	r3, r2
 801136a:	d902      	bls.n	8011372 <find_volume+0x372>
 801136c:	2303      	movs	r3, #3
 801136e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8011372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011374:	1c9a      	adds	r2, r3, #2
 8011376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011378:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 801137c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801137e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011380:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8011384:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011388:	441a      	add	r2, r3
 801138a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801138c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 8011390:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011394:	441a      	add	r2, r3
 8011396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011398:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 801139c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113a0:	2b03      	cmp	r3, #3
 80113a2:	d121      	bne.n	80113e8 <find_volume+0x3e8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80113a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d001      	beq.n	80113b2 <find_volume+0x3b2>
 80113ae:	230d      	movs	r3, #13
 80113b0:	e0ea      	b.n	8011588 <find_volume+0x588>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80113b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80113b8:	061a      	lsls	r2, r3, #24
 80113ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113bc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80113c0:	041b      	lsls	r3, r3, #16
 80113c2:	4313      	orrs	r3, r2
 80113c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113c6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80113ca:	0212      	lsls	r2, r2, #8
 80113cc:	4313      	orrs	r3, r2
 80113ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113d0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80113d4:	431a      	orrs	r2, r3
 80113d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113d8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80113dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113de:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80113e2:	009b      	lsls	r3, r3, #2
 80113e4:	647b      	str	r3, [r7, #68]	; 0x44
 80113e6:	e025      	b.n	8011434 <find_volume+0x434>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80113e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ea:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d101      	bne.n	80113f6 <find_volume+0x3f6>
 80113f2:	230d      	movs	r3, #13
 80113f4:	e0c8      	b.n	8011588 <find_volume+0x588>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80113f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113f8:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80113fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113fe:	441a      	add	r2, r3
 8011400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011402:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011406:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801140a:	2b02      	cmp	r3, #2
 801140c:	d104      	bne.n	8011418 <find_volume+0x418>
 801140e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011410:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011414:	005b      	lsls	r3, r3, #1
 8011416:	e00c      	b.n	8011432 <find_volume+0x432>
 8011418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801141a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801141e:	4613      	mov	r3, r2
 8011420:	005b      	lsls	r3, r3, #1
 8011422:	4413      	add	r3, r2
 8011424:	085a      	lsrs	r2, r3, #1
 8011426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011428:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801142c:	f003 0301 	and.w	r3, r3, #1
 8011430:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8011432:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8011434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011436:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 801143a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801143c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011440:	0a5b      	lsrs	r3, r3, #9
 8011442:	429a      	cmp	r2, r3
 8011444:	d201      	bcs.n	801144a <find_volume+0x44a>
		return FR_NO_FILESYSTEM;
 8011446:	230d      	movs	r3, #13
 8011448:	e09e      	b.n	8011588 <find_volume+0x588>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 801144a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801144c:	f04f 32ff 	mov.w	r2, #4294967295
 8011450:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8011454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011456:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801145a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801145c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8011460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011462:	2280      	movs	r2, #128	; 0x80
 8011464:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8011468:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801146c:	2b03      	cmp	r3, #3
 801146e:	d177      	bne.n	8011560 <find_volume+0x560>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8011470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011472:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011476:	021b      	lsls	r3, r3, #8
 8011478:	b21a      	sxth	r2, r3
 801147a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801147c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011480:	b21b      	sxth	r3, r3
 8011482:	4313      	orrs	r3, r2
 8011484:	b21b      	sxth	r3, r3
 8011486:	2b01      	cmp	r3, #1
 8011488:	d16a      	bne.n	8011560 <find_volume+0x560>
		&& move_window(fs, bsect + 1) == FR_OK)
 801148a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801148c:	3301      	adds	r3, #1
 801148e:	4619      	mov	r1, r3
 8011490:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011492:	f7fe fd3a 	bl	800ff0a <move_window>
 8011496:	4603      	mov	r3, r0
 8011498:	2b00      	cmp	r3, #0
 801149a:	d161      	bne.n	8011560 <find_volume+0x560>
	{
		fs->fsi_flag = 0;
 801149c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801149e:	2200      	movs	r2, #0
 80114a0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80114a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a6:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80114aa:	021b      	lsls	r3, r3, #8
 80114ac:	b21a      	sxth	r2, r3
 80114ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80114b4:	b21b      	sxth	r3, r3
 80114b6:	4313      	orrs	r3, r2
 80114b8:	b21b      	sxth	r3, r3
 80114ba:	4a35      	ldr	r2, [pc, #212]	; (8011590 <find_volume+0x590>)
 80114bc:	4293      	cmp	r3, r2
 80114be:	d14f      	bne.n	8011560 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80114c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c2:	78db      	ldrb	r3, [r3, #3]
 80114c4:	061a      	lsls	r2, r3, #24
 80114c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c8:	789b      	ldrb	r3, [r3, #2]
 80114ca:	041b      	lsls	r3, r3, #16
 80114cc:	4313      	orrs	r3, r2
 80114ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114d0:	7852      	ldrb	r2, [r2, #1]
 80114d2:	0212      	lsls	r2, r2, #8
 80114d4:	4313      	orrs	r3, r2
 80114d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114d8:	7812      	ldrb	r2, [r2, #0]
 80114da:	4313      	orrs	r3, r2
 80114dc:	4a2d      	ldr	r2, [pc, #180]	; (8011594 <find_volume+0x594>)
 80114de:	4293      	cmp	r3, r2
 80114e0:	d13e      	bne.n	8011560 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80114e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e4:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80114e8:	061a      	lsls	r2, r3, #24
 80114ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ec:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80114f0:	041b      	lsls	r3, r3, #16
 80114f2:	4313      	orrs	r3, r2
 80114f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80114f6:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80114fa:	0212      	lsls	r2, r2, #8
 80114fc:	4313      	orrs	r3, r2
 80114fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011500:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8011504:	4313      	orrs	r3, r2
 8011506:	4a24      	ldr	r2, [pc, #144]	; (8011598 <find_volume+0x598>)
 8011508:	4293      	cmp	r3, r2
 801150a:	d129      	bne.n	8011560 <find_volume+0x560>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 801150c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801150e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8011512:	061a      	lsls	r2, r3, #24
 8011514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011516:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 801151a:	041b      	lsls	r3, r3, #16
 801151c:	4313      	orrs	r3, r2
 801151e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011520:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8011524:	0212      	lsls	r2, r2, #8
 8011526:	4313      	orrs	r3, r2
 8011528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801152a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 801152e:	431a      	orrs	r2, r3
 8011530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011532:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8011536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011538:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 801153c:	061a      	lsls	r2, r3, #24
 801153e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011540:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8011544:	041b      	lsls	r3, r3, #16
 8011546:	4313      	orrs	r3, r2
 8011548:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801154a:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 801154e:	0212      	lsls	r2, r2, #8
 8011550:	4313      	orrs	r3, r2
 8011552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011554:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8011558:	431a      	orrs	r2, r3
 801155a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801155c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8011560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011562:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011566:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 801156a:	4b0c      	ldr	r3, [pc, #48]	; (801159c <find_volume+0x59c>)
 801156c:	881b      	ldrh	r3, [r3, #0]
 801156e:	3301      	adds	r3, #1
 8011570:	b29a      	uxth	r2, r3
 8011572:	4b0a      	ldr	r3, [pc, #40]	; (801159c <find_volume+0x59c>)
 8011574:	801a      	strh	r2, [r3, #0]
 8011576:	4b09      	ldr	r3, [pc, #36]	; (801159c <find_volume+0x59c>)
 8011578:	881a      	ldrh	r2, [r3, #0]
 801157a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801157c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8011580:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011582:	f7fe fc4f 	bl	800fe24 <clear_lock>
#endif

	return FR_OK;
 8011586:	2300      	movs	r3, #0
}
 8011588:	4618      	mov	r0, r3
 801158a:	3758      	adds	r7, #88	; 0x58
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}
 8011590:	ffffaa55 	.word	0xffffaa55
 8011594:	41615252 	.word	0x41615252
 8011598:	61417272 	.word	0x61417272
 801159c:	20000cc8 	.word	0x20000cc8

080115a0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b084      	sub	sp, #16
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d022      	beq.n	80115f8 <validate+0x58>
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d01d      	beq.n	80115f8 <validate+0x58>
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80115c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d016      	beq.n	80115f8 <validate+0x58>
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80115d0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80115da:	429a      	cmp	r2, r3
 80115dc:	d10c      	bne.n	80115f8 <validate+0x58>
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80115e4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7fe f94d 	bl	800f888 <disk_status>
 80115ee:	4603      	mov	r3, r0
 80115f0:	f003 0301 	and.w	r3, r3, #1
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d001      	beq.n	80115fc <validate+0x5c>
		return FR_INVALID_OBJECT;
 80115f8:	2309      	movs	r3, #9
 80115fa:	e00b      	b.n	8011614 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011602:	4618      	mov	r0, r3
 8011604:	f7fe fa56 	bl	800fab4 <lock_fs>
 8011608:	4603      	mov	r3, r0
 801160a:	2b00      	cmp	r3, #0
 801160c:	d101      	bne.n	8011612 <validate+0x72>
 801160e:	230f      	movs	r3, #15
 8011610:	e000      	b.n	8011614 <validate+0x74>

	return FR_OK;
 8011612:	2300      	movs	r3, #0
}
 8011614:	4618      	mov	r0, r3
 8011616:	3710      	adds	r7, #16
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}

0801161c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8011622:	af00      	add	r7, sp, #0
 8011624:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011628:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801162c:	6018      	str	r0, [r3, #0]
 801162e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011632:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8011636:	6019      	str	r1, [r3, #0]
 8011638:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801163c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011640:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8011642:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011646:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d101      	bne.n	8011654 <f_open+0x38>
 8011650:	2309      	movs	r3, #9
 8011652:	e263      	b.n	8011b1c <f_open+0x500>
	fp->fs = 0;			/* Clear file object */
 8011654:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011658:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	2200      	movs	r2, #0
 8011660:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8011664:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011668:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 801166c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8011670:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8011674:	7812      	ldrb	r2, [r2, #0]
 8011676:	f002 021f 	and.w	r2, r2, #31
 801167a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 801167c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011680:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011684:	781b      	ldrb	r3, [r3, #0]
 8011686:	f023 0301 	bic.w	r3, r3, #1
 801168a:	b2da      	uxtb	r2, r3
 801168c:	f107 0108 	add.w	r1, r7, #8
 8011690:	f107 0320 	add.w	r3, r7, #32
 8011694:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8011698:	4618      	mov	r0, r3
 801169a:	f7ff fcb1 	bl	8011000 <find_volume>
 801169e:	4603      	mov	r3, r0
 80116a0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80116a4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	f040 8229 	bne.w	8011b00 <f_open+0x4e4>
		INIT_BUF(dj);
 80116ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80116b2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80116b6:	f107 0214 	add.w	r2, r7, #20
 80116ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 80116be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80116c2:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80116c6:	681a      	ldr	r2, [r3, #0]
 80116c8:	f107 0320 	add.w	r3, r7, #32
 80116cc:	4611      	mov	r1, r2
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7ff fb7a 	bl	8010dc8 <follow_path>
 80116d4:	4603      	mov	r3, r0
 80116d6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 80116da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80116de:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80116e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80116e6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80116ea:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d11d      	bne.n	801172e <f_open+0x112>
			if (!dir)	/* Default directory itself */
 80116f2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d103      	bne.n	8011702 <f_open+0xe6>
				res = FR_INVALID_NAME;
 80116fa:	2306      	movs	r3, #6
 80116fc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8011700:	e015      	b.n	801172e <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011702:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011706:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	f023 0301 	bic.w	r3, r3, #1
 8011710:	2b00      	cmp	r3, #0
 8011712:	bf14      	ite	ne
 8011714:	2301      	movne	r3, #1
 8011716:	2300      	moveq	r3, #0
 8011718:	b2db      	uxtb	r3, r3
 801171a:	461a      	mov	r2, r3
 801171c:	f107 0320 	add.w	r3, r7, #32
 8011720:	4611      	mov	r1, r2
 8011722:	4618      	mov	r0, r3
 8011724:	f7fe f9f4 	bl	800fb10 <chk_lock>
 8011728:	4603      	mov	r3, r0
 801172a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801172e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011732:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	f003 031c 	and.w	r3, r3, #28
 801173c:	2b00      	cmp	r3, #0
 801173e:	f000 80e6 	beq.w	801190e <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 8011742:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011746:	2b00      	cmp	r3, #0
 8011748:	d027      	beq.n	801179a <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 801174a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801174e:	2b04      	cmp	r3, #4
 8011750:	d10e      	bne.n	8011770 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011752:	f7fe fa49 	bl	800fbe8 <enq_lock>
 8011756:	4603      	mov	r3, r0
 8011758:	2b00      	cmp	r3, #0
 801175a:	d006      	beq.n	801176a <f_open+0x14e>
 801175c:	f107 0320 	add.w	r3, r7, #32
 8011760:	4618      	mov	r0, r3
 8011762:	f7ff fa38 	bl	8010bd6 <dir_register>
 8011766:	4603      	mov	r3, r0
 8011768:	e000      	b.n	801176c <f_open+0x150>
 801176a:	2312      	movs	r3, #18
 801176c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011770:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011774:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011778:	f507 7214 	add.w	r2, r7, #592	; 0x250
 801177c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8011780:	7812      	ldrb	r2, [r2, #0]
 8011782:	f042 0208 	orr.w	r2, r2, #8
 8011786:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8011788:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801178c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011790:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011794:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8011798:	e017      	b.n	80117ca <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801179a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801179e:	330b      	adds	r3, #11
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	f003 0311 	and.w	r3, r3, #17
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d003      	beq.n	80117b2 <f_open+0x196>
					res = FR_DENIED;
 80117aa:	2307      	movs	r3, #7
 80117ac:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80117b0:	e00b      	b.n	80117ca <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80117b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80117b6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80117ba:	781b      	ldrb	r3, [r3, #0]
 80117bc:	f003 0304 	and.w	r3, r3, #4
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d002      	beq.n	80117ca <f_open+0x1ae>
						res = FR_EXIST;
 80117c4:	2308      	movs	r3, #8
 80117c6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80117ca:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	f040 80c1 	bne.w	8011956 <f_open+0x33a>
 80117d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80117d8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80117dc:	781b      	ldrb	r3, [r3, #0]
 80117de:	f003 0308 	and.w	r3, r3, #8
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	f000 80b7 	beq.w	8011956 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 80117e8:	f7fc fcc6 	bl	800e178 <get_fattime>
 80117ec:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 80117f0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80117f4:	330e      	adds	r3, #14
 80117f6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80117fa:	b2d2      	uxtb	r2, r2
 80117fc:	701a      	strb	r2, [r3, #0]
 80117fe:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011802:	b29b      	uxth	r3, r3
 8011804:	0a1b      	lsrs	r3, r3, #8
 8011806:	b29a      	uxth	r2, r3
 8011808:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801180c:	330f      	adds	r3, #15
 801180e:	b2d2      	uxtb	r2, r2
 8011810:	701a      	strb	r2, [r3, #0]
 8011812:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011816:	0c1a      	lsrs	r2, r3, #16
 8011818:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801181c:	3310      	adds	r3, #16
 801181e:	b2d2      	uxtb	r2, r2
 8011820:	701a      	strb	r2, [r3, #0]
 8011822:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011826:	0e1a      	lsrs	r2, r3, #24
 8011828:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801182c:	3311      	adds	r3, #17
 801182e:	b2d2      	uxtb	r2, r2
 8011830:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8011832:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011836:	330b      	adds	r3, #11
 8011838:	2200      	movs	r2, #0
 801183a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 801183c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011840:	331c      	adds	r3, #28
 8011842:	2200      	movs	r2, #0
 8011844:	701a      	strb	r2, [r3, #0]
 8011846:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801184a:	331d      	adds	r3, #29
 801184c:	2200      	movs	r2, #0
 801184e:	701a      	strb	r2, [r3, #0]
 8011850:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011854:	331e      	adds	r3, #30
 8011856:	2200      	movs	r2, #0
 8011858:	701a      	strb	r2, [r3, #0]
 801185a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801185e:	331f      	adds	r3, #31
 8011860:	2200      	movs	r2, #0
 8011862:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8011864:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011868:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801186c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011870:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8011874:	4618      	mov	r0, r3
 8011876:	f7ff f90c 	bl	8010a92 <ld_clust>
 801187a:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 801187e:	2100      	movs	r1, #0
 8011880:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8011884:	f7ff f932 	bl	8010aec <st_clust>
				dj.fs->wflag = 1;
 8011888:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801188c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011890:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011894:	2201      	movs	r2, #1
 8011896:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 801189a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d059      	beq.n	8011956 <f_open+0x33a>
					dw = dj.fs->winsect;
 80118a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80118a6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80118aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80118ae:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80118b2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 80118b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80118ba:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80118be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80118c2:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 80118c6:	4618      	mov	r0, r3
 80118c8:	f7fe fde3 	bl	8010492 <remove_chain>
 80118cc:	4603      	mov	r3, r0
 80118ce:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 80118d2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d13d      	bne.n	8011956 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80118da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80118de:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80118e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80118e6:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80118ea:	3a01      	subs	r2, #1
 80118ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 80118f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80118f4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80118f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80118fc:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8011900:	4618      	mov	r0, r3
 8011902:	f7fe fb02 	bl	800ff0a <move_window>
 8011906:	4603      	mov	r3, r0
 8011908:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 801190c:	e023      	b.n	8011956 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 801190e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011912:	2b00      	cmp	r3, #0
 8011914:	d11f      	bne.n	8011956 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8011916:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801191a:	330b      	adds	r3, #11
 801191c:	781b      	ldrb	r3, [r3, #0]
 801191e:	f003 0310 	and.w	r3, r3, #16
 8011922:	2b00      	cmp	r3, #0
 8011924:	d003      	beq.n	801192e <f_open+0x312>
					res = FR_NO_FILE;
 8011926:	2304      	movs	r3, #4
 8011928:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 801192c:	e013      	b.n	8011956 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 801192e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011932:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011936:	781b      	ldrb	r3, [r3, #0]
 8011938:	f003 0302 	and.w	r3, r3, #2
 801193c:	2b00      	cmp	r3, #0
 801193e:	d00a      	beq.n	8011956 <f_open+0x33a>
 8011940:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011944:	330b      	adds	r3, #11
 8011946:	781b      	ldrb	r3, [r3, #0]
 8011948:	f003 0301 	and.w	r3, r3, #1
 801194c:	2b00      	cmp	r3, #0
 801194e:	d002      	beq.n	8011956 <f_open+0x33a>
						res = FR_DENIED;
 8011950:	2307      	movs	r3, #7
 8011952:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8011956:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801195a:	2b00      	cmp	r3, #0
 801195c:	d153      	bne.n	8011a06 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801195e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011962:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	f003 0308 	and.w	r3, r3, #8
 801196c:	2b00      	cmp	r3, #0
 801196e:	d00b      	beq.n	8011988 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8011970:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011974:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011978:	f507 7214 	add.w	r2, r7, #592	; 0x250
 801197c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8011980:	7812      	ldrb	r2, [r2, #0]
 8011982:	f042 0220 	orr.w	r2, r2, #32
 8011986:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8011988:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801198c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011990:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011994:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8011998:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801199c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 80119a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80119aa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80119b4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80119b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80119bc:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	f023 0301 	bic.w	r3, r3, #1
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	bf14      	ite	ne
 80119ca:	2301      	movne	r3, #1
 80119cc:	2300      	moveq	r3, #0
 80119ce:	b2db      	uxtb	r3, r3
 80119d0:	461a      	mov	r2, r3
 80119d2:	f107 0320 	add.w	r3, r7, #32
 80119d6:	4611      	mov	r1, r2
 80119d8:	4618      	mov	r0, r3
 80119da:	f7fe f929 	bl	800fc30 <inc_lock>
 80119de:	4602      	mov	r2, r0
 80119e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80119e4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80119ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80119f2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d102      	bne.n	8011a06 <f_open+0x3ea>
 8011a00:	2302      	movs	r3, #2
 8011a02:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8011a06:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d178      	bne.n	8011b00 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 8011a0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011a12:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8011a1c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8011a20:	7812      	ldrb	r2, [r2, #0]
 8011a22:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8011a26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011a2a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	2200      	movs	r2, #0
 8011a32:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8011a36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011a3a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011a3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011a42:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7ff f823 	bl	8010a92 <ld_clust>
 8011a4c:	4602      	mov	r2, r0
 8011a4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011a52:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8011a5c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011a60:	331f      	adds	r3, #31
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	061a      	lsls	r2, r3, #24
 8011a66:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011a6a:	331e      	adds	r3, #30
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	041b      	lsls	r3, r3, #16
 8011a70:	4313      	orrs	r3, r2
 8011a72:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8011a76:	321d      	adds	r2, #29
 8011a78:	7812      	ldrb	r2, [r2, #0]
 8011a7a:	0212      	lsls	r2, r2, #8
 8011a7c:	4313      	orrs	r3, r2
 8011a7e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8011a82:	321c      	adds	r2, #28
 8011a84:	7812      	ldrb	r2, [r2, #0]
 8011a86:	431a      	orrs	r2, r3
 8011a88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011a8c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8011a96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011a9a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8011aa6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011aaa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8011ab6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011aba:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8011ac6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011aca:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011ace:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011ad2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011ad6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8011ae0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011ae4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011aee:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8011af2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011af6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8011b00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011b04:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011b08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011b0c:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8011b10:	4611      	mov	r1, r2
 8011b12:	4618      	mov	r0, r3
 8011b14:	f7fd ffdd 	bl	800fad2 <unlock_fs>
 8011b18:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}

08011b26 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011b26:	b580      	push	{r7, lr}
 8011b28:	b08a      	sub	sp, #40	; 0x28
 8011b2a:	af00      	add	r7, sp, #0
 8011b2c:	60f8      	str	r0, [r7, #12]
 8011b2e:	60b9      	str	r1, [r7, #8]
 8011b30:	607a      	str	r2, [r7, #4]
 8011b32:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8011b34:	68bb      	ldr	r3, [r7, #8]
 8011b36:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8011b3e:	68f8      	ldr	r0, [r7, #12]
 8011b40:	f7ff fd2e 	bl	80115a0 <validate>
 8011b44:	4603      	mov	r3, r0
 8011b46:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8011b48:	7dfb      	ldrb	r3, [r7, #23]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d009      	beq.n	8011b62 <f_write+0x3c>
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011b54:	7dfa      	ldrb	r2, [r7, #23]
 8011b56:	4611      	mov	r1, r2
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f7fd ffba 	bl	800fad2 <unlock_fs>
 8011b5e:	7dfb      	ldrb	r3, [r7, #23]
 8011b60:	e1d4      	b.n	8011f0c <f_write+0x3e6>
	if (fp->err)							/* Check error */
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d00d      	beq.n	8011b88 <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8011b78:	4619      	mov	r1, r3
 8011b7a:	4610      	mov	r0, r2
 8011b7c:	f7fd ffa9 	bl	800fad2 <unlock_fs>
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8011b86:	e1c1      	b.n	8011f0c <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011b8e:	f003 0302 	and.w	r3, r3, #2
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d108      	bne.n	8011ba8 <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011b9c:	2107      	movs	r1, #7
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f7fd ff97 	bl	800fad2 <unlock_fs>
 8011ba4:	2307      	movs	r3, #7
 8011ba6:	e1b1      	b.n	8011f0c <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	441a      	add	r2, r3
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011bb8:	429a      	cmp	r2, r3
 8011bba:	f080 8182 	bcs.w	8011ec2 <f_write+0x39c>
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8011bc2:	e17e      	b.n	8011ec2 <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	f040 813e 	bne.w	8011e50 <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011bda:	0a5b      	lsrs	r3, r3, #9
 8011bdc:	b2da      	uxtb	r2, r3
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011be4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011be8:	3b01      	subs	r3, #1
 8011bea:	b2db      	uxtb	r3, r3
 8011bec:	4013      	ands	r3, r2
 8011bee:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8011bf0:	7dbb      	ldrb	r3, [r7, #22]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d15f      	bne.n	8011cb6 <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d10f      	bne.n	8011c20 <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011c06:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8011c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d121      	bne.n	8011c52 <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011c14:	2100      	movs	r1, #0
 8011c16:	4618      	mov	r0, r3
 8011c18:	f7fe fc95 	bl	8010546 <create_chain>
 8011c1c:	6278      	str	r0, [r7, #36]	; 0x24
 8011c1e:	e018      	b.n	8011c52 <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d008      	beq.n	8011c3c <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011c30:	4619      	mov	r1, r3
 8011c32:	68f8      	ldr	r0, [r7, #12]
 8011c34:	f7fe fd24 	bl	8010680 <clmt_clust>
 8011c38:	6278      	str	r0, [r7, #36]	; 0x24
 8011c3a:	e00a      	b.n	8011c52 <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011c48:	4619      	mov	r1, r3
 8011c4a:	4610      	mov	r0, r2
 8011c4c:	f7fe fc7b 	bl	8010546 <create_chain>
 8011c50:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	f000 8139 	beq.w	8011ecc <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8011c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c5c:	2b01      	cmp	r3, #1
 8011c5e:	d10c      	bne.n	8011c7a <f_write+0x154>
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	2202      	movs	r2, #2
 8011c64:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011c6e:	2102      	movs	r1, #2
 8011c70:	4618      	mov	r0, r3
 8011c72:	f7fd ff2e 	bl	800fad2 <unlock_fs>
 8011c76:	2302      	movs	r3, #2
 8011c78:	e148      	b.n	8011f0c <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8011c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c80:	d10c      	bne.n	8011c9c <f_write+0x176>
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	2201      	movs	r2, #1
 8011c86:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011c90:	2101      	movs	r1, #1
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7fd ff1d 	bl	800fad2 <unlock_fs>
 8011c98:	2301      	movs	r3, #1
 8011c9a:	e137      	b.n	8011f0c <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ca0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d103      	bne.n	8011cb6 <f_write+0x190>
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cb2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d024      	beq.n	8011d0e <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011cca:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8011cce:	68f9      	ldr	r1, [r7, #12]
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	f7fd fe36 	bl	800f948 <disk_write>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d00c      	beq.n	8011cfc <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	2201      	movs	r2, #1
 8011ce6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011cf0:	2101      	movs	r1, #1
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f7fd feed 	bl	800fad2 <unlock_fs>
 8011cf8:	2301      	movs	r3, #1
 8011cfa:	e107      	b.n	8011f0c <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d06:	b2da      	uxtb	r2, r3
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011d1a:	4619      	mov	r1, r3
 8011d1c:	4610      	mov	r0, r2
 8011d1e:	f7fe f9cf 	bl	80100c0 <clust2sect>
 8011d22:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8011d24:	693b      	ldr	r3, [r7, #16]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d10c      	bne.n	8011d44 <f_write+0x21e>
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	2202      	movs	r2, #2
 8011d2e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011d38:	2102      	movs	r1, #2
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7fd fec9 	bl	800fad2 <unlock_fs>
 8011d40:	2302      	movs	r3, #2
 8011d42:	e0e3      	b.n	8011f0c <f_write+0x3e6>
			sect += csect;
 8011d44:	7dbb      	ldrb	r3, [r7, #22]
 8011d46:	693a      	ldr	r2, [r7, #16]
 8011d48:	4413      	add	r3, r2
 8011d4a:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	0a5b      	lsrs	r3, r3, #9
 8011d50:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011d52:	69fb      	ldr	r3, [r7, #28]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d04f      	beq.n	8011df8 <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8011d58:	7dba      	ldrb	r2, [r7, #22]
 8011d5a:	69fb      	ldr	r3, [r7, #28]
 8011d5c:	4413      	add	r3, r2
 8011d5e:	68fa      	ldr	r2, [r7, #12]
 8011d60:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8011d64:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8011d68:	4293      	cmp	r3, r2
 8011d6a:	d908      	bls.n	8011d7e <f_write+0x258>
					cc = fp->fs->csize - csect;
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011d72:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011d76:	461a      	mov	r2, r3
 8011d78:	7dbb      	ldrb	r3, [r7, #22]
 8011d7a:	1ad3      	subs	r3, r2, r3
 8011d7c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011d84:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8011d88:	69fb      	ldr	r3, [r7, #28]
 8011d8a:	693a      	ldr	r2, [r7, #16]
 8011d8c:	69b9      	ldr	r1, [r7, #24]
 8011d8e:	f7fd fddb 	bl	800f948 <disk_write>
 8011d92:	4603      	mov	r3, r0
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d00c      	beq.n	8011db2 <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	2201      	movs	r2, #1
 8011d9c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011da6:	2101      	movs	r1, #1
 8011da8:	4618      	mov	r0, r3
 8011daa:	f7fd fe92 	bl	800fad2 <unlock_fs>
 8011dae:	2301      	movs	r3, #1
 8011db0:	e0ac      	b.n	8011f0c <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	1ad3      	subs	r3, r2, r3
 8011dbc:	69fa      	ldr	r2, [r7, #28]
 8011dbe:	429a      	cmp	r2, r3
 8011dc0:	d916      	bls.n	8011df0 <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8011dc2:	68f8      	ldr	r0, [r7, #12]
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011dca:	693b      	ldr	r3, [r7, #16]
 8011dcc:	1ad3      	subs	r3, r2, r3
 8011dce:	025b      	lsls	r3, r3, #9
 8011dd0:	69ba      	ldr	r2, [r7, #24]
 8011dd2:	4413      	add	r3, r2
 8011dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011dd8:	4619      	mov	r1, r3
 8011dda:	f7fd fdf3 	bl	800f9c4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011de8:	b2da      	uxtb	r2, r3
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8011df0:	69fb      	ldr	r3, [r7, #28]
 8011df2:	025b      	lsls	r3, r3, #9
 8011df4:	623b      	str	r3, [r7, #32]
				continue;
 8011df6:	e04e      	b.n	8011e96 <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011dfe:	693a      	ldr	r2, [r7, #16]
 8011e00:	429a      	cmp	r2, r3
 8011e02:	d021      	beq.n	8011e48 <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8011e10:	429a      	cmp	r2, r3
 8011e12:	d219      	bcs.n	8011e48 <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011e1a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8011e1e:	68f9      	ldr	r1, [r7, #12]
 8011e20:	2301      	movs	r3, #1
 8011e22:	693a      	ldr	r2, [r7, #16]
 8011e24:	f7fd fd70 	bl	800f908 <disk_read>
 8011e28:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d00c      	beq.n	8011e48 <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	2201      	movs	r2, #1
 8011e32:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011e3c:	2101      	movs	r1, #1
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7fd fe47 	bl	800fad2 <unlock_fs>
 8011e44:	2301      	movs	r3, #1
 8011e46:	e061      	b.n	8011f0c <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	693a      	ldr	r2, [r7, #16]
 8011e4c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e5a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011e5e:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8011e60:	6a3a      	ldr	r2, [r7, #32]
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	429a      	cmp	r2, r3
 8011e66:	d901      	bls.n	8011e6c <f_write+0x346>
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e76:	68fa      	ldr	r2, [r7, #12]
 8011e78:	4413      	add	r3, r2
 8011e7a:	6a3a      	ldr	r2, [r7, #32]
 8011e7c:	69b9      	ldr	r1, [r7, #24]
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f7fd fda0 	bl	800f9c4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e8e:	b2da      	uxtb	r2, r3
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8011e96:	69ba      	ldr	r2, [r7, #24]
 8011e98:	6a3b      	ldr	r3, [r7, #32]
 8011e9a:	4413      	add	r3, r2
 8011e9c:	61bb      	str	r3, [r7, #24]
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011ea4:	6a3b      	ldr	r3, [r7, #32]
 8011ea6:	441a      	add	r2, r3
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	681a      	ldr	r2, [r3, #0]
 8011eb2:	6a3b      	ldr	r3, [r7, #32]
 8011eb4:	441a      	add	r2, r3
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	601a      	str	r2, [r3, #0]
 8011eba:	687a      	ldr	r2, [r7, #4]
 8011ebc:	6a3b      	ldr	r3, [r7, #32]
 8011ebe:	1ad3      	subs	r3, r2, r3
 8011ec0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	f47f ae7d 	bne.w	8011bc4 <f_write+0x9e>
 8011eca:	e000      	b.n	8011ece <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011ecc:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8011eda:	429a      	cmp	r2, r3
 8011edc:	d905      	bls.n	8011eea <f_write+0x3c4>
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011ef0:	f043 0320 	orr.w	r3, r3, #32
 8011ef4:	b2da      	uxtb	r2, r3
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011f02:	2100      	movs	r1, #0
 8011f04:	4618      	mov	r0, r3
 8011f06:	f7fd fde4 	bl	800fad2 <unlock_fs>
 8011f0a:	2300      	movs	r3, #0
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3728      	adds	r7, #40	; 0x28
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}

08011f14 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b086      	sub	sp, #24
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8011f1c:	6878      	ldr	r0, [r7, #4]
 8011f1e:	f7ff fb3f 	bl	80115a0 <validate>
 8011f22:	4603      	mov	r3, r0
 8011f24:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011f26:	7dfb      	ldrb	r3, [r7, #23]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	f040 80af 	bne.w	801208c <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011f34:	f003 0320 	and.w	r3, r3, #32
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	f000 80a7 	beq.w	801208c <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d020      	beq.n	8011f8e <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011f52:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8011f56:	6879      	ldr	r1, [r7, #4]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011f5e:	2301      	movs	r3, #1
 8011f60:	f7fd fcf2 	bl	800f948 <disk_write>
 8011f64:	4603      	mov	r3, r0
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d008      	beq.n	8011f7c <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011f70:	2101      	movs	r1, #1
 8011f72:	4618      	mov	r0, r3
 8011f74:	f7fd fdad 	bl	800fad2 <unlock_fs>
 8011f78:	2301      	movs	r3, #1
 8011f7a:	e090      	b.n	801209e <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f86:	b2da      	uxtb	r2, r3
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8011f9a:	4619      	mov	r1, r3
 8011f9c:	4610      	mov	r0, r2
 8011f9e:	f7fd ffb4 	bl	800ff0a <move_window>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8011fa6:	7dfb      	ldrb	r3, [r7, #23]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d16f      	bne.n	801208c <f_sync+0x178>
				dir = fp->dir_ptr;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8011fb2:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8011fb4:	693b      	ldr	r3, [r7, #16]
 8011fb6:	330b      	adds	r3, #11
 8011fb8:	781a      	ldrb	r2, [r3, #0]
 8011fba:	693b      	ldr	r3, [r7, #16]
 8011fbc:	330b      	adds	r3, #11
 8011fbe:	f042 0220 	orr.w	r2, r2, #32
 8011fc2:	b2d2      	uxtb	r2, r2
 8011fc4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8011fcc:	693b      	ldr	r3, [r7, #16]
 8011fce:	331c      	adds	r3, #28
 8011fd0:	b2d2      	uxtb	r2, r2
 8011fd2:	701a      	strb	r2, [r3, #0]
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8011fda:	b29b      	uxth	r3, r3
 8011fdc:	0a1b      	lsrs	r3, r3, #8
 8011fde:	b29a      	uxth	r2, r3
 8011fe0:	693b      	ldr	r3, [r7, #16]
 8011fe2:	331d      	adds	r3, #29
 8011fe4:	b2d2      	uxtb	r2, r2
 8011fe6:	701a      	strb	r2, [r3, #0]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8011fee:	0c1a      	lsrs	r2, r3, #16
 8011ff0:	693b      	ldr	r3, [r7, #16]
 8011ff2:	331e      	adds	r3, #30
 8011ff4:	b2d2      	uxtb	r2, r2
 8011ff6:	701a      	strb	r2, [r3, #0]
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8011ffe:	0e1a      	lsrs	r2, r3, #24
 8012000:	693b      	ldr	r3, [r7, #16]
 8012002:	331f      	adds	r3, #31
 8012004:	b2d2      	uxtb	r2, r2
 8012006:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801200e:	4619      	mov	r1, r3
 8012010:	6938      	ldr	r0, [r7, #16]
 8012012:	f7fe fd6b 	bl	8010aec <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8012016:	f7fc f8af 	bl	800e178 <get_fattime>
 801201a:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 801201c:	693b      	ldr	r3, [r7, #16]
 801201e:	3316      	adds	r3, #22
 8012020:	68fa      	ldr	r2, [r7, #12]
 8012022:	b2d2      	uxtb	r2, r2
 8012024:	701a      	strb	r2, [r3, #0]
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	b29b      	uxth	r3, r3
 801202a:	0a1b      	lsrs	r3, r3, #8
 801202c:	b29a      	uxth	r2, r3
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	3317      	adds	r3, #23
 8012032:	b2d2      	uxtb	r2, r2
 8012034:	701a      	strb	r2, [r3, #0]
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	0c1a      	lsrs	r2, r3, #16
 801203a:	693b      	ldr	r3, [r7, #16]
 801203c:	3318      	adds	r3, #24
 801203e:	b2d2      	uxtb	r2, r2
 8012040:	701a      	strb	r2, [r3, #0]
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	0e1a      	lsrs	r2, r3, #24
 8012046:	693b      	ldr	r3, [r7, #16]
 8012048:	3319      	adds	r3, #25
 801204a:	b2d2      	uxtb	r2, r2
 801204c:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 801204e:	693b      	ldr	r3, [r7, #16]
 8012050:	3312      	adds	r3, #18
 8012052:	2200      	movs	r2, #0
 8012054:	701a      	strb	r2, [r3, #0]
 8012056:	693b      	ldr	r3, [r7, #16]
 8012058:	3313      	adds	r3, #19
 801205a:	2200      	movs	r2, #0
 801205c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012064:	f023 0320 	bic.w	r3, r3, #32
 8012068:	b2da      	uxtb	r2, r3
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012076:	2201      	movs	r2, #1
 8012078:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012082:	4618      	mov	r0, r3
 8012084:	f7fd ff6f 	bl	800ff66 <sync_fs>
 8012088:	4603      	mov	r3, r0
 801208a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012092:	7dfa      	ldrb	r2, [r7, #23]
 8012094:	4611      	mov	r1, r2
 8012096:	4618      	mov	r0, r3
 8012098:	f7fd fd1b 	bl	800fad2 <unlock_fs>
 801209c:	7dfb      	ldrb	r3, [r7, #23]
}
 801209e:	4618      	mov	r0, r3
 80120a0:	3718      	adds	r7, #24
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}

080120a6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80120a6:	b580      	push	{r7, lr}
 80120a8:	b084      	sub	sp, #16
 80120aa:	af00      	add	r7, sp, #0
 80120ac:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80120ae:	6878      	ldr	r0, [r7, #4]
 80120b0:	f7ff ff30 	bl	8011f14 <f_sync>
 80120b4:	4603      	mov	r3, r0
 80120b6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80120b8:	7bfb      	ldrb	r3, [r7, #15]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d11e      	bne.n	80120fc <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	f7ff fa6e 	bl	80115a0 <validate>
 80120c4:	4603      	mov	r3, r0
 80120c6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80120c8:	7bfb      	ldrb	r3, [r7, #15]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d116      	bne.n	80120fc <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80120d4:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80120dc:	4618      	mov	r0, r3
 80120de:	f7fd fe5d 	bl	800fd9c <dec_lock>
 80120e2:	4603      	mov	r3, r0
 80120e4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80120e6:	7bfb      	ldrb	r3, [r7, #15]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d103      	bne.n	80120f4 <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2200      	movs	r2, #0
 80120f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80120f4:	2100      	movs	r1, #0
 80120f6:	68b8      	ldr	r0, [r7, #8]
 80120f8:	f7fd fceb 	bl	800fad2 <unlock_fs>
#endif
		}
	}
	return res;
 80120fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80120fe:	4618      	mov	r0, r3
 8012100:	3710      	adds	r7, #16
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}
	...

08012108 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012108:	b480      	push	{r7}
 801210a:	b087      	sub	sp, #28
 801210c:	af00      	add	r7, sp, #0
 801210e:	60f8      	str	r0, [r7, #12]
 8012110:	60b9      	str	r1, [r7, #8]
 8012112:	4613      	mov	r3, r2
 8012114:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012116:	2301      	movs	r3, #1
 8012118:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801211a:	2300      	movs	r3, #0
 801211c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 801211e:	4b1e      	ldr	r3, [pc, #120]	; (8012198 <FATFS_LinkDriverEx+0x90>)
 8012120:	7a5b      	ldrb	r3, [r3, #9]
 8012122:	b2db      	uxtb	r3, r3
 8012124:	2b01      	cmp	r3, #1
 8012126:	d831      	bhi.n	801218c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012128:	4b1b      	ldr	r3, [pc, #108]	; (8012198 <FATFS_LinkDriverEx+0x90>)
 801212a:	7a5b      	ldrb	r3, [r3, #9]
 801212c:	b2db      	uxtb	r3, r3
 801212e:	461a      	mov	r2, r3
 8012130:	4b19      	ldr	r3, [pc, #100]	; (8012198 <FATFS_LinkDriverEx+0x90>)
 8012132:	2100      	movs	r1, #0
 8012134:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8012136:	4b18      	ldr	r3, [pc, #96]	; (8012198 <FATFS_LinkDriverEx+0x90>)
 8012138:	7a5b      	ldrb	r3, [r3, #9]
 801213a:	b2db      	uxtb	r3, r3
 801213c:	4a16      	ldr	r2, [pc, #88]	; (8012198 <FATFS_LinkDriverEx+0x90>)
 801213e:	009b      	lsls	r3, r3, #2
 8012140:	4413      	add	r3, r2
 8012142:	68fa      	ldr	r2, [r7, #12]
 8012144:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8012146:	4b14      	ldr	r3, [pc, #80]	; (8012198 <FATFS_LinkDriverEx+0x90>)
 8012148:	7a5b      	ldrb	r3, [r3, #9]
 801214a:	b2db      	uxtb	r3, r3
 801214c:	461a      	mov	r2, r3
 801214e:	4b12      	ldr	r3, [pc, #72]	; (8012198 <FATFS_LinkDriverEx+0x90>)
 8012150:	4413      	add	r3, r2
 8012152:	79fa      	ldrb	r2, [r7, #7]
 8012154:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012156:	4b10      	ldr	r3, [pc, #64]	; (8012198 <FATFS_LinkDriverEx+0x90>)
 8012158:	7a5b      	ldrb	r3, [r3, #9]
 801215a:	b2db      	uxtb	r3, r3
 801215c:	1c5a      	adds	r2, r3, #1
 801215e:	b2d1      	uxtb	r1, r2
 8012160:	4a0d      	ldr	r2, [pc, #52]	; (8012198 <FATFS_LinkDriverEx+0x90>)
 8012162:	7251      	strb	r1, [r2, #9]
 8012164:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012166:	7dbb      	ldrb	r3, [r7, #22]
 8012168:	3330      	adds	r3, #48	; 0x30
 801216a:	b2da      	uxtb	r2, r3
 801216c:	68bb      	ldr	r3, [r7, #8]
 801216e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012170:	68bb      	ldr	r3, [r7, #8]
 8012172:	3301      	adds	r3, #1
 8012174:	223a      	movs	r2, #58	; 0x3a
 8012176:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	3302      	adds	r3, #2
 801217c:	222f      	movs	r2, #47	; 0x2f
 801217e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012180:	68bb      	ldr	r3, [r7, #8]
 8012182:	3303      	adds	r3, #3
 8012184:	2200      	movs	r2, #0
 8012186:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012188:	2300      	movs	r3, #0
 801218a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 801218c:	7dfb      	ldrb	r3, [r7, #23]
}
 801218e:	4618      	mov	r0, r3
 8012190:	371c      	adds	r7, #28
 8012192:	46bd      	mov	sp, r7
 8012194:	bc80      	pop	{r7}
 8012196:	4770      	bx	lr
 8012198:	20000ce4 	.word	0x20000ce4

0801219c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b082      	sub	sp, #8
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
 80121a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80121a6:	2200      	movs	r2, #0
 80121a8:	6839      	ldr	r1, [r7, #0]
 80121aa:	6878      	ldr	r0, [r7, #4]
 80121ac:	f7ff ffac 	bl	8012108 <FATFS_LinkDriverEx>
 80121b0:	4603      	mov	r3, r0
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3708      	adds	r7, #8
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}
	...

080121bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b082      	sub	sp, #8
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	4603      	mov	r3, r0
 80121c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80121c6:	4b0b      	ldr	r3, [pc, #44]	; (80121f4 <SD_initialize+0x38>)
 80121c8:	2201      	movs	r2, #1
 80121ca:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 80121cc:	f7fb ffdc 	bl	800e188 <BSP_SD_Init>
 80121d0:	4603      	mov	r3, r0
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d107      	bne.n	80121e6 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80121d6:	4b07      	ldr	r3, [pc, #28]	; (80121f4 <SD_initialize+0x38>)
 80121d8:	781b      	ldrb	r3, [r3, #0]
 80121da:	b2db      	uxtb	r3, r3
 80121dc:	f023 0301 	bic.w	r3, r3, #1
 80121e0:	b2da      	uxtb	r2, r3
 80121e2:	4b04      	ldr	r3, [pc, #16]	; (80121f4 <SD_initialize+0x38>)
 80121e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80121e6:	4b03      	ldr	r3, [pc, #12]	; (80121f4 <SD_initialize+0x38>)
 80121e8:	781b      	ldrb	r3, [r3, #0]
 80121ea:	b2db      	uxtb	r3, r3
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	3708      	adds	r7, #8
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}
 80121f4:	200000d0 	.word	0x200000d0

080121f8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b082      	sub	sp, #8
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	4603      	mov	r3, r0
 8012200:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012202:	4b0b      	ldr	r3, [pc, #44]	; (8012230 <SD_status+0x38>)
 8012204:	2201      	movs	r2, #1
 8012206:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012208:	f7fc f820 	bl	800e24c <BSP_SD_GetCardState>
 801220c:	4603      	mov	r3, r0
 801220e:	2b00      	cmp	r3, #0
 8012210:	d107      	bne.n	8012222 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012212:	4b07      	ldr	r3, [pc, #28]	; (8012230 <SD_status+0x38>)
 8012214:	781b      	ldrb	r3, [r3, #0]
 8012216:	b2db      	uxtb	r3, r3
 8012218:	f023 0301 	bic.w	r3, r3, #1
 801221c:	b2da      	uxtb	r2, r3
 801221e:	4b04      	ldr	r3, [pc, #16]	; (8012230 <SD_status+0x38>)
 8012220:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8012222:	4b03      	ldr	r3, [pc, #12]	; (8012230 <SD_status+0x38>)
 8012224:	781b      	ldrb	r3, [r3, #0]
 8012226:	b2db      	uxtb	r3, r3
}
 8012228:	4618      	mov	r0, r3
 801222a:	3708      	adds	r7, #8
 801222c:	46bd      	mov	sp, r7
 801222e:	bd80      	pop	{r7, pc}
 8012230:	200000d0 	.word	0x200000d0

08012234 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b086      	sub	sp, #24
 8012238:	af00      	add	r7, sp, #0
 801223a:	60b9      	str	r1, [r7, #8]
 801223c:	607a      	str	r2, [r7, #4]
 801223e:	603b      	str	r3, [r7, #0]
 8012240:	4603      	mov	r3, r0
 8012242:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012244:	2301      	movs	r3, #1
 8012246:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8012248:	4b0f      	ldr	r3, [pc, #60]	; (8012288 <SD_read+0x54>)
 801224a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 801224c:	4b0f      	ldr	r3, [pc, #60]	; (801228c <SD_read+0x58>)
 801224e:	683a      	ldr	r2, [r7, #0]
 8012250:	6879      	ldr	r1, [r7, #4]
 8012252:	68b8      	ldr	r0, [r7, #8]
 8012254:	f7fb ffbe 	bl	800e1d4 <BSP_SD_ReadBlocks>
 8012258:	4603      	mov	r3, r0
 801225a:	2b00      	cmp	r3, #0
 801225c:	d10e      	bne.n	801227c <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 801225e:	e006      	b.n	801226e <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8012260:	693b      	ldr	r3, [r7, #16]
 8012262:	1e5a      	subs	r2, r3, #1
 8012264:	613a      	str	r2, [r7, #16]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d101      	bne.n	801226e <SD_read+0x3a>
      {
        return RES_ERROR;
 801226a:	2301      	movs	r3, #1
 801226c:	e007      	b.n	801227e <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 801226e:	f7fb ffed 	bl	800e24c <BSP_SD_GetCardState>
 8012272:	4603      	mov	r3, r0
 8012274:	2b00      	cmp	r3, #0
 8012276:	d1f3      	bne.n	8012260 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8012278:	2300      	movs	r3, #0
 801227a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 801227c:	7dfb      	ldrb	r3, [r7, #23]
}
 801227e:	4618      	mov	r0, r3
 8012280:	3718      	adds	r7, #24
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}
 8012286:	bf00      	nop
 8012288:	000186a0 	.word	0x000186a0
 801228c:	05f5e100 	.word	0x05f5e100

08012290 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b086      	sub	sp, #24
 8012294:	af00      	add	r7, sp, #0
 8012296:	60b9      	str	r1, [r7, #8]
 8012298:	607a      	str	r2, [r7, #4]
 801229a:	603b      	str	r3, [r7, #0]
 801229c:	4603      	mov	r3, r0
 801229e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80122a0:	2301      	movs	r3, #1
 80122a2:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 80122a4:	4b0f      	ldr	r3, [pc, #60]	; (80122e4 <SD_write+0x54>)
 80122a6:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 80122a8:	4b0f      	ldr	r3, [pc, #60]	; (80122e8 <SD_write+0x58>)
 80122aa:	683a      	ldr	r2, [r7, #0]
 80122ac:	6879      	ldr	r1, [r7, #4]
 80122ae:	68b8      	ldr	r0, [r7, #8]
 80122b0:	f7fb ffae 	bl	800e210 <BSP_SD_WriteBlocks>
 80122b4:	4603      	mov	r3, r0
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d10e      	bne.n	80122d8 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 80122ba:	e006      	b.n	80122ca <SD_write+0x3a>
    {
      if (timeout-- == 0)
 80122bc:	693b      	ldr	r3, [r7, #16]
 80122be:	1e5a      	subs	r2, r3, #1
 80122c0:	613a      	str	r2, [r7, #16]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d101      	bne.n	80122ca <SD_write+0x3a>
      {
        return RES_ERROR;
 80122c6:	2301      	movs	r3, #1
 80122c8:	e007      	b.n	80122da <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80122ca:	f7fb ffbf 	bl	800e24c <BSP_SD_GetCardState>
 80122ce:	4603      	mov	r3, r0
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d1f3      	bne.n	80122bc <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 80122d4:	2300      	movs	r3, #0
 80122d6:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 80122d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3718      	adds	r7, #24
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}
 80122e2:	bf00      	nop
 80122e4:	000186a0 	.word	0x000186a0
 80122e8:	05f5e100 	.word	0x05f5e100

080122ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b08c      	sub	sp, #48	; 0x30
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	4603      	mov	r3, r0
 80122f4:	603a      	str	r2, [r7, #0]
 80122f6:	71fb      	strb	r3, [r7, #7]
 80122f8:	460b      	mov	r3, r1
 80122fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80122fc:	2301      	movs	r3, #1
 80122fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012302:	4b24      	ldr	r3, [pc, #144]	; (8012394 <SD_ioctl+0xa8>)
 8012304:	781b      	ldrb	r3, [r3, #0]
 8012306:	b2db      	uxtb	r3, r3
 8012308:	f003 0301 	and.w	r3, r3, #1
 801230c:	2b00      	cmp	r3, #0
 801230e:	d001      	beq.n	8012314 <SD_ioctl+0x28>
 8012310:	2303      	movs	r3, #3
 8012312:	e03b      	b.n	801238c <SD_ioctl+0xa0>
  
  switch (cmd)
 8012314:	79bb      	ldrb	r3, [r7, #6]
 8012316:	2b03      	cmp	r3, #3
 8012318:	d833      	bhi.n	8012382 <SD_ioctl+0x96>
 801231a:	a201      	add	r2, pc, #4	; (adr r2, 8012320 <SD_ioctl+0x34>)
 801231c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012320:	08012331 	.word	0x08012331
 8012324:	08012339 	.word	0x08012339
 8012328:	08012351 	.word	0x08012351
 801232c:	0801236b 	.word	0x0801236b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012330:	2300      	movs	r3, #0
 8012332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012336:	e027      	b.n	8012388 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012338:	f107 030c 	add.w	r3, r7, #12
 801233c:	4618      	mov	r0, r3
 801233e:	f7fb ff95 	bl	800e26c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012348:	2300      	movs	r3, #0
 801234a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801234e:	e01b      	b.n	8012388 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012350:	f107 030c 	add.w	r3, r7, #12
 8012354:	4618      	mov	r0, r3
 8012356:	f7fb ff89 	bl	800e26c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801235c:	b29a      	uxth	r2, r3
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012362:	2300      	movs	r3, #0
 8012364:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012368:	e00e      	b.n	8012388 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801236a:	f107 030c 	add.w	r3, r7, #12
 801236e:	4618      	mov	r0, r3
 8012370:	f7fb ff7c 	bl	800e26c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8012374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801237a:	2300      	movs	r3, #0
 801237c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012380:	e002      	b.n	8012388 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8012382:	2304      	movs	r3, #4
 8012384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8012388:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801238c:	4618      	mov	r0, r3
 801238e:	3730      	adds	r7, #48	; 0x30
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}
 8012394:	200000d0 	.word	0x200000d0

08012398 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b084      	sub	sp, #16
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80123a0:	2300      	movs	r3, #0
 80123a2:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80123a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80123a8:	6878      	ldr	r0, [r7, #4]
 80123aa:	f000 f827 	bl	80123fc <osSemaphoreWait>
 80123ae:	4603      	mov	r3, r0
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d101      	bne.n	80123b8 <ff_req_grant+0x20>
  {
    ret = 1;
 80123b4:	2301      	movs	r3, #1
 80123b6:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80123b8:	68fb      	ldr	r3, [r7, #12]
}
 80123ba:	4618      	mov	r0, r3
 80123bc:	3710      	adds	r7, #16
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}

080123c2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80123c2:	b580      	push	{r7, lr}
 80123c4:	b082      	sub	sp, #8
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f000 f864 	bl	8012498 <osSemaphoreRelease>
}
 80123d0:	bf00      	nop
 80123d2:	3708      	adds	r7, #8
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80123d8:	b480      	push	{r7}
 80123da:	b083      	sub	sp, #12
 80123dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80123de:	f3ef 8305 	mrs	r3, IPSR
 80123e2:	607b      	str	r3, [r7, #4]
  return(result);
 80123e4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	bf14      	ite	ne
 80123ea:	2301      	movne	r3, #1
 80123ec:	2300      	moveq	r3, #0
 80123ee:	b2db      	uxtb	r3, r3
}
 80123f0:	4618      	mov	r0, r3
 80123f2:	370c      	adds	r7, #12
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bc80      	pop	{r7}
 80123f8:	4770      	bx	lr
	...

080123fc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b084      	sub	sp, #16
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
 8012404:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012406:	2300      	movs	r3, #0
 8012408:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d101      	bne.n	8012414 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8012410:	2380      	movs	r3, #128	; 0x80
 8012412:	e03a      	b.n	801248a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8012414:	2300      	movs	r3, #0
 8012416:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801241e:	d103      	bne.n	8012428 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8012420:	f04f 33ff 	mov.w	r3, #4294967295
 8012424:	60fb      	str	r3, [r7, #12]
 8012426:	e009      	b.n	801243c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d006      	beq.n	801243c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d101      	bne.n	801243c <osSemaphoreWait+0x40>
      ticks = 1;
 8012438:	2301      	movs	r3, #1
 801243a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 801243c:	f7ff ffcc 	bl	80123d8 <inHandlerMode>
 8012440:	4603      	mov	r3, r0
 8012442:	2b00      	cmp	r3, #0
 8012444:	d017      	beq.n	8012476 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012446:	f107 0308 	add.w	r3, r7, #8
 801244a:	461a      	mov	r2, r3
 801244c:	2100      	movs	r1, #0
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	f000 fb74 	bl	8012b3c <xQueueReceiveFromISR>
 8012454:	4603      	mov	r3, r0
 8012456:	2b01      	cmp	r3, #1
 8012458:	d001      	beq.n	801245e <osSemaphoreWait+0x62>
      return osErrorOS;
 801245a:	23ff      	movs	r3, #255	; 0xff
 801245c:	e015      	b.n	801248a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d011      	beq.n	8012488 <osSemaphoreWait+0x8c>
 8012464:	4b0b      	ldr	r3, [pc, #44]	; (8012494 <osSemaphoreWait+0x98>)
 8012466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801246a:	601a      	str	r2, [r3, #0]
 801246c:	f3bf 8f4f 	dsb	sy
 8012470:	f3bf 8f6f 	isb	sy
 8012474:	e008      	b.n	8012488 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012476:	68f9      	ldr	r1, [r7, #12]
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f000 fa53 	bl	8012924 <xQueueSemaphoreTake>
 801247e:	4603      	mov	r3, r0
 8012480:	2b01      	cmp	r3, #1
 8012482:	d001      	beq.n	8012488 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8012484:	23ff      	movs	r3, #255	; 0xff
 8012486:	e000      	b.n	801248a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8012488:	2300      	movs	r3, #0
}
 801248a:	4618      	mov	r0, r3
 801248c:	3710      	adds	r7, #16
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}
 8012492:	bf00      	nop
 8012494:	e000ed04 	.word	0xe000ed04

08012498 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b084      	sub	sp, #16
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80124a0:	2300      	movs	r3, #0
 80124a2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80124a4:	2300      	movs	r3, #0
 80124a6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80124a8:	f7ff ff96 	bl	80123d8 <inHandlerMode>
 80124ac:	4603      	mov	r3, r0
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d016      	beq.n	80124e0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80124b2:	f107 0308 	add.w	r3, r7, #8
 80124b6:	4619      	mov	r1, r3
 80124b8:	6878      	ldr	r0, [r7, #4]
 80124ba:	f000 f9a5 	bl	8012808 <xQueueGiveFromISR>
 80124be:	4603      	mov	r3, r0
 80124c0:	2b01      	cmp	r3, #1
 80124c2:	d001      	beq.n	80124c8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80124c4:	23ff      	movs	r3, #255	; 0xff
 80124c6:	e017      	b.n	80124f8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d013      	beq.n	80124f6 <osSemaphoreRelease+0x5e>
 80124ce:	4b0c      	ldr	r3, [pc, #48]	; (8012500 <osSemaphoreRelease+0x68>)
 80124d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124d4:	601a      	str	r2, [r3, #0]
 80124d6:	f3bf 8f4f 	dsb	sy
 80124da:	f3bf 8f6f 	isb	sy
 80124de:	e00a      	b.n	80124f6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80124e0:	2300      	movs	r3, #0
 80124e2:	2200      	movs	r2, #0
 80124e4:	2100      	movs	r1, #0
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f000 f890 	bl	801260c <xQueueGenericSend>
 80124ec:	4603      	mov	r3, r0
 80124ee:	2b01      	cmp	r3, #1
 80124f0:	d001      	beq.n	80124f6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80124f2:	23ff      	movs	r3, #255	; 0xff
 80124f4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80124f6:	68fb      	ldr	r3, [r7, #12]
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	3710      	adds	r7, #16
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}
 8012500:	e000ed04 	.word	0xe000ed04

08012504 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012504:	b480      	push	{r7}
 8012506:	b085      	sub	sp, #20
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	685b      	ldr	r3, [r3, #4]
 8012512:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	68fa      	ldr	r2, [r7, #12]
 8012518:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	689a      	ldr	r2, [r3, #8]
 801251e:	683b      	ldr	r3, [r7, #0]
 8012520:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	689b      	ldr	r3, [r3, #8]
 8012526:	683a      	ldr	r2, [r7, #0]
 8012528:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	683a      	ldr	r2, [r7, #0]
 801252e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	687a      	ldr	r2, [r7, #4]
 8012534:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	1c5a      	adds	r2, r3, #1
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	601a      	str	r2, [r3, #0]
}
 8012540:	bf00      	nop
 8012542:	3714      	adds	r7, #20
 8012544:	46bd      	mov	sp, r7
 8012546:	bc80      	pop	{r7}
 8012548:	4770      	bx	lr

0801254a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801254a:	b480      	push	{r7}
 801254c:	b085      	sub	sp, #20
 801254e:	af00      	add	r7, sp, #0
 8012550:	6078      	str	r0, [r7, #4]
 8012552:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801255a:	68bb      	ldr	r3, [r7, #8]
 801255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012560:	d103      	bne.n	801256a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	691b      	ldr	r3, [r3, #16]
 8012566:	60fb      	str	r3, [r7, #12]
 8012568:	e00c      	b.n	8012584 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	3308      	adds	r3, #8
 801256e:	60fb      	str	r3, [r7, #12]
 8012570:	e002      	b.n	8012578 <vListInsert+0x2e>
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	60fb      	str	r3, [r7, #12]
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	685b      	ldr	r3, [r3, #4]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	68ba      	ldr	r2, [r7, #8]
 8012580:	429a      	cmp	r2, r3
 8012582:	d2f6      	bcs.n	8012572 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	685a      	ldr	r2, [r3, #4]
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	685b      	ldr	r3, [r3, #4]
 8012590:	683a      	ldr	r2, [r7, #0]
 8012592:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012594:	683b      	ldr	r3, [r7, #0]
 8012596:	68fa      	ldr	r2, [r7, #12]
 8012598:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	683a      	ldr	r2, [r7, #0]
 801259e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	687a      	ldr	r2, [r7, #4]
 80125a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	1c5a      	adds	r2, r3, #1
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	601a      	str	r2, [r3, #0]
}
 80125b0:	bf00      	nop
 80125b2:	3714      	adds	r7, #20
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bc80      	pop	{r7}
 80125b8:	4770      	bx	lr

080125ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80125ba:	b480      	push	{r7}
 80125bc:	b085      	sub	sp, #20
 80125be:	af00      	add	r7, sp, #0
 80125c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	691b      	ldr	r3, [r3, #16]
 80125c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	685b      	ldr	r3, [r3, #4]
 80125cc:	687a      	ldr	r2, [r7, #4]
 80125ce:	6892      	ldr	r2, [r2, #8]
 80125d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	689b      	ldr	r3, [r3, #8]
 80125d6:	687a      	ldr	r2, [r7, #4]
 80125d8:	6852      	ldr	r2, [r2, #4]
 80125da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	685b      	ldr	r3, [r3, #4]
 80125e0:	687a      	ldr	r2, [r7, #4]
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d103      	bne.n	80125ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	689a      	ldr	r2, [r3, #8]
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	2200      	movs	r2, #0
 80125f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	1e5a      	subs	r2, r3, #1
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	681b      	ldr	r3, [r3, #0]
}
 8012602:	4618      	mov	r0, r3
 8012604:	3714      	adds	r7, #20
 8012606:	46bd      	mov	sp, r7
 8012608:	bc80      	pop	{r7}
 801260a:	4770      	bx	lr

0801260c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b08e      	sub	sp, #56	; 0x38
 8012610:	af00      	add	r7, sp, #0
 8012612:	60f8      	str	r0, [r7, #12]
 8012614:	60b9      	str	r1, [r7, #8]
 8012616:	607a      	str	r2, [r7, #4]
 8012618:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801261a:	2300      	movs	r3, #0
 801261c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012624:	2b00      	cmp	r3, #0
 8012626:	d10a      	bne.n	801263e <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801262c:	f383 8811 	msr	BASEPRI, r3
 8012630:	f3bf 8f6f 	isb	sy
 8012634:	f3bf 8f4f 	dsb	sy
 8012638:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801263a:	bf00      	nop
 801263c:	e7fe      	b.n	801263c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801263e:	68bb      	ldr	r3, [r7, #8]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d103      	bne.n	801264c <xQueueGenericSend+0x40>
 8012644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012648:	2b00      	cmp	r3, #0
 801264a:	d101      	bne.n	8012650 <xQueueGenericSend+0x44>
 801264c:	2301      	movs	r3, #1
 801264e:	e000      	b.n	8012652 <xQueueGenericSend+0x46>
 8012650:	2300      	movs	r3, #0
 8012652:	2b00      	cmp	r3, #0
 8012654:	d10a      	bne.n	801266c <xQueueGenericSend+0x60>
	__asm volatile
 8012656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801265a:	f383 8811 	msr	BASEPRI, r3
 801265e:	f3bf 8f6f 	isb	sy
 8012662:	f3bf 8f4f 	dsb	sy
 8012666:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012668:	bf00      	nop
 801266a:	e7fe      	b.n	801266a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	2b02      	cmp	r3, #2
 8012670:	d103      	bne.n	801267a <xQueueGenericSend+0x6e>
 8012672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012676:	2b01      	cmp	r3, #1
 8012678:	d101      	bne.n	801267e <xQueueGenericSend+0x72>
 801267a:	2301      	movs	r3, #1
 801267c:	e000      	b.n	8012680 <xQueueGenericSend+0x74>
 801267e:	2300      	movs	r3, #0
 8012680:	2b00      	cmp	r3, #0
 8012682:	d10a      	bne.n	801269a <xQueueGenericSend+0x8e>
	__asm volatile
 8012684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012688:	f383 8811 	msr	BASEPRI, r3
 801268c:	f3bf 8f6f 	isb	sy
 8012690:	f3bf 8f4f 	dsb	sy
 8012694:	623b      	str	r3, [r7, #32]
}
 8012696:	bf00      	nop
 8012698:	e7fe      	b.n	8012698 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801269a:	f000 feef 	bl	801347c <xTaskGetSchedulerState>
 801269e:	4603      	mov	r3, r0
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d102      	bne.n	80126aa <xQueueGenericSend+0x9e>
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d101      	bne.n	80126ae <xQueueGenericSend+0xa2>
 80126aa:	2301      	movs	r3, #1
 80126ac:	e000      	b.n	80126b0 <xQueueGenericSend+0xa4>
 80126ae:	2300      	movs	r3, #0
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d10a      	bne.n	80126ca <xQueueGenericSend+0xbe>
	__asm volatile
 80126b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b8:	f383 8811 	msr	BASEPRI, r3
 80126bc:	f3bf 8f6f 	isb	sy
 80126c0:	f3bf 8f4f 	dsb	sy
 80126c4:	61fb      	str	r3, [r7, #28]
}
 80126c6:	bf00      	nop
 80126c8:	e7fe      	b.n	80126c8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80126ca:	f001 f935 	bl	8013938 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80126ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80126d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d302      	bcc.n	80126e0 <xQueueGenericSend+0xd4>
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	2b02      	cmp	r3, #2
 80126de:	d129      	bne.n	8012734 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80126e0:	683a      	ldr	r2, [r7, #0]
 80126e2:	68b9      	ldr	r1, [r7, #8]
 80126e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126e6:	f000 fac0 	bl	8012c6a <prvCopyDataToQueue>
 80126ea:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80126ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d010      	beq.n	8012716 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80126f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f6:	3324      	adds	r3, #36	; 0x24
 80126f8:	4618      	mov	r0, r3
 80126fa:	f000 fdb5 	bl	8013268 <xTaskRemoveFromEventList>
 80126fe:	4603      	mov	r3, r0
 8012700:	2b00      	cmp	r3, #0
 8012702:	d013      	beq.n	801272c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012704:	4b3f      	ldr	r3, [pc, #252]	; (8012804 <xQueueGenericSend+0x1f8>)
 8012706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801270a:	601a      	str	r2, [r3, #0]
 801270c:	f3bf 8f4f 	dsb	sy
 8012710:	f3bf 8f6f 	isb	sy
 8012714:	e00a      	b.n	801272c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012718:	2b00      	cmp	r3, #0
 801271a:	d007      	beq.n	801272c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801271c:	4b39      	ldr	r3, [pc, #228]	; (8012804 <xQueueGenericSend+0x1f8>)
 801271e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012722:	601a      	str	r2, [r3, #0]
 8012724:	f3bf 8f4f 	dsb	sy
 8012728:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801272c:	f001 f934 	bl	8013998 <vPortExitCritical>
				return pdPASS;
 8012730:	2301      	movs	r3, #1
 8012732:	e063      	b.n	80127fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d103      	bne.n	8012742 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801273a:	f001 f92d 	bl	8013998 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801273e:	2300      	movs	r3, #0
 8012740:	e05c      	b.n	80127fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012744:	2b00      	cmp	r3, #0
 8012746:	d106      	bne.n	8012756 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012748:	f107 0314 	add.w	r3, r7, #20
 801274c:	4618      	mov	r0, r3
 801274e:	f000 fded 	bl	801332c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012752:	2301      	movs	r3, #1
 8012754:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012756:	f001 f91f 	bl	8013998 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801275a:	f000 fb97 	bl	8012e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801275e:	f001 f8eb 	bl	8013938 <vPortEnterCritical>
 8012762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012768:	b25b      	sxtb	r3, r3
 801276a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801276e:	d103      	bne.n	8012778 <xQueueGenericSend+0x16c>
 8012770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012772:	2200      	movs	r2, #0
 8012774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801277a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801277e:	b25b      	sxtb	r3, r3
 8012780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012784:	d103      	bne.n	801278e <xQueueGenericSend+0x182>
 8012786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012788:	2200      	movs	r2, #0
 801278a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801278e:	f001 f903 	bl	8013998 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012792:	1d3a      	adds	r2, r7, #4
 8012794:	f107 0314 	add.w	r3, r7, #20
 8012798:	4611      	mov	r1, r2
 801279a:	4618      	mov	r0, r3
 801279c:	f000 fddc 	bl	8013358 <xTaskCheckForTimeOut>
 80127a0:	4603      	mov	r3, r0
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d124      	bne.n	80127f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80127a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127a8:	f000 fb57 	bl	8012e5a <prvIsQueueFull>
 80127ac:	4603      	mov	r3, r0
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d018      	beq.n	80127e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80127b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b4:	3310      	adds	r3, #16
 80127b6:	687a      	ldr	r2, [r7, #4]
 80127b8:	4611      	mov	r1, r2
 80127ba:	4618      	mov	r0, r3
 80127bc:	f000 fd30 	bl	8013220 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80127c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127c2:	f000 fae2 	bl	8012d8a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80127c6:	f000 fb6f 	bl	8012ea8 <xTaskResumeAll>
 80127ca:	4603      	mov	r3, r0
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	f47f af7c 	bne.w	80126ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80127d2:	4b0c      	ldr	r3, [pc, #48]	; (8012804 <xQueueGenericSend+0x1f8>)
 80127d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127d8:	601a      	str	r2, [r3, #0]
 80127da:	f3bf 8f4f 	dsb	sy
 80127de:	f3bf 8f6f 	isb	sy
 80127e2:	e772      	b.n	80126ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80127e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127e6:	f000 fad0 	bl	8012d8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80127ea:	f000 fb5d 	bl	8012ea8 <xTaskResumeAll>
 80127ee:	e76c      	b.n	80126ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80127f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127f2:	f000 faca 	bl	8012d8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80127f6:	f000 fb57 	bl	8012ea8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80127fa:	2300      	movs	r3, #0
		}
	}
}
 80127fc:	4618      	mov	r0, r3
 80127fe:	3738      	adds	r7, #56	; 0x38
 8012800:	46bd      	mov	sp, r7
 8012802:	bd80      	pop	{r7, pc}
 8012804:	e000ed04 	.word	0xe000ed04

08012808 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b08e      	sub	sp, #56	; 0x38
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
 8012810:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012818:	2b00      	cmp	r3, #0
 801281a:	d10a      	bne.n	8012832 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801281c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012820:	f383 8811 	msr	BASEPRI, r3
 8012824:	f3bf 8f6f 	isb	sy
 8012828:	f3bf 8f4f 	dsb	sy
 801282c:	623b      	str	r3, [r7, #32]
}
 801282e:	bf00      	nop
 8012830:	e7fe      	b.n	8012830 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012836:	2b00      	cmp	r3, #0
 8012838:	d00a      	beq.n	8012850 <xQueueGiveFromISR+0x48>
	__asm volatile
 801283a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801283e:	f383 8811 	msr	BASEPRI, r3
 8012842:	f3bf 8f6f 	isb	sy
 8012846:	f3bf 8f4f 	dsb	sy
 801284a:	61fb      	str	r3, [r7, #28]
}
 801284c:	bf00      	nop
 801284e:	e7fe      	b.n	801284e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8012850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d103      	bne.n	8012860 <xQueueGiveFromISR+0x58>
 8012858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801285a:	685b      	ldr	r3, [r3, #4]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d101      	bne.n	8012864 <xQueueGiveFromISR+0x5c>
 8012860:	2301      	movs	r3, #1
 8012862:	e000      	b.n	8012866 <xQueueGiveFromISR+0x5e>
 8012864:	2300      	movs	r3, #0
 8012866:	2b00      	cmp	r3, #0
 8012868:	d10a      	bne.n	8012880 <xQueueGiveFromISR+0x78>
	__asm volatile
 801286a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801286e:	f383 8811 	msr	BASEPRI, r3
 8012872:	f3bf 8f6f 	isb	sy
 8012876:	f3bf 8f4f 	dsb	sy
 801287a:	61bb      	str	r3, [r7, #24]
}
 801287c:	bf00      	nop
 801287e:	e7fe      	b.n	801287e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012880:	f001 f8fc 	bl	8013a7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012884:	f3ef 8211 	mrs	r2, BASEPRI
 8012888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801288c:	f383 8811 	msr	BASEPRI, r3
 8012890:	f3bf 8f6f 	isb	sy
 8012894:	f3bf 8f4f 	dsb	sy
 8012898:	617a      	str	r2, [r7, #20]
 801289a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801289c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801289e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80128a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128a4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80128a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128ac:	429a      	cmp	r2, r3
 80128ae:	d22b      	bcs.n	8012908 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80128b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80128b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80128ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128bc:	1c5a      	adds	r2, r3, #1
 80128be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128c0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80128c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80128c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128ca:	d112      	bne.n	80128f2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80128cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d016      	beq.n	8012902 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80128d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d6:	3324      	adds	r3, #36	; 0x24
 80128d8:	4618      	mov	r0, r3
 80128da:	f000 fcc5 	bl	8013268 <xTaskRemoveFromEventList>
 80128de:	4603      	mov	r3, r0
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d00e      	beq.n	8012902 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d00b      	beq.n	8012902 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	2201      	movs	r2, #1
 80128ee:	601a      	str	r2, [r3, #0]
 80128f0:	e007      	b.n	8012902 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80128f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128f6:	3301      	adds	r3, #1
 80128f8:	b2db      	uxtb	r3, r3
 80128fa:	b25a      	sxtb	r2, r3
 80128fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012902:	2301      	movs	r3, #1
 8012904:	637b      	str	r3, [r7, #52]	; 0x34
 8012906:	e001      	b.n	801290c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012908:	2300      	movs	r3, #0
 801290a:	637b      	str	r3, [r7, #52]	; 0x34
 801290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801290e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012916:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801291a:	4618      	mov	r0, r3
 801291c:	3738      	adds	r7, #56	; 0x38
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}
	...

08012924 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b08e      	sub	sp, #56	; 0x38
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
 801292c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801292e:	2300      	movs	r3, #0
 8012930:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012936:	2300      	movs	r3, #0
 8012938:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801293c:	2b00      	cmp	r3, #0
 801293e:	d10a      	bne.n	8012956 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8012940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012944:	f383 8811 	msr	BASEPRI, r3
 8012948:	f3bf 8f6f 	isb	sy
 801294c:	f3bf 8f4f 	dsb	sy
 8012950:	623b      	str	r3, [r7, #32]
}
 8012952:	bf00      	nop
 8012954:	e7fe      	b.n	8012954 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801295a:	2b00      	cmp	r3, #0
 801295c:	d00a      	beq.n	8012974 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801295e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012962:	f383 8811 	msr	BASEPRI, r3
 8012966:	f3bf 8f6f 	isb	sy
 801296a:	f3bf 8f4f 	dsb	sy
 801296e:	61fb      	str	r3, [r7, #28]
}
 8012970:	bf00      	nop
 8012972:	e7fe      	b.n	8012972 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012974:	f000 fd82 	bl	801347c <xTaskGetSchedulerState>
 8012978:	4603      	mov	r3, r0
 801297a:	2b00      	cmp	r3, #0
 801297c:	d102      	bne.n	8012984 <xQueueSemaphoreTake+0x60>
 801297e:	683b      	ldr	r3, [r7, #0]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d101      	bne.n	8012988 <xQueueSemaphoreTake+0x64>
 8012984:	2301      	movs	r3, #1
 8012986:	e000      	b.n	801298a <xQueueSemaphoreTake+0x66>
 8012988:	2300      	movs	r3, #0
 801298a:	2b00      	cmp	r3, #0
 801298c:	d10a      	bne.n	80129a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801298e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012992:	f383 8811 	msr	BASEPRI, r3
 8012996:	f3bf 8f6f 	isb	sy
 801299a:	f3bf 8f4f 	dsb	sy
 801299e:	61bb      	str	r3, [r7, #24]
}
 80129a0:	bf00      	nop
 80129a2:	e7fe      	b.n	80129a2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80129a4:	f000 ffc8 	bl	8013938 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80129a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80129ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d024      	beq.n	80129fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80129b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b6:	1e5a      	subs	r2, r3, #1
 80129b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80129bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d104      	bne.n	80129ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80129c4:	f000 ff24 	bl	8013810 <pvTaskIncrementMutexHeldCount>
 80129c8:	4602      	mov	r2, r0
 80129ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129cc:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80129ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d0:	691b      	ldr	r3, [r3, #16]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d00f      	beq.n	80129f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80129d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d8:	3310      	adds	r3, #16
 80129da:	4618      	mov	r0, r3
 80129dc:	f000 fc44 	bl	8013268 <xTaskRemoveFromEventList>
 80129e0:	4603      	mov	r3, r0
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d007      	beq.n	80129f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80129e6:	4b54      	ldr	r3, [pc, #336]	; (8012b38 <xQueueSemaphoreTake+0x214>)
 80129e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129ec:	601a      	str	r2, [r3, #0]
 80129ee:	f3bf 8f4f 	dsb	sy
 80129f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80129f6:	f000 ffcf 	bl	8013998 <vPortExitCritical>
				return pdPASS;
 80129fa:	2301      	movs	r3, #1
 80129fc:	e097      	b.n	8012b2e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80129fe:	683b      	ldr	r3, [r7, #0]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d111      	bne.n	8012a28 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d00a      	beq.n	8012a20 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8012a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a0e:	f383 8811 	msr	BASEPRI, r3
 8012a12:	f3bf 8f6f 	isb	sy
 8012a16:	f3bf 8f4f 	dsb	sy
 8012a1a:	617b      	str	r3, [r7, #20]
}
 8012a1c:	bf00      	nop
 8012a1e:	e7fe      	b.n	8012a1e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012a20:	f000 ffba 	bl	8013998 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012a24:	2300      	movs	r3, #0
 8012a26:	e082      	b.n	8012b2e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d106      	bne.n	8012a3c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012a2e:	f107 030c 	add.w	r3, r7, #12
 8012a32:	4618      	mov	r0, r3
 8012a34:	f000 fc7a 	bl	801332c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012a38:	2301      	movs	r3, #1
 8012a3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012a3c:	f000 ffac 	bl	8013998 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012a40:	f000 fa24 	bl	8012e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012a44:	f000 ff78 	bl	8013938 <vPortEnterCritical>
 8012a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a4e:	b25b      	sxtb	r3, r3
 8012a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a54:	d103      	bne.n	8012a5e <xQueueSemaphoreTake+0x13a>
 8012a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a58:	2200      	movs	r2, #0
 8012a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a64:	b25b      	sxtb	r3, r3
 8012a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a6a:	d103      	bne.n	8012a74 <xQueueSemaphoreTake+0x150>
 8012a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a6e:	2200      	movs	r2, #0
 8012a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012a74:	f000 ff90 	bl	8013998 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012a78:	463a      	mov	r2, r7
 8012a7a:	f107 030c 	add.w	r3, r7, #12
 8012a7e:	4611      	mov	r1, r2
 8012a80:	4618      	mov	r0, r3
 8012a82:	f000 fc69 	bl	8013358 <xTaskCheckForTimeOut>
 8012a86:	4603      	mov	r3, r0
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d132      	bne.n	8012af2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012a8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a8e:	f000 f9ce 	bl	8012e2e <prvIsQueueEmpty>
 8012a92:	4603      	mov	r3, r0
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d026      	beq.n	8012ae6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d109      	bne.n	8012ab4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8012aa0:	f000 ff4a 	bl	8013938 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8012aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa6:	685b      	ldr	r3, [r3, #4]
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f000 fd05 	bl	80134b8 <xTaskPriorityInherit>
 8012aae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012ab0:	f000 ff72 	bl	8013998 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ab6:	3324      	adds	r3, #36	; 0x24
 8012ab8:	683a      	ldr	r2, [r7, #0]
 8012aba:	4611      	mov	r1, r2
 8012abc:	4618      	mov	r0, r3
 8012abe:	f000 fbaf 	bl	8013220 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012ac2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ac4:	f000 f961 	bl	8012d8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012ac8:	f000 f9ee 	bl	8012ea8 <xTaskResumeAll>
 8012acc:	4603      	mov	r3, r0
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	f47f af68 	bne.w	80129a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8012ad4:	4b18      	ldr	r3, [pc, #96]	; (8012b38 <xQueueSemaphoreTake+0x214>)
 8012ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ada:	601a      	str	r2, [r3, #0]
 8012adc:	f3bf 8f4f 	dsb	sy
 8012ae0:	f3bf 8f6f 	isb	sy
 8012ae4:	e75e      	b.n	80129a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012ae6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ae8:	f000 f94f 	bl	8012d8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012aec:	f000 f9dc 	bl	8012ea8 <xTaskResumeAll>
 8012af0:	e758      	b.n	80129a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012af2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012af4:	f000 f949 	bl	8012d8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012af8:	f000 f9d6 	bl	8012ea8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012afc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012afe:	f000 f996 	bl	8012e2e <prvIsQueueEmpty>
 8012b02:	4603      	mov	r3, r0
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	f43f af4d 	beq.w	80129a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d00d      	beq.n	8012b2c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8012b10:	f000 ff12 	bl	8013938 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012b14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b16:	f000 f891 	bl	8012c3c <prvGetDisinheritPriorityAfterTimeout>
 8012b1a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8012b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b1e:	685b      	ldr	r3, [r3, #4]
 8012b20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012b22:	4618      	mov	r0, r3
 8012b24:	f000 fdd4 	bl	80136d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012b28:	f000 ff36 	bl	8013998 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012b2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8012b2e:	4618      	mov	r0, r3
 8012b30:	3738      	adds	r7, #56	; 0x38
 8012b32:	46bd      	mov	sp, r7
 8012b34:	bd80      	pop	{r7, pc}
 8012b36:	bf00      	nop
 8012b38:	e000ed04 	.word	0xe000ed04

08012b3c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b08e      	sub	sp, #56	; 0x38
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	60f8      	str	r0, [r7, #12]
 8012b44:	60b9      	str	r1, [r7, #8]
 8012b46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d10a      	bne.n	8012b68 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b56:	f383 8811 	msr	BASEPRI, r3
 8012b5a:	f3bf 8f6f 	isb	sy
 8012b5e:	f3bf 8f4f 	dsb	sy
 8012b62:	623b      	str	r3, [r7, #32]
}
 8012b64:	bf00      	nop
 8012b66:	e7fe      	b.n	8012b66 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d103      	bne.n	8012b76 <xQueueReceiveFromISR+0x3a>
 8012b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d101      	bne.n	8012b7a <xQueueReceiveFromISR+0x3e>
 8012b76:	2301      	movs	r3, #1
 8012b78:	e000      	b.n	8012b7c <xQueueReceiveFromISR+0x40>
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d10a      	bne.n	8012b96 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b84:	f383 8811 	msr	BASEPRI, r3
 8012b88:	f3bf 8f6f 	isb	sy
 8012b8c:	f3bf 8f4f 	dsb	sy
 8012b90:	61fb      	str	r3, [r7, #28]
}
 8012b92:	bf00      	nop
 8012b94:	e7fe      	b.n	8012b94 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012b96:	f000 ff71 	bl	8013a7c <vPortValidateInterruptPriority>
	__asm volatile
 8012b9a:	f3ef 8211 	mrs	r2, BASEPRI
 8012b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ba2:	f383 8811 	msr	BASEPRI, r3
 8012ba6:	f3bf 8f6f 	isb	sy
 8012baa:	f3bf 8f4f 	dsb	sy
 8012bae:	61ba      	str	r2, [r7, #24]
 8012bb0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012bb2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d02f      	beq.n	8012c22 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012bcc:	68b9      	ldr	r1, [r7, #8]
 8012bce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012bd0:	f000 f8b5 	bl	8012d3e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd6:	1e5a      	subs	r2, r3, #1
 8012bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bda:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012bdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012be4:	d112      	bne.n	8012c0c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be8:	691b      	ldr	r3, [r3, #16]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d016      	beq.n	8012c1c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bf0:	3310      	adds	r3, #16
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f000 fb38 	bl	8013268 <xTaskRemoveFromEventList>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d00e      	beq.n	8012c1c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d00b      	beq.n	8012c1c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	2201      	movs	r2, #1
 8012c08:	601a      	str	r2, [r3, #0]
 8012c0a:	e007      	b.n	8012c1c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c10:	3301      	adds	r3, #1
 8012c12:	b2db      	uxtb	r3, r3
 8012c14:	b25a      	sxtb	r2, r3
 8012c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012c1c:	2301      	movs	r3, #1
 8012c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8012c20:	e001      	b.n	8012c26 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012c22:	2300      	movs	r3, #0
 8012c24:	637b      	str	r3, [r7, #52]	; 0x34
 8012c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012c2a:	693b      	ldr	r3, [r7, #16]
 8012c2c:	f383 8811 	msr	BASEPRI, r3
}
 8012c30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012c34:	4618      	mov	r0, r3
 8012c36:	3738      	adds	r7, #56	; 0x38
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd80      	pop	{r7, pc}

08012c3c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012c3c:	b480      	push	{r7}
 8012c3e:	b085      	sub	sp, #20
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d006      	beq.n	8012c5a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	f1c3 0307 	rsb	r3, r3, #7
 8012c56:	60fb      	str	r3, [r7, #12]
 8012c58:	e001      	b.n	8012c5e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
	}
 8012c60:	4618      	mov	r0, r3
 8012c62:	3714      	adds	r7, #20
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bc80      	pop	{r7}
 8012c68:	4770      	bx	lr

08012c6a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012c6a:	b580      	push	{r7, lr}
 8012c6c:	b086      	sub	sp, #24
 8012c6e:	af00      	add	r7, sp, #0
 8012c70:	60f8      	str	r0, [r7, #12]
 8012c72:	60b9      	str	r1, [r7, #8]
 8012c74:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012c76:	2300      	movs	r3, #0
 8012c78:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c7e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d10d      	bne.n	8012ca4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d14d      	bne.n	8012d2c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	685b      	ldr	r3, [r3, #4]
 8012c94:	4618      	mov	r0, r3
 8012c96:	f000 fc95 	bl	80135c4 <xTaskPriorityDisinherit>
 8012c9a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	605a      	str	r2, [r3, #4]
 8012ca2:	e043      	b.n	8012d2c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d119      	bne.n	8012cde <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	6898      	ldr	r0, [r3, #8]
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cb2:	461a      	mov	r2, r3
 8012cb4:	68b9      	ldr	r1, [r7, #8]
 8012cb6:	f001 fc1f 	bl	80144f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	689a      	ldr	r2, [r3, #8]
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cc2:	441a      	add	r2, r3
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	689a      	ldr	r2, [r3, #8]
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	685b      	ldr	r3, [r3, #4]
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	d32b      	bcc.n	8012d2c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	681a      	ldr	r2, [r3, #0]
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	609a      	str	r2, [r3, #8]
 8012cdc:	e026      	b.n	8012d2c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	68d8      	ldr	r0, [r3, #12]
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ce6:	461a      	mov	r2, r3
 8012ce8:	68b9      	ldr	r1, [r7, #8]
 8012cea:	f001 fc05 	bl	80144f8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	68da      	ldr	r2, [r3, #12]
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cf6:	425b      	negs	r3, r3
 8012cf8:	441a      	add	r2, r3
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	68da      	ldr	r2, [r3, #12]
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	429a      	cmp	r2, r3
 8012d08:	d207      	bcs.n	8012d1a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	685a      	ldr	r2, [r3, #4]
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d12:	425b      	negs	r3, r3
 8012d14:	441a      	add	r2, r3
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	2b02      	cmp	r3, #2
 8012d1e:	d105      	bne.n	8012d2c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012d20:	693b      	ldr	r3, [r7, #16]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d002      	beq.n	8012d2c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012d26:	693b      	ldr	r3, [r7, #16]
 8012d28:	3b01      	subs	r3, #1
 8012d2a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012d2c:	693b      	ldr	r3, [r7, #16]
 8012d2e:	1c5a      	adds	r2, r3, #1
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012d34:	697b      	ldr	r3, [r7, #20]
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	3718      	adds	r7, #24
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bd80      	pop	{r7, pc}

08012d3e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012d3e:	b580      	push	{r7, lr}
 8012d40:	b082      	sub	sp, #8
 8012d42:	af00      	add	r7, sp, #0
 8012d44:	6078      	str	r0, [r7, #4]
 8012d46:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d018      	beq.n	8012d82 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	68da      	ldr	r2, [r3, #12]
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d58:	441a      	add	r2, r3
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	68da      	ldr	r2, [r3, #12]
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	685b      	ldr	r3, [r3, #4]
 8012d66:	429a      	cmp	r2, r3
 8012d68:	d303      	bcc.n	8012d72 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	681a      	ldr	r2, [r3, #0]
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	68d9      	ldr	r1, [r3, #12]
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d7a:	461a      	mov	r2, r3
 8012d7c:	6838      	ldr	r0, [r7, #0]
 8012d7e:	f001 fbbb 	bl	80144f8 <memcpy>
	}
}
 8012d82:	bf00      	nop
 8012d84:	3708      	adds	r7, #8
 8012d86:	46bd      	mov	sp, r7
 8012d88:	bd80      	pop	{r7, pc}

08012d8a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012d8a:	b580      	push	{r7, lr}
 8012d8c:	b084      	sub	sp, #16
 8012d8e:	af00      	add	r7, sp, #0
 8012d90:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012d92:	f000 fdd1 	bl	8013938 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012d9c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012d9e:	e011      	b.n	8012dc4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d012      	beq.n	8012dce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	3324      	adds	r3, #36	; 0x24
 8012dac:	4618      	mov	r0, r3
 8012dae:	f000 fa5b 	bl	8013268 <xTaskRemoveFromEventList>
 8012db2:	4603      	mov	r3, r0
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d001      	beq.n	8012dbc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012db8:	f000 fb30 	bl	801341c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012dbc:	7bfb      	ldrb	r3, [r7, #15]
 8012dbe:	3b01      	subs	r3, #1
 8012dc0:	b2db      	uxtb	r3, r3
 8012dc2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	dce9      	bgt.n	8012da0 <prvUnlockQueue+0x16>
 8012dcc:	e000      	b.n	8012dd0 <prvUnlockQueue+0x46>
					break;
 8012dce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	22ff      	movs	r2, #255	; 0xff
 8012dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012dd8:	f000 fdde 	bl	8013998 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012ddc:	f000 fdac 	bl	8013938 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012de6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012de8:	e011      	b.n	8012e0e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	691b      	ldr	r3, [r3, #16]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d012      	beq.n	8012e18 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	3310      	adds	r3, #16
 8012df6:	4618      	mov	r0, r3
 8012df8:	f000 fa36 	bl	8013268 <xTaskRemoveFromEventList>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d001      	beq.n	8012e06 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012e02:	f000 fb0b 	bl	801341c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012e06:	7bbb      	ldrb	r3, [r7, #14]
 8012e08:	3b01      	subs	r3, #1
 8012e0a:	b2db      	uxtb	r3, r3
 8012e0c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012e0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	dce9      	bgt.n	8012dea <prvUnlockQueue+0x60>
 8012e16:	e000      	b.n	8012e1a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012e18:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	22ff      	movs	r2, #255	; 0xff
 8012e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012e22:	f000 fdb9 	bl	8013998 <vPortExitCritical>
}
 8012e26:	bf00      	nop
 8012e28:	3710      	adds	r7, #16
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}

08012e2e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012e2e:	b580      	push	{r7, lr}
 8012e30:	b084      	sub	sp, #16
 8012e32:	af00      	add	r7, sp, #0
 8012e34:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012e36:	f000 fd7f 	bl	8013938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d102      	bne.n	8012e48 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012e42:	2301      	movs	r3, #1
 8012e44:	60fb      	str	r3, [r7, #12]
 8012e46:	e001      	b.n	8012e4c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012e48:	2300      	movs	r3, #0
 8012e4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012e4c:	f000 fda4 	bl	8013998 <vPortExitCritical>

	return xReturn;
 8012e50:	68fb      	ldr	r3, [r7, #12]
}
 8012e52:	4618      	mov	r0, r3
 8012e54:	3710      	adds	r7, #16
 8012e56:	46bd      	mov	sp, r7
 8012e58:	bd80      	pop	{r7, pc}

08012e5a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012e5a:	b580      	push	{r7, lr}
 8012e5c:	b084      	sub	sp, #16
 8012e5e:	af00      	add	r7, sp, #0
 8012e60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012e62:	f000 fd69 	bl	8013938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d102      	bne.n	8012e78 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012e72:	2301      	movs	r3, #1
 8012e74:	60fb      	str	r3, [r7, #12]
 8012e76:	e001      	b.n	8012e7c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012e78:	2300      	movs	r3, #0
 8012e7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012e7c:	f000 fd8c 	bl	8013998 <vPortExitCritical>

	return xReturn;
 8012e80:	68fb      	ldr	r3, [r7, #12]
}
 8012e82:	4618      	mov	r0, r3
 8012e84:	3710      	adds	r7, #16
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}
	...

08012e8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012e8c:	b480      	push	{r7}
 8012e8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012e90:	4b04      	ldr	r3, [pc, #16]	; (8012ea4 <vTaskSuspendAll+0x18>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	3301      	adds	r3, #1
 8012e96:	4a03      	ldr	r2, [pc, #12]	; (8012ea4 <vTaskSuspendAll+0x18>)
 8012e98:	6013      	str	r3, [r2, #0]
}
 8012e9a:	bf00      	nop
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bc80      	pop	{r7}
 8012ea0:	4770      	bx	lr
 8012ea2:	bf00      	nop
 8012ea4:	20000dd0 	.word	0x20000dd0

08012ea8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b084      	sub	sp, #16
 8012eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012eae:	2300      	movs	r3, #0
 8012eb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012eb6:	4b41      	ldr	r3, [pc, #260]	; (8012fbc <xTaskResumeAll+0x114>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d10a      	bne.n	8012ed4 <xTaskResumeAll+0x2c>
	__asm volatile
 8012ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ec2:	f383 8811 	msr	BASEPRI, r3
 8012ec6:	f3bf 8f6f 	isb	sy
 8012eca:	f3bf 8f4f 	dsb	sy
 8012ece:	603b      	str	r3, [r7, #0]
}
 8012ed0:	bf00      	nop
 8012ed2:	e7fe      	b.n	8012ed2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012ed4:	f000 fd30 	bl	8013938 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012ed8:	4b38      	ldr	r3, [pc, #224]	; (8012fbc <xTaskResumeAll+0x114>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	3b01      	subs	r3, #1
 8012ede:	4a37      	ldr	r2, [pc, #220]	; (8012fbc <xTaskResumeAll+0x114>)
 8012ee0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012ee2:	4b36      	ldr	r3, [pc, #216]	; (8012fbc <xTaskResumeAll+0x114>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d161      	bne.n	8012fae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012eea:	4b35      	ldr	r3, [pc, #212]	; (8012fc0 <xTaskResumeAll+0x118>)
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d05d      	beq.n	8012fae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012ef2:	e02e      	b.n	8012f52 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8012ef4:	4b33      	ldr	r3, [pc, #204]	; (8012fc4 <xTaskResumeAll+0x11c>)
 8012ef6:	68db      	ldr	r3, [r3, #12]
 8012ef8:	68db      	ldr	r3, [r3, #12]
 8012efa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	3318      	adds	r3, #24
 8012f00:	4618      	mov	r0, r3
 8012f02:	f7ff fb5a 	bl	80125ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	3304      	adds	r3, #4
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7ff fb55 	bl	80125ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f14:	2201      	movs	r2, #1
 8012f16:	409a      	lsls	r2, r3
 8012f18:	4b2b      	ldr	r3, [pc, #172]	; (8012fc8 <xTaskResumeAll+0x120>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	4313      	orrs	r3, r2
 8012f1e:	4a2a      	ldr	r2, [pc, #168]	; (8012fc8 <xTaskResumeAll+0x120>)
 8012f20:	6013      	str	r3, [r2, #0]
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f26:	4613      	mov	r3, r2
 8012f28:	009b      	lsls	r3, r3, #2
 8012f2a:	4413      	add	r3, r2
 8012f2c:	009b      	lsls	r3, r3, #2
 8012f2e:	4a27      	ldr	r2, [pc, #156]	; (8012fcc <xTaskResumeAll+0x124>)
 8012f30:	441a      	add	r2, r3
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	3304      	adds	r3, #4
 8012f36:	4619      	mov	r1, r3
 8012f38:	4610      	mov	r0, r2
 8012f3a:	f7ff fae3 	bl	8012504 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f42:	4b23      	ldr	r3, [pc, #140]	; (8012fd0 <xTaskResumeAll+0x128>)
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d302      	bcc.n	8012f52 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8012f4c:	4b21      	ldr	r3, [pc, #132]	; (8012fd4 <xTaskResumeAll+0x12c>)
 8012f4e:	2201      	movs	r2, #1
 8012f50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012f52:	4b1c      	ldr	r3, [pc, #112]	; (8012fc4 <xTaskResumeAll+0x11c>)
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d1cc      	bne.n	8012ef4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d001      	beq.n	8012f64 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012f60:	f000 fa68 	bl	8013434 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012f64:	4b1c      	ldr	r3, [pc, #112]	; (8012fd8 <xTaskResumeAll+0x130>)
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d010      	beq.n	8012f92 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012f70:	f000 f836 	bl	8012fe0 <xTaskIncrementTick>
 8012f74:	4603      	mov	r3, r0
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d002      	beq.n	8012f80 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8012f7a:	4b16      	ldr	r3, [pc, #88]	; (8012fd4 <xTaskResumeAll+0x12c>)
 8012f7c:	2201      	movs	r2, #1
 8012f7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	3b01      	subs	r3, #1
 8012f84:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d1f1      	bne.n	8012f70 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8012f8c:	4b12      	ldr	r3, [pc, #72]	; (8012fd8 <xTaskResumeAll+0x130>)
 8012f8e:	2200      	movs	r2, #0
 8012f90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012f92:	4b10      	ldr	r3, [pc, #64]	; (8012fd4 <xTaskResumeAll+0x12c>)
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d009      	beq.n	8012fae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012f9a:	2301      	movs	r3, #1
 8012f9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012f9e:	4b0f      	ldr	r3, [pc, #60]	; (8012fdc <xTaskResumeAll+0x134>)
 8012fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fa4:	601a      	str	r2, [r3, #0]
 8012fa6:	f3bf 8f4f 	dsb	sy
 8012faa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012fae:	f000 fcf3 	bl	8013998 <vPortExitCritical>

	return xAlreadyYielded;
 8012fb2:	68bb      	ldr	r3, [r7, #8]
}
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	3710      	adds	r7, #16
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}
 8012fbc:	20000dd0 	.word	0x20000dd0
 8012fc0:	20000db0 	.word	0x20000db0
 8012fc4:	20000d88 	.word	0x20000d88
 8012fc8:	20000db8 	.word	0x20000db8
 8012fcc:	20000cf4 	.word	0x20000cf4
 8012fd0:	20000cf0 	.word	0x20000cf0
 8012fd4:	20000dc4 	.word	0x20000dc4
 8012fd8:	20000dc0 	.word	0x20000dc0
 8012fdc:	e000ed04 	.word	0xe000ed04

08012fe0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b086      	sub	sp, #24
 8012fe4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012fea:	4b51      	ldr	r3, [pc, #324]	; (8013130 <xTaskIncrementTick+0x150>)
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	f040 808d 	bne.w	801310e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012ff4:	4b4f      	ldr	r3, [pc, #316]	; (8013134 <xTaskIncrementTick+0x154>)
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012ffc:	4a4d      	ldr	r2, [pc, #308]	; (8013134 <xTaskIncrementTick+0x154>)
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013002:	693b      	ldr	r3, [r7, #16]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d120      	bne.n	801304a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013008:	4b4b      	ldr	r3, [pc, #300]	; (8013138 <xTaskIncrementTick+0x158>)
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d00a      	beq.n	8013028 <xTaskIncrementTick+0x48>
	__asm volatile
 8013012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013016:	f383 8811 	msr	BASEPRI, r3
 801301a:	f3bf 8f6f 	isb	sy
 801301e:	f3bf 8f4f 	dsb	sy
 8013022:	603b      	str	r3, [r7, #0]
}
 8013024:	bf00      	nop
 8013026:	e7fe      	b.n	8013026 <xTaskIncrementTick+0x46>
 8013028:	4b43      	ldr	r3, [pc, #268]	; (8013138 <xTaskIncrementTick+0x158>)
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	60fb      	str	r3, [r7, #12]
 801302e:	4b43      	ldr	r3, [pc, #268]	; (801313c <xTaskIncrementTick+0x15c>)
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	4a41      	ldr	r2, [pc, #260]	; (8013138 <xTaskIncrementTick+0x158>)
 8013034:	6013      	str	r3, [r2, #0]
 8013036:	4a41      	ldr	r2, [pc, #260]	; (801313c <xTaskIncrementTick+0x15c>)
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	6013      	str	r3, [r2, #0]
 801303c:	4b40      	ldr	r3, [pc, #256]	; (8013140 <xTaskIncrementTick+0x160>)
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	3301      	adds	r3, #1
 8013042:	4a3f      	ldr	r2, [pc, #252]	; (8013140 <xTaskIncrementTick+0x160>)
 8013044:	6013      	str	r3, [r2, #0]
 8013046:	f000 f9f5 	bl	8013434 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801304a:	4b3e      	ldr	r3, [pc, #248]	; (8013144 <xTaskIncrementTick+0x164>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	693a      	ldr	r2, [r7, #16]
 8013050:	429a      	cmp	r2, r3
 8013052:	d34d      	bcc.n	80130f0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013054:	4b38      	ldr	r3, [pc, #224]	; (8013138 <xTaskIncrementTick+0x158>)
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d101      	bne.n	8013062 <xTaskIncrementTick+0x82>
 801305e:	2301      	movs	r3, #1
 8013060:	e000      	b.n	8013064 <xTaskIncrementTick+0x84>
 8013062:	2300      	movs	r3, #0
 8013064:	2b00      	cmp	r3, #0
 8013066:	d004      	beq.n	8013072 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013068:	4b36      	ldr	r3, [pc, #216]	; (8013144 <xTaskIncrementTick+0x164>)
 801306a:	f04f 32ff 	mov.w	r2, #4294967295
 801306e:	601a      	str	r2, [r3, #0]
					break;
 8013070:	e03e      	b.n	80130f0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013072:	4b31      	ldr	r3, [pc, #196]	; (8013138 <xTaskIncrementTick+0x158>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	68db      	ldr	r3, [r3, #12]
 8013078:	68db      	ldr	r3, [r3, #12]
 801307a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801307c:	68bb      	ldr	r3, [r7, #8]
 801307e:	685b      	ldr	r3, [r3, #4]
 8013080:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013082:	693a      	ldr	r2, [r7, #16]
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	429a      	cmp	r2, r3
 8013088:	d203      	bcs.n	8013092 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801308a:	4a2e      	ldr	r2, [pc, #184]	; (8013144 <xTaskIncrementTick+0x164>)
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	6013      	str	r3, [r2, #0]
						break;
 8013090:	e02e      	b.n	80130f0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013092:	68bb      	ldr	r3, [r7, #8]
 8013094:	3304      	adds	r3, #4
 8013096:	4618      	mov	r0, r3
 8013098:	f7ff fa8f 	bl	80125ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801309c:	68bb      	ldr	r3, [r7, #8]
 801309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d004      	beq.n	80130ae <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80130a4:	68bb      	ldr	r3, [r7, #8]
 80130a6:	3318      	adds	r3, #24
 80130a8:	4618      	mov	r0, r3
 80130aa:	f7ff fa86 	bl	80125ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80130ae:	68bb      	ldr	r3, [r7, #8]
 80130b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130b2:	2201      	movs	r2, #1
 80130b4:	409a      	lsls	r2, r3
 80130b6:	4b24      	ldr	r3, [pc, #144]	; (8013148 <xTaskIncrementTick+0x168>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	4313      	orrs	r3, r2
 80130bc:	4a22      	ldr	r2, [pc, #136]	; (8013148 <xTaskIncrementTick+0x168>)
 80130be:	6013      	str	r3, [r2, #0]
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130c4:	4613      	mov	r3, r2
 80130c6:	009b      	lsls	r3, r3, #2
 80130c8:	4413      	add	r3, r2
 80130ca:	009b      	lsls	r3, r3, #2
 80130cc:	4a1f      	ldr	r2, [pc, #124]	; (801314c <xTaskIncrementTick+0x16c>)
 80130ce:	441a      	add	r2, r3
 80130d0:	68bb      	ldr	r3, [r7, #8]
 80130d2:	3304      	adds	r3, #4
 80130d4:	4619      	mov	r1, r3
 80130d6:	4610      	mov	r0, r2
 80130d8:	f7ff fa14 	bl	8012504 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80130dc:	68bb      	ldr	r3, [r7, #8]
 80130de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130e0:	4b1b      	ldr	r3, [pc, #108]	; (8013150 <xTaskIncrementTick+0x170>)
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130e6:	429a      	cmp	r2, r3
 80130e8:	d3b4      	bcc.n	8013054 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80130ea:	2301      	movs	r3, #1
 80130ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80130ee:	e7b1      	b.n	8013054 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80130f0:	4b17      	ldr	r3, [pc, #92]	; (8013150 <xTaskIncrementTick+0x170>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130f6:	4915      	ldr	r1, [pc, #84]	; (801314c <xTaskIncrementTick+0x16c>)
 80130f8:	4613      	mov	r3, r2
 80130fa:	009b      	lsls	r3, r3, #2
 80130fc:	4413      	add	r3, r2
 80130fe:	009b      	lsls	r3, r3, #2
 8013100:	440b      	add	r3, r1
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	2b01      	cmp	r3, #1
 8013106:	d907      	bls.n	8013118 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8013108:	2301      	movs	r3, #1
 801310a:	617b      	str	r3, [r7, #20]
 801310c:	e004      	b.n	8013118 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801310e:	4b11      	ldr	r3, [pc, #68]	; (8013154 <xTaskIncrementTick+0x174>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	3301      	adds	r3, #1
 8013114:	4a0f      	ldr	r2, [pc, #60]	; (8013154 <xTaskIncrementTick+0x174>)
 8013116:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013118:	4b0f      	ldr	r3, [pc, #60]	; (8013158 <xTaskIncrementTick+0x178>)
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d001      	beq.n	8013124 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8013120:	2301      	movs	r3, #1
 8013122:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013124:	697b      	ldr	r3, [r7, #20]
}
 8013126:	4618      	mov	r0, r3
 8013128:	3718      	adds	r7, #24
 801312a:	46bd      	mov	sp, r7
 801312c:	bd80      	pop	{r7, pc}
 801312e:	bf00      	nop
 8013130:	20000dd0 	.word	0x20000dd0
 8013134:	20000db4 	.word	0x20000db4
 8013138:	20000d80 	.word	0x20000d80
 801313c:	20000d84 	.word	0x20000d84
 8013140:	20000dc8 	.word	0x20000dc8
 8013144:	20000dcc 	.word	0x20000dcc
 8013148:	20000db8 	.word	0x20000db8
 801314c:	20000cf4 	.word	0x20000cf4
 8013150:	20000cf0 	.word	0x20000cf0
 8013154:	20000dc0 	.word	0x20000dc0
 8013158:	20000dc4 	.word	0x20000dc4

0801315c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801315c:	b480      	push	{r7}
 801315e:	b087      	sub	sp, #28
 8013160:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013162:	4b29      	ldr	r3, [pc, #164]	; (8013208 <vTaskSwitchContext+0xac>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d003      	beq.n	8013172 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801316a:	4b28      	ldr	r3, [pc, #160]	; (801320c <vTaskSwitchContext+0xb0>)
 801316c:	2201      	movs	r2, #1
 801316e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013170:	e044      	b.n	80131fc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8013172:	4b26      	ldr	r3, [pc, #152]	; (801320c <vTaskSwitchContext+0xb0>)
 8013174:	2200      	movs	r2, #0
 8013176:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8013178:	4b25      	ldr	r3, [pc, #148]	; (8013210 <vTaskSwitchContext+0xb4>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	fab3 f383 	clz	r3, r3
 8013184:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013186:	7afb      	ldrb	r3, [r7, #11]
 8013188:	f1c3 031f 	rsb	r3, r3, #31
 801318c:	617b      	str	r3, [r7, #20]
 801318e:	4921      	ldr	r1, [pc, #132]	; (8013214 <vTaskSwitchContext+0xb8>)
 8013190:	697a      	ldr	r2, [r7, #20]
 8013192:	4613      	mov	r3, r2
 8013194:	009b      	lsls	r3, r3, #2
 8013196:	4413      	add	r3, r2
 8013198:	009b      	lsls	r3, r3, #2
 801319a:	440b      	add	r3, r1
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d10a      	bne.n	80131b8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80131a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131a6:	f383 8811 	msr	BASEPRI, r3
 80131aa:	f3bf 8f6f 	isb	sy
 80131ae:	f3bf 8f4f 	dsb	sy
 80131b2:	607b      	str	r3, [r7, #4]
}
 80131b4:	bf00      	nop
 80131b6:	e7fe      	b.n	80131b6 <vTaskSwitchContext+0x5a>
 80131b8:	697a      	ldr	r2, [r7, #20]
 80131ba:	4613      	mov	r3, r2
 80131bc:	009b      	lsls	r3, r3, #2
 80131be:	4413      	add	r3, r2
 80131c0:	009b      	lsls	r3, r3, #2
 80131c2:	4a14      	ldr	r2, [pc, #80]	; (8013214 <vTaskSwitchContext+0xb8>)
 80131c4:	4413      	add	r3, r2
 80131c6:	613b      	str	r3, [r7, #16]
 80131c8:	693b      	ldr	r3, [r7, #16]
 80131ca:	685b      	ldr	r3, [r3, #4]
 80131cc:	685a      	ldr	r2, [r3, #4]
 80131ce:	693b      	ldr	r3, [r7, #16]
 80131d0:	605a      	str	r2, [r3, #4]
 80131d2:	693b      	ldr	r3, [r7, #16]
 80131d4:	685a      	ldr	r2, [r3, #4]
 80131d6:	693b      	ldr	r3, [r7, #16]
 80131d8:	3308      	adds	r3, #8
 80131da:	429a      	cmp	r2, r3
 80131dc:	d104      	bne.n	80131e8 <vTaskSwitchContext+0x8c>
 80131de:	693b      	ldr	r3, [r7, #16]
 80131e0:	685b      	ldr	r3, [r3, #4]
 80131e2:	685a      	ldr	r2, [r3, #4]
 80131e4:	693b      	ldr	r3, [r7, #16]
 80131e6:	605a      	str	r2, [r3, #4]
 80131e8:	693b      	ldr	r3, [r7, #16]
 80131ea:	685b      	ldr	r3, [r3, #4]
 80131ec:	68db      	ldr	r3, [r3, #12]
 80131ee:	4a0a      	ldr	r2, [pc, #40]	; (8013218 <vTaskSwitchContext+0xbc>)
 80131f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80131f2:	4b09      	ldr	r3, [pc, #36]	; (8013218 <vTaskSwitchContext+0xbc>)
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	334c      	adds	r3, #76	; 0x4c
 80131f8:	4a08      	ldr	r2, [pc, #32]	; (801321c <vTaskSwitchContext+0xc0>)
 80131fa:	6013      	str	r3, [r2, #0]
}
 80131fc:	bf00      	nop
 80131fe:	371c      	adds	r7, #28
 8013200:	46bd      	mov	sp, r7
 8013202:	bc80      	pop	{r7}
 8013204:	4770      	bx	lr
 8013206:	bf00      	nop
 8013208:	20000dd0 	.word	0x20000dd0
 801320c:	20000dc4 	.word	0x20000dc4
 8013210:	20000db8 	.word	0x20000db8
 8013214:	20000cf4 	.word	0x20000cf4
 8013218:	20000cf0 	.word	0x20000cf0
 801321c:	20000128 	.word	0x20000128

08013220 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b084      	sub	sp, #16
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
 8013228:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d10a      	bne.n	8013246 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013234:	f383 8811 	msr	BASEPRI, r3
 8013238:	f3bf 8f6f 	isb	sy
 801323c:	f3bf 8f4f 	dsb	sy
 8013240:	60fb      	str	r3, [r7, #12]
}
 8013242:	bf00      	nop
 8013244:	e7fe      	b.n	8013244 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013246:	4b07      	ldr	r3, [pc, #28]	; (8013264 <vTaskPlaceOnEventList+0x44>)
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	3318      	adds	r3, #24
 801324c:	4619      	mov	r1, r3
 801324e:	6878      	ldr	r0, [r7, #4]
 8013250:	f7ff f97b 	bl	801254a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013254:	2101      	movs	r1, #1
 8013256:	6838      	ldr	r0, [r7, #0]
 8013258:	f000 faee 	bl	8013838 <prvAddCurrentTaskToDelayedList>
}
 801325c:	bf00      	nop
 801325e:	3710      	adds	r7, #16
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}
 8013264:	20000cf0 	.word	0x20000cf0

08013268 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b086      	sub	sp, #24
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	68db      	ldr	r3, [r3, #12]
 8013274:	68db      	ldr	r3, [r3, #12]
 8013276:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013278:	693b      	ldr	r3, [r7, #16]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d10a      	bne.n	8013294 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801327e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013282:	f383 8811 	msr	BASEPRI, r3
 8013286:	f3bf 8f6f 	isb	sy
 801328a:	f3bf 8f4f 	dsb	sy
 801328e:	60fb      	str	r3, [r7, #12]
}
 8013290:	bf00      	nop
 8013292:	e7fe      	b.n	8013292 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013294:	693b      	ldr	r3, [r7, #16]
 8013296:	3318      	adds	r3, #24
 8013298:	4618      	mov	r0, r3
 801329a:	f7ff f98e 	bl	80125ba <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801329e:	4b1d      	ldr	r3, [pc, #116]	; (8013314 <xTaskRemoveFromEventList+0xac>)
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d11c      	bne.n	80132e0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	3304      	adds	r3, #4
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7ff f985 	bl	80125ba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80132b0:	693b      	ldr	r3, [r7, #16]
 80132b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132b4:	2201      	movs	r2, #1
 80132b6:	409a      	lsls	r2, r3
 80132b8:	4b17      	ldr	r3, [pc, #92]	; (8013318 <xTaskRemoveFromEventList+0xb0>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	4313      	orrs	r3, r2
 80132be:	4a16      	ldr	r2, [pc, #88]	; (8013318 <xTaskRemoveFromEventList+0xb0>)
 80132c0:	6013      	str	r3, [r2, #0]
 80132c2:	693b      	ldr	r3, [r7, #16]
 80132c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132c6:	4613      	mov	r3, r2
 80132c8:	009b      	lsls	r3, r3, #2
 80132ca:	4413      	add	r3, r2
 80132cc:	009b      	lsls	r3, r3, #2
 80132ce:	4a13      	ldr	r2, [pc, #76]	; (801331c <xTaskRemoveFromEventList+0xb4>)
 80132d0:	441a      	add	r2, r3
 80132d2:	693b      	ldr	r3, [r7, #16]
 80132d4:	3304      	adds	r3, #4
 80132d6:	4619      	mov	r1, r3
 80132d8:	4610      	mov	r0, r2
 80132da:	f7ff f913 	bl	8012504 <vListInsertEnd>
 80132de:	e005      	b.n	80132ec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80132e0:	693b      	ldr	r3, [r7, #16]
 80132e2:	3318      	adds	r3, #24
 80132e4:	4619      	mov	r1, r3
 80132e6:	480e      	ldr	r0, [pc, #56]	; (8013320 <xTaskRemoveFromEventList+0xb8>)
 80132e8:	f7ff f90c 	bl	8012504 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132f0:	4b0c      	ldr	r3, [pc, #48]	; (8013324 <xTaskRemoveFromEventList+0xbc>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d905      	bls.n	8013306 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80132fa:	2301      	movs	r3, #1
 80132fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80132fe:	4b0a      	ldr	r3, [pc, #40]	; (8013328 <xTaskRemoveFromEventList+0xc0>)
 8013300:	2201      	movs	r2, #1
 8013302:	601a      	str	r2, [r3, #0]
 8013304:	e001      	b.n	801330a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8013306:	2300      	movs	r3, #0
 8013308:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 801330a:	697b      	ldr	r3, [r7, #20]
}
 801330c:	4618      	mov	r0, r3
 801330e:	3718      	adds	r7, #24
 8013310:	46bd      	mov	sp, r7
 8013312:	bd80      	pop	{r7, pc}
 8013314:	20000dd0 	.word	0x20000dd0
 8013318:	20000db8 	.word	0x20000db8
 801331c:	20000cf4 	.word	0x20000cf4
 8013320:	20000d88 	.word	0x20000d88
 8013324:	20000cf0 	.word	0x20000cf0
 8013328:	20000dc4 	.word	0x20000dc4

0801332c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801332c:	b480      	push	{r7}
 801332e:	b083      	sub	sp, #12
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013334:	4b06      	ldr	r3, [pc, #24]	; (8013350 <vTaskInternalSetTimeOutState+0x24>)
 8013336:	681a      	ldr	r2, [r3, #0]
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801333c:	4b05      	ldr	r3, [pc, #20]	; (8013354 <vTaskInternalSetTimeOutState+0x28>)
 801333e:	681a      	ldr	r2, [r3, #0]
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	605a      	str	r2, [r3, #4]
}
 8013344:	bf00      	nop
 8013346:	370c      	adds	r7, #12
 8013348:	46bd      	mov	sp, r7
 801334a:	bc80      	pop	{r7}
 801334c:	4770      	bx	lr
 801334e:	bf00      	nop
 8013350:	20000dc8 	.word	0x20000dc8
 8013354:	20000db4 	.word	0x20000db4

08013358 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b088      	sub	sp, #32
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d10a      	bne.n	801337e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013368:	f04f 0350 	mov.w	r3, #80	; 0x50
 801336c:	f383 8811 	msr	BASEPRI, r3
 8013370:	f3bf 8f6f 	isb	sy
 8013374:	f3bf 8f4f 	dsb	sy
 8013378:	613b      	str	r3, [r7, #16]
}
 801337a:	bf00      	nop
 801337c:	e7fe      	b.n	801337c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801337e:	683b      	ldr	r3, [r7, #0]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d10a      	bne.n	801339a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013388:	f383 8811 	msr	BASEPRI, r3
 801338c:	f3bf 8f6f 	isb	sy
 8013390:	f3bf 8f4f 	dsb	sy
 8013394:	60fb      	str	r3, [r7, #12]
}
 8013396:	bf00      	nop
 8013398:	e7fe      	b.n	8013398 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801339a:	f000 facd 	bl	8013938 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801339e:	4b1d      	ldr	r3, [pc, #116]	; (8013414 <xTaskCheckForTimeOut+0xbc>)
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	685b      	ldr	r3, [r3, #4]
 80133a8:	69ba      	ldr	r2, [r7, #24]
 80133aa:	1ad3      	subs	r3, r2, r3
 80133ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80133ae:	683b      	ldr	r3, [r7, #0]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133b6:	d102      	bne.n	80133be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80133b8:	2300      	movs	r3, #0
 80133ba:	61fb      	str	r3, [r7, #28]
 80133bc:	e023      	b.n	8013406 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	681a      	ldr	r2, [r3, #0]
 80133c2:	4b15      	ldr	r3, [pc, #84]	; (8013418 <xTaskCheckForTimeOut+0xc0>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	429a      	cmp	r2, r3
 80133c8:	d007      	beq.n	80133da <xTaskCheckForTimeOut+0x82>
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	685b      	ldr	r3, [r3, #4]
 80133ce:	69ba      	ldr	r2, [r7, #24]
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d302      	bcc.n	80133da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80133d4:	2301      	movs	r3, #1
 80133d6:	61fb      	str	r3, [r7, #28]
 80133d8:	e015      	b.n	8013406 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80133da:	683b      	ldr	r3, [r7, #0]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	697a      	ldr	r2, [r7, #20]
 80133e0:	429a      	cmp	r2, r3
 80133e2:	d20b      	bcs.n	80133fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	681a      	ldr	r2, [r3, #0]
 80133e8:	697b      	ldr	r3, [r7, #20]
 80133ea:	1ad2      	subs	r2, r2, r3
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80133f0:	6878      	ldr	r0, [r7, #4]
 80133f2:	f7ff ff9b 	bl	801332c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80133f6:	2300      	movs	r3, #0
 80133f8:	61fb      	str	r3, [r7, #28]
 80133fa:	e004      	b.n	8013406 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	2200      	movs	r2, #0
 8013400:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013402:	2301      	movs	r3, #1
 8013404:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013406:	f000 fac7 	bl	8013998 <vPortExitCritical>

	return xReturn;
 801340a:	69fb      	ldr	r3, [r7, #28]
}
 801340c:	4618      	mov	r0, r3
 801340e:	3720      	adds	r7, #32
 8013410:	46bd      	mov	sp, r7
 8013412:	bd80      	pop	{r7, pc}
 8013414:	20000db4 	.word	0x20000db4
 8013418:	20000dc8 	.word	0x20000dc8

0801341c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801341c:	b480      	push	{r7}
 801341e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013420:	4b03      	ldr	r3, [pc, #12]	; (8013430 <vTaskMissedYield+0x14>)
 8013422:	2201      	movs	r2, #1
 8013424:	601a      	str	r2, [r3, #0]
}
 8013426:	bf00      	nop
 8013428:	46bd      	mov	sp, r7
 801342a:	bc80      	pop	{r7}
 801342c:	4770      	bx	lr
 801342e:	bf00      	nop
 8013430:	20000dc4 	.word	0x20000dc4

08013434 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013434:	b480      	push	{r7}
 8013436:	b083      	sub	sp, #12
 8013438:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801343a:	4b0e      	ldr	r3, [pc, #56]	; (8013474 <prvResetNextTaskUnblockTime+0x40>)
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d101      	bne.n	8013448 <prvResetNextTaskUnblockTime+0x14>
 8013444:	2301      	movs	r3, #1
 8013446:	e000      	b.n	801344a <prvResetNextTaskUnblockTime+0x16>
 8013448:	2300      	movs	r3, #0
 801344a:	2b00      	cmp	r3, #0
 801344c:	d004      	beq.n	8013458 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801344e:	4b0a      	ldr	r3, [pc, #40]	; (8013478 <prvResetNextTaskUnblockTime+0x44>)
 8013450:	f04f 32ff 	mov.w	r2, #4294967295
 8013454:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013456:	e008      	b.n	801346a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013458:	4b06      	ldr	r3, [pc, #24]	; (8013474 <prvResetNextTaskUnblockTime+0x40>)
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	68db      	ldr	r3, [r3, #12]
 801345e:	68db      	ldr	r3, [r3, #12]
 8013460:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	685b      	ldr	r3, [r3, #4]
 8013466:	4a04      	ldr	r2, [pc, #16]	; (8013478 <prvResetNextTaskUnblockTime+0x44>)
 8013468:	6013      	str	r3, [r2, #0]
}
 801346a:	bf00      	nop
 801346c:	370c      	adds	r7, #12
 801346e:	46bd      	mov	sp, r7
 8013470:	bc80      	pop	{r7}
 8013472:	4770      	bx	lr
 8013474:	20000d80 	.word	0x20000d80
 8013478:	20000dcc 	.word	0x20000dcc

0801347c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801347c:	b480      	push	{r7}
 801347e:	b083      	sub	sp, #12
 8013480:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013482:	4b0b      	ldr	r3, [pc, #44]	; (80134b0 <xTaskGetSchedulerState+0x34>)
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d102      	bne.n	8013490 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801348a:	2301      	movs	r3, #1
 801348c:	607b      	str	r3, [r7, #4]
 801348e:	e008      	b.n	80134a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013490:	4b08      	ldr	r3, [pc, #32]	; (80134b4 <xTaskGetSchedulerState+0x38>)
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d102      	bne.n	801349e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013498:	2302      	movs	r3, #2
 801349a:	607b      	str	r3, [r7, #4]
 801349c:	e001      	b.n	80134a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801349e:	2300      	movs	r3, #0
 80134a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80134a2:	687b      	ldr	r3, [r7, #4]
	}
 80134a4:	4618      	mov	r0, r3
 80134a6:	370c      	adds	r7, #12
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bc80      	pop	{r7}
 80134ac:	4770      	bx	lr
 80134ae:	bf00      	nop
 80134b0:	20000dbc 	.word	0x20000dbc
 80134b4:	20000dd0 	.word	0x20000dd0

080134b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b084      	sub	sp, #16
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80134c4:	2300      	movs	r3, #0
 80134c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d06e      	beq.n	80135ac <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80134ce:	68bb      	ldr	r3, [r7, #8]
 80134d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134d2:	4b39      	ldr	r3, [pc, #228]	; (80135b8 <xTaskPriorityInherit+0x100>)
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134d8:	429a      	cmp	r2, r3
 80134da:	d25e      	bcs.n	801359a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80134dc:	68bb      	ldr	r3, [r7, #8]
 80134de:	699b      	ldr	r3, [r3, #24]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	db06      	blt.n	80134f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80134e4:	4b34      	ldr	r3, [pc, #208]	; (80135b8 <xTaskPriorityInherit+0x100>)
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134ea:	f1c3 0207 	rsb	r2, r3, #7
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	6959      	ldr	r1, [r3, #20]
 80134f6:	68bb      	ldr	r3, [r7, #8]
 80134f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134fa:	4613      	mov	r3, r2
 80134fc:	009b      	lsls	r3, r3, #2
 80134fe:	4413      	add	r3, r2
 8013500:	009b      	lsls	r3, r3, #2
 8013502:	4a2e      	ldr	r2, [pc, #184]	; (80135bc <xTaskPriorityInherit+0x104>)
 8013504:	4413      	add	r3, r2
 8013506:	4299      	cmp	r1, r3
 8013508:	d101      	bne.n	801350e <xTaskPriorityInherit+0x56>
 801350a:	2301      	movs	r3, #1
 801350c:	e000      	b.n	8013510 <xTaskPriorityInherit+0x58>
 801350e:	2300      	movs	r3, #0
 8013510:	2b00      	cmp	r3, #0
 8013512:	d03a      	beq.n	801358a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013514:	68bb      	ldr	r3, [r7, #8]
 8013516:	3304      	adds	r3, #4
 8013518:	4618      	mov	r0, r3
 801351a:	f7ff f84e 	bl	80125ba <uxListRemove>
 801351e:	4603      	mov	r3, r0
 8013520:	2b00      	cmp	r3, #0
 8013522:	d115      	bne.n	8013550 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8013524:	68bb      	ldr	r3, [r7, #8]
 8013526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013528:	4924      	ldr	r1, [pc, #144]	; (80135bc <xTaskPriorityInherit+0x104>)
 801352a:	4613      	mov	r3, r2
 801352c:	009b      	lsls	r3, r3, #2
 801352e:	4413      	add	r3, r2
 8013530:	009b      	lsls	r3, r3, #2
 8013532:	440b      	add	r3, r1
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d10a      	bne.n	8013550 <xTaskPriorityInherit+0x98>
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801353e:	2201      	movs	r2, #1
 8013540:	fa02 f303 	lsl.w	r3, r2, r3
 8013544:	43da      	mvns	r2, r3
 8013546:	4b1e      	ldr	r3, [pc, #120]	; (80135c0 <xTaskPriorityInherit+0x108>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	4013      	ands	r3, r2
 801354c:	4a1c      	ldr	r2, [pc, #112]	; (80135c0 <xTaskPriorityInherit+0x108>)
 801354e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013550:	4b19      	ldr	r3, [pc, #100]	; (80135b8 <xTaskPriorityInherit+0x100>)
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013556:	68bb      	ldr	r3, [r7, #8]
 8013558:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801355e:	2201      	movs	r2, #1
 8013560:	409a      	lsls	r2, r3
 8013562:	4b17      	ldr	r3, [pc, #92]	; (80135c0 <xTaskPriorityInherit+0x108>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	4313      	orrs	r3, r2
 8013568:	4a15      	ldr	r2, [pc, #84]	; (80135c0 <xTaskPriorityInherit+0x108>)
 801356a:	6013      	str	r3, [r2, #0]
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013570:	4613      	mov	r3, r2
 8013572:	009b      	lsls	r3, r3, #2
 8013574:	4413      	add	r3, r2
 8013576:	009b      	lsls	r3, r3, #2
 8013578:	4a10      	ldr	r2, [pc, #64]	; (80135bc <xTaskPriorityInherit+0x104>)
 801357a:	441a      	add	r2, r3
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	3304      	adds	r3, #4
 8013580:	4619      	mov	r1, r3
 8013582:	4610      	mov	r0, r2
 8013584:	f7fe ffbe 	bl	8012504 <vListInsertEnd>
 8013588:	e004      	b.n	8013594 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801358a:	4b0b      	ldr	r3, [pc, #44]	; (80135b8 <xTaskPriorityInherit+0x100>)
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013590:	68bb      	ldr	r3, [r7, #8]
 8013592:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013594:	2301      	movs	r3, #1
 8013596:	60fb      	str	r3, [r7, #12]
 8013598:	e008      	b.n	80135ac <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801359a:	68bb      	ldr	r3, [r7, #8]
 801359c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801359e:	4b06      	ldr	r3, [pc, #24]	; (80135b8 <xTaskPriorityInherit+0x100>)
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135a4:	429a      	cmp	r2, r3
 80135a6:	d201      	bcs.n	80135ac <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80135a8:	2301      	movs	r3, #1
 80135aa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80135ac:	68fb      	ldr	r3, [r7, #12]
	}
 80135ae:	4618      	mov	r0, r3
 80135b0:	3710      	adds	r7, #16
 80135b2:	46bd      	mov	sp, r7
 80135b4:	bd80      	pop	{r7, pc}
 80135b6:	bf00      	nop
 80135b8:	20000cf0 	.word	0x20000cf0
 80135bc:	20000cf4 	.word	0x20000cf4
 80135c0:	20000db8 	.word	0x20000db8

080135c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b086      	sub	sp, #24
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80135d0:	2300      	movs	r3, #0
 80135d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d06e      	beq.n	80136b8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80135da:	4b3a      	ldr	r3, [pc, #232]	; (80136c4 <xTaskPriorityDisinherit+0x100>)
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	693a      	ldr	r2, [r7, #16]
 80135e0:	429a      	cmp	r2, r3
 80135e2:	d00a      	beq.n	80135fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80135e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e8:	f383 8811 	msr	BASEPRI, r3
 80135ec:	f3bf 8f6f 	isb	sy
 80135f0:	f3bf 8f4f 	dsb	sy
 80135f4:	60fb      	str	r3, [r7, #12]
}
 80135f6:	bf00      	nop
 80135f8:	e7fe      	b.n	80135f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80135fa:	693b      	ldr	r3, [r7, #16]
 80135fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d10a      	bne.n	8013618 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8013602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013606:	f383 8811 	msr	BASEPRI, r3
 801360a:	f3bf 8f6f 	isb	sy
 801360e:	f3bf 8f4f 	dsb	sy
 8013612:	60bb      	str	r3, [r7, #8]
}
 8013614:	bf00      	nop
 8013616:	e7fe      	b.n	8013616 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013618:	693b      	ldr	r3, [r7, #16]
 801361a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801361c:	1e5a      	subs	r2, r3, #1
 801361e:	693b      	ldr	r3, [r7, #16]
 8013620:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013622:	693b      	ldr	r3, [r7, #16]
 8013624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013626:	693b      	ldr	r3, [r7, #16]
 8013628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801362a:	429a      	cmp	r2, r3
 801362c:	d044      	beq.n	80136b8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801362e:	693b      	ldr	r3, [r7, #16]
 8013630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013632:	2b00      	cmp	r3, #0
 8013634:	d140      	bne.n	80136b8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013636:	693b      	ldr	r3, [r7, #16]
 8013638:	3304      	adds	r3, #4
 801363a:	4618      	mov	r0, r3
 801363c:	f7fe ffbd 	bl	80125ba <uxListRemove>
 8013640:	4603      	mov	r3, r0
 8013642:	2b00      	cmp	r3, #0
 8013644:	d115      	bne.n	8013672 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013646:	693b      	ldr	r3, [r7, #16]
 8013648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801364a:	491f      	ldr	r1, [pc, #124]	; (80136c8 <xTaskPriorityDisinherit+0x104>)
 801364c:	4613      	mov	r3, r2
 801364e:	009b      	lsls	r3, r3, #2
 8013650:	4413      	add	r3, r2
 8013652:	009b      	lsls	r3, r3, #2
 8013654:	440b      	add	r3, r1
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d10a      	bne.n	8013672 <xTaskPriorityDisinherit+0xae>
 801365c:	693b      	ldr	r3, [r7, #16]
 801365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013660:	2201      	movs	r2, #1
 8013662:	fa02 f303 	lsl.w	r3, r2, r3
 8013666:	43da      	mvns	r2, r3
 8013668:	4b18      	ldr	r3, [pc, #96]	; (80136cc <xTaskPriorityDisinherit+0x108>)
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	4013      	ands	r3, r2
 801366e:	4a17      	ldr	r2, [pc, #92]	; (80136cc <xTaskPriorityDisinherit+0x108>)
 8013670:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013672:	693b      	ldr	r3, [r7, #16]
 8013674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013676:	693b      	ldr	r3, [r7, #16]
 8013678:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801367a:	693b      	ldr	r3, [r7, #16]
 801367c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801367e:	f1c3 0207 	rsb	r2, r3, #7
 8013682:	693b      	ldr	r3, [r7, #16]
 8013684:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013686:	693b      	ldr	r3, [r7, #16]
 8013688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801368a:	2201      	movs	r2, #1
 801368c:	409a      	lsls	r2, r3
 801368e:	4b0f      	ldr	r3, [pc, #60]	; (80136cc <xTaskPriorityDisinherit+0x108>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	4313      	orrs	r3, r2
 8013694:	4a0d      	ldr	r2, [pc, #52]	; (80136cc <xTaskPriorityDisinherit+0x108>)
 8013696:	6013      	str	r3, [r2, #0]
 8013698:	693b      	ldr	r3, [r7, #16]
 801369a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801369c:	4613      	mov	r3, r2
 801369e:	009b      	lsls	r3, r3, #2
 80136a0:	4413      	add	r3, r2
 80136a2:	009b      	lsls	r3, r3, #2
 80136a4:	4a08      	ldr	r2, [pc, #32]	; (80136c8 <xTaskPriorityDisinherit+0x104>)
 80136a6:	441a      	add	r2, r3
 80136a8:	693b      	ldr	r3, [r7, #16]
 80136aa:	3304      	adds	r3, #4
 80136ac:	4619      	mov	r1, r3
 80136ae:	4610      	mov	r0, r2
 80136b0:	f7fe ff28 	bl	8012504 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80136b4:	2301      	movs	r3, #1
 80136b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80136b8:	697b      	ldr	r3, [r7, #20]
	}
 80136ba:	4618      	mov	r0, r3
 80136bc:	3718      	adds	r7, #24
 80136be:	46bd      	mov	sp, r7
 80136c0:	bd80      	pop	{r7, pc}
 80136c2:	bf00      	nop
 80136c4:	20000cf0 	.word	0x20000cf0
 80136c8:	20000cf4 	.word	0x20000cf4
 80136cc:	20000db8 	.word	0x20000db8

080136d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b088      	sub	sp, #32
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
 80136d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80136de:	2301      	movs	r3, #1
 80136e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	f000 8088 	beq.w	80137fa <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80136ea:	69bb      	ldr	r3, [r7, #24]
 80136ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d10a      	bne.n	8013708 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80136f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136f6:	f383 8811 	msr	BASEPRI, r3
 80136fa:	f3bf 8f6f 	isb	sy
 80136fe:	f3bf 8f4f 	dsb	sy
 8013702:	60fb      	str	r3, [r7, #12]
}
 8013704:	bf00      	nop
 8013706:	e7fe      	b.n	8013706 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013708:	69bb      	ldr	r3, [r7, #24]
 801370a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801370c:	683a      	ldr	r2, [r7, #0]
 801370e:	429a      	cmp	r2, r3
 8013710:	d902      	bls.n	8013718 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013712:	683b      	ldr	r3, [r7, #0]
 8013714:	61fb      	str	r3, [r7, #28]
 8013716:	e002      	b.n	801371e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013718:	69bb      	ldr	r3, [r7, #24]
 801371a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801371c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801371e:	69bb      	ldr	r3, [r7, #24]
 8013720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013722:	69fa      	ldr	r2, [r7, #28]
 8013724:	429a      	cmp	r2, r3
 8013726:	d068      	beq.n	80137fa <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013728:	69bb      	ldr	r3, [r7, #24]
 801372a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801372c:	697a      	ldr	r2, [r7, #20]
 801372e:	429a      	cmp	r2, r3
 8013730:	d163      	bne.n	80137fa <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013732:	4b34      	ldr	r3, [pc, #208]	; (8013804 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	69ba      	ldr	r2, [r7, #24]
 8013738:	429a      	cmp	r2, r3
 801373a:	d10a      	bne.n	8013752 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 801373c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013740:	f383 8811 	msr	BASEPRI, r3
 8013744:	f3bf 8f6f 	isb	sy
 8013748:	f3bf 8f4f 	dsb	sy
 801374c:	60bb      	str	r3, [r7, #8]
}
 801374e:	bf00      	nop
 8013750:	e7fe      	b.n	8013750 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013752:	69bb      	ldr	r3, [r7, #24]
 8013754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013756:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013758:	69bb      	ldr	r3, [r7, #24]
 801375a:	69fa      	ldr	r2, [r7, #28]
 801375c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801375e:	69bb      	ldr	r3, [r7, #24]
 8013760:	699b      	ldr	r3, [r3, #24]
 8013762:	2b00      	cmp	r3, #0
 8013764:	db04      	blt.n	8013770 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013766:	69fb      	ldr	r3, [r7, #28]
 8013768:	f1c3 0207 	rsb	r2, r3, #7
 801376c:	69bb      	ldr	r3, [r7, #24]
 801376e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013770:	69bb      	ldr	r3, [r7, #24]
 8013772:	6959      	ldr	r1, [r3, #20]
 8013774:	693a      	ldr	r2, [r7, #16]
 8013776:	4613      	mov	r3, r2
 8013778:	009b      	lsls	r3, r3, #2
 801377a:	4413      	add	r3, r2
 801377c:	009b      	lsls	r3, r3, #2
 801377e:	4a22      	ldr	r2, [pc, #136]	; (8013808 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013780:	4413      	add	r3, r2
 8013782:	4299      	cmp	r1, r3
 8013784:	d101      	bne.n	801378a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8013786:	2301      	movs	r3, #1
 8013788:	e000      	b.n	801378c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 801378a:	2300      	movs	r3, #0
 801378c:	2b00      	cmp	r3, #0
 801378e:	d034      	beq.n	80137fa <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013790:	69bb      	ldr	r3, [r7, #24]
 8013792:	3304      	adds	r3, #4
 8013794:	4618      	mov	r0, r3
 8013796:	f7fe ff10 	bl	80125ba <uxListRemove>
 801379a:	4603      	mov	r3, r0
 801379c:	2b00      	cmp	r3, #0
 801379e:	d115      	bne.n	80137cc <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80137a0:	69bb      	ldr	r3, [r7, #24]
 80137a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137a4:	4918      	ldr	r1, [pc, #96]	; (8013808 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80137a6:	4613      	mov	r3, r2
 80137a8:	009b      	lsls	r3, r3, #2
 80137aa:	4413      	add	r3, r2
 80137ac:	009b      	lsls	r3, r3, #2
 80137ae:	440b      	add	r3, r1
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d10a      	bne.n	80137cc <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80137b6:	69bb      	ldr	r3, [r7, #24]
 80137b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137ba:	2201      	movs	r2, #1
 80137bc:	fa02 f303 	lsl.w	r3, r2, r3
 80137c0:	43da      	mvns	r2, r3
 80137c2:	4b12      	ldr	r3, [pc, #72]	; (801380c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	4013      	ands	r3, r2
 80137c8:	4a10      	ldr	r2, [pc, #64]	; (801380c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80137ca:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80137cc:	69bb      	ldr	r3, [r7, #24]
 80137ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137d0:	2201      	movs	r2, #1
 80137d2:	409a      	lsls	r2, r3
 80137d4:	4b0d      	ldr	r3, [pc, #52]	; (801380c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	4313      	orrs	r3, r2
 80137da:	4a0c      	ldr	r2, [pc, #48]	; (801380c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80137dc:	6013      	str	r3, [r2, #0]
 80137de:	69bb      	ldr	r3, [r7, #24]
 80137e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137e2:	4613      	mov	r3, r2
 80137e4:	009b      	lsls	r3, r3, #2
 80137e6:	4413      	add	r3, r2
 80137e8:	009b      	lsls	r3, r3, #2
 80137ea:	4a07      	ldr	r2, [pc, #28]	; (8013808 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80137ec:	441a      	add	r2, r3
 80137ee:	69bb      	ldr	r3, [r7, #24]
 80137f0:	3304      	adds	r3, #4
 80137f2:	4619      	mov	r1, r3
 80137f4:	4610      	mov	r0, r2
 80137f6:	f7fe fe85 	bl	8012504 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80137fa:	bf00      	nop
 80137fc:	3720      	adds	r7, #32
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd80      	pop	{r7, pc}
 8013802:	bf00      	nop
 8013804:	20000cf0 	.word	0x20000cf0
 8013808:	20000cf4 	.word	0x20000cf4
 801380c:	20000db8 	.word	0x20000db8

08013810 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8013810:	b480      	push	{r7}
 8013812:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013814:	4b07      	ldr	r3, [pc, #28]	; (8013834 <pvTaskIncrementMutexHeldCount+0x24>)
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d004      	beq.n	8013826 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801381c:	4b05      	ldr	r3, [pc, #20]	; (8013834 <pvTaskIncrementMutexHeldCount+0x24>)
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013822:	3201      	adds	r2, #1
 8013824:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8013826:	4b03      	ldr	r3, [pc, #12]	; (8013834 <pvTaskIncrementMutexHeldCount+0x24>)
 8013828:	681b      	ldr	r3, [r3, #0]
	}
 801382a:	4618      	mov	r0, r3
 801382c:	46bd      	mov	sp, r7
 801382e:	bc80      	pop	{r7}
 8013830:	4770      	bx	lr
 8013832:	bf00      	nop
 8013834:	20000cf0 	.word	0x20000cf0

08013838 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b084      	sub	sp, #16
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
 8013840:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013842:	4b29      	ldr	r3, [pc, #164]	; (80138e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013848:	4b28      	ldr	r3, [pc, #160]	; (80138ec <prvAddCurrentTaskToDelayedList+0xb4>)
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	3304      	adds	r3, #4
 801384e:	4618      	mov	r0, r3
 8013850:	f7fe feb3 	bl	80125ba <uxListRemove>
 8013854:	4603      	mov	r3, r0
 8013856:	2b00      	cmp	r3, #0
 8013858:	d10b      	bne.n	8013872 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801385a:	4b24      	ldr	r3, [pc, #144]	; (80138ec <prvAddCurrentTaskToDelayedList+0xb4>)
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013860:	2201      	movs	r2, #1
 8013862:	fa02 f303 	lsl.w	r3, r2, r3
 8013866:	43da      	mvns	r2, r3
 8013868:	4b21      	ldr	r3, [pc, #132]	; (80138f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	4013      	ands	r3, r2
 801386e:	4a20      	ldr	r2, [pc, #128]	; (80138f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013870:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013878:	d10a      	bne.n	8013890 <prvAddCurrentTaskToDelayedList+0x58>
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d007      	beq.n	8013890 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013880:	4b1a      	ldr	r3, [pc, #104]	; (80138ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	3304      	adds	r3, #4
 8013886:	4619      	mov	r1, r3
 8013888:	481a      	ldr	r0, [pc, #104]	; (80138f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801388a:	f7fe fe3b 	bl	8012504 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801388e:	e026      	b.n	80138de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013890:	68fa      	ldr	r2, [r7, #12]
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	4413      	add	r3, r2
 8013896:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013898:	4b14      	ldr	r3, [pc, #80]	; (80138ec <prvAddCurrentTaskToDelayedList+0xb4>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	68ba      	ldr	r2, [r7, #8]
 801389e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80138a0:	68ba      	ldr	r2, [r7, #8]
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d209      	bcs.n	80138bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80138a8:	4b13      	ldr	r3, [pc, #76]	; (80138f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80138aa:	681a      	ldr	r2, [r3, #0]
 80138ac:	4b0f      	ldr	r3, [pc, #60]	; (80138ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	3304      	adds	r3, #4
 80138b2:	4619      	mov	r1, r3
 80138b4:	4610      	mov	r0, r2
 80138b6:	f7fe fe48 	bl	801254a <vListInsert>
}
 80138ba:	e010      	b.n	80138de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80138bc:	4b0f      	ldr	r3, [pc, #60]	; (80138fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80138be:	681a      	ldr	r2, [r3, #0]
 80138c0:	4b0a      	ldr	r3, [pc, #40]	; (80138ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	3304      	adds	r3, #4
 80138c6:	4619      	mov	r1, r3
 80138c8:	4610      	mov	r0, r2
 80138ca:	f7fe fe3e 	bl	801254a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80138ce:	4b0c      	ldr	r3, [pc, #48]	; (8013900 <prvAddCurrentTaskToDelayedList+0xc8>)
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	68ba      	ldr	r2, [r7, #8]
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d202      	bcs.n	80138de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80138d8:	4a09      	ldr	r2, [pc, #36]	; (8013900 <prvAddCurrentTaskToDelayedList+0xc8>)
 80138da:	68bb      	ldr	r3, [r7, #8]
 80138dc:	6013      	str	r3, [r2, #0]
}
 80138de:	bf00      	nop
 80138e0:	3710      	adds	r7, #16
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}
 80138e6:	bf00      	nop
 80138e8:	20000db4 	.word	0x20000db4
 80138ec:	20000cf0 	.word	0x20000cf0
 80138f0:	20000db8 	.word	0x20000db8
 80138f4:	20000d9c 	.word	0x20000d9c
 80138f8:	20000d84 	.word	0x20000d84
 80138fc:	20000d80 	.word	0x20000d80
 8013900:	20000dcc 	.word	0x20000dcc
	...

08013910 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013910:	4b07      	ldr	r3, [pc, #28]	; (8013930 <pxCurrentTCBConst2>)
 8013912:	6819      	ldr	r1, [r3, #0]
 8013914:	6808      	ldr	r0, [r1, #0]
 8013916:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801391a:	f380 8809 	msr	PSP, r0
 801391e:	f3bf 8f6f 	isb	sy
 8013922:	f04f 0000 	mov.w	r0, #0
 8013926:	f380 8811 	msr	BASEPRI, r0
 801392a:	f04e 0e0d 	orr.w	lr, lr, #13
 801392e:	4770      	bx	lr

08013930 <pxCurrentTCBConst2>:
 8013930:	20000cf0 	.word	0x20000cf0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013934:	bf00      	nop
 8013936:	bf00      	nop

08013938 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013938:	b480      	push	{r7}
 801393a:	b083      	sub	sp, #12
 801393c:	af00      	add	r7, sp, #0
	__asm volatile
 801393e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013942:	f383 8811 	msr	BASEPRI, r3
 8013946:	f3bf 8f6f 	isb	sy
 801394a:	f3bf 8f4f 	dsb	sy
 801394e:	607b      	str	r3, [r7, #4]
}
 8013950:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013952:	4b0f      	ldr	r3, [pc, #60]	; (8013990 <vPortEnterCritical+0x58>)
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	3301      	adds	r3, #1
 8013958:	4a0d      	ldr	r2, [pc, #52]	; (8013990 <vPortEnterCritical+0x58>)
 801395a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801395c:	4b0c      	ldr	r3, [pc, #48]	; (8013990 <vPortEnterCritical+0x58>)
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	2b01      	cmp	r3, #1
 8013962:	d10f      	bne.n	8013984 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013964:	4b0b      	ldr	r3, [pc, #44]	; (8013994 <vPortEnterCritical+0x5c>)
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	b2db      	uxtb	r3, r3
 801396a:	2b00      	cmp	r3, #0
 801396c:	d00a      	beq.n	8013984 <vPortEnterCritical+0x4c>
	__asm volatile
 801396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013972:	f383 8811 	msr	BASEPRI, r3
 8013976:	f3bf 8f6f 	isb	sy
 801397a:	f3bf 8f4f 	dsb	sy
 801397e:	603b      	str	r3, [r7, #0]
}
 8013980:	bf00      	nop
 8013982:	e7fe      	b.n	8013982 <vPortEnterCritical+0x4a>
	}
}
 8013984:	bf00      	nop
 8013986:	370c      	adds	r7, #12
 8013988:	46bd      	mov	sp, r7
 801398a:	bc80      	pop	{r7}
 801398c:	4770      	bx	lr
 801398e:	bf00      	nop
 8013990:	200000d4 	.word	0x200000d4
 8013994:	e000ed04 	.word	0xe000ed04

08013998 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013998:	b480      	push	{r7}
 801399a:	b083      	sub	sp, #12
 801399c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801399e:	4b11      	ldr	r3, [pc, #68]	; (80139e4 <vPortExitCritical+0x4c>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d10a      	bne.n	80139bc <vPortExitCritical+0x24>
	__asm volatile
 80139a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139aa:	f383 8811 	msr	BASEPRI, r3
 80139ae:	f3bf 8f6f 	isb	sy
 80139b2:	f3bf 8f4f 	dsb	sy
 80139b6:	607b      	str	r3, [r7, #4]
}
 80139b8:	bf00      	nop
 80139ba:	e7fe      	b.n	80139ba <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80139bc:	4b09      	ldr	r3, [pc, #36]	; (80139e4 <vPortExitCritical+0x4c>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	3b01      	subs	r3, #1
 80139c2:	4a08      	ldr	r2, [pc, #32]	; (80139e4 <vPortExitCritical+0x4c>)
 80139c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80139c6:	4b07      	ldr	r3, [pc, #28]	; (80139e4 <vPortExitCritical+0x4c>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d105      	bne.n	80139da <vPortExitCritical+0x42>
 80139ce:	2300      	movs	r3, #0
 80139d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80139d2:	683b      	ldr	r3, [r7, #0]
 80139d4:	f383 8811 	msr	BASEPRI, r3
}
 80139d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80139da:	bf00      	nop
 80139dc:	370c      	adds	r7, #12
 80139de:	46bd      	mov	sp, r7
 80139e0:	bc80      	pop	{r7}
 80139e2:	4770      	bx	lr
 80139e4:	200000d4 	.word	0x200000d4
	...

080139f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80139f0:	f3ef 8009 	mrs	r0, PSP
 80139f4:	f3bf 8f6f 	isb	sy
 80139f8:	4b0d      	ldr	r3, [pc, #52]	; (8013a30 <pxCurrentTCBConst>)
 80139fa:	681a      	ldr	r2, [r3, #0]
 80139fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013a00:	6010      	str	r0, [r2, #0]
 8013a02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8013a06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013a0a:	f380 8811 	msr	BASEPRI, r0
 8013a0e:	f7ff fba5 	bl	801315c <vTaskSwitchContext>
 8013a12:	f04f 0000 	mov.w	r0, #0
 8013a16:	f380 8811 	msr	BASEPRI, r0
 8013a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013a1e:	6819      	ldr	r1, [r3, #0]
 8013a20:	6808      	ldr	r0, [r1, #0]
 8013a22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013a26:	f380 8809 	msr	PSP, r0
 8013a2a:	f3bf 8f6f 	isb	sy
 8013a2e:	4770      	bx	lr

08013a30 <pxCurrentTCBConst>:
 8013a30:	20000cf0 	.word	0x20000cf0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013a34:	bf00      	nop
 8013a36:	bf00      	nop

08013a38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b082      	sub	sp, #8
 8013a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8013a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a42:	f383 8811 	msr	BASEPRI, r3
 8013a46:	f3bf 8f6f 	isb	sy
 8013a4a:	f3bf 8f4f 	dsb	sy
 8013a4e:	607b      	str	r3, [r7, #4]
}
 8013a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013a52:	f7ff fac5 	bl	8012fe0 <xTaskIncrementTick>
 8013a56:	4603      	mov	r3, r0
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d003      	beq.n	8013a64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013a5c:	4b06      	ldr	r3, [pc, #24]	; (8013a78 <xPortSysTickHandler+0x40>)
 8013a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a62:	601a      	str	r2, [r3, #0]
 8013a64:	2300      	movs	r3, #0
 8013a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013a68:	683b      	ldr	r3, [r7, #0]
 8013a6a:	f383 8811 	msr	BASEPRI, r3
}
 8013a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013a70:	bf00      	nop
 8013a72:	3708      	adds	r7, #8
 8013a74:	46bd      	mov	sp, r7
 8013a76:	bd80      	pop	{r7, pc}
 8013a78:	e000ed04 	.word	0xe000ed04

08013a7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013a7c:	b480      	push	{r7}
 8013a7e:	b085      	sub	sp, #20
 8013a80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013a82:	f3ef 8305 	mrs	r3, IPSR
 8013a86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	2b0f      	cmp	r3, #15
 8013a8c:	d914      	bls.n	8013ab8 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013a8e:	4a16      	ldr	r2, [pc, #88]	; (8013ae8 <vPortValidateInterruptPriority+0x6c>)
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	4413      	add	r3, r2
 8013a94:	781b      	ldrb	r3, [r3, #0]
 8013a96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013a98:	4b14      	ldr	r3, [pc, #80]	; (8013aec <vPortValidateInterruptPriority+0x70>)
 8013a9a:	781b      	ldrb	r3, [r3, #0]
 8013a9c:	7afa      	ldrb	r2, [r7, #11]
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d20a      	bcs.n	8013ab8 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8013aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aa6:	f383 8811 	msr	BASEPRI, r3
 8013aaa:	f3bf 8f6f 	isb	sy
 8013aae:	f3bf 8f4f 	dsb	sy
 8013ab2:	607b      	str	r3, [r7, #4]
}
 8013ab4:	bf00      	nop
 8013ab6:	e7fe      	b.n	8013ab6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013ab8:	4b0d      	ldr	r3, [pc, #52]	; (8013af0 <vPortValidateInterruptPriority+0x74>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013ac0:	4b0c      	ldr	r3, [pc, #48]	; (8013af4 <vPortValidateInterruptPriority+0x78>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	d90a      	bls.n	8013ade <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013acc:	f383 8811 	msr	BASEPRI, r3
 8013ad0:	f3bf 8f6f 	isb	sy
 8013ad4:	f3bf 8f4f 	dsb	sy
 8013ad8:	603b      	str	r3, [r7, #0]
}
 8013ada:	bf00      	nop
 8013adc:	e7fe      	b.n	8013adc <vPortValidateInterruptPriority+0x60>
	}
 8013ade:	bf00      	nop
 8013ae0:	3714      	adds	r7, #20
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	bc80      	pop	{r7}
 8013ae6:	4770      	bx	lr
 8013ae8:	e000e3f0 	.word	0xe000e3f0
 8013aec:	20000dd4 	.word	0x20000dd4
 8013af0:	e000ed0c 	.word	0xe000ed0c
 8013af4:	20000dd8 	.word	0x20000dd8

08013af8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013afc:	2200      	movs	r2, #0
 8013afe:	4912      	ldr	r1, [pc, #72]	; (8013b48 <MX_USB_DEVICE_Init+0x50>)
 8013b00:	4812      	ldr	r0, [pc, #72]	; (8013b4c <MX_USB_DEVICE_Init+0x54>)
 8013b02:	f7fa fe27 	bl	800e754 <USBD_Init>
 8013b06:	4603      	mov	r3, r0
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d001      	beq.n	8013b10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013b0c:	f7ee fe3e 	bl	800278c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8013b10:	490f      	ldr	r1, [pc, #60]	; (8013b50 <MX_USB_DEVICE_Init+0x58>)
 8013b12:	480e      	ldr	r0, [pc, #56]	; (8013b4c <MX_USB_DEVICE_Init+0x54>)
 8013b14:	f7fa fe49 	bl	800e7aa <USBD_RegisterClass>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d001      	beq.n	8013b22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013b1e:	f7ee fe35 	bl	800278c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8013b22:	490c      	ldr	r1, [pc, #48]	; (8013b54 <MX_USB_DEVICE_Init+0x5c>)
 8013b24:	4809      	ldr	r0, [pc, #36]	; (8013b4c <MX_USB_DEVICE_Init+0x54>)
 8013b26:	f7fa fdff 	bl	800e728 <USBD_CUSTOM_HID_RegisterInterface>
 8013b2a:	4603      	mov	r3, r0
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d001      	beq.n	8013b34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013b30:	f7ee fe2c 	bl	800278c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013b34:	4805      	ldr	r0, [pc, #20]	; (8013b4c <MX_USB_DEVICE_Init+0x54>)
 8013b36:	f7fa fe51 	bl	800e7dc <USBD_Start>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d001      	beq.n	8013b44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013b40:	f7ee fe24 	bl	800278c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013b44:	bf00      	nop
 8013b46:	bd80      	pop	{r7, pc}
 8013b48:	200000d8 	.word	0x200000d8
 8013b4c:	20000ddc 	.word	0x20000ddc
 8013b50:	20000098 	.word	0x20000098
 8013b54:	200010a8 	.word	0x200010a8

08013b58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013b58:	b480      	push	{r7}
 8013b5a:	b083      	sub	sp, #12
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	4603      	mov	r3, r0
 8013b60:	6039      	str	r1, [r7, #0]
 8013b62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013b64:	683b      	ldr	r3, [r7, #0]
 8013b66:	2212      	movs	r2, #18
 8013b68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013b6a:	4b03      	ldr	r3, [pc, #12]	; (8013b78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	370c      	adds	r7, #12
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bc80      	pop	{r7}
 8013b74:	4770      	bx	lr
 8013b76:	bf00      	nop
 8013b78:	200000f4 	.word	0x200000f4

08013b7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013b7c:	b480      	push	{r7}
 8013b7e:	b083      	sub	sp, #12
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	4603      	mov	r3, r0
 8013b84:	6039      	str	r1, [r7, #0]
 8013b86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	2204      	movs	r2, #4
 8013b8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013b8e:	4b03      	ldr	r3, [pc, #12]	; (8013b9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013b90:	4618      	mov	r0, r3
 8013b92:	370c      	adds	r7, #12
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bc80      	pop	{r7}
 8013b98:	4770      	bx	lr
 8013b9a:	bf00      	nop
 8013b9c:	20000108 	.word	0x20000108

08013ba0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b082      	sub	sp, #8
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	6039      	str	r1, [r7, #0]
 8013baa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013bac:	79fb      	ldrb	r3, [r7, #7]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d105      	bne.n	8013bbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013bb2:	683a      	ldr	r2, [r7, #0]
 8013bb4:	4907      	ldr	r1, [pc, #28]	; (8013bd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8013bb6:	4808      	ldr	r0, [pc, #32]	; (8013bd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8013bb8:	f7fb fd88 	bl	800f6cc <USBD_GetString>
 8013bbc:	e004      	b.n	8013bc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013bbe:	683a      	ldr	r2, [r7, #0]
 8013bc0:	4904      	ldr	r1, [pc, #16]	; (8013bd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8013bc2:	4805      	ldr	r0, [pc, #20]	; (8013bd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8013bc4:	f7fb fd82 	bl	800f6cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8013bc8:	4b02      	ldr	r3, [pc, #8]	; (8013bd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	3708      	adds	r7, #8
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd80      	pop	{r7, pc}
 8013bd2:	bf00      	nop
 8013bd4:	200010b8 	.word	0x200010b8
 8013bd8:	08017260 	.word	0x08017260

08013bdc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b082      	sub	sp, #8
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	4603      	mov	r3, r0
 8013be4:	6039      	str	r1, [r7, #0]
 8013be6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013be8:	683a      	ldr	r2, [r7, #0]
 8013bea:	4904      	ldr	r1, [pc, #16]	; (8013bfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013bec:	4804      	ldr	r0, [pc, #16]	; (8013c00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013bee:	f7fb fd6d 	bl	800f6cc <USBD_GetString>
  return USBD_StrDesc;
 8013bf2:	4b02      	ldr	r3, [pc, #8]	; (8013bfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	3708      	adds	r7, #8
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	bd80      	pop	{r7, pc}
 8013bfc:	200010b8 	.word	0x200010b8
 8013c00:	08017274 	.word	0x08017274

08013c04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b082      	sub	sp, #8
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	6039      	str	r1, [r7, #0]
 8013c0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013c10:	683b      	ldr	r3, [r7, #0]
 8013c12:	221a      	movs	r2, #26
 8013c14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013c16:	f000 f843 	bl	8013ca0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8013c1a:	4b02      	ldr	r3, [pc, #8]	; (8013c24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	3708      	adds	r7, #8
 8013c20:	46bd      	mov	sp, r7
 8013c22:	bd80      	pop	{r7, pc}
 8013c24:	2000010c 	.word	0x2000010c

08013c28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b082      	sub	sp, #8
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	4603      	mov	r3, r0
 8013c30:	6039      	str	r1, [r7, #0]
 8013c32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013c34:	79fb      	ldrb	r3, [r7, #7]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d105      	bne.n	8013c46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013c3a:	683a      	ldr	r2, [r7, #0]
 8013c3c:	4907      	ldr	r1, [pc, #28]	; (8013c5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8013c3e:	4808      	ldr	r0, [pc, #32]	; (8013c60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013c40:	f7fb fd44 	bl	800f6cc <USBD_GetString>
 8013c44:	e004      	b.n	8013c50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013c46:	683a      	ldr	r2, [r7, #0]
 8013c48:	4904      	ldr	r1, [pc, #16]	; (8013c5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8013c4a:	4805      	ldr	r0, [pc, #20]	; (8013c60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013c4c:	f7fb fd3e 	bl	800f6cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8013c50:	4b02      	ldr	r3, [pc, #8]	; (8013c5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013c52:	4618      	mov	r0, r3
 8013c54:	3708      	adds	r7, #8
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}
 8013c5a:	bf00      	nop
 8013c5c:	200010b8 	.word	0x200010b8
 8013c60:	08017284 	.word	0x08017284

08013c64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	6039      	str	r1, [r7, #0]
 8013c6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013c70:	79fb      	ldrb	r3, [r7, #7]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d105      	bne.n	8013c82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013c76:	683a      	ldr	r2, [r7, #0]
 8013c78:	4907      	ldr	r1, [pc, #28]	; (8013c98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013c7a:	4808      	ldr	r0, [pc, #32]	; (8013c9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013c7c:	f7fb fd26 	bl	800f6cc <USBD_GetString>
 8013c80:	e004      	b.n	8013c8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013c82:	683a      	ldr	r2, [r7, #0]
 8013c84:	4904      	ldr	r1, [pc, #16]	; (8013c98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013c86:	4805      	ldr	r0, [pc, #20]	; (8013c9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013c88:	f7fb fd20 	bl	800f6cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8013c8c:	4b02      	ldr	r3, [pc, #8]	; (8013c98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013c8e:	4618      	mov	r0, r3
 8013c90:	3708      	adds	r7, #8
 8013c92:	46bd      	mov	sp, r7
 8013c94:	bd80      	pop	{r7, pc}
 8013c96:	bf00      	nop
 8013c98:	200010b8 	.word	0x200010b8
 8013c9c:	08017290 	.word	0x08017290

08013ca0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b084      	sub	sp, #16
 8013ca4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013ca6:	4b0f      	ldr	r3, [pc, #60]	; (8013ce4 <Get_SerialNum+0x44>)
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013cac:	4b0e      	ldr	r3, [pc, #56]	; (8013ce8 <Get_SerialNum+0x48>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013cb2:	4b0e      	ldr	r3, [pc, #56]	; (8013cec <Get_SerialNum+0x4c>)
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013cb8:	68fa      	ldr	r2, [r7, #12]
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	4413      	add	r3, r2
 8013cbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d009      	beq.n	8013cda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013cc6:	2208      	movs	r2, #8
 8013cc8:	4909      	ldr	r1, [pc, #36]	; (8013cf0 <Get_SerialNum+0x50>)
 8013cca:	68f8      	ldr	r0, [r7, #12]
 8013ccc:	f000 f814 	bl	8013cf8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013cd0:	2204      	movs	r2, #4
 8013cd2:	4908      	ldr	r1, [pc, #32]	; (8013cf4 <Get_SerialNum+0x54>)
 8013cd4:	68b8      	ldr	r0, [r7, #8]
 8013cd6:	f000 f80f 	bl	8013cf8 <IntToUnicode>
  }
}
 8013cda:	bf00      	nop
 8013cdc:	3710      	adds	r7, #16
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	bd80      	pop	{r7, pc}
 8013ce2:	bf00      	nop
 8013ce4:	1ffff7e8 	.word	0x1ffff7e8
 8013ce8:	1ffff7ec 	.word	0x1ffff7ec
 8013cec:	1ffff7f0 	.word	0x1ffff7f0
 8013cf0:	2000010e 	.word	0x2000010e
 8013cf4:	2000011e 	.word	0x2000011e

08013cf8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013cf8:	b480      	push	{r7}
 8013cfa:	b087      	sub	sp, #28
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	60f8      	str	r0, [r7, #12]
 8013d00:	60b9      	str	r1, [r7, #8]
 8013d02:	4613      	mov	r3, r2
 8013d04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013d06:	2300      	movs	r3, #0
 8013d08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	75fb      	strb	r3, [r7, #23]
 8013d0e:	e027      	b.n	8013d60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	0f1b      	lsrs	r3, r3, #28
 8013d14:	2b09      	cmp	r3, #9
 8013d16:	d80b      	bhi.n	8013d30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	0f1b      	lsrs	r3, r3, #28
 8013d1c:	b2da      	uxtb	r2, r3
 8013d1e:	7dfb      	ldrb	r3, [r7, #23]
 8013d20:	005b      	lsls	r3, r3, #1
 8013d22:	4619      	mov	r1, r3
 8013d24:	68bb      	ldr	r3, [r7, #8]
 8013d26:	440b      	add	r3, r1
 8013d28:	3230      	adds	r2, #48	; 0x30
 8013d2a:	b2d2      	uxtb	r2, r2
 8013d2c:	701a      	strb	r2, [r3, #0]
 8013d2e:	e00a      	b.n	8013d46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	0f1b      	lsrs	r3, r3, #28
 8013d34:	b2da      	uxtb	r2, r3
 8013d36:	7dfb      	ldrb	r3, [r7, #23]
 8013d38:	005b      	lsls	r3, r3, #1
 8013d3a:	4619      	mov	r1, r3
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	440b      	add	r3, r1
 8013d40:	3237      	adds	r2, #55	; 0x37
 8013d42:	b2d2      	uxtb	r2, r2
 8013d44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	011b      	lsls	r3, r3, #4
 8013d4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013d4c:	7dfb      	ldrb	r3, [r7, #23]
 8013d4e:	005b      	lsls	r3, r3, #1
 8013d50:	3301      	adds	r3, #1
 8013d52:	68ba      	ldr	r2, [r7, #8]
 8013d54:	4413      	add	r3, r2
 8013d56:	2200      	movs	r2, #0
 8013d58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013d5a:	7dfb      	ldrb	r3, [r7, #23]
 8013d5c:	3301      	adds	r3, #1
 8013d5e:	75fb      	strb	r3, [r7, #23]
 8013d60:	7dfa      	ldrb	r2, [r7, #23]
 8013d62:	79fb      	ldrb	r3, [r7, #7]
 8013d64:	429a      	cmp	r2, r3
 8013d66:	d3d3      	bcc.n	8013d10 <IntToUnicode+0x18>
  }
}
 8013d68:	bf00      	nop
 8013d6a:	bf00      	nop
 8013d6c:	371c      	adds	r7, #28
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bc80      	pop	{r7}
 8013d72:	4770      	bx	lr

08013d74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b084      	sub	sp, #16
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	4a0d      	ldr	r2, [pc, #52]	; (8013db8 <HAL_PCD_MspInit+0x44>)
 8013d82:	4293      	cmp	r3, r2
 8013d84:	d113      	bne.n	8013dae <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8013d86:	4b0d      	ldr	r3, [pc, #52]	; (8013dbc <HAL_PCD_MspInit+0x48>)
 8013d88:	69db      	ldr	r3, [r3, #28]
 8013d8a:	4a0c      	ldr	r2, [pc, #48]	; (8013dbc <HAL_PCD_MspInit+0x48>)
 8013d8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013d90:	61d3      	str	r3, [r2, #28]
 8013d92:	4b0a      	ldr	r3, [pc, #40]	; (8013dbc <HAL_PCD_MspInit+0x48>)
 8013d94:	69db      	ldr	r3, [r3, #28]
 8013d96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013d9a:	60fb      	str	r3, [r7, #12]
 8013d9c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8013d9e:	2200      	movs	r2, #0
 8013da0:	2105      	movs	r1, #5
 8013da2:	2014      	movs	r0, #20
 8013da4:	f7ef fe07 	bl	80039b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8013da8:	2014      	movs	r0, #20
 8013daa:	f7ef fe20 	bl	80039ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8013dae:	bf00      	nop
 8013db0:	3710      	adds	r7, #16
 8013db2:	46bd      	mov	sp, r7
 8013db4:	bd80      	pop	{r7, pc}
 8013db6:	bf00      	nop
 8013db8:	40005c00 	.word	0x40005c00
 8013dbc:	40021000 	.word	0x40021000

08013dc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b082      	sub	sp, #8
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8013dd4:	4619      	mov	r1, r3
 8013dd6:	4610      	mov	r0, r2
 8013dd8:	f7fa fd48 	bl	800e86c <USBD_LL_SetupStage>
}
 8013ddc:	bf00      	nop
 8013dde:	3708      	adds	r7, #8
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}

08013de4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b082      	sub	sp, #8
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	460b      	mov	r3, r1
 8013dee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8013df6:	78fa      	ldrb	r2, [r7, #3]
 8013df8:	6879      	ldr	r1, [r7, #4]
 8013dfa:	4613      	mov	r3, r2
 8013dfc:	009b      	lsls	r3, r3, #2
 8013dfe:	4413      	add	r3, r2
 8013e00:	00db      	lsls	r3, r3, #3
 8013e02:	440b      	add	r3, r1
 8013e04:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8013e08:	681a      	ldr	r2, [r3, #0]
 8013e0a:	78fb      	ldrb	r3, [r7, #3]
 8013e0c:	4619      	mov	r1, r3
 8013e0e:	f7fa fd7a 	bl	800e906 <USBD_LL_DataOutStage>
}
 8013e12:	bf00      	nop
 8013e14:	3708      	adds	r7, #8
 8013e16:	46bd      	mov	sp, r7
 8013e18:	bd80      	pop	{r7, pc}

08013e1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013e1a:	b580      	push	{r7, lr}
 8013e1c:	b082      	sub	sp, #8
 8013e1e:	af00      	add	r7, sp, #0
 8013e20:	6078      	str	r0, [r7, #4]
 8013e22:	460b      	mov	r3, r1
 8013e24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8013e2c:	78fa      	ldrb	r2, [r7, #3]
 8013e2e:	6879      	ldr	r1, [r7, #4]
 8013e30:	4613      	mov	r3, r2
 8013e32:	009b      	lsls	r3, r3, #2
 8013e34:	4413      	add	r3, r2
 8013e36:	00db      	lsls	r3, r3, #3
 8013e38:	440b      	add	r3, r1
 8013e3a:	333c      	adds	r3, #60	; 0x3c
 8013e3c:	681a      	ldr	r2, [r3, #0]
 8013e3e:	78fb      	ldrb	r3, [r7, #3]
 8013e40:	4619      	mov	r1, r3
 8013e42:	f7fa fdd1 	bl	800e9e8 <USBD_LL_DataInStage>
}
 8013e46:	bf00      	nop
 8013e48:	3708      	adds	r7, #8
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}

08013e4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013e4e:	b580      	push	{r7, lr}
 8013e50:	b082      	sub	sp, #8
 8013e52:	af00      	add	r7, sp, #0
 8013e54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	f7fa fee1 	bl	800ec24 <USBD_LL_SOF>
}
 8013e62:	bf00      	nop
 8013e64:	3708      	adds	r7, #8
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}

08013e6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013e6a:	b580      	push	{r7, lr}
 8013e6c:	b084      	sub	sp, #16
 8013e6e:	af00      	add	r7, sp, #0
 8013e70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013e72:	2301      	movs	r3, #1
 8013e74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	689b      	ldr	r3, [r3, #8]
 8013e7a:	2b02      	cmp	r3, #2
 8013e7c:	d001      	beq.n	8013e82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013e7e:	f7ee fc85 	bl	800278c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8013e88:	7bfa      	ldrb	r2, [r7, #15]
 8013e8a:	4611      	mov	r1, r2
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f7fa fe91 	bl	800ebb4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f7fa fe4a 	bl	800eb32 <USBD_LL_Reset>
}
 8013e9e:	bf00      	nop
 8013ea0:	3710      	adds	r7, #16
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	bd80      	pop	{r7, pc}
	...

08013ea8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b082      	sub	sp, #8
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f7fa fe8b 	bl	800ebd2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	699b      	ldr	r3, [r3, #24]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d005      	beq.n	8013ed0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013ec4:	4b04      	ldr	r3, [pc, #16]	; (8013ed8 <HAL_PCD_SuspendCallback+0x30>)
 8013ec6:	691b      	ldr	r3, [r3, #16]
 8013ec8:	4a03      	ldr	r2, [pc, #12]	; (8013ed8 <HAL_PCD_SuspendCallback+0x30>)
 8013eca:	f043 0306 	orr.w	r3, r3, #6
 8013ece:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013ed0:	bf00      	nop
 8013ed2:	3708      	adds	r7, #8
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}
 8013ed8:	e000ed00 	.word	0xe000ed00

08013edc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b082      	sub	sp, #8
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8013eea:	4618      	mov	r0, r3
 8013eec:	f7fa fe85 	bl	800ebfa <USBD_LL_Resume>
}
 8013ef0:	bf00      	nop
 8013ef2:	3708      	adds	r7, #8
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bd80      	pop	{r7, pc}

08013ef8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b082      	sub	sp, #8
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8013f00:	4a23      	ldr	r2, [pc, #140]	; (8013f90 <USBD_LL_Init+0x98>)
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	4a21      	ldr	r2, [pc, #132]	; (8013f90 <USBD_LL_Init+0x98>)
 8013f0c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8013f10:	4b1f      	ldr	r3, [pc, #124]	; (8013f90 <USBD_LL_Init+0x98>)
 8013f12:	4a20      	ldr	r2, [pc, #128]	; (8013f94 <USBD_LL_Init+0x9c>)
 8013f14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8013f16:	4b1e      	ldr	r3, [pc, #120]	; (8013f90 <USBD_LL_Init+0x98>)
 8013f18:	2208      	movs	r2, #8
 8013f1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8013f1c:	4b1c      	ldr	r3, [pc, #112]	; (8013f90 <USBD_LL_Init+0x98>)
 8013f1e:	2202      	movs	r2, #2
 8013f20:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8013f22:	4b1b      	ldr	r3, [pc, #108]	; (8013f90 <USBD_LL_Init+0x98>)
 8013f24:	2200      	movs	r2, #0
 8013f26:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8013f28:	4b19      	ldr	r3, [pc, #100]	; (8013f90 <USBD_LL_Init+0x98>)
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8013f2e:	4b18      	ldr	r3, [pc, #96]	; (8013f90 <USBD_LL_Init+0x98>)
 8013f30:	2200      	movs	r2, #0
 8013f32:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8013f34:	4816      	ldr	r0, [pc, #88]	; (8013f90 <USBD_LL_Init+0x98>)
 8013f36:	f7f1 fe12 	bl	8005b5e <HAL_PCD_Init>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d001      	beq.n	8013f44 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8013f40:	f7ee fc24 	bl	800278c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8013f4a:	2318      	movs	r3, #24
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	2100      	movs	r1, #0
 8013f50:	f7f3 fb1a 	bl	8007588 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8013f5a:	2358      	movs	r3, #88	; 0x58
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	2180      	movs	r1, #128	; 0x80
 8013f60:	f7f3 fb12 	bl	8007588 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8013f6a:	2398      	movs	r3, #152	; 0x98
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	2181      	movs	r1, #129	; 0x81
 8013f70:	f7f3 fb0a 	bl	8007588 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8013f7a:	23d8      	movs	r3, #216	; 0xd8
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	2101      	movs	r1, #1
 8013f80:	f7f3 fb02 	bl	8007588 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8013f84:	2300      	movs	r3, #0
}
 8013f86:	4618      	mov	r0, r3
 8013f88:	3708      	adds	r7, #8
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}
 8013f8e:	bf00      	nop
 8013f90:	200012b8 	.word	0x200012b8
 8013f94:	40005c00 	.word	0x40005c00

08013f98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b084      	sub	sp, #16
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f7f1 fed4 	bl	8005d5c <HAL_PCD_Start>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013fb8:	7bfb      	ldrb	r3, [r7, #15]
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f000 f93c 	bl	8014238 <USBD_Get_USB_Status>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013fc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3710      	adds	r7, #16
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd80      	pop	{r7, pc}

08013fce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013fce:	b580      	push	{r7, lr}
 8013fd0:	b084      	sub	sp, #16
 8013fd2:	af00      	add	r7, sp, #0
 8013fd4:	6078      	str	r0, [r7, #4]
 8013fd6:	4608      	mov	r0, r1
 8013fd8:	4611      	mov	r1, r2
 8013fda:	461a      	mov	r2, r3
 8013fdc:	4603      	mov	r3, r0
 8013fde:	70fb      	strb	r3, [r7, #3]
 8013fe0:	460b      	mov	r3, r1
 8013fe2:	70bb      	strb	r3, [r7, #2]
 8013fe4:	4613      	mov	r3, r2
 8013fe6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013fe8:	2300      	movs	r3, #0
 8013fea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013fec:	2300      	movs	r3, #0
 8013fee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8013ff6:	78bb      	ldrb	r3, [r7, #2]
 8013ff8:	883a      	ldrh	r2, [r7, #0]
 8013ffa:	78f9      	ldrb	r1, [r7, #3]
 8013ffc:	f7f2 f829 	bl	8006052 <HAL_PCD_EP_Open>
 8014000:	4603      	mov	r3, r0
 8014002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014004:	7bfb      	ldrb	r3, [r7, #15]
 8014006:	4618      	mov	r0, r3
 8014008:	f000 f916 	bl	8014238 <USBD_Get_USB_Status>
 801400c:	4603      	mov	r3, r0
 801400e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014010:	7bbb      	ldrb	r3, [r7, #14]
}
 8014012:	4618      	mov	r0, r3
 8014014:	3710      	adds	r7, #16
 8014016:	46bd      	mov	sp, r7
 8014018:	bd80      	pop	{r7, pc}

0801401a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801401a:	b580      	push	{r7, lr}
 801401c:	b084      	sub	sp, #16
 801401e:	af00      	add	r7, sp, #0
 8014020:	6078      	str	r0, [r7, #4]
 8014022:	460b      	mov	r3, r1
 8014024:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014026:	2300      	movs	r3, #0
 8014028:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801402a:	2300      	movs	r3, #0
 801402c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014034:	78fa      	ldrb	r2, [r7, #3]
 8014036:	4611      	mov	r1, r2
 8014038:	4618      	mov	r0, r3
 801403a:	f7f2 f867 	bl	800610c <HAL_PCD_EP_Close>
 801403e:	4603      	mov	r3, r0
 8014040:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014042:	7bfb      	ldrb	r3, [r7, #15]
 8014044:	4618      	mov	r0, r3
 8014046:	f000 f8f7 	bl	8014238 <USBD_Get_USB_Status>
 801404a:	4603      	mov	r3, r0
 801404c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801404e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014050:	4618      	mov	r0, r3
 8014052:	3710      	adds	r7, #16
 8014054:	46bd      	mov	sp, r7
 8014056:	bd80      	pop	{r7, pc}

08014058 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b084      	sub	sp, #16
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
 8014060:	460b      	mov	r3, r1
 8014062:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014064:	2300      	movs	r3, #0
 8014066:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014068:	2300      	movs	r3, #0
 801406a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014072:	78fa      	ldrb	r2, [r7, #3]
 8014074:	4611      	mov	r1, r2
 8014076:	4618      	mov	r0, r3
 8014078:	f7f2 f8f8 	bl	800626c <HAL_PCD_EP_SetStall>
 801407c:	4603      	mov	r3, r0
 801407e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014080:	7bfb      	ldrb	r3, [r7, #15]
 8014082:	4618      	mov	r0, r3
 8014084:	f000 f8d8 	bl	8014238 <USBD_Get_USB_Status>
 8014088:	4603      	mov	r3, r0
 801408a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801408c:	7bbb      	ldrb	r3, [r7, #14]
}
 801408e:	4618      	mov	r0, r3
 8014090:	3710      	adds	r7, #16
 8014092:	46bd      	mov	sp, r7
 8014094:	bd80      	pop	{r7, pc}

08014096 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014096:	b580      	push	{r7, lr}
 8014098:	b084      	sub	sp, #16
 801409a:	af00      	add	r7, sp, #0
 801409c:	6078      	str	r0, [r7, #4]
 801409e:	460b      	mov	r3, r1
 80140a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80140a2:	2300      	movs	r3, #0
 80140a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80140a6:	2300      	movs	r3, #0
 80140a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80140b0:	78fa      	ldrb	r2, [r7, #3]
 80140b2:	4611      	mov	r1, r2
 80140b4:	4618      	mov	r0, r3
 80140b6:	f7f2 f939 	bl	800632c <HAL_PCD_EP_ClrStall>
 80140ba:	4603      	mov	r3, r0
 80140bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80140be:	7bfb      	ldrb	r3, [r7, #15]
 80140c0:	4618      	mov	r0, r3
 80140c2:	f000 f8b9 	bl	8014238 <USBD_Get_USB_Status>
 80140c6:	4603      	mov	r3, r0
 80140c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80140ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80140cc:	4618      	mov	r0, r3
 80140ce:	3710      	adds	r7, #16
 80140d0:	46bd      	mov	sp, r7
 80140d2:	bd80      	pop	{r7, pc}

080140d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80140d4:	b480      	push	{r7}
 80140d6:	b085      	sub	sp, #20
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
 80140dc:	460b      	mov	r3, r1
 80140de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80140e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80140e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	da0c      	bge.n	801410a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80140f0:	78fb      	ldrb	r3, [r7, #3]
 80140f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80140f6:	68f9      	ldr	r1, [r7, #12]
 80140f8:	1c5a      	adds	r2, r3, #1
 80140fa:	4613      	mov	r3, r2
 80140fc:	009b      	lsls	r3, r3, #2
 80140fe:	4413      	add	r3, r2
 8014100:	00db      	lsls	r3, r3, #3
 8014102:	440b      	add	r3, r1
 8014104:	3302      	adds	r3, #2
 8014106:	781b      	ldrb	r3, [r3, #0]
 8014108:	e00b      	b.n	8014122 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801410a:	78fb      	ldrb	r3, [r7, #3]
 801410c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014110:	68f9      	ldr	r1, [r7, #12]
 8014112:	4613      	mov	r3, r2
 8014114:	009b      	lsls	r3, r3, #2
 8014116:	4413      	add	r3, r2
 8014118:	00db      	lsls	r3, r3, #3
 801411a:	440b      	add	r3, r1
 801411c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8014120:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014122:	4618      	mov	r0, r3
 8014124:	3714      	adds	r7, #20
 8014126:	46bd      	mov	sp, r7
 8014128:	bc80      	pop	{r7}
 801412a:	4770      	bx	lr

0801412c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b084      	sub	sp, #16
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
 8014134:	460b      	mov	r3, r1
 8014136:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014138:	2300      	movs	r3, #0
 801413a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801413c:	2300      	movs	r3, #0
 801413e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014146:	78fa      	ldrb	r2, [r7, #3]
 8014148:	4611      	mov	r1, r2
 801414a:	4618      	mov	r0, r3
 801414c:	f7f1 ff5c 	bl	8006008 <HAL_PCD_SetAddress>
 8014150:	4603      	mov	r3, r0
 8014152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014154:	7bfb      	ldrb	r3, [r7, #15]
 8014156:	4618      	mov	r0, r3
 8014158:	f000 f86e 	bl	8014238 <USBD_Get_USB_Status>
 801415c:	4603      	mov	r3, r0
 801415e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014160:	7bbb      	ldrb	r3, [r7, #14]
}
 8014162:	4618      	mov	r0, r3
 8014164:	3710      	adds	r7, #16
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}

0801416a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801416a:	b580      	push	{r7, lr}
 801416c:	b086      	sub	sp, #24
 801416e:	af00      	add	r7, sp, #0
 8014170:	60f8      	str	r0, [r7, #12]
 8014172:	607a      	str	r2, [r7, #4]
 8014174:	461a      	mov	r2, r3
 8014176:	460b      	mov	r3, r1
 8014178:	72fb      	strb	r3, [r7, #11]
 801417a:	4613      	mov	r3, r2
 801417c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801417e:	2300      	movs	r3, #0
 8014180:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014182:	2300      	movs	r3, #0
 8014184:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801418c:	893b      	ldrh	r3, [r7, #8]
 801418e:	7af9      	ldrb	r1, [r7, #11]
 8014190:	687a      	ldr	r2, [r7, #4]
 8014192:	f7f2 f834 	bl	80061fe <HAL_PCD_EP_Transmit>
 8014196:	4603      	mov	r3, r0
 8014198:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801419a:	7dfb      	ldrb	r3, [r7, #23]
 801419c:	4618      	mov	r0, r3
 801419e:	f000 f84b 	bl	8014238 <USBD_Get_USB_Status>
 80141a2:	4603      	mov	r3, r0
 80141a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80141a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80141a8:	4618      	mov	r0, r3
 80141aa:	3718      	adds	r7, #24
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bd80      	pop	{r7, pc}

080141b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b086      	sub	sp, #24
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	60f8      	str	r0, [r7, #12]
 80141b8:	607a      	str	r2, [r7, #4]
 80141ba:	461a      	mov	r2, r3
 80141bc:	460b      	mov	r3, r1
 80141be:	72fb      	strb	r3, [r7, #11]
 80141c0:	4613      	mov	r3, r2
 80141c2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80141c4:	2300      	movs	r3, #0
 80141c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80141c8:	2300      	movs	r3, #0
 80141ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80141d2:	893b      	ldrh	r3, [r7, #8]
 80141d4:	7af9      	ldrb	r1, [r7, #11]
 80141d6:	687a      	ldr	r2, [r7, #4]
 80141d8:	f7f1 ffe0 	bl	800619c <HAL_PCD_EP_Receive>
 80141dc:	4603      	mov	r3, r0
 80141de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80141e0:	7dfb      	ldrb	r3, [r7, #23]
 80141e2:	4618      	mov	r0, r3
 80141e4:	f000 f828 	bl	8014238 <USBD_Get_USB_Status>
 80141e8:	4603      	mov	r3, r0
 80141ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80141ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80141ee:	4618      	mov	r0, r3
 80141f0:	3718      	adds	r7, #24
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd80      	pop	{r7, pc}
	...

080141f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80141f8:	b480      	push	{r7}
 80141fa:	b083      	sub	sp, #12
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8014200:	4b02      	ldr	r3, [pc, #8]	; (801420c <USBD_static_malloc+0x14>)
}
 8014202:	4618      	mov	r0, r3
 8014204:	370c      	adds	r7, #12
 8014206:	46bd      	mov	sp, r7
 8014208:	bc80      	pop	{r7}
 801420a:	4770      	bx	lr
 801420c:	200015a8 	.word	0x200015a8

08014210 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014210:	b480      	push	{r7}
 8014212:	b083      	sub	sp, #12
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]

}
 8014218:	bf00      	nop
 801421a:	370c      	adds	r7, #12
 801421c:	46bd      	mov	sp, r7
 801421e:	bc80      	pop	{r7}
 8014220:	4770      	bx	lr

08014222 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014222:	b480      	push	{r7}
 8014224:	b083      	sub	sp, #12
 8014226:	af00      	add	r7, sp, #0
 8014228:	6078      	str	r0, [r7, #4]
 801422a:	460b      	mov	r3, r1
 801422c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 801422e:	bf00      	nop
 8014230:	370c      	adds	r7, #12
 8014232:	46bd      	mov	sp, r7
 8014234:	bc80      	pop	{r7}
 8014236:	4770      	bx	lr

08014238 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014238:	b480      	push	{r7}
 801423a:	b085      	sub	sp, #20
 801423c:	af00      	add	r7, sp, #0
 801423e:	4603      	mov	r3, r0
 8014240:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014242:	2300      	movs	r3, #0
 8014244:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014246:	79fb      	ldrb	r3, [r7, #7]
 8014248:	2b03      	cmp	r3, #3
 801424a:	d817      	bhi.n	801427c <USBD_Get_USB_Status+0x44>
 801424c:	a201      	add	r2, pc, #4	; (adr r2, 8014254 <USBD_Get_USB_Status+0x1c>)
 801424e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014252:	bf00      	nop
 8014254:	08014265 	.word	0x08014265
 8014258:	0801426b 	.word	0x0801426b
 801425c:	08014271 	.word	0x08014271
 8014260:	08014277 	.word	0x08014277
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014264:	2300      	movs	r3, #0
 8014266:	73fb      	strb	r3, [r7, #15]
    break;
 8014268:	e00b      	b.n	8014282 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801426a:	2302      	movs	r3, #2
 801426c:	73fb      	strb	r3, [r7, #15]
    break;
 801426e:	e008      	b.n	8014282 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014270:	2301      	movs	r3, #1
 8014272:	73fb      	strb	r3, [r7, #15]
    break;
 8014274:	e005      	b.n	8014282 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014276:	2302      	movs	r3, #2
 8014278:	73fb      	strb	r3, [r7, #15]
    break;
 801427a:	e002      	b.n	8014282 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801427c:	2302      	movs	r3, #2
 801427e:	73fb      	strb	r3, [r7, #15]
    break;
 8014280:	bf00      	nop
  }
  return usb_status;
 8014282:	7bfb      	ldrb	r3, [r7, #15]
}
 8014284:	4618      	mov	r0, r3
 8014286:	3714      	adds	r7, #20
 8014288:	46bd      	mov	sp, r7
 801428a:	bc80      	pop	{r7}
 801428c:	4770      	bx	lr
 801428e:	bf00      	nop

08014290 <__errno>:
 8014290:	4b01      	ldr	r3, [pc, #4]	; (8014298 <__errno+0x8>)
 8014292:	6818      	ldr	r0, [r3, #0]
 8014294:	4770      	bx	lr
 8014296:	bf00      	nop
 8014298:	20000128 	.word	0x20000128

0801429c <std>:
 801429c:	2300      	movs	r3, #0
 801429e:	b510      	push	{r4, lr}
 80142a0:	4604      	mov	r4, r0
 80142a2:	e9c0 3300 	strd	r3, r3, [r0]
 80142a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80142aa:	6083      	str	r3, [r0, #8]
 80142ac:	8181      	strh	r1, [r0, #12]
 80142ae:	6643      	str	r3, [r0, #100]	; 0x64
 80142b0:	81c2      	strh	r2, [r0, #14]
 80142b2:	6183      	str	r3, [r0, #24]
 80142b4:	4619      	mov	r1, r3
 80142b6:	2208      	movs	r2, #8
 80142b8:	305c      	adds	r0, #92	; 0x5c
 80142ba:	f000 f92b 	bl	8014514 <memset>
 80142be:	4b05      	ldr	r3, [pc, #20]	; (80142d4 <std+0x38>)
 80142c0:	6224      	str	r4, [r4, #32]
 80142c2:	6263      	str	r3, [r4, #36]	; 0x24
 80142c4:	4b04      	ldr	r3, [pc, #16]	; (80142d8 <std+0x3c>)
 80142c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80142c8:	4b04      	ldr	r3, [pc, #16]	; (80142dc <std+0x40>)
 80142ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80142cc:	4b04      	ldr	r3, [pc, #16]	; (80142e0 <std+0x44>)
 80142ce:	6323      	str	r3, [r4, #48]	; 0x30
 80142d0:	bd10      	pop	{r4, pc}
 80142d2:	bf00      	nop
 80142d4:	08014fbd 	.word	0x08014fbd
 80142d8:	08014fdf 	.word	0x08014fdf
 80142dc:	08015017 	.word	0x08015017
 80142e0:	0801503b 	.word	0x0801503b

080142e4 <_cleanup_r>:
 80142e4:	4901      	ldr	r1, [pc, #4]	; (80142ec <_cleanup_r+0x8>)
 80142e6:	f000 b8af 	b.w	8014448 <_fwalk_reent>
 80142ea:	bf00      	nop
 80142ec:	08015ef1 	.word	0x08015ef1

080142f0 <__sfmoreglue>:
 80142f0:	2268      	movs	r2, #104	; 0x68
 80142f2:	b570      	push	{r4, r5, r6, lr}
 80142f4:	1e4d      	subs	r5, r1, #1
 80142f6:	4355      	muls	r5, r2
 80142f8:	460e      	mov	r6, r1
 80142fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80142fe:	f000 f979 	bl	80145f4 <_malloc_r>
 8014302:	4604      	mov	r4, r0
 8014304:	b140      	cbz	r0, 8014318 <__sfmoreglue+0x28>
 8014306:	2100      	movs	r1, #0
 8014308:	e9c0 1600 	strd	r1, r6, [r0]
 801430c:	300c      	adds	r0, #12
 801430e:	60a0      	str	r0, [r4, #8]
 8014310:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014314:	f000 f8fe 	bl	8014514 <memset>
 8014318:	4620      	mov	r0, r4
 801431a:	bd70      	pop	{r4, r5, r6, pc}

0801431c <__sfp_lock_acquire>:
 801431c:	4801      	ldr	r0, [pc, #4]	; (8014324 <__sfp_lock_acquire+0x8>)
 801431e:	f000 b8d8 	b.w	80144d2 <__retarget_lock_acquire_recursive>
 8014322:	bf00      	nop
 8014324:	200015c5 	.word	0x200015c5

08014328 <__sfp_lock_release>:
 8014328:	4801      	ldr	r0, [pc, #4]	; (8014330 <__sfp_lock_release+0x8>)
 801432a:	f000 b8d3 	b.w	80144d4 <__retarget_lock_release_recursive>
 801432e:	bf00      	nop
 8014330:	200015c5 	.word	0x200015c5

08014334 <__sinit_lock_acquire>:
 8014334:	4801      	ldr	r0, [pc, #4]	; (801433c <__sinit_lock_acquire+0x8>)
 8014336:	f000 b8cc 	b.w	80144d2 <__retarget_lock_acquire_recursive>
 801433a:	bf00      	nop
 801433c:	200015c6 	.word	0x200015c6

08014340 <__sinit_lock_release>:
 8014340:	4801      	ldr	r0, [pc, #4]	; (8014348 <__sinit_lock_release+0x8>)
 8014342:	f000 b8c7 	b.w	80144d4 <__retarget_lock_release_recursive>
 8014346:	bf00      	nop
 8014348:	200015c6 	.word	0x200015c6

0801434c <__sinit>:
 801434c:	b510      	push	{r4, lr}
 801434e:	4604      	mov	r4, r0
 8014350:	f7ff fff0 	bl	8014334 <__sinit_lock_acquire>
 8014354:	69a3      	ldr	r3, [r4, #24]
 8014356:	b11b      	cbz	r3, 8014360 <__sinit+0x14>
 8014358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801435c:	f7ff bff0 	b.w	8014340 <__sinit_lock_release>
 8014360:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014364:	6523      	str	r3, [r4, #80]	; 0x50
 8014366:	4b13      	ldr	r3, [pc, #76]	; (80143b4 <__sinit+0x68>)
 8014368:	4a13      	ldr	r2, [pc, #76]	; (80143b8 <__sinit+0x6c>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	62a2      	str	r2, [r4, #40]	; 0x28
 801436e:	42a3      	cmp	r3, r4
 8014370:	bf08      	it	eq
 8014372:	2301      	moveq	r3, #1
 8014374:	4620      	mov	r0, r4
 8014376:	bf08      	it	eq
 8014378:	61a3      	streq	r3, [r4, #24]
 801437a:	f000 f81f 	bl	80143bc <__sfp>
 801437e:	6060      	str	r0, [r4, #4]
 8014380:	4620      	mov	r0, r4
 8014382:	f000 f81b 	bl	80143bc <__sfp>
 8014386:	60a0      	str	r0, [r4, #8]
 8014388:	4620      	mov	r0, r4
 801438a:	f000 f817 	bl	80143bc <__sfp>
 801438e:	2200      	movs	r2, #0
 8014390:	2104      	movs	r1, #4
 8014392:	60e0      	str	r0, [r4, #12]
 8014394:	6860      	ldr	r0, [r4, #4]
 8014396:	f7ff ff81 	bl	801429c <std>
 801439a:	2201      	movs	r2, #1
 801439c:	2109      	movs	r1, #9
 801439e:	68a0      	ldr	r0, [r4, #8]
 80143a0:	f7ff ff7c 	bl	801429c <std>
 80143a4:	2202      	movs	r2, #2
 80143a6:	2112      	movs	r1, #18
 80143a8:	68e0      	ldr	r0, [r4, #12]
 80143aa:	f7ff ff77 	bl	801429c <std>
 80143ae:	2301      	movs	r3, #1
 80143b0:	61a3      	str	r3, [r4, #24]
 80143b2:	e7d1      	b.n	8014358 <__sinit+0xc>
 80143b4:	080305fc 	.word	0x080305fc
 80143b8:	080142e5 	.word	0x080142e5

080143bc <__sfp>:
 80143bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143be:	4607      	mov	r7, r0
 80143c0:	f7ff ffac 	bl	801431c <__sfp_lock_acquire>
 80143c4:	4b1e      	ldr	r3, [pc, #120]	; (8014440 <__sfp+0x84>)
 80143c6:	681e      	ldr	r6, [r3, #0]
 80143c8:	69b3      	ldr	r3, [r6, #24]
 80143ca:	b913      	cbnz	r3, 80143d2 <__sfp+0x16>
 80143cc:	4630      	mov	r0, r6
 80143ce:	f7ff ffbd 	bl	801434c <__sinit>
 80143d2:	3648      	adds	r6, #72	; 0x48
 80143d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80143d8:	3b01      	subs	r3, #1
 80143da:	d503      	bpl.n	80143e4 <__sfp+0x28>
 80143dc:	6833      	ldr	r3, [r6, #0]
 80143de:	b30b      	cbz	r3, 8014424 <__sfp+0x68>
 80143e0:	6836      	ldr	r6, [r6, #0]
 80143e2:	e7f7      	b.n	80143d4 <__sfp+0x18>
 80143e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80143e8:	b9d5      	cbnz	r5, 8014420 <__sfp+0x64>
 80143ea:	4b16      	ldr	r3, [pc, #88]	; (8014444 <__sfp+0x88>)
 80143ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80143f0:	60e3      	str	r3, [r4, #12]
 80143f2:	6665      	str	r5, [r4, #100]	; 0x64
 80143f4:	f000 f86c 	bl	80144d0 <__retarget_lock_init_recursive>
 80143f8:	f7ff ff96 	bl	8014328 <__sfp_lock_release>
 80143fc:	2208      	movs	r2, #8
 80143fe:	4629      	mov	r1, r5
 8014400:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014404:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014408:	6025      	str	r5, [r4, #0]
 801440a:	61a5      	str	r5, [r4, #24]
 801440c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014410:	f000 f880 	bl	8014514 <memset>
 8014414:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014418:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801441c:	4620      	mov	r0, r4
 801441e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014420:	3468      	adds	r4, #104	; 0x68
 8014422:	e7d9      	b.n	80143d8 <__sfp+0x1c>
 8014424:	2104      	movs	r1, #4
 8014426:	4638      	mov	r0, r7
 8014428:	f7ff ff62 	bl	80142f0 <__sfmoreglue>
 801442c:	4604      	mov	r4, r0
 801442e:	6030      	str	r0, [r6, #0]
 8014430:	2800      	cmp	r0, #0
 8014432:	d1d5      	bne.n	80143e0 <__sfp+0x24>
 8014434:	f7ff ff78 	bl	8014328 <__sfp_lock_release>
 8014438:	230c      	movs	r3, #12
 801443a:	603b      	str	r3, [r7, #0]
 801443c:	e7ee      	b.n	801441c <__sfp+0x60>
 801443e:	bf00      	nop
 8014440:	080305fc 	.word	0x080305fc
 8014444:	ffff0001 	.word	0xffff0001

08014448 <_fwalk_reent>:
 8014448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801444c:	4606      	mov	r6, r0
 801444e:	4688      	mov	r8, r1
 8014450:	2700      	movs	r7, #0
 8014452:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014456:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801445a:	f1b9 0901 	subs.w	r9, r9, #1
 801445e:	d505      	bpl.n	801446c <_fwalk_reent+0x24>
 8014460:	6824      	ldr	r4, [r4, #0]
 8014462:	2c00      	cmp	r4, #0
 8014464:	d1f7      	bne.n	8014456 <_fwalk_reent+0xe>
 8014466:	4638      	mov	r0, r7
 8014468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801446c:	89ab      	ldrh	r3, [r5, #12]
 801446e:	2b01      	cmp	r3, #1
 8014470:	d907      	bls.n	8014482 <_fwalk_reent+0x3a>
 8014472:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014476:	3301      	adds	r3, #1
 8014478:	d003      	beq.n	8014482 <_fwalk_reent+0x3a>
 801447a:	4629      	mov	r1, r5
 801447c:	4630      	mov	r0, r6
 801447e:	47c0      	blx	r8
 8014480:	4307      	orrs	r7, r0
 8014482:	3568      	adds	r5, #104	; 0x68
 8014484:	e7e9      	b.n	801445a <_fwalk_reent+0x12>
	...

08014488 <__libc_init_array>:
 8014488:	b570      	push	{r4, r5, r6, lr}
 801448a:	2600      	movs	r6, #0
 801448c:	4d0c      	ldr	r5, [pc, #48]	; (80144c0 <__libc_init_array+0x38>)
 801448e:	4c0d      	ldr	r4, [pc, #52]	; (80144c4 <__libc_init_array+0x3c>)
 8014490:	1b64      	subs	r4, r4, r5
 8014492:	10a4      	asrs	r4, r4, #2
 8014494:	42a6      	cmp	r6, r4
 8014496:	d109      	bne.n	80144ac <__libc_init_array+0x24>
 8014498:	f002 fe24 	bl	80170e4 <_init>
 801449c:	2600      	movs	r6, #0
 801449e:	4d0a      	ldr	r5, [pc, #40]	; (80144c8 <__libc_init_array+0x40>)
 80144a0:	4c0a      	ldr	r4, [pc, #40]	; (80144cc <__libc_init_array+0x44>)
 80144a2:	1b64      	subs	r4, r4, r5
 80144a4:	10a4      	asrs	r4, r4, #2
 80144a6:	42a6      	cmp	r6, r4
 80144a8:	d105      	bne.n	80144b6 <__libc_init_array+0x2e>
 80144aa:	bd70      	pop	{r4, r5, r6, pc}
 80144ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80144b0:	4798      	blx	r3
 80144b2:	3601      	adds	r6, #1
 80144b4:	e7ee      	b.n	8014494 <__libc_init_array+0xc>
 80144b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80144ba:	4798      	blx	r3
 80144bc:	3601      	adds	r6, #1
 80144be:	e7f2      	b.n	80144a6 <__libc_init_array+0x1e>
 80144c0:	08030974 	.word	0x08030974
 80144c4:	08030974 	.word	0x08030974
 80144c8:	08030974 	.word	0x08030974
 80144cc:	08030978 	.word	0x08030978

080144d0 <__retarget_lock_init_recursive>:
 80144d0:	4770      	bx	lr

080144d2 <__retarget_lock_acquire_recursive>:
 80144d2:	4770      	bx	lr

080144d4 <__retarget_lock_release_recursive>:
 80144d4:	4770      	bx	lr
	...

080144d8 <malloc>:
 80144d8:	4b02      	ldr	r3, [pc, #8]	; (80144e4 <malloc+0xc>)
 80144da:	4601      	mov	r1, r0
 80144dc:	6818      	ldr	r0, [r3, #0]
 80144de:	f000 b889 	b.w	80145f4 <_malloc_r>
 80144e2:	bf00      	nop
 80144e4:	20000128 	.word	0x20000128

080144e8 <free>:
 80144e8:	4b02      	ldr	r3, [pc, #8]	; (80144f4 <free+0xc>)
 80144ea:	4601      	mov	r1, r0
 80144ec:	6818      	ldr	r0, [r3, #0]
 80144ee:	f000 b819 	b.w	8014524 <_free_r>
 80144f2:	bf00      	nop
 80144f4:	20000128 	.word	0x20000128

080144f8 <memcpy>:
 80144f8:	440a      	add	r2, r1
 80144fa:	4291      	cmp	r1, r2
 80144fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8014500:	d100      	bne.n	8014504 <memcpy+0xc>
 8014502:	4770      	bx	lr
 8014504:	b510      	push	{r4, lr}
 8014506:	f811 4b01 	ldrb.w	r4, [r1], #1
 801450a:	4291      	cmp	r1, r2
 801450c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014510:	d1f9      	bne.n	8014506 <memcpy+0xe>
 8014512:	bd10      	pop	{r4, pc}

08014514 <memset>:
 8014514:	4603      	mov	r3, r0
 8014516:	4402      	add	r2, r0
 8014518:	4293      	cmp	r3, r2
 801451a:	d100      	bne.n	801451e <memset+0xa>
 801451c:	4770      	bx	lr
 801451e:	f803 1b01 	strb.w	r1, [r3], #1
 8014522:	e7f9      	b.n	8014518 <memset+0x4>

08014524 <_free_r>:
 8014524:	b538      	push	{r3, r4, r5, lr}
 8014526:	4605      	mov	r5, r0
 8014528:	2900      	cmp	r1, #0
 801452a:	d040      	beq.n	80145ae <_free_r+0x8a>
 801452c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014530:	1f0c      	subs	r4, r1, #4
 8014532:	2b00      	cmp	r3, #0
 8014534:	bfb8      	it	lt
 8014536:	18e4      	addlt	r4, r4, r3
 8014538:	f001 fd3a 	bl	8015fb0 <__malloc_lock>
 801453c:	4a1c      	ldr	r2, [pc, #112]	; (80145b0 <_free_r+0x8c>)
 801453e:	6813      	ldr	r3, [r2, #0]
 8014540:	b933      	cbnz	r3, 8014550 <_free_r+0x2c>
 8014542:	6063      	str	r3, [r4, #4]
 8014544:	6014      	str	r4, [r2, #0]
 8014546:	4628      	mov	r0, r5
 8014548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801454c:	f001 bd36 	b.w	8015fbc <__malloc_unlock>
 8014550:	42a3      	cmp	r3, r4
 8014552:	d908      	bls.n	8014566 <_free_r+0x42>
 8014554:	6820      	ldr	r0, [r4, #0]
 8014556:	1821      	adds	r1, r4, r0
 8014558:	428b      	cmp	r3, r1
 801455a:	bf01      	itttt	eq
 801455c:	6819      	ldreq	r1, [r3, #0]
 801455e:	685b      	ldreq	r3, [r3, #4]
 8014560:	1809      	addeq	r1, r1, r0
 8014562:	6021      	streq	r1, [r4, #0]
 8014564:	e7ed      	b.n	8014542 <_free_r+0x1e>
 8014566:	461a      	mov	r2, r3
 8014568:	685b      	ldr	r3, [r3, #4]
 801456a:	b10b      	cbz	r3, 8014570 <_free_r+0x4c>
 801456c:	42a3      	cmp	r3, r4
 801456e:	d9fa      	bls.n	8014566 <_free_r+0x42>
 8014570:	6811      	ldr	r1, [r2, #0]
 8014572:	1850      	adds	r0, r2, r1
 8014574:	42a0      	cmp	r0, r4
 8014576:	d10b      	bne.n	8014590 <_free_r+0x6c>
 8014578:	6820      	ldr	r0, [r4, #0]
 801457a:	4401      	add	r1, r0
 801457c:	1850      	adds	r0, r2, r1
 801457e:	4283      	cmp	r3, r0
 8014580:	6011      	str	r1, [r2, #0]
 8014582:	d1e0      	bne.n	8014546 <_free_r+0x22>
 8014584:	6818      	ldr	r0, [r3, #0]
 8014586:	685b      	ldr	r3, [r3, #4]
 8014588:	4401      	add	r1, r0
 801458a:	6011      	str	r1, [r2, #0]
 801458c:	6053      	str	r3, [r2, #4]
 801458e:	e7da      	b.n	8014546 <_free_r+0x22>
 8014590:	d902      	bls.n	8014598 <_free_r+0x74>
 8014592:	230c      	movs	r3, #12
 8014594:	602b      	str	r3, [r5, #0]
 8014596:	e7d6      	b.n	8014546 <_free_r+0x22>
 8014598:	6820      	ldr	r0, [r4, #0]
 801459a:	1821      	adds	r1, r4, r0
 801459c:	428b      	cmp	r3, r1
 801459e:	bf01      	itttt	eq
 80145a0:	6819      	ldreq	r1, [r3, #0]
 80145a2:	685b      	ldreq	r3, [r3, #4]
 80145a4:	1809      	addeq	r1, r1, r0
 80145a6:	6021      	streq	r1, [r4, #0]
 80145a8:	6063      	str	r3, [r4, #4]
 80145aa:	6054      	str	r4, [r2, #4]
 80145ac:	e7cb      	b.n	8014546 <_free_r+0x22>
 80145ae:	bd38      	pop	{r3, r4, r5, pc}
 80145b0:	200015c8 	.word	0x200015c8

080145b4 <sbrk_aligned>:
 80145b4:	b570      	push	{r4, r5, r6, lr}
 80145b6:	4e0e      	ldr	r6, [pc, #56]	; (80145f0 <sbrk_aligned+0x3c>)
 80145b8:	460c      	mov	r4, r1
 80145ba:	6831      	ldr	r1, [r6, #0]
 80145bc:	4605      	mov	r5, r0
 80145be:	b911      	cbnz	r1, 80145c6 <sbrk_aligned+0x12>
 80145c0:	f000 fcec 	bl	8014f9c <_sbrk_r>
 80145c4:	6030      	str	r0, [r6, #0]
 80145c6:	4621      	mov	r1, r4
 80145c8:	4628      	mov	r0, r5
 80145ca:	f000 fce7 	bl	8014f9c <_sbrk_r>
 80145ce:	1c43      	adds	r3, r0, #1
 80145d0:	d00a      	beq.n	80145e8 <sbrk_aligned+0x34>
 80145d2:	1cc4      	adds	r4, r0, #3
 80145d4:	f024 0403 	bic.w	r4, r4, #3
 80145d8:	42a0      	cmp	r0, r4
 80145da:	d007      	beq.n	80145ec <sbrk_aligned+0x38>
 80145dc:	1a21      	subs	r1, r4, r0
 80145de:	4628      	mov	r0, r5
 80145e0:	f000 fcdc 	bl	8014f9c <_sbrk_r>
 80145e4:	3001      	adds	r0, #1
 80145e6:	d101      	bne.n	80145ec <sbrk_aligned+0x38>
 80145e8:	f04f 34ff 	mov.w	r4, #4294967295
 80145ec:	4620      	mov	r0, r4
 80145ee:	bd70      	pop	{r4, r5, r6, pc}
 80145f0:	200015cc 	.word	0x200015cc

080145f4 <_malloc_r>:
 80145f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145f8:	1ccd      	adds	r5, r1, #3
 80145fa:	f025 0503 	bic.w	r5, r5, #3
 80145fe:	3508      	adds	r5, #8
 8014600:	2d0c      	cmp	r5, #12
 8014602:	bf38      	it	cc
 8014604:	250c      	movcc	r5, #12
 8014606:	2d00      	cmp	r5, #0
 8014608:	4607      	mov	r7, r0
 801460a:	db01      	blt.n	8014610 <_malloc_r+0x1c>
 801460c:	42a9      	cmp	r1, r5
 801460e:	d905      	bls.n	801461c <_malloc_r+0x28>
 8014610:	230c      	movs	r3, #12
 8014612:	2600      	movs	r6, #0
 8014614:	603b      	str	r3, [r7, #0]
 8014616:	4630      	mov	r0, r6
 8014618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801461c:	4e2e      	ldr	r6, [pc, #184]	; (80146d8 <_malloc_r+0xe4>)
 801461e:	f001 fcc7 	bl	8015fb0 <__malloc_lock>
 8014622:	6833      	ldr	r3, [r6, #0]
 8014624:	461c      	mov	r4, r3
 8014626:	bb34      	cbnz	r4, 8014676 <_malloc_r+0x82>
 8014628:	4629      	mov	r1, r5
 801462a:	4638      	mov	r0, r7
 801462c:	f7ff ffc2 	bl	80145b4 <sbrk_aligned>
 8014630:	1c43      	adds	r3, r0, #1
 8014632:	4604      	mov	r4, r0
 8014634:	d14d      	bne.n	80146d2 <_malloc_r+0xde>
 8014636:	6834      	ldr	r4, [r6, #0]
 8014638:	4626      	mov	r6, r4
 801463a:	2e00      	cmp	r6, #0
 801463c:	d140      	bne.n	80146c0 <_malloc_r+0xcc>
 801463e:	6823      	ldr	r3, [r4, #0]
 8014640:	4631      	mov	r1, r6
 8014642:	4638      	mov	r0, r7
 8014644:	eb04 0803 	add.w	r8, r4, r3
 8014648:	f000 fca8 	bl	8014f9c <_sbrk_r>
 801464c:	4580      	cmp	r8, r0
 801464e:	d13a      	bne.n	80146c6 <_malloc_r+0xd2>
 8014650:	6821      	ldr	r1, [r4, #0]
 8014652:	3503      	adds	r5, #3
 8014654:	1a6d      	subs	r5, r5, r1
 8014656:	f025 0503 	bic.w	r5, r5, #3
 801465a:	3508      	adds	r5, #8
 801465c:	2d0c      	cmp	r5, #12
 801465e:	bf38      	it	cc
 8014660:	250c      	movcc	r5, #12
 8014662:	4638      	mov	r0, r7
 8014664:	4629      	mov	r1, r5
 8014666:	f7ff ffa5 	bl	80145b4 <sbrk_aligned>
 801466a:	3001      	adds	r0, #1
 801466c:	d02b      	beq.n	80146c6 <_malloc_r+0xd2>
 801466e:	6823      	ldr	r3, [r4, #0]
 8014670:	442b      	add	r3, r5
 8014672:	6023      	str	r3, [r4, #0]
 8014674:	e00e      	b.n	8014694 <_malloc_r+0xa0>
 8014676:	6822      	ldr	r2, [r4, #0]
 8014678:	1b52      	subs	r2, r2, r5
 801467a:	d41e      	bmi.n	80146ba <_malloc_r+0xc6>
 801467c:	2a0b      	cmp	r2, #11
 801467e:	d916      	bls.n	80146ae <_malloc_r+0xba>
 8014680:	1961      	adds	r1, r4, r5
 8014682:	42a3      	cmp	r3, r4
 8014684:	6025      	str	r5, [r4, #0]
 8014686:	bf18      	it	ne
 8014688:	6059      	strne	r1, [r3, #4]
 801468a:	6863      	ldr	r3, [r4, #4]
 801468c:	bf08      	it	eq
 801468e:	6031      	streq	r1, [r6, #0]
 8014690:	5162      	str	r2, [r4, r5]
 8014692:	604b      	str	r3, [r1, #4]
 8014694:	4638      	mov	r0, r7
 8014696:	f104 060b 	add.w	r6, r4, #11
 801469a:	f001 fc8f 	bl	8015fbc <__malloc_unlock>
 801469e:	f026 0607 	bic.w	r6, r6, #7
 80146a2:	1d23      	adds	r3, r4, #4
 80146a4:	1af2      	subs	r2, r6, r3
 80146a6:	d0b6      	beq.n	8014616 <_malloc_r+0x22>
 80146a8:	1b9b      	subs	r3, r3, r6
 80146aa:	50a3      	str	r3, [r4, r2]
 80146ac:	e7b3      	b.n	8014616 <_malloc_r+0x22>
 80146ae:	6862      	ldr	r2, [r4, #4]
 80146b0:	42a3      	cmp	r3, r4
 80146b2:	bf0c      	ite	eq
 80146b4:	6032      	streq	r2, [r6, #0]
 80146b6:	605a      	strne	r2, [r3, #4]
 80146b8:	e7ec      	b.n	8014694 <_malloc_r+0xa0>
 80146ba:	4623      	mov	r3, r4
 80146bc:	6864      	ldr	r4, [r4, #4]
 80146be:	e7b2      	b.n	8014626 <_malloc_r+0x32>
 80146c0:	4634      	mov	r4, r6
 80146c2:	6876      	ldr	r6, [r6, #4]
 80146c4:	e7b9      	b.n	801463a <_malloc_r+0x46>
 80146c6:	230c      	movs	r3, #12
 80146c8:	4638      	mov	r0, r7
 80146ca:	603b      	str	r3, [r7, #0]
 80146cc:	f001 fc76 	bl	8015fbc <__malloc_unlock>
 80146d0:	e7a1      	b.n	8014616 <_malloc_r+0x22>
 80146d2:	6025      	str	r5, [r4, #0]
 80146d4:	e7de      	b.n	8014694 <_malloc_r+0xa0>
 80146d6:	bf00      	nop
 80146d8:	200015c8 	.word	0x200015c8

080146dc <__cvt>:
 80146dc:	2b00      	cmp	r3, #0
 80146de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146e2:	461f      	mov	r7, r3
 80146e4:	bfbb      	ittet	lt
 80146e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80146ea:	461f      	movlt	r7, r3
 80146ec:	2300      	movge	r3, #0
 80146ee:	232d      	movlt	r3, #45	; 0x2d
 80146f0:	b088      	sub	sp, #32
 80146f2:	4614      	mov	r4, r2
 80146f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80146f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80146f8:	7013      	strb	r3, [r2, #0]
 80146fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80146fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8014700:	f023 0820 	bic.w	r8, r3, #32
 8014704:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014708:	d005      	beq.n	8014716 <__cvt+0x3a>
 801470a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801470e:	d100      	bne.n	8014712 <__cvt+0x36>
 8014710:	3501      	adds	r5, #1
 8014712:	2302      	movs	r3, #2
 8014714:	e000      	b.n	8014718 <__cvt+0x3c>
 8014716:	2303      	movs	r3, #3
 8014718:	aa07      	add	r2, sp, #28
 801471a:	9204      	str	r2, [sp, #16]
 801471c:	aa06      	add	r2, sp, #24
 801471e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8014722:	e9cd 3500 	strd	r3, r5, [sp]
 8014726:	4622      	mov	r2, r4
 8014728:	463b      	mov	r3, r7
 801472a:	f000 fd71 	bl	8015210 <_dtoa_r>
 801472e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014732:	4606      	mov	r6, r0
 8014734:	d102      	bne.n	801473c <__cvt+0x60>
 8014736:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014738:	07db      	lsls	r3, r3, #31
 801473a:	d522      	bpl.n	8014782 <__cvt+0xa6>
 801473c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014740:	eb06 0905 	add.w	r9, r6, r5
 8014744:	d110      	bne.n	8014768 <__cvt+0x8c>
 8014746:	7833      	ldrb	r3, [r6, #0]
 8014748:	2b30      	cmp	r3, #48	; 0x30
 801474a:	d10a      	bne.n	8014762 <__cvt+0x86>
 801474c:	2200      	movs	r2, #0
 801474e:	2300      	movs	r3, #0
 8014750:	4620      	mov	r0, r4
 8014752:	4639      	mov	r1, r7
 8014754:	f7ec f998 	bl	8000a88 <__aeabi_dcmpeq>
 8014758:	b918      	cbnz	r0, 8014762 <__cvt+0x86>
 801475a:	f1c5 0501 	rsb	r5, r5, #1
 801475e:	f8ca 5000 	str.w	r5, [sl]
 8014762:	f8da 3000 	ldr.w	r3, [sl]
 8014766:	4499      	add	r9, r3
 8014768:	2200      	movs	r2, #0
 801476a:	2300      	movs	r3, #0
 801476c:	4620      	mov	r0, r4
 801476e:	4639      	mov	r1, r7
 8014770:	f7ec f98a 	bl	8000a88 <__aeabi_dcmpeq>
 8014774:	b108      	cbz	r0, 801477a <__cvt+0x9e>
 8014776:	f8cd 901c 	str.w	r9, [sp, #28]
 801477a:	2230      	movs	r2, #48	; 0x30
 801477c:	9b07      	ldr	r3, [sp, #28]
 801477e:	454b      	cmp	r3, r9
 8014780:	d307      	bcc.n	8014792 <__cvt+0xb6>
 8014782:	4630      	mov	r0, r6
 8014784:	9b07      	ldr	r3, [sp, #28]
 8014786:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014788:	1b9b      	subs	r3, r3, r6
 801478a:	6013      	str	r3, [r2, #0]
 801478c:	b008      	add	sp, #32
 801478e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014792:	1c59      	adds	r1, r3, #1
 8014794:	9107      	str	r1, [sp, #28]
 8014796:	701a      	strb	r2, [r3, #0]
 8014798:	e7f0      	b.n	801477c <__cvt+0xa0>

0801479a <__exponent>:
 801479a:	4603      	mov	r3, r0
 801479c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801479e:	2900      	cmp	r1, #0
 80147a0:	f803 2b02 	strb.w	r2, [r3], #2
 80147a4:	bfb6      	itet	lt
 80147a6:	222d      	movlt	r2, #45	; 0x2d
 80147a8:	222b      	movge	r2, #43	; 0x2b
 80147aa:	4249      	neglt	r1, r1
 80147ac:	2909      	cmp	r1, #9
 80147ae:	7042      	strb	r2, [r0, #1]
 80147b0:	dd2b      	ble.n	801480a <__exponent+0x70>
 80147b2:	f10d 0407 	add.w	r4, sp, #7
 80147b6:	46a4      	mov	ip, r4
 80147b8:	270a      	movs	r7, #10
 80147ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80147be:	460a      	mov	r2, r1
 80147c0:	46a6      	mov	lr, r4
 80147c2:	fb07 1516 	mls	r5, r7, r6, r1
 80147c6:	2a63      	cmp	r2, #99	; 0x63
 80147c8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80147cc:	4631      	mov	r1, r6
 80147ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80147d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80147d6:	dcf0      	bgt.n	80147ba <__exponent+0x20>
 80147d8:	3130      	adds	r1, #48	; 0x30
 80147da:	f1ae 0502 	sub.w	r5, lr, #2
 80147de:	f804 1c01 	strb.w	r1, [r4, #-1]
 80147e2:	4629      	mov	r1, r5
 80147e4:	1c44      	adds	r4, r0, #1
 80147e6:	4561      	cmp	r1, ip
 80147e8:	d30a      	bcc.n	8014800 <__exponent+0x66>
 80147ea:	f10d 0209 	add.w	r2, sp, #9
 80147ee:	eba2 020e 	sub.w	r2, r2, lr
 80147f2:	4565      	cmp	r5, ip
 80147f4:	bf88      	it	hi
 80147f6:	2200      	movhi	r2, #0
 80147f8:	4413      	add	r3, r2
 80147fa:	1a18      	subs	r0, r3, r0
 80147fc:	b003      	add	sp, #12
 80147fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014800:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014804:	f804 2f01 	strb.w	r2, [r4, #1]!
 8014808:	e7ed      	b.n	80147e6 <__exponent+0x4c>
 801480a:	2330      	movs	r3, #48	; 0x30
 801480c:	3130      	adds	r1, #48	; 0x30
 801480e:	7083      	strb	r3, [r0, #2]
 8014810:	70c1      	strb	r1, [r0, #3]
 8014812:	1d03      	adds	r3, r0, #4
 8014814:	e7f1      	b.n	80147fa <__exponent+0x60>
	...

08014818 <_printf_float>:
 8014818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801481c:	b091      	sub	sp, #68	; 0x44
 801481e:	460c      	mov	r4, r1
 8014820:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8014824:	4616      	mov	r6, r2
 8014826:	461f      	mov	r7, r3
 8014828:	4605      	mov	r5, r0
 801482a:	f001 fb9d 	bl	8015f68 <_localeconv_r>
 801482e:	6803      	ldr	r3, [r0, #0]
 8014830:	4618      	mov	r0, r3
 8014832:	9309      	str	r3, [sp, #36]	; 0x24
 8014834:	f7eb fcfc 	bl	8000230 <strlen>
 8014838:	2300      	movs	r3, #0
 801483a:	930e      	str	r3, [sp, #56]	; 0x38
 801483c:	f8d8 3000 	ldr.w	r3, [r8]
 8014840:	900a      	str	r0, [sp, #40]	; 0x28
 8014842:	3307      	adds	r3, #7
 8014844:	f023 0307 	bic.w	r3, r3, #7
 8014848:	f103 0208 	add.w	r2, r3, #8
 801484c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8014850:	f8d4 b000 	ldr.w	fp, [r4]
 8014854:	f8c8 2000 	str.w	r2, [r8]
 8014858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801485c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014860:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8014864:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8014868:	930b      	str	r3, [sp, #44]	; 0x2c
 801486a:	f04f 32ff 	mov.w	r2, #4294967295
 801486e:	4640      	mov	r0, r8
 8014870:	4b9c      	ldr	r3, [pc, #624]	; (8014ae4 <_printf_float+0x2cc>)
 8014872:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014874:	f7ec f93a 	bl	8000aec <__aeabi_dcmpun>
 8014878:	bb70      	cbnz	r0, 80148d8 <_printf_float+0xc0>
 801487a:	f04f 32ff 	mov.w	r2, #4294967295
 801487e:	4640      	mov	r0, r8
 8014880:	4b98      	ldr	r3, [pc, #608]	; (8014ae4 <_printf_float+0x2cc>)
 8014882:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014884:	f7ec f914 	bl	8000ab0 <__aeabi_dcmple>
 8014888:	bb30      	cbnz	r0, 80148d8 <_printf_float+0xc0>
 801488a:	2200      	movs	r2, #0
 801488c:	2300      	movs	r3, #0
 801488e:	4640      	mov	r0, r8
 8014890:	4651      	mov	r1, sl
 8014892:	f7ec f903 	bl	8000a9c <__aeabi_dcmplt>
 8014896:	b110      	cbz	r0, 801489e <_printf_float+0x86>
 8014898:	232d      	movs	r3, #45	; 0x2d
 801489a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801489e:	4b92      	ldr	r3, [pc, #584]	; (8014ae8 <_printf_float+0x2d0>)
 80148a0:	4892      	ldr	r0, [pc, #584]	; (8014aec <_printf_float+0x2d4>)
 80148a2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80148a6:	bf94      	ite	ls
 80148a8:	4698      	movls	r8, r3
 80148aa:	4680      	movhi	r8, r0
 80148ac:	2303      	movs	r3, #3
 80148ae:	f04f 0a00 	mov.w	sl, #0
 80148b2:	6123      	str	r3, [r4, #16]
 80148b4:	f02b 0304 	bic.w	r3, fp, #4
 80148b8:	6023      	str	r3, [r4, #0]
 80148ba:	4633      	mov	r3, r6
 80148bc:	4621      	mov	r1, r4
 80148be:	4628      	mov	r0, r5
 80148c0:	9700      	str	r7, [sp, #0]
 80148c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80148c4:	f000 f9d4 	bl	8014c70 <_printf_common>
 80148c8:	3001      	adds	r0, #1
 80148ca:	f040 8090 	bne.w	80149ee <_printf_float+0x1d6>
 80148ce:	f04f 30ff 	mov.w	r0, #4294967295
 80148d2:	b011      	add	sp, #68	; 0x44
 80148d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148d8:	4642      	mov	r2, r8
 80148da:	4653      	mov	r3, sl
 80148dc:	4640      	mov	r0, r8
 80148de:	4651      	mov	r1, sl
 80148e0:	f7ec f904 	bl	8000aec <__aeabi_dcmpun>
 80148e4:	b148      	cbz	r0, 80148fa <_printf_float+0xe2>
 80148e6:	f1ba 0f00 	cmp.w	sl, #0
 80148ea:	bfb8      	it	lt
 80148ec:	232d      	movlt	r3, #45	; 0x2d
 80148ee:	4880      	ldr	r0, [pc, #512]	; (8014af0 <_printf_float+0x2d8>)
 80148f0:	bfb8      	it	lt
 80148f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80148f6:	4b7f      	ldr	r3, [pc, #508]	; (8014af4 <_printf_float+0x2dc>)
 80148f8:	e7d3      	b.n	80148a2 <_printf_float+0x8a>
 80148fa:	6863      	ldr	r3, [r4, #4]
 80148fc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8014900:	1c5a      	adds	r2, r3, #1
 8014902:	d142      	bne.n	801498a <_printf_float+0x172>
 8014904:	2306      	movs	r3, #6
 8014906:	6063      	str	r3, [r4, #4]
 8014908:	2200      	movs	r2, #0
 801490a:	9206      	str	r2, [sp, #24]
 801490c:	aa0e      	add	r2, sp, #56	; 0x38
 801490e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8014912:	aa0d      	add	r2, sp, #52	; 0x34
 8014914:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8014918:	9203      	str	r2, [sp, #12]
 801491a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 801491e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014922:	6023      	str	r3, [r4, #0]
 8014924:	6863      	ldr	r3, [r4, #4]
 8014926:	4642      	mov	r2, r8
 8014928:	9300      	str	r3, [sp, #0]
 801492a:	4628      	mov	r0, r5
 801492c:	4653      	mov	r3, sl
 801492e:	910b      	str	r1, [sp, #44]	; 0x2c
 8014930:	f7ff fed4 	bl	80146dc <__cvt>
 8014934:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014936:	4680      	mov	r8, r0
 8014938:	2947      	cmp	r1, #71	; 0x47
 801493a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801493c:	d108      	bne.n	8014950 <_printf_float+0x138>
 801493e:	1cc8      	adds	r0, r1, #3
 8014940:	db02      	blt.n	8014948 <_printf_float+0x130>
 8014942:	6863      	ldr	r3, [r4, #4]
 8014944:	4299      	cmp	r1, r3
 8014946:	dd40      	ble.n	80149ca <_printf_float+0x1b2>
 8014948:	f1a9 0902 	sub.w	r9, r9, #2
 801494c:	fa5f f989 	uxtb.w	r9, r9
 8014950:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014954:	d81f      	bhi.n	8014996 <_printf_float+0x17e>
 8014956:	464a      	mov	r2, r9
 8014958:	3901      	subs	r1, #1
 801495a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801495e:	910d      	str	r1, [sp, #52]	; 0x34
 8014960:	f7ff ff1b 	bl	801479a <__exponent>
 8014964:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014966:	4682      	mov	sl, r0
 8014968:	1813      	adds	r3, r2, r0
 801496a:	2a01      	cmp	r2, #1
 801496c:	6123      	str	r3, [r4, #16]
 801496e:	dc02      	bgt.n	8014976 <_printf_float+0x15e>
 8014970:	6822      	ldr	r2, [r4, #0]
 8014972:	07d2      	lsls	r2, r2, #31
 8014974:	d501      	bpl.n	801497a <_printf_float+0x162>
 8014976:	3301      	adds	r3, #1
 8014978:	6123      	str	r3, [r4, #16]
 801497a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801497e:	2b00      	cmp	r3, #0
 8014980:	d09b      	beq.n	80148ba <_printf_float+0xa2>
 8014982:	232d      	movs	r3, #45	; 0x2d
 8014984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014988:	e797      	b.n	80148ba <_printf_float+0xa2>
 801498a:	2947      	cmp	r1, #71	; 0x47
 801498c:	d1bc      	bne.n	8014908 <_printf_float+0xf0>
 801498e:	2b00      	cmp	r3, #0
 8014990:	d1ba      	bne.n	8014908 <_printf_float+0xf0>
 8014992:	2301      	movs	r3, #1
 8014994:	e7b7      	b.n	8014906 <_printf_float+0xee>
 8014996:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801499a:	d118      	bne.n	80149ce <_printf_float+0x1b6>
 801499c:	2900      	cmp	r1, #0
 801499e:	6863      	ldr	r3, [r4, #4]
 80149a0:	dd0b      	ble.n	80149ba <_printf_float+0x1a2>
 80149a2:	6121      	str	r1, [r4, #16]
 80149a4:	b913      	cbnz	r3, 80149ac <_printf_float+0x194>
 80149a6:	6822      	ldr	r2, [r4, #0]
 80149a8:	07d0      	lsls	r0, r2, #31
 80149aa:	d502      	bpl.n	80149b2 <_printf_float+0x19a>
 80149ac:	3301      	adds	r3, #1
 80149ae:	440b      	add	r3, r1
 80149b0:	6123      	str	r3, [r4, #16]
 80149b2:	f04f 0a00 	mov.w	sl, #0
 80149b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80149b8:	e7df      	b.n	801497a <_printf_float+0x162>
 80149ba:	b913      	cbnz	r3, 80149c2 <_printf_float+0x1aa>
 80149bc:	6822      	ldr	r2, [r4, #0]
 80149be:	07d2      	lsls	r2, r2, #31
 80149c0:	d501      	bpl.n	80149c6 <_printf_float+0x1ae>
 80149c2:	3302      	adds	r3, #2
 80149c4:	e7f4      	b.n	80149b0 <_printf_float+0x198>
 80149c6:	2301      	movs	r3, #1
 80149c8:	e7f2      	b.n	80149b0 <_printf_float+0x198>
 80149ca:	f04f 0967 	mov.w	r9, #103	; 0x67
 80149ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149d0:	4299      	cmp	r1, r3
 80149d2:	db05      	blt.n	80149e0 <_printf_float+0x1c8>
 80149d4:	6823      	ldr	r3, [r4, #0]
 80149d6:	6121      	str	r1, [r4, #16]
 80149d8:	07d8      	lsls	r0, r3, #31
 80149da:	d5ea      	bpl.n	80149b2 <_printf_float+0x19a>
 80149dc:	1c4b      	adds	r3, r1, #1
 80149de:	e7e7      	b.n	80149b0 <_printf_float+0x198>
 80149e0:	2900      	cmp	r1, #0
 80149e2:	bfcc      	ite	gt
 80149e4:	2201      	movgt	r2, #1
 80149e6:	f1c1 0202 	rsble	r2, r1, #2
 80149ea:	4413      	add	r3, r2
 80149ec:	e7e0      	b.n	80149b0 <_printf_float+0x198>
 80149ee:	6823      	ldr	r3, [r4, #0]
 80149f0:	055a      	lsls	r2, r3, #21
 80149f2:	d407      	bmi.n	8014a04 <_printf_float+0x1ec>
 80149f4:	6923      	ldr	r3, [r4, #16]
 80149f6:	4642      	mov	r2, r8
 80149f8:	4631      	mov	r1, r6
 80149fa:	4628      	mov	r0, r5
 80149fc:	47b8      	blx	r7
 80149fe:	3001      	adds	r0, #1
 8014a00:	d12b      	bne.n	8014a5a <_printf_float+0x242>
 8014a02:	e764      	b.n	80148ce <_printf_float+0xb6>
 8014a04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014a08:	f240 80dd 	bls.w	8014bc6 <_printf_float+0x3ae>
 8014a0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014a10:	2200      	movs	r2, #0
 8014a12:	2300      	movs	r3, #0
 8014a14:	f7ec f838 	bl	8000a88 <__aeabi_dcmpeq>
 8014a18:	2800      	cmp	r0, #0
 8014a1a:	d033      	beq.n	8014a84 <_printf_float+0x26c>
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	4631      	mov	r1, r6
 8014a20:	4628      	mov	r0, r5
 8014a22:	4a35      	ldr	r2, [pc, #212]	; (8014af8 <_printf_float+0x2e0>)
 8014a24:	47b8      	blx	r7
 8014a26:	3001      	adds	r0, #1
 8014a28:	f43f af51 	beq.w	80148ce <_printf_float+0xb6>
 8014a2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8014a30:	429a      	cmp	r2, r3
 8014a32:	db02      	blt.n	8014a3a <_printf_float+0x222>
 8014a34:	6823      	ldr	r3, [r4, #0]
 8014a36:	07d8      	lsls	r0, r3, #31
 8014a38:	d50f      	bpl.n	8014a5a <_printf_float+0x242>
 8014a3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014a3e:	4631      	mov	r1, r6
 8014a40:	4628      	mov	r0, r5
 8014a42:	47b8      	blx	r7
 8014a44:	3001      	adds	r0, #1
 8014a46:	f43f af42 	beq.w	80148ce <_printf_float+0xb6>
 8014a4a:	f04f 0800 	mov.w	r8, #0
 8014a4e:	f104 091a 	add.w	r9, r4, #26
 8014a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a54:	3b01      	subs	r3, #1
 8014a56:	4543      	cmp	r3, r8
 8014a58:	dc09      	bgt.n	8014a6e <_printf_float+0x256>
 8014a5a:	6823      	ldr	r3, [r4, #0]
 8014a5c:	079b      	lsls	r3, r3, #30
 8014a5e:	f100 8102 	bmi.w	8014c66 <_printf_float+0x44e>
 8014a62:	68e0      	ldr	r0, [r4, #12]
 8014a64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a66:	4298      	cmp	r0, r3
 8014a68:	bfb8      	it	lt
 8014a6a:	4618      	movlt	r0, r3
 8014a6c:	e731      	b.n	80148d2 <_printf_float+0xba>
 8014a6e:	2301      	movs	r3, #1
 8014a70:	464a      	mov	r2, r9
 8014a72:	4631      	mov	r1, r6
 8014a74:	4628      	mov	r0, r5
 8014a76:	47b8      	blx	r7
 8014a78:	3001      	adds	r0, #1
 8014a7a:	f43f af28 	beq.w	80148ce <_printf_float+0xb6>
 8014a7e:	f108 0801 	add.w	r8, r8, #1
 8014a82:	e7e6      	b.n	8014a52 <_printf_float+0x23a>
 8014a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	dc38      	bgt.n	8014afc <_printf_float+0x2e4>
 8014a8a:	2301      	movs	r3, #1
 8014a8c:	4631      	mov	r1, r6
 8014a8e:	4628      	mov	r0, r5
 8014a90:	4a19      	ldr	r2, [pc, #100]	; (8014af8 <_printf_float+0x2e0>)
 8014a92:	47b8      	blx	r7
 8014a94:	3001      	adds	r0, #1
 8014a96:	f43f af1a 	beq.w	80148ce <_printf_float+0xb6>
 8014a9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8014a9e:	4313      	orrs	r3, r2
 8014aa0:	d102      	bne.n	8014aa8 <_printf_float+0x290>
 8014aa2:	6823      	ldr	r3, [r4, #0]
 8014aa4:	07d9      	lsls	r1, r3, #31
 8014aa6:	d5d8      	bpl.n	8014a5a <_printf_float+0x242>
 8014aa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014aac:	4631      	mov	r1, r6
 8014aae:	4628      	mov	r0, r5
 8014ab0:	47b8      	blx	r7
 8014ab2:	3001      	adds	r0, #1
 8014ab4:	f43f af0b 	beq.w	80148ce <_printf_float+0xb6>
 8014ab8:	f04f 0900 	mov.w	r9, #0
 8014abc:	f104 0a1a 	add.w	sl, r4, #26
 8014ac0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ac2:	425b      	negs	r3, r3
 8014ac4:	454b      	cmp	r3, r9
 8014ac6:	dc01      	bgt.n	8014acc <_printf_float+0x2b4>
 8014ac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014aca:	e794      	b.n	80149f6 <_printf_float+0x1de>
 8014acc:	2301      	movs	r3, #1
 8014ace:	4652      	mov	r2, sl
 8014ad0:	4631      	mov	r1, r6
 8014ad2:	4628      	mov	r0, r5
 8014ad4:	47b8      	blx	r7
 8014ad6:	3001      	adds	r0, #1
 8014ad8:	f43f aef9 	beq.w	80148ce <_printf_float+0xb6>
 8014adc:	f109 0901 	add.w	r9, r9, #1
 8014ae0:	e7ee      	b.n	8014ac0 <_printf_float+0x2a8>
 8014ae2:	bf00      	nop
 8014ae4:	7fefffff 	.word	0x7fefffff
 8014ae8:	08030600 	.word	0x08030600
 8014aec:	08030604 	.word	0x08030604
 8014af0:	0803060c 	.word	0x0803060c
 8014af4:	08030608 	.word	0x08030608
 8014af8:	08030610 	.word	0x08030610
 8014afc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014afe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014b00:	429a      	cmp	r2, r3
 8014b02:	bfa8      	it	ge
 8014b04:	461a      	movge	r2, r3
 8014b06:	2a00      	cmp	r2, #0
 8014b08:	4691      	mov	r9, r2
 8014b0a:	dc37      	bgt.n	8014b7c <_printf_float+0x364>
 8014b0c:	f04f 0b00 	mov.w	fp, #0
 8014b10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014b14:	f104 021a 	add.w	r2, r4, #26
 8014b18:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014b1c:	ebaa 0309 	sub.w	r3, sl, r9
 8014b20:	455b      	cmp	r3, fp
 8014b22:	dc33      	bgt.n	8014b8c <_printf_float+0x374>
 8014b24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8014b28:	429a      	cmp	r2, r3
 8014b2a:	db3b      	blt.n	8014ba4 <_printf_float+0x38c>
 8014b2c:	6823      	ldr	r3, [r4, #0]
 8014b2e:	07da      	lsls	r2, r3, #31
 8014b30:	d438      	bmi.n	8014ba4 <_printf_float+0x38c>
 8014b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014b36:	eba3 020a 	sub.w	r2, r3, sl
 8014b3a:	eba3 0901 	sub.w	r9, r3, r1
 8014b3e:	4591      	cmp	r9, r2
 8014b40:	bfa8      	it	ge
 8014b42:	4691      	movge	r9, r2
 8014b44:	f1b9 0f00 	cmp.w	r9, #0
 8014b48:	dc34      	bgt.n	8014bb4 <_printf_float+0x39c>
 8014b4a:	f04f 0800 	mov.w	r8, #0
 8014b4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014b52:	f104 0a1a 	add.w	sl, r4, #26
 8014b56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8014b5a:	1a9b      	subs	r3, r3, r2
 8014b5c:	eba3 0309 	sub.w	r3, r3, r9
 8014b60:	4543      	cmp	r3, r8
 8014b62:	f77f af7a 	ble.w	8014a5a <_printf_float+0x242>
 8014b66:	2301      	movs	r3, #1
 8014b68:	4652      	mov	r2, sl
 8014b6a:	4631      	mov	r1, r6
 8014b6c:	4628      	mov	r0, r5
 8014b6e:	47b8      	blx	r7
 8014b70:	3001      	adds	r0, #1
 8014b72:	f43f aeac 	beq.w	80148ce <_printf_float+0xb6>
 8014b76:	f108 0801 	add.w	r8, r8, #1
 8014b7a:	e7ec      	b.n	8014b56 <_printf_float+0x33e>
 8014b7c:	4613      	mov	r3, r2
 8014b7e:	4631      	mov	r1, r6
 8014b80:	4642      	mov	r2, r8
 8014b82:	4628      	mov	r0, r5
 8014b84:	47b8      	blx	r7
 8014b86:	3001      	adds	r0, #1
 8014b88:	d1c0      	bne.n	8014b0c <_printf_float+0x2f4>
 8014b8a:	e6a0      	b.n	80148ce <_printf_float+0xb6>
 8014b8c:	2301      	movs	r3, #1
 8014b8e:	4631      	mov	r1, r6
 8014b90:	4628      	mov	r0, r5
 8014b92:	920b      	str	r2, [sp, #44]	; 0x2c
 8014b94:	47b8      	blx	r7
 8014b96:	3001      	adds	r0, #1
 8014b98:	f43f ae99 	beq.w	80148ce <_printf_float+0xb6>
 8014b9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014b9e:	f10b 0b01 	add.w	fp, fp, #1
 8014ba2:	e7b9      	b.n	8014b18 <_printf_float+0x300>
 8014ba4:	4631      	mov	r1, r6
 8014ba6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014baa:	4628      	mov	r0, r5
 8014bac:	47b8      	blx	r7
 8014bae:	3001      	adds	r0, #1
 8014bb0:	d1bf      	bne.n	8014b32 <_printf_float+0x31a>
 8014bb2:	e68c      	b.n	80148ce <_printf_float+0xb6>
 8014bb4:	464b      	mov	r3, r9
 8014bb6:	4631      	mov	r1, r6
 8014bb8:	4628      	mov	r0, r5
 8014bba:	eb08 020a 	add.w	r2, r8, sl
 8014bbe:	47b8      	blx	r7
 8014bc0:	3001      	adds	r0, #1
 8014bc2:	d1c2      	bne.n	8014b4a <_printf_float+0x332>
 8014bc4:	e683      	b.n	80148ce <_printf_float+0xb6>
 8014bc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014bc8:	2a01      	cmp	r2, #1
 8014bca:	dc01      	bgt.n	8014bd0 <_printf_float+0x3b8>
 8014bcc:	07db      	lsls	r3, r3, #31
 8014bce:	d537      	bpl.n	8014c40 <_printf_float+0x428>
 8014bd0:	2301      	movs	r3, #1
 8014bd2:	4642      	mov	r2, r8
 8014bd4:	4631      	mov	r1, r6
 8014bd6:	4628      	mov	r0, r5
 8014bd8:	47b8      	blx	r7
 8014bda:	3001      	adds	r0, #1
 8014bdc:	f43f ae77 	beq.w	80148ce <_printf_float+0xb6>
 8014be0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014be4:	4631      	mov	r1, r6
 8014be6:	4628      	mov	r0, r5
 8014be8:	47b8      	blx	r7
 8014bea:	3001      	adds	r0, #1
 8014bec:	f43f ae6f 	beq.w	80148ce <_printf_float+0xb6>
 8014bf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	f7eb ff46 	bl	8000a88 <__aeabi_dcmpeq>
 8014bfc:	b9d8      	cbnz	r0, 8014c36 <_printf_float+0x41e>
 8014bfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c00:	f108 0201 	add.w	r2, r8, #1
 8014c04:	3b01      	subs	r3, #1
 8014c06:	4631      	mov	r1, r6
 8014c08:	4628      	mov	r0, r5
 8014c0a:	47b8      	blx	r7
 8014c0c:	3001      	adds	r0, #1
 8014c0e:	d10e      	bne.n	8014c2e <_printf_float+0x416>
 8014c10:	e65d      	b.n	80148ce <_printf_float+0xb6>
 8014c12:	2301      	movs	r3, #1
 8014c14:	464a      	mov	r2, r9
 8014c16:	4631      	mov	r1, r6
 8014c18:	4628      	mov	r0, r5
 8014c1a:	47b8      	blx	r7
 8014c1c:	3001      	adds	r0, #1
 8014c1e:	f43f ae56 	beq.w	80148ce <_printf_float+0xb6>
 8014c22:	f108 0801 	add.w	r8, r8, #1
 8014c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c28:	3b01      	subs	r3, #1
 8014c2a:	4543      	cmp	r3, r8
 8014c2c:	dcf1      	bgt.n	8014c12 <_printf_float+0x3fa>
 8014c2e:	4653      	mov	r3, sl
 8014c30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014c34:	e6e0      	b.n	80149f8 <_printf_float+0x1e0>
 8014c36:	f04f 0800 	mov.w	r8, #0
 8014c3a:	f104 091a 	add.w	r9, r4, #26
 8014c3e:	e7f2      	b.n	8014c26 <_printf_float+0x40e>
 8014c40:	2301      	movs	r3, #1
 8014c42:	4642      	mov	r2, r8
 8014c44:	e7df      	b.n	8014c06 <_printf_float+0x3ee>
 8014c46:	2301      	movs	r3, #1
 8014c48:	464a      	mov	r2, r9
 8014c4a:	4631      	mov	r1, r6
 8014c4c:	4628      	mov	r0, r5
 8014c4e:	47b8      	blx	r7
 8014c50:	3001      	adds	r0, #1
 8014c52:	f43f ae3c 	beq.w	80148ce <_printf_float+0xb6>
 8014c56:	f108 0801 	add.w	r8, r8, #1
 8014c5a:	68e3      	ldr	r3, [r4, #12]
 8014c5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014c5e:	1a5b      	subs	r3, r3, r1
 8014c60:	4543      	cmp	r3, r8
 8014c62:	dcf0      	bgt.n	8014c46 <_printf_float+0x42e>
 8014c64:	e6fd      	b.n	8014a62 <_printf_float+0x24a>
 8014c66:	f04f 0800 	mov.w	r8, #0
 8014c6a:	f104 0919 	add.w	r9, r4, #25
 8014c6e:	e7f4      	b.n	8014c5a <_printf_float+0x442>

08014c70 <_printf_common>:
 8014c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c74:	4616      	mov	r6, r2
 8014c76:	4699      	mov	r9, r3
 8014c78:	688a      	ldr	r2, [r1, #8]
 8014c7a:	690b      	ldr	r3, [r1, #16]
 8014c7c:	4607      	mov	r7, r0
 8014c7e:	4293      	cmp	r3, r2
 8014c80:	bfb8      	it	lt
 8014c82:	4613      	movlt	r3, r2
 8014c84:	6033      	str	r3, [r6, #0]
 8014c86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014c8a:	460c      	mov	r4, r1
 8014c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014c90:	b10a      	cbz	r2, 8014c96 <_printf_common+0x26>
 8014c92:	3301      	adds	r3, #1
 8014c94:	6033      	str	r3, [r6, #0]
 8014c96:	6823      	ldr	r3, [r4, #0]
 8014c98:	0699      	lsls	r1, r3, #26
 8014c9a:	bf42      	ittt	mi
 8014c9c:	6833      	ldrmi	r3, [r6, #0]
 8014c9e:	3302      	addmi	r3, #2
 8014ca0:	6033      	strmi	r3, [r6, #0]
 8014ca2:	6825      	ldr	r5, [r4, #0]
 8014ca4:	f015 0506 	ands.w	r5, r5, #6
 8014ca8:	d106      	bne.n	8014cb8 <_printf_common+0x48>
 8014caa:	f104 0a19 	add.w	sl, r4, #25
 8014cae:	68e3      	ldr	r3, [r4, #12]
 8014cb0:	6832      	ldr	r2, [r6, #0]
 8014cb2:	1a9b      	subs	r3, r3, r2
 8014cb4:	42ab      	cmp	r3, r5
 8014cb6:	dc28      	bgt.n	8014d0a <_printf_common+0x9a>
 8014cb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014cbc:	1e13      	subs	r3, r2, #0
 8014cbe:	6822      	ldr	r2, [r4, #0]
 8014cc0:	bf18      	it	ne
 8014cc2:	2301      	movne	r3, #1
 8014cc4:	0692      	lsls	r2, r2, #26
 8014cc6:	d42d      	bmi.n	8014d24 <_printf_common+0xb4>
 8014cc8:	4649      	mov	r1, r9
 8014cca:	4638      	mov	r0, r7
 8014ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014cd0:	47c0      	blx	r8
 8014cd2:	3001      	adds	r0, #1
 8014cd4:	d020      	beq.n	8014d18 <_printf_common+0xa8>
 8014cd6:	6823      	ldr	r3, [r4, #0]
 8014cd8:	68e5      	ldr	r5, [r4, #12]
 8014cda:	f003 0306 	and.w	r3, r3, #6
 8014cde:	2b04      	cmp	r3, #4
 8014ce0:	bf18      	it	ne
 8014ce2:	2500      	movne	r5, #0
 8014ce4:	6832      	ldr	r2, [r6, #0]
 8014ce6:	f04f 0600 	mov.w	r6, #0
 8014cea:	68a3      	ldr	r3, [r4, #8]
 8014cec:	bf08      	it	eq
 8014cee:	1aad      	subeq	r5, r5, r2
 8014cf0:	6922      	ldr	r2, [r4, #16]
 8014cf2:	bf08      	it	eq
 8014cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014cf8:	4293      	cmp	r3, r2
 8014cfa:	bfc4      	itt	gt
 8014cfc:	1a9b      	subgt	r3, r3, r2
 8014cfe:	18ed      	addgt	r5, r5, r3
 8014d00:	341a      	adds	r4, #26
 8014d02:	42b5      	cmp	r5, r6
 8014d04:	d11a      	bne.n	8014d3c <_printf_common+0xcc>
 8014d06:	2000      	movs	r0, #0
 8014d08:	e008      	b.n	8014d1c <_printf_common+0xac>
 8014d0a:	2301      	movs	r3, #1
 8014d0c:	4652      	mov	r2, sl
 8014d0e:	4649      	mov	r1, r9
 8014d10:	4638      	mov	r0, r7
 8014d12:	47c0      	blx	r8
 8014d14:	3001      	adds	r0, #1
 8014d16:	d103      	bne.n	8014d20 <_printf_common+0xb0>
 8014d18:	f04f 30ff 	mov.w	r0, #4294967295
 8014d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d20:	3501      	adds	r5, #1
 8014d22:	e7c4      	b.n	8014cae <_printf_common+0x3e>
 8014d24:	2030      	movs	r0, #48	; 0x30
 8014d26:	18e1      	adds	r1, r4, r3
 8014d28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014d2c:	1c5a      	adds	r2, r3, #1
 8014d2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014d32:	4422      	add	r2, r4
 8014d34:	3302      	adds	r3, #2
 8014d36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014d3a:	e7c5      	b.n	8014cc8 <_printf_common+0x58>
 8014d3c:	2301      	movs	r3, #1
 8014d3e:	4622      	mov	r2, r4
 8014d40:	4649      	mov	r1, r9
 8014d42:	4638      	mov	r0, r7
 8014d44:	47c0      	blx	r8
 8014d46:	3001      	adds	r0, #1
 8014d48:	d0e6      	beq.n	8014d18 <_printf_common+0xa8>
 8014d4a:	3601      	adds	r6, #1
 8014d4c:	e7d9      	b.n	8014d02 <_printf_common+0x92>
	...

08014d50 <_printf_i>:
 8014d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014d54:	7e0f      	ldrb	r7, [r1, #24]
 8014d56:	4691      	mov	r9, r2
 8014d58:	2f78      	cmp	r7, #120	; 0x78
 8014d5a:	4680      	mov	r8, r0
 8014d5c:	460c      	mov	r4, r1
 8014d5e:	469a      	mov	sl, r3
 8014d60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014d62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014d66:	d807      	bhi.n	8014d78 <_printf_i+0x28>
 8014d68:	2f62      	cmp	r7, #98	; 0x62
 8014d6a:	d80a      	bhi.n	8014d82 <_printf_i+0x32>
 8014d6c:	2f00      	cmp	r7, #0
 8014d6e:	f000 80d9 	beq.w	8014f24 <_printf_i+0x1d4>
 8014d72:	2f58      	cmp	r7, #88	; 0x58
 8014d74:	f000 80a4 	beq.w	8014ec0 <_printf_i+0x170>
 8014d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014d7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014d80:	e03a      	b.n	8014df8 <_printf_i+0xa8>
 8014d82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014d86:	2b15      	cmp	r3, #21
 8014d88:	d8f6      	bhi.n	8014d78 <_printf_i+0x28>
 8014d8a:	a101      	add	r1, pc, #4	; (adr r1, 8014d90 <_printf_i+0x40>)
 8014d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014d90:	08014de9 	.word	0x08014de9
 8014d94:	08014dfd 	.word	0x08014dfd
 8014d98:	08014d79 	.word	0x08014d79
 8014d9c:	08014d79 	.word	0x08014d79
 8014da0:	08014d79 	.word	0x08014d79
 8014da4:	08014d79 	.word	0x08014d79
 8014da8:	08014dfd 	.word	0x08014dfd
 8014dac:	08014d79 	.word	0x08014d79
 8014db0:	08014d79 	.word	0x08014d79
 8014db4:	08014d79 	.word	0x08014d79
 8014db8:	08014d79 	.word	0x08014d79
 8014dbc:	08014f0b 	.word	0x08014f0b
 8014dc0:	08014e2d 	.word	0x08014e2d
 8014dc4:	08014eed 	.word	0x08014eed
 8014dc8:	08014d79 	.word	0x08014d79
 8014dcc:	08014d79 	.word	0x08014d79
 8014dd0:	08014f2d 	.word	0x08014f2d
 8014dd4:	08014d79 	.word	0x08014d79
 8014dd8:	08014e2d 	.word	0x08014e2d
 8014ddc:	08014d79 	.word	0x08014d79
 8014de0:	08014d79 	.word	0x08014d79
 8014de4:	08014ef5 	.word	0x08014ef5
 8014de8:	682b      	ldr	r3, [r5, #0]
 8014dea:	1d1a      	adds	r2, r3, #4
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	602a      	str	r2, [r5, #0]
 8014df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014df8:	2301      	movs	r3, #1
 8014dfa:	e0a4      	b.n	8014f46 <_printf_i+0x1f6>
 8014dfc:	6820      	ldr	r0, [r4, #0]
 8014dfe:	6829      	ldr	r1, [r5, #0]
 8014e00:	0606      	lsls	r6, r0, #24
 8014e02:	f101 0304 	add.w	r3, r1, #4
 8014e06:	d50a      	bpl.n	8014e1e <_printf_i+0xce>
 8014e08:	680e      	ldr	r6, [r1, #0]
 8014e0a:	602b      	str	r3, [r5, #0]
 8014e0c:	2e00      	cmp	r6, #0
 8014e0e:	da03      	bge.n	8014e18 <_printf_i+0xc8>
 8014e10:	232d      	movs	r3, #45	; 0x2d
 8014e12:	4276      	negs	r6, r6
 8014e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e18:	230a      	movs	r3, #10
 8014e1a:	485e      	ldr	r0, [pc, #376]	; (8014f94 <_printf_i+0x244>)
 8014e1c:	e019      	b.n	8014e52 <_printf_i+0x102>
 8014e1e:	680e      	ldr	r6, [r1, #0]
 8014e20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014e24:	602b      	str	r3, [r5, #0]
 8014e26:	bf18      	it	ne
 8014e28:	b236      	sxthne	r6, r6
 8014e2a:	e7ef      	b.n	8014e0c <_printf_i+0xbc>
 8014e2c:	682b      	ldr	r3, [r5, #0]
 8014e2e:	6820      	ldr	r0, [r4, #0]
 8014e30:	1d19      	adds	r1, r3, #4
 8014e32:	6029      	str	r1, [r5, #0]
 8014e34:	0601      	lsls	r1, r0, #24
 8014e36:	d501      	bpl.n	8014e3c <_printf_i+0xec>
 8014e38:	681e      	ldr	r6, [r3, #0]
 8014e3a:	e002      	b.n	8014e42 <_printf_i+0xf2>
 8014e3c:	0646      	lsls	r6, r0, #25
 8014e3e:	d5fb      	bpl.n	8014e38 <_printf_i+0xe8>
 8014e40:	881e      	ldrh	r6, [r3, #0]
 8014e42:	2f6f      	cmp	r7, #111	; 0x6f
 8014e44:	bf0c      	ite	eq
 8014e46:	2308      	moveq	r3, #8
 8014e48:	230a      	movne	r3, #10
 8014e4a:	4852      	ldr	r0, [pc, #328]	; (8014f94 <_printf_i+0x244>)
 8014e4c:	2100      	movs	r1, #0
 8014e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014e52:	6865      	ldr	r5, [r4, #4]
 8014e54:	2d00      	cmp	r5, #0
 8014e56:	bfa8      	it	ge
 8014e58:	6821      	ldrge	r1, [r4, #0]
 8014e5a:	60a5      	str	r5, [r4, #8]
 8014e5c:	bfa4      	itt	ge
 8014e5e:	f021 0104 	bicge.w	r1, r1, #4
 8014e62:	6021      	strge	r1, [r4, #0]
 8014e64:	b90e      	cbnz	r6, 8014e6a <_printf_i+0x11a>
 8014e66:	2d00      	cmp	r5, #0
 8014e68:	d04d      	beq.n	8014f06 <_printf_i+0x1b6>
 8014e6a:	4615      	mov	r5, r2
 8014e6c:	fbb6 f1f3 	udiv	r1, r6, r3
 8014e70:	fb03 6711 	mls	r7, r3, r1, r6
 8014e74:	5dc7      	ldrb	r7, [r0, r7]
 8014e76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014e7a:	4637      	mov	r7, r6
 8014e7c:	42bb      	cmp	r3, r7
 8014e7e:	460e      	mov	r6, r1
 8014e80:	d9f4      	bls.n	8014e6c <_printf_i+0x11c>
 8014e82:	2b08      	cmp	r3, #8
 8014e84:	d10b      	bne.n	8014e9e <_printf_i+0x14e>
 8014e86:	6823      	ldr	r3, [r4, #0]
 8014e88:	07de      	lsls	r6, r3, #31
 8014e8a:	d508      	bpl.n	8014e9e <_printf_i+0x14e>
 8014e8c:	6923      	ldr	r3, [r4, #16]
 8014e8e:	6861      	ldr	r1, [r4, #4]
 8014e90:	4299      	cmp	r1, r3
 8014e92:	bfde      	ittt	le
 8014e94:	2330      	movle	r3, #48	; 0x30
 8014e96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014e9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014e9e:	1b52      	subs	r2, r2, r5
 8014ea0:	6122      	str	r2, [r4, #16]
 8014ea2:	464b      	mov	r3, r9
 8014ea4:	4621      	mov	r1, r4
 8014ea6:	4640      	mov	r0, r8
 8014ea8:	f8cd a000 	str.w	sl, [sp]
 8014eac:	aa03      	add	r2, sp, #12
 8014eae:	f7ff fedf 	bl	8014c70 <_printf_common>
 8014eb2:	3001      	adds	r0, #1
 8014eb4:	d14c      	bne.n	8014f50 <_printf_i+0x200>
 8014eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8014eba:	b004      	add	sp, #16
 8014ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ec0:	4834      	ldr	r0, [pc, #208]	; (8014f94 <_printf_i+0x244>)
 8014ec2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014ec6:	6829      	ldr	r1, [r5, #0]
 8014ec8:	6823      	ldr	r3, [r4, #0]
 8014eca:	f851 6b04 	ldr.w	r6, [r1], #4
 8014ece:	6029      	str	r1, [r5, #0]
 8014ed0:	061d      	lsls	r5, r3, #24
 8014ed2:	d514      	bpl.n	8014efe <_printf_i+0x1ae>
 8014ed4:	07df      	lsls	r7, r3, #31
 8014ed6:	bf44      	itt	mi
 8014ed8:	f043 0320 	orrmi.w	r3, r3, #32
 8014edc:	6023      	strmi	r3, [r4, #0]
 8014ede:	b91e      	cbnz	r6, 8014ee8 <_printf_i+0x198>
 8014ee0:	6823      	ldr	r3, [r4, #0]
 8014ee2:	f023 0320 	bic.w	r3, r3, #32
 8014ee6:	6023      	str	r3, [r4, #0]
 8014ee8:	2310      	movs	r3, #16
 8014eea:	e7af      	b.n	8014e4c <_printf_i+0xfc>
 8014eec:	6823      	ldr	r3, [r4, #0]
 8014eee:	f043 0320 	orr.w	r3, r3, #32
 8014ef2:	6023      	str	r3, [r4, #0]
 8014ef4:	2378      	movs	r3, #120	; 0x78
 8014ef6:	4828      	ldr	r0, [pc, #160]	; (8014f98 <_printf_i+0x248>)
 8014ef8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014efc:	e7e3      	b.n	8014ec6 <_printf_i+0x176>
 8014efe:	0659      	lsls	r1, r3, #25
 8014f00:	bf48      	it	mi
 8014f02:	b2b6      	uxthmi	r6, r6
 8014f04:	e7e6      	b.n	8014ed4 <_printf_i+0x184>
 8014f06:	4615      	mov	r5, r2
 8014f08:	e7bb      	b.n	8014e82 <_printf_i+0x132>
 8014f0a:	682b      	ldr	r3, [r5, #0]
 8014f0c:	6826      	ldr	r6, [r4, #0]
 8014f0e:	1d18      	adds	r0, r3, #4
 8014f10:	6961      	ldr	r1, [r4, #20]
 8014f12:	6028      	str	r0, [r5, #0]
 8014f14:	0635      	lsls	r5, r6, #24
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	d501      	bpl.n	8014f1e <_printf_i+0x1ce>
 8014f1a:	6019      	str	r1, [r3, #0]
 8014f1c:	e002      	b.n	8014f24 <_printf_i+0x1d4>
 8014f1e:	0670      	lsls	r0, r6, #25
 8014f20:	d5fb      	bpl.n	8014f1a <_printf_i+0x1ca>
 8014f22:	8019      	strh	r1, [r3, #0]
 8014f24:	2300      	movs	r3, #0
 8014f26:	4615      	mov	r5, r2
 8014f28:	6123      	str	r3, [r4, #16]
 8014f2a:	e7ba      	b.n	8014ea2 <_printf_i+0x152>
 8014f2c:	682b      	ldr	r3, [r5, #0]
 8014f2e:	2100      	movs	r1, #0
 8014f30:	1d1a      	adds	r2, r3, #4
 8014f32:	602a      	str	r2, [r5, #0]
 8014f34:	681d      	ldr	r5, [r3, #0]
 8014f36:	6862      	ldr	r2, [r4, #4]
 8014f38:	4628      	mov	r0, r5
 8014f3a:	f001 f82b 	bl	8015f94 <memchr>
 8014f3e:	b108      	cbz	r0, 8014f44 <_printf_i+0x1f4>
 8014f40:	1b40      	subs	r0, r0, r5
 8014f42:	6060      	str	r0, [r4, #4]
 8014f44:	6863      	ldr	r3, [r4, #4]
 8014f46:	6123      	str	r3, [r4, #16]
 8014f48:	2300      	movs	r3, #0
 8014f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014f4e:	e7a8      	b.n	8014ea2 <_printf_i+0x152>
 8014f50:	462a      	mov	r2, r5
 8014f52:	4649      	mov	r1, r9
 8014f54:	4640      	mov	r0, r8
 8014f56:	6923      	ldr	r3, [r4, #16]
 8014f58:	47d0      	blx	sl
 8014f5a:	3001      	adds	r0, #1
 8014f5c:	d0ab      	beq.n	8014eb6 <_printf_i+0x166>
 8014f5e:	6823      	ldr	r3, [r4, #0]
 8014f60:	079b      	lsls	r3, r3, #30
 8014f62:	d413      	bmi.n	8014f8c <_printf_i+0x23c>
 8014f64:	68e0      	ldr	r0, [r4, #12]
 8014f66:	9b03      	ldr	r3, [sp, #12]
 8014f68:	4298      	cmp	r0, r3
 8014f6a:	bfb8      	it	lt
 8014f6c:	4618      	movlt	r0, r3
 8014f6e:	e7a4      	b.n	8014eba <_printf_i+0x16a>
 8014f70:	2301      	movs	r3, #1
 8014f72:	4632      	mov	r2, r6
 8014f74:	4649      	mov	r1, r9
 8014f76:	4640      	mov	r0, r8
 8014f78:	47d0      	blx	sl
 8014f7a:	3001      	adds	r0, #1
 8014f7c:	d09b      	beq.n	8014eb6 <_printf_i+0x166>
 8014f7e:	3501      	adds	r5, #1
 8014f80:	68e3      	ldr	r3, [r4, #12]
 8014f82:	9903      	ldr	r1, [sp, #12]
 8014f84:	1a5b      	subs	r3, r3, r1
 8014f86:	42ab      	cmp	r3, r5
 8014f88:	dcf2      	bgt.n	8014f70 <_printf_i+0x220>
 8014f8a:	e7eb      	b.n	8014f64 <_printf_i+0x214>
 8014f8c:	2500      	movs	r5, #0
 8014f8e:	f104 0619 	add.w	r6, r4, #25
 8014f92:	e7f5      	b.n	8014f80 <_printf_i+0x230>
 8014f94:	08030612 	.word	0x08030612
 8014f98:	08030623 	.word	0x08030623

08014f9c <_sbrk_r>:
 8014f9c:	b538      	push	{r3, r4, r5, lr}
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	4d05      	ldr	r5, [pc, #20]	; (8014fb8 <_sbrk_r+0x1c>)
 8014fa2:	4604      	mov	r4, r0
 8014fa4:	4608      	mov	r0, r1
 8014fa6:	602b      	str	r3, [r5, #0]
 8014fa8:	f7ee f81a 	bl	8002fe0 <_sbrk>
 8014fac:	1c43      	adds	r3, r0, #1
 8014fae:	d102      	bne.n	8014fb6 <_sbrk_r+0x1a>
 8014fb0:	682b      	ldr	r3, [r5, #0]
 8014fb2:	b103      	cbz	r3, 8014fb6 <_sbrk_r+0x1a>
 8014fb4:	6023      	str	r3, [r4, #0]
 8014fb6:	bd38      	pop	{r3, r4, r5, pc}
 8014fb8:	200015d0 	.word	0x200015d0

08014fbc <__sread>:
 8014fbc:	b510      	push	{r4, lr}
 8014fbe:	460c      	mov	r4, r1
 8014fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fc4:	f001 fcf2 	bl	80169ac <_read_r>
 8014fc8:	2800      	cmp	r0, #0
 8014fca:	bfab      	itete	ge
 8014fcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014fce:	89a3      	ldrhlt	r3, [r4, #12]
 8014fd0:	181b      	addge	r3, r3, r0
 8014fd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014fd6:	bfac      	ite	ge
 8014fd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8014fda:	81a3      	strhlt	r3, [r4, #12]
 8014fdc:	bd10      	pop	{r4, pc}

08014fde <__swrite>:
 8014fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fe2:	461f      	mov	r7, r3
 8014fe4:	898b      	ldrh	r3, [r1, #12]
 8014fe6:	4605      	mov	r5, r0
 8014fe8:	05db      	lsls	r3, r3, #23
 8014fea:	460c      	mov	r4, r1
 8014fec:	4616      	mov	r6, r2
 8014fee:	d505      	bpl.n	8014ffc <__swrite+0x1e>
 8014ff0:	2302      	movs	r3, #2
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ff8:	f000 ffba 	bl	8015f70 <_lseek_r>
 8014ffc:	89a3      	ldrh	r3, [r4, #12]
 8014ffe:	4632      	mov	r2, r6
 8015000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015004:	81a3      	strh	r3, [r4, #12]
 8015006:	4628      	mov	r0, r5
 8015008:	463b      	mov	r3, r7
 801500a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801500e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015012:	f000 b84f 	b.w	80150b4 <_write_r>

08015016 <__sseek>:
 8015016:	b510      	push	{r4, lr}
 8015018:	460c      	mov	r4, r1
 801501a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801501e:	f000 ffa7 	bl	8015f70 <_lseek_r>
 8015022:	1c43      	adds	r3, r0, #1
 8015024:	89a3      	ldrh	r3, [r4, #12]
 8015026:	bf15      	itete	ne
 8015028:	6560      	strne	r0, [r4, #84]	; 0x54
 801502a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801502e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015032:	81a3      	strheq	r3, [r4, #12]
 8015034:	bf18      	it	ne
 8015036:	81a3      	strhne	r3, [r4, #12]
 8015038:	bd10      	pop	{r4, pc}

0801503a <__sclose>:
 801503a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801503e:	f000 b84b 	b.w	80150d8 <_close_r>

08015042 <_vsniprintf_r>:
 8015042:	b530      	push	{r4, r5, lr}
 8015044:	4614      	mov	r4, r2
 8015046:	2c00      	cmp	r4, #0
 8015048:	4605      	mov	r5, r0
 801504a:	461a      	mov	r2, r3
 801504c:	b09b      	sub	sp, #108	; 0x6c
 801504e:	da05      	bge.n	801505c <_vsniprintf_r+0x1a>
 8015050:	238b      	movs	r3, #139	; 0x8b
 8015052:	6003      	str	r3, [r0, #0]
 8015054:	f04f 30ff 	mov.w	r0, #4294967295
 8015058:	b01b      	add	sp, #108	; 0x6c
 801505a:	bd30      	pop	{r4, r5, pc}
 801505c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015060:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015064:	bf0c      	ite	eq
 8015066:	4623      	moveq	r3, r4
 8015068:	f104 33ff 	addne.w	r3, r4, #4294967295
 801506c:	9302      	str	r3, [sp, #8]
 801506e:	9305      	str	r3, [sp, #20]
 8015070:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015074:	9100      	str	r1, [sp, #0]
 8015076:	9104      	str	r1, [sp, #16]
 8015078:	f8ad 300e 	strh.w	r3, [sp, #14]
 801507c:	4669      	mov	r1, sp
 801507e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015080:	f001 fb94 	bl	80167ac <_svfiprintf_r>
 8015084:	1c43      	adds	r3, r0, #1
 8015086:	bfbc      	itt	lt
 8015088:	238b      	movlt	r3, #139	; 0x8b
 801508a:	602b      	strlt	r3, [r5, #0]
 801508c:	2c00      	cmp	r4, #0
 801508e:	d0e3      	beq.n	8015058 <_vsniprintf_r+0x16>
 8015090:	2200      	movs	r2, #0
 8015092:	9b00      	ldr	r3, [sp, #0]
 8015094:	701a      	strb	r2, [r3, #0]
 8015096:	e7df      	b.n	8015058 <_vsniprintf_r+0x16>

08015098 <vsniprintf>:
 8015098:	b507      	push	{r0, r1, r2, lr}
 801509a:	9300      	str	r3, [sp, #0]
 801509c:	4613      	mov	r3, r2
 801509e:	460a      	mov	r2, r1
 80150a0:	4601      	mov	r1, r0
 80150a2:	4803      	ldr	r0, [pc, #12]	; (80150b0 <vsniprintf+0x18>)
 80150a4:	6800      	ldr	r0, [r0, #0]
 80150a6:	f7ff ffcc 	bl	8015042 <_vsniprintf_r>
 80150aa:	b003      	add	sp, #12
 80150ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80150b0:	20000128 	.word	0x20000128

080150b4 <_write_r>:
 80150b4:	b538      	push	{r3, r4, r5, lr}
 80150b6:	4604      	mov	r4, r0
 80150b8:	4608      	mov	r0, r1
 80150ba:	4611      	mov	r1, r2
 80150bc:	2200      	movs	r2, #0
 80150be:	4d05      	ldr	r5, [pc, #20]	; (80150d4 <_write_r+0x20>)
 80150c0:	602a      	str	r2, [r5, #0]
 80150c2:	461a      	mov	r2, r3
 80150c4:	f7ed ff40 	bl	8002f48 <_write>
 80150c8:	1c43      	adds	r3, r0, #1
 80150ca:	d102      	bne.n	80150d2 <_write_r+0x1e>
 80150cc:	682b      	ldr	r3, [r5, #0]
 80150ce:	b103      	cbz	r3, 80150d2 <_write_r+0x1e>
 80150d0:	6023      	str	r3, [r4, #0]
 80150d2:	bd38      	pop	{r3, r4, r5, pc}
 80150d4:	200015d0 	.word	0x200015d0

080150d8 <_close_r>:
 80150d8:	b538      	push	{r3, r4, r5, lr}
 80150da:	2300      	movs	r3, #0
 80150dc:	4d05      	ldr	r5, [pc, #20]	; (80150f4 <_close_r+0x1c>)
 80150de:	4604      	mov	r4, r0
 80150e0:	4608      	mov	r0, r1
 80150e2:	602b      	str	r3, [r5, #0]
 80150e4:	f7ed ff4c 	bl	8002f80 <_close>
 80150e8:	1c43      	adds	r3, r0, #1
 80150ea:	d102      	bne.n	80150f2 <_close_r+0x1a>
 80150ec:	682b      	ldr	r3, [r5, #0]
 80150ee:	b103      	cbz	r3, 80150f2 <_close_r+0x1a>
 80150f0:	6023      	str	r3, [r4, #0]
 80150f2:	bd38      	pop	{r3, r4, r5, pc}
 80150f4:	200015d0 	.word	0x200015d0

080150f8 <quorem>:
 80150f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150fc:	6903      	ldr	r3, [r0, #16]
 80150fe:	690c      	ldr	r4, [r1, #16]
 8015100:	4607      	mov	r7, r0
 8015102:	42a3      	cmp	r3, r4
 8015104:	f2c0 8082 	blt.w	801520c <quorem+0x114>
 8015108:	3c01      	subs	r4, #1
 801510a:	f100 0514 	add.w	r5, r0, #20
 801510e:	f101 0814 	add.w	r8, r1, #20
 8015112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015116:	9301      	str	r3, [sp, #4]
 8015118:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801511c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015120:	3301      	adds	r3, #1
 8015122:	429a      	cmp	r2, r3
 8015124:	fbb2 f6f3 	udiv	r6, r2, r3
 8015128:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801512c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015130:	d331      	bcc.n	8015196 <quorem+0x9e>
 8015132:	f04f 0e00 	mov.w	lr, #0
 8015136:	4640      	mov	r0, r8
 8015138:	46ac      	mov	ip, r5
 801513a:	46f2      	mov	sl, lr
 801513c:	f850 2b04 	ldr.w	r2, [r0], #4
 8015140:	b293      	uxth	r3, r2
 8015142:	fb06 e303 	mla	r3, r6, r3, lr
 8015146:	0c12      	lsrs	r2, r2, #16
 8015148:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801514c:	b29b      	uxth	r3, r3
 801514e:	fb06 e202 	mla	r2, r6, r2, lr
 8015152:	ebaa 0303 	sub.w	r3, sl, r3
 8015156:	f8dc a000 	ldr.w	sl, [ip]
 801515a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801515e:	fa1f fa8a 	uxth.w	sl, sl
 8015162:	4453      	add	r3, sl
 8015164:	f8dc a000 	ldr.w	sl, [ip]
 8015168:	b292      	uxth	r2, r2
 801516a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801516e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015172:	b29b      	uxth	r3, r3
 8015174:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015178:	4581      	cmp	r9, r0
 801517a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801517e:	f84c 3b04 	str.w	r3, [ip], #4
 8015182:	d2db      	bcs.n	801513c <quorem+0x44>
 8015184:	f855 300b 	ldr.w	r3, [r5, fp]
 8015188:	b92b      	cbnz	r3, 8015196 <quorem+0x9e>
 801518a:	9b01      	ldr	r3, [sp, #4]
 801518c:	3b04      	subs	r3, #4
 801518e:	429d      	cmp	r5, r3
 8015190:	461a      	mov	r2, r3
 8015192:	d32f      	bcc.n	80151f4 <quorem+0xfc>
 8015194:	613c      	str	r4, [r7, #16]
 8015196:	4638      	mov	r0, r7
 8015198:	f001 f994 	bl	80164c4 <__mcmp>
 801519c:	2800      	cmp	r0, #0
 801519e:	db25      	blt.n	80151ec <quorem+0xf4>
 80151a0:	4628      	mov	r0, r5
 80151a2:	f04f 0c00 	mov.w	ip, #0
 80151a6:	3601      	adds	r6, #1
 80151a8:	f858 1b04 	ldr.w	r1, [r8], #4
 80151ac:	f8d0 e000 	ldr.w	lr, [r0]
 80151b0:	b28b      	uxth	r3, r1
 80151b2:	ebac 0303 	sub.w	r3, ip, r3
 80151b6:	fa1f f28e 	uxth.w	r2, lr
 80151ba:	4413      	add	r3, r2
 80151bc:	0c0a      	lsrs	r2, r1, #16
 80151be:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80151c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80151c6:	b29b      	uxth	r3, r3
 80151c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80151cc:	45c1      	cmp	r9, r8
 80151ce:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80151d2:	f840 3b04 	str.w	r3, [r0], #4
 80151d6:	d2e7      	bcs.n	80151a8 <quorem+0xb0>
 80151d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80151dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80151e0:	b922      	cbnz	r2, 80151ec <quorem+0xf4>
 80151e2:	3b04      	subs	r3, #4
 80151e4:	429d      	cmp	r5, r3
 80151e6:	461a      	mov	r2, r3
 80151e8:	d30a      	bcc.n	8015200 <quorem+0x108>
 80151ea:	613c      	str	r4, [r7, #16]
 80151ec:	4630      	mov	r0, r6
 80151ee:	b003      	add	sp, #12
 80151f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151f4:	6812      	ldr	r2, [r2, #0]
 80151f6:	3b04      	subs	r3, #4
 80151f8:	2a00      	cmp	r2, #0
 80151fa:	d1cb      	bne.n	8015194 <quorem+0x9c>
 80151fc:	3c01      	subs	r4, #1
 80151fe:	e7c6      	b.n	801518e <quorem+0x96>
 8015200:	6812      	ldr	r2, [r2, #0]
 8015202:	3b04      	subs	r3, #4
 8015204:	2a00      	cmp	r2, #0
 8015206:	d1f0      	bne.n	80151ea <quorem+0xf2>
 8015208:	3c01      	subs	r4, #1
 801520a:	e7eb      	b.n	80151e4 <quorem+0xec>
 801520c:	2000      	movs	r0, #0
 801520e:	e7ee      	b.n	80151ee <quorem+0xf6>

08015210 <_dtoa_r>:
 8015210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015214:	4616      	mov	r6, r2
 8015216:	461f      	mov	r7, r3
 8015218:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801521a:	b099      	sub	sp, #100	; 0x64
 801521c:	4605      	mov	r5, r0
 801521e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8015222:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8015226:	b974      	cbnz	r4, 8015246 <_dtoa_r+0x36>
 8015228:	2010      	movs	r0, #16
 801522a:	f7ff f955 	bl	80144d8 <malloc>
 801522e:	4602      	mov	r2, r0
 8015230:	6268      	str	r0, [r5, #36]	; 0x24
 8015232:	b920      	cbnz	r0, 801523e <_dtoa_r+0x2e>
 8015234:	21ea      	movs	r1, #234	; 0xea
 8015236:	4ba8      	ldr	r3, [pc, #672]	; (80154d8 <_dtoa_r+0x2c8>)
 8015238:	48a8      	ldr	r0, [pc, #672]	; (80154dc <_dtoa_r+0x2cc>)
 801523a:	f001 fbc9 	bl	80169d0 <__assert_func>
 801523e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015242:	6004      	str	r4, [r0, #0]
 8015244:	60c4      	str	r4, [r0, #12]
 8015246:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015248:	6819      	ldr	r1, [r3, #0]
 801524a:	b151      	cbz	r1, 8015262 <_dtoa_r+0x52>
 801524c:	685a      	ldr	r2, [r3, #4]
 801524e:	2301      	movs	r3, #1
 8015250:	4093      	lsls	r3, r2
 8015252:	604a      	str	r2, [r1, #4]
 8015254:	608b      	str	r3, [r1, #8]
 8015256:	4628      	mov	r0, r5
 8015258:	f000 fef6 	bl	8016048 <_Bfree>
 801525c:	2200      	movs	r2, #0
 801525e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015260:	601a      	str	r2, [r3, #0]
 8015262:	1e3b      	subs	r3, r7, #0
 8015264:	bfaf      	iteee	ge
 8015266:	2300      	movge	r3, #0
 8015268:	2201      	movlt	r2, #1
 801526a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801526e:	9305      	strlt	r3, [sp, #20]
 8015270:	bfa8      	it	ge
 8015272:	f8c8 3000 	strge.w	r3, [r8]
 8015276:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801527a:	4b99      	ldr	r3, [pc, #612]	; (80154e0 <_dtoa_r+0x2d0>)
 801527c:	bfb8      	it	lt
 801527e:	f8c8 2000 	strlt.w	r2, [r8]
 8015282:	ea33 0309 	bics.w	r3, r3, r9
 8015286:	d119      	bne.n	80152bc <_dtoa_r+0xac>
 8015288:	f242 730f 	movw	r3, #9999	; 0x270f
 801528c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801528e:	6013      	str	r3, [r2, #0]
 8015290:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015294:	4333      	orrs	r3, r6
 8015296:	f000 857f 	beq.w	8015d98 <_dtoa_r+0xb88>
 801529a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801529c:	b953      	cbnz	r3, 80152b4 <_dtoa_r+0xa4>
 801529e:	4b91      	ldr	r3, [pc, #580]	; (80154e4 <_dtoa_r+0x2d4>)
 80152a0:	e022      	b.n	80152e8 <_dtoa_r+0xd8>
 80152a2:	4b91      	ldr	r3, [pc, #580]	; (80154e8 <_dtoa_r+0x2d8>)
 80152a4:	9303      	str	r3, [sp, #12]
 80152a6:	3308      	adds	r3, #8
 80152a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80152aa:	6013      	str	r3, [r2, #0]
 80152ac:	9803      	ldr	r0, [sp, #12]
 80152ae:	b019      	add	sp, #100	; 0x64
 80152b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152b4:	4b8b      	ldr	r3, [pc, #556]	; (80154e4 <_dtoa_r+0x2d4>)
 80152b6:	9303      	str	r3, [sp, #12]
 80152b8:	3303      	adds	r3, #3
 80152ba:	e7f5      	b.n	80152a8 <_dtoa_r+0x98>
 80152bc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80152c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80152c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80152c8:	2200      	movs	r2, #0
 80152ca:	2300      	movs	r3, #0
 80152cc:	f7eb fbdc 	bl	8000a88 <__aeabi_dcmpeq>
 80152d0:	4680      	mov	r8, r0
 80152d2:	b158      	cbz	r0, 80152ec <_dtoa_r+0xdc>
 80152d4:	2301      	movs	r3, #1
 80152d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80152d8:	6013      	str	r3, [r2, #0]
 80152da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80152dc:	2b00      	cmp	r3, #0
 80152de:	f000 8558 	beq.w	8015d92 <_dtoa_r+0xb82>
 80152e2:	4882      	ldr	r0, [pc, #520]	; (80154ec <_dtoa_r+0x2dc>)
 80152e4:	6018      	str	r0, [r3, #0]
 80152e6:	1e43      	subs	r3, r0, #1
 80152e8:	9303      	str	r3, [sp, #12]
 80152ea:	e7df      	b.n	80152ac <_dtoa_r+0x9c>
 80152ec:	ab16      	add	r3, sp, #88	; 0x58
 80152ee:	9301      	str	r3, [sp, #4]
 80152f0:	ab17      	add	r3, sp, #92	; 0x5c
 80152f2:	9300      	str	r3, [sp, #0]
 80152f4:	4628      	mov	r0, r5
 80152f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80152fa:	f001 f98b 	bl	8016614 <__d2b>
 80152fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015302:	4683      	mov	fp, r0
 8015304:	2c00      	cmp	r4, #0
 8015306:	d07f      	beq.n	8015408 <_dtoa_r+0x1f8>
 8015308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801530c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801530e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8015312:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015316:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801531a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801531e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8015322:	2200      	movs	r2, #0
 8015324:	4b72      	ldr	r3, [pc, #456]	; (80154f0 <_dtoa_r+0x2e0>)
 8015326:	f7ea ff8f 	bl	8000248 <__aeabi_dsub>
 801532a:	a365      	add	r3, pc, #404	; (adr r3, 80154c0 <_dtoa_r+0x2b0>)
 801532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015330:	f7eb f942 	bl	80005b8 <__aeabi_dmul>
 8015334:	a364      	add	r3, pc, #400	; (adr r3, 80154c8 <_dtoa_r+0x2b8>)
 8015336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801533a:	f7ea ff87 	bl	800024c <__adddf3>
 801533e:	4606      	mov	r6, r0
 8015340:	4620      	mov	r0, r4
 8015342:	460f      	mov	r7, r1
 8015344:	f7eb f8ce 	bl	80004e4 <__aeabi_i2d>
 8015348:	a361      	add	r3, pc, #388	; (adr r3, 80154d0 <_dtoa_r+0x2c0>)
 801534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801534e:	f7eb f933 	bl	80005b8 <__aeabi_dmul>
 8015352:	4602      	mov	r2, r0
 8015354:	460b      	mov	r3, r1
 8015356:	4630      	mov	r0, r6
 8015358:	4639      	mov	r1, r7
 801535a:	f7ea ff77 	bl	800024c <__adddf3>
 801535e:	4606      	mov	r6, r0
 8015360:	460f      	mov	r7, r1
 8015362:	f7eb fbd9 	bl	8000b18 <__aeabi_d2iz>
 8015366:	2200      	movs	r2, #0
 8015368:	4682      	mov	sl, r0
 801536a:	2300      	movs	r3, #0
 801536c:	4630      	mov	r0, r6
 801536e:	4639      	mov	r1, r7
 8015370:	f7eb fb94 	bl	8000a9c <__aeabi_dcmplt>
 8015374:	b148      	cbz	r0, 801538a <_dtoa_r+0x17a>
 8015376:	4650      	mov	r0, sl
 8015378:	f7eb f8b4 	bl	80004e4 <__aeabi_i2d>
 801537c:	4632      	mov	r2, r6
 801537e:	463b      	mov	r3, r7
 8015380:	f7eb fb82 	bl	8000a88 <__aeabi_dcmpeq>
 8015384:	b908      	cbnz	r0, 801538a <_dtoa_r+0x17a>
 8015386:	f10a 3aff 	add.w	sl, sl, #4294967295
 801538a:	f1ba 0f16 	cmp.w	sl, #22
 801538e:	d858      	bhi.n	8015442 <_dtoa_r+0x232>
 8015390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015394:	4b57      	ldr	r3, [pc, #348]	; (80154f4 <_dtoa_r+0x2e4>)
 8015396:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801539e:	f7eb fb7d 	bl	8000a9c <__aeabi_dcmplt>
 80153a2:	2800      	cmp	r0, #0
 80153a4:	d04f      	beq.n	8015446 <_dtoa_r+0x236>
 80153a6:	2300      	movs	r3, #0
 80153a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80153ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80153ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80153b0:	1b1c      	subs	r4, r3, r4
 80153b2:	1e63      	subs	r3, r4, #1
 80153b4:	9309      	str	r3, [sp, #36]	; 0x24
 80153b6:	bf49      	itett	mi
 80153b8:	f1c4 0301 	rsbmi	r3, r4, #1
 80153bc:	2300      	movpl	r3, #0
 80153be:	9306      	strmi	r3, [sp, #24]
 80153c0:	2300      	movmi	r3, #0
 80153c2:	bf54      	ite	pl
 80153c4:	9306      	strpl	r3, [sp, #24]
 80153c6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80153c8:	f1ba 0f00 	cmp.w	sl, #0
 80153cc:	db3d      	blt.n	801544a <_dtoa_r+0x23a>
 80153ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153d0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80153d4:	4453      	add	r3, sl
 80153d6:	9309      	str	r3, [sp, #36]	; 0x24
 80153d8:	2300      	movs	r3, #0
 80153da:	930a      	str	r3, [sp, #40]	; 0x28
 80153dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80153de:	2b09      	cmp	r3, #9
 80153e0:	f200 808c 	bhi.w	80154fc <_dtoa_r+0x2ec>
 80153e4:	2b05      	cmp	r3, #5
 80153e6:	bfc4      	itt	gt
 80153e8:	3b04      	subgt	r3, #4
 80153ea:	9322      	strgt	r3, [sp, #136]	; 0x88
 80153ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80153ee:	bfc8      	it	gt
 80153f0:	2400      	movgt	r4, #0
 80153f2:	f1a3 0302 	sub.w	r3, r3, #2
 80153f6:	bfd8      	it	le
 80153f8:	2401      	movle	r4, #1
 80153fa:	2b03      	cmp	r3, #3
 80153fc:	f200 808a 	bhi.w	8015514 <_dtoa_r+0x304>
 8015400:	e8df f003 	tbb	[pc, r3]
 8015404:	5b4d4f2d 	.word	0x5b4d4f2d
 8015408:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 801540c:	441c      	add	r4, r3
 801540e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8015412:	2b20      	cmp	r3, #32
 8015414:	bfc3      	ittte	gt
 8015416:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801541a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 801541e:	fa09 f303 	lslgt.w	r3, r9, r3
 8015422:	f1c3 0320 	rsble	r3, r3, #32
 8015426:	bfc6      	itte	gt
 8015428:	fa26 f000 	lsrgt.w	r0, r6, r0
 801542c:	4318      	orrgt	r0, r3
 801542e:	fa06 f003 	lslle.w	r0, r6, r3
 8015432:	f7eb f847 	bl	80004c4 <__aeabi_ui2d>
 8015436:	2301      	movs	r3, #1
 8015438:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801543c:	3c01      	subs	r4, #1
 801543e:	9313      	str	r3, [sp, #76]	; 0x4c
 8015440:	e76f      	b.n	8015322 <_dtoa_r+0x112>
 8015442:	2301      	movs	r3, #1
 8015444:	e7b2      	b.n	80153ac <_dtoa_r+0x19c>
 8015446:	900f      	str	r0, [sp, #60]	; 0x3c
 8015448:	e7b1      	b.n	80153ae <_dtoa_r+0x19e>
 801544a:	9b06      	ldr	r3, [sp, #24]
 801544c:	eba3 030a 	sub.w	r3, r3, sl
 8015450:	9306      	str	r3, [sp, #24]
 8015452:	f1ca 0300 	rsb	r3, sl, #0
 8015456:	930a      	str	r3, [sp, #40]	; 0x28
 8015458:	2300      	movs	r3, #0
 801545a:	930e      	str	r3, [sp, #56]	; 0x38
 801545c:	e7be      	b.n	80153dc <_dtoa_r+0x1cc>
 801545e:	2300      	movs	r3, #0
 8015460:	930b      	str	r3, [sp, #44]	; 0x2c
 8015462:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015464:	2b00      	cmp	r3, #0
 8015466:	dc58      	bgt.n	801551a <_dtoa_r+0x30a>
 8015468:	f04f 0901 	mov.w	r9, #1
 801546c:	464b      	mov	r3, r9
 801546e:	f8cd 9020 	str.w	r9, [sp, #32]
 8015472:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8015476:	2200      	movs	r2, #0
 8015478:	6a68      	ldr	r0, [r5, #36]	; 0x24
 801547a:	6042      	str	r2, [r0, #4]
 801547c:	2204      	movs	r2, #4
 801547e:	f102 0614 	add.w	r6, r2, #20
 8015482:	429e      	cmp	r6, r3
 8015484:	6841      	ldr	r1, [r0, #4]
 8015486:	d94e      	bls.n	8015526 <_dtoa_r+0x316>
 8015488:	4628      	mov	r0, r5
 801548a:	f000 fd9d 	bl	8015fc8 <_Balloc>
 801548e:	9003      	str	r0, [sp, #12]
 8015490:	2800      	cmp	r0, #0
 8015492:	d14c      	bne.n	801552e <_dtoa_r+0x31e>
 8015494:	4602      	mov	r2, r0
 8015496:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801549a:	4b17      	ldr	r3, [pc, #92]	; (80154f8 <_dtoa_r+0x2e8>)
 801549c:	e6cc      	b.n	8015238 <_dtoa_r+0x28>
 801549e:	2301      	movs	r3, #1
 80154a0:	e7de      	b.n	8015460 <_dtoa_r+0x250>
 80154a2:	2300      	movs	r3, #0
 80154a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80154a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80154a8:	eb0a 0903 	add.w	r9, sl, r3
 80154ac:	f109 0301 	add.w	r3, r9, #1
 80154b0:	2b01      	cmp	r3, #1
 80154b2:	9308      	str	r3, [sp, #32]
 80154b4:	bfb8      	it	lt
 80154b6:	2301      	movlt	r3, #1
 80154b8:	e7dd      	b.n	8015476 <_dtoa_r+0x266>
 80154ba:	2301      	movs	r3, #1
 80154bc:	e7f2      	b.n	80154a4 <_dtoa_r+0x294>
 80154be:	bf00      	nop
 80154c0:	636f4361 	.word	0x636f4361
 80154c4:	3fd287a7 	.word	0x3fd287a7
 80154c8:	8b60c8b3 	.word	0x8b60c8b3
 80154cc:	3fc68a28 	.word	0x3fc68a28
 80154d0:	509f79fb 	.word	0x509f79fb
 80154d4:	3fd34413 	.word	0x3fd34413
 80154d8:	08030641 	.word	0x08030641
 80154dc:	08030658 	.word	0x08030658
 80154e0:	7ff00000 	.word	0x7ff00000
 80154e4:	0803063d 	.word	0x0803063d
 80154e8:	08030634 	.word	0x08030634
 80154ec:	08030611 	.word	0x08030611
 80154f0:	3ff80000 	.word	0x3ff80000
 80154f4:	08030748 	.word	0x08030748
 80154f8:	080306b3 	.word	0x080306b3
 80154fc:	2401      	movs	r4, #1
 80154fe:	2300      	movs	r3, #0
 8015500:	940b      	str	r4, [sp, #44]	; 0x2c
 8015502:	9322      	str	r3, [sp, #136]	; 0x88
 8015504:	f04f 39ff 	mov.w	r9, #4294967295
 8015508:	2200      	movs	r2, #0
 801550a:	2312      	movs	r3, #18
 801550c:	f8cd 9020 	str.w	r9, [sp, #32]
 8015510:	9223      	str	r2, [sp, #140]	; 0x8c
 8015512:	e7b0      	b.n	8015476 <_dtoa_r+0x266>
 8015514:	2301      	movs	r3, #1
 8015516:	930b      	str	r3, [sp, #44]	; 0x2c
 8015518:	e7f4      	b.n	8015504 <_dtoa_r+0x2f4>
 801551a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 801551e:	464b      	mov	r3, r9
 8015520:	f8cd 9020 	str.w	r9, [sp, #32]
 8015524:	e7a7      	b.n	8015476 <_dtoa_r+0x266>
 8015526:	3101      	adds	r1, #1
 8015528:	6041      	str	r1, [r0, #4]
 801552a:	0052      	lsls	r2, r2, #1
 801552c:	e7a7      	b.n	801547e <_dtoa_r+0x26e>
 801552e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015530:	9a03      	ldr	r2, [sp, #12]
 8015532:	601a      	str	r2, [r3, #0]
 8015534:	9b08      	ldr	r3, [sp, #32]
 8015536:	2b0e      	cmp	r3, #14
 8015538:	f200 80a8 	bhi.w	801568c <_dtoa_r+0x47c>
 801553c:	2c00      	cmp	r4, #0
 801553e:	f000 80a5 	beq.w	801568c <_dtoa_r+0x47c>
 8015542:	f1ba 0f00 	cmp.w	sl, #0
 8015546:	dd34      	ble.n	80155b2 <_dtoa_r+0x3a2>
 8015548:	4a9a      	ldr	r2, [pc, #616]	; (80157b4 <_dtoa_r+0x5a4>)
 801554a:	f00a 030f 	and.w	r3, sl, #15
 801554e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015552:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8015556:	e9d3 3400 	ldrd	r3, r4, [r3]
 801555a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801555e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8015562:	d016      	beq.n	8015592 <_dtoa_r+0x382>
 8015564:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015568:	4b93      	ldr	r3, [pc, #588]	; (80157b8 <_dtoa_r+0x5a8>)
 801556a:	2703      	movs	r7, #3
 801556c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015570:	f7eb f94c 	bl	800080c <__aeabi_ddiv>
 8015574:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015578:	f004 040f 	and.w	r4, r4, #15
 801557c:	4e8e      	ldr	r6, [pc, #568]	; (80157b8 <_dtoa_r+0x5a8>)
 801557e:	b954      	cbnz	r4, 8015596 <_dtoa_r+0x386>
 8015580:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015588:	f7eb f940 	bl	800080c <__aeabi_ddiv>
 801558c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015590:	e029      	b.n	80155e6 <_dtoa_r+0x3d6>
 8015592:	2702      	movs	r7, #2
 8015594:	e7f2      	b.n	801557c <_dtoa_r+0x36c>
 8015596:	07e1      	lsls	r1, r4, #31
 8015598:	d508      	bpl.n	80155ac <_dtoa_r+0x39c>
 801559a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801559e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80155a2:	f7eb f809 	bl	80005b8 <__aeabi_dmul>
 80155a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80155aa:	3701      	adds	r7, #1
 80155ac:	1064      	asrs	r4, r4, #1
 80155ae:	3608      	adds	r6, #8
 80155b0:	e7e5      	b.n	801557e <_dtoa_r+0x36e>
 80155b2:	f000 80a5 	beq.w	8015700 <_dtoa_r+0x4f0>
 80155b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80155ba:	f1ca 0400 	rsb	r4, sl, #0
 80155be:	4b7d      	ldr	r3, [pc, #500]	; (80157b4 <_dtoa_r+0x5a4>)
 80155c0:	f004 020f 	and.w	r2, r4, #15
 80155c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80155c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155cc:	f7ea fff4 	bl	80005b8 <__aeabi_dmul>
 80155d0:	2702      	movs	r7, #2
 80155d2:	2300      	movs	r3, #0
 80155d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80155d8:	4e77      	ldr	r6, [pc, #476]	; (80157b8 <_dtoa_r+0x5a8>)
 80155da:	1124      	asrs	r4, r4, #4
 80155dc:	2c00      	cmp	r4, #0
 80155de:	f040 8084 	bne.w	80156ea <_dtoa_r+0x4da>
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d1d2      	bne.n	801558c <_dtoa_r+0x37c>
 80155e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	f000 808b 	beq.w	8015704 <_dtoa_r+0x4f4>
 80155ee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80155f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80155f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80155fa:	2200      	movs	r2, #0
 80155fc:	4b6f      	ldr	r3, [pc, #444]	; (80157bc <_dtoa_r+0x5ac>)
 80155fe:	f7eb fa4d 	bl	8000a9c <__aeabi_dcmplt>
 8015602:	2800      	cmp	r0, #0
 8015604:	d07e      	beq.n	8015704 <_dtoa_r+0x4f4>
 8015606:	9b08      	ldr	r3, [sp, #32]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d07b      	beq.n	8015704 <_dtoa_r+0x4f4>
 801560c:	f1b9 0f00 	cmp.w	r9, #0
 8015610:	dd38      	ble.n	8015684 <_dtoa_r+0x474>
 8015612:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015616:	2200      	movs	r2, #0
 8015618:	4b69      	ldr	r3, [pc, #420]	; (80157c0 <_dtoa_r+0x5b0>)
 801561a:	f7ea ffcd 	bl	80005b8 <__aeabi_dmul>
 801561e:	464c      	mov	r4, r9
 8015620:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015624:	f10a 38ff 	add.w	r8, sl, #4294967295
 8015628:	3701      	adds	r7, #1
 801562a:	4638      	mov	r0, r7
 801562c:	f7ea ff5a 	bl	80004e4 <__aeabi_i2d>
 8015630:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015634:	f7ea ffc0 	bl	80005b8 <__aeabi_dmul>
 8015638:	2200      	movs	r2, #0
 801563a:	4b62      	ldr	r3, [pc, #392]	; (80157c4 <_dtoa_r+0x5b4>)
 801563c:	f7ea fe06 	bl	800024c <__adddf3>
 8015640:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015644:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8015648:	9611      	str	r6, [sp, #68]	; 0x44
 801564a:	2c00      	cmp	r4, #0
 801564c:	d15d      	bne.n	801570a <_dtoa_r+0x4fa>
 801564e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015652:	2200      	movs	r2, #0
 8015654:	4b5c      	ldr	r3, [pc, #368]	; (80157c8 <_dtoa_r+0x5b8>)
 8015656:	f7ea fdf7 	bl	8000248 <__aeabi_dsub>
 801565a:	4602      	mov	r2, r0
 801565c:	460b      	mov	r3, r1
 801565e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015662:	4633      	mov	r3, r6
 8015664:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015666:	f7eb fa37 	bl	8000ad8 <__aeabi_dcmpgt>
 801566a:	2800      	cmp	r0, #0
 801566c:	f040 829c 	bne.w	8015ba8 <_dtoa_r+0x998>
 8015670:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015674:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015676:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801567a:	f7eb fa0f 	bl	8000a9c <__aeabi_dcmplt>
 801567e:	2800      	cmp	r0, #0
 8015680:	f040 8290 	bne.w	8015ba4 <_dtoa_r+0x994>
 8015684:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8015688:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801568c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801568e:	2b00      	cmp	r3, #0
 8015690:	f2c0 8152 	blt.w	8015938 <_dtoa_r+0x728>
 8015694:	f1ba 0f0e 	cmp.w	sl, #14
 8015698:	f300 814e 	bgt.w	8015938 <_dtoa_r+0x728>
 801569c:	4b45      	ldr	r3, [pc, #276]	; (80157b4 <_dtoa_r+0x5a4>)
 801569e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80156a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80156a6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80156aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	f280 80db 	bge.w	8015868 <_dtoa_r+0x658>
 80156b2:	9b08      	ldr	r3, [sp, #32]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	f300 80d7 	bgt.w	8015868 <_dtoa_r+0x658>
 80156ba:	f040 8272 	bne.w	8015ba2 <_dtoa_r+0x992>
 80156be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80156c2:	2200      	movs	r2, #0
 80156c4:	4b40      	ldr	r3, [pc, #256]	; (80157c8 <_dtoa_r+0x5b8>)
 80156c6:	f7ea ff77 	bl	80005b8 <__aeabi_dmul>
 80156ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80156ce:	f7eb f9f9 	bl	8000ac4 <__aeabi_dcmpge>
 80156d2:	9c08      	ldr	r4, [sp, #32]
 80156d4:	4626      	mov	r6, r4
 80156d6:	2800      	cmp	r0, #0
 80156d8:	f040 8248 	bne.w	8015b6c <_dtoa_r+0x95c>
 80156dc:	2331      	movs	r3, #49	; 0x31
 80156de:	9f03      	ldr	r7, [sp, #12]
 80156e0:	f10a 0a01 	add.w	sl, sl, #1
 80156e4:	f807 3b01 	strb.w	r3, [r7], #1
 80156e8:	e244      	b.n	8015b74 <_dtoa_r+0x964>
 80156ea:	07e2      	lsls	r2, r4, #31
 80156ec:	d505      	bpl.n	80156fa <_dtoa_r+0x4ea>
 80156ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80156f2:	f7ea ff61 	bl	80005b8 <__aeabi_dmul>
 80156f6:	2301      	movs	r3, #1
 80156f8:	3701      	adds	r7, #1
 80156fa:	1064      	asrs	r4, r4, #1
 80156fc:	3608      	adds	r6, #8
 80156fe:	e76d      	b.n	80155dc <_dtoa_r+0x3cc>
 8015700:	2702      	movs	r7, #2
 8015702:	e770      	b.n	80155e6 <_dtoa_r+0x3d6>
 8015704:	46d0      	mov	r8, sl
 8015706:	9c08      	ldr	r4, [sp, #32]
 8015708:	e78f      	b.n	801562a <_dtoa_r+0x41a>
 801570a:	9903      	ldr	r1, [sp, #12]
 801570c:	4b29      	ldr	r3, [pc, #164]	; (80157b4 <_dtoa_r+0x5a4>)
 801570e:	4421      	add	r1, r4
 8015710:	9112      	str	r1, [sp, #72]	; 0x48
 8015712:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015714:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015718:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801571c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015720:	2900      	cmp	r1, #0
 8015722:	d055      	beq.n	80157d0 <_dtoa_r+0x5c0>
 8015724:	2000      	movs	r0, #0
 8015726:	4929      	ldr	r1, [pc, #164]	; (80157cc <_dtoa_r+0x5bc>)
 8015728:	f7eb f870 	bl	800080c <__aeabi_ddiv>
 801572c:	463b      	mov	r3, r7
 801572e:	4632      	mov	r2, r6
 8015730:	f7ea fd8a 	bl	8000248 <__aeabi_dsub>
 8015734:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8015738:	9f03      	ldr	r7, [sp, #12]
 801573a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801573e:	f7eb f9eb 	bl	8000b18 <__aeabi_d2iz>
 8015742:	4604      	mov	r4, r0
 8015744:	f7ea fece 	bl	80004e4 <__aeabi_i2d>
 8015748:	4602      	mov	r2, r0
 801574a:	460b      	mov	r3, r1
 801574c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015750:	f7ea fd7a 	bl	8000248 <__aeabi_dsub>
 8015754:	4602      	mov	r2, r0
 8015756:	460b      	mov	r3, r1
 8015758:	3430      	adds	r4, #48	; 0x30
 801575a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801575e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015762:	f807 4b01 	strb.w	r4, [r7], #1
 8015766:	f7eb f999 	bl	8000a9c <__aeabi_dcmplt>
 801576a:	2800      	cmp	r0, #0
 801576c:	d174      	bne.n	8015858 <_dtoa_r+0x648>
 801576e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015772:	2000      	movs	r0, #0
 8015774:	4911      	ldr	r1, [pc, #68]	; (80157bc <_dtoa_r+0x5ac>)
 8015776:	f7ea fd67 	bl	8000248 <__aeabi_dsub>
 801577a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801577e:	f7eb f98d 	bl	8000a9c <__aeabi_dcmplt>
 8015782:	2800      	cmp	r0, #0
 8015784:	f040 80b7 	bne.w	80158f6 <_dtoa_r+0x6e6>
 8015788:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801578a:	429f      	cmp	r7, r3
 801578c:	f43f af7a 	beq.w	8015684 <_dtoa_r+0x474>
 8015790:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015794:	2200      	movs	r2, #0
 8015796:	4b0a      	ldr	r3, [pc, #40]	; (80157c0 <_dtoa_r+0x5b0>)
 8015798:	f7ea ff0e 	bl	80005b8 <__aeabi_dmul>
 801579c:	2200      	movs	r2, #0
 801579e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80157a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80157a6:	4b06      	ldr	r3, [pc, #24]	; (80157c0 <_dtoa_r+0x5b0>)
 80157a8:	f7ea ff06 	bl	80005b8 <__aeabi_dmul>
 80157ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80157b0:	e7c3      	b.n	801573a <_dtoa_r+0x52a>
 80157b2:	bf00      	nop
 80157b4:	08030748 	.word	0x08030748
 80157b8:	08030720 	.word	0x08030720
 80157bc:	3ff00000 	.word	0x3ff00000
 80157c0:	40240000 	.word	0x40240000
 80157c4:	401c0000 	.word	0x401c0000
 80157c8:	40140000 	.word	0x40140000
 80157cc:	3fe00000 	.word	0x3fe00000
 80157d0:	4630      	mov	r0, r6
 80157d2:	4639      	mov	r1, r7
 80157d4:	f7ea fef0 	bl	80005b8 <__aeabi_dmul>
 80157d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80157da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80157de:	9c03      	ldr	r4, [sp, #12]
 80157e0:	9314      	str	r3, [sp, #80]	; 0x50
 80157e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80157e6:	f7eb f997 	bl	8000b18 <__aeabi_d2iz>
 80157ea:	9015      	str	r0, [sp, #84]	; 0x54
 80157ec:	f7ea fe7a 	bl	80004e4 <__aeabi_i2d>
 80157f0:	4602      	mov	r2, r0
 80157f2:	460b      	mov	r3, r1
 80157f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80157f8:	f7ea fd26 	bl	8000248 <__aeabi_dsub>
 80157fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80157fe:	4606      	mov	r6, r0
 8015800:	3330      	adds	r3, #48	; 0x30
 8015802:	f804 3b01 	strb.w	r3, [r4], #1
 8015806:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015808:	460f      	mov	r7, r1
 801580a:	429c      	cmp	r4, r3
 801580c:	f04f 0200 	mov.w	r2, #0
 8015810:	d124      	bne.n	801585c <_dtoa_r+0x64c>
 8015812:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015816:	4bb0      	ldr	r3, [pc, #704]	; (8015ad8 <_dtoa_r+0x8c8>)
 8015818:	f7ea fd18 	bl	800024c <__adddf3>
 801581c:	4602      	mov	r2, r0
 801581e:	460b      	mov	r3, r1
 8015820:	4630      	mov	r0, r6
 8015822:	4639      	mov	r1, r7
 8015824:	f7eb f958 	bl	8000ad8 <__aeabi_dcmpgt>
 8015828:	2800      	cmp	r0, #0
 801582a:	d163      	bne.n	80158f4 <_dtoa_r+0x6e4>
 801582c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015830:	2000      	movs	r0, #0
 8015832:	49a9      	ldr	r1, [pc, #676]	; (8015ad8 <_dtoa_r+0x8c8>)
 8015834:	f7ea fd08 	bl	8000248 <__aeabi_dsub>
 8015838:	4602      	mov	r2, r0
 801583a:	460b      	mov	r3, r1
 801583c:	4630      	mov	r0, r6
 801583e:	4639      	mov	r1, r7
 8015840:	f7eb f92c 	bl	8000a9c <__aeabi_dcmplt>
 8015844:	2800      	cmp	r0, #0
 8015846:	f43f af1d 	beq.w	8015684 <_dtoa_r+0x474>
 801584a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801584c:	1e7b      	subs	r3, r7, #1
 801584e:	9314      	str	r3, [sp, #80]	; 0x50
 8015850:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8015854:	2b30      	cmp	r3, #48	; 0x30
 8015856:	d0f8      	beq.n	801584a <_dtoa_r+0x63a>
 8015858:	46c2      	mov	sl, r8
 801585a:	e03b      	b.n	80158d4 <_dtoa_r+0x6c4>
 801585c:	4b9f      	ldr	r3, [pc, #636]	; (8015adc <_dtoa_r+0x8cc>)
 801585e:	f7ea feab 	bl	80005b8 <__aeabi_dmul>
 8015862:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015866:	e7bc      	b.n	80157e2 <_dtoa_r+0x5d2>
 8015868:	9f03      	ldr	r7, [sp, #12]
 801586a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801586e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015872:	4640      	mov	r0, r8
 8015874:	4649      	mov	r1, r9
 8015876:	f7ea ffc9 	bl	800080c <__aeabi_ddiv>
 801587a:	f7eb f94d 	bl	8000b18 <__aeabi_d2iz>
 801587e:	4604      	mov	r4, r0
 8015880:	f7ea fe30 	bl	80004e4 <__aeabi_i2d>
 8015884:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015888:	f7ea fe96 	bl	80005b8 <__aeabi_dmul>
 801588c:	4602      	mov	r2, r0
 801588e:	460b      	mov	r3, r1
 8015890:	4640      	mov	r0, r8
 8015892:	4649      	mov	r1, r9
 8015894:	f7ea fcd8 	bl	8000248 <__aeabi_dsub>
 8015898:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801589c:	f807 6b01 	strb.w	r6, [r7], #1
 80158a0:	9e03      	ldr	r6, [sp, #12]
 80158a2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80158a6:	1bbe      	subs	r6, r7, r6
 80158a8:	45b4      	cmp	ip, r6
 80158aa:	4602      	mov	r2, r0
 80158ac:	460b      	mov	r3, r1
 80158ae:	d136      	bne.n	801591e <_dtoa_r+0x70e>
 80158b0:	f7ea fccc 	bl	800024c <__adddf3>
 80158b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80158b8:	4680      	mov	r8, r0
 80158ba:	4689      	mov	r9, r1
 80158bc:	f7eb f90c 	bl	8000ad8 <__aeabi_dcmpgt>
 80158c0:	bb58      	cbnz	r0, 801591a <_dtoa_r+0x70a>
 80158c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80158c6:	4640      	mov	r0, r8
 80158c8:	4649      	mov	r1, r9
 80158ca:	f7eb f8dd 	bl	8000a88 <__aeabi_dcmpeq>
 80158ce:	b108      	cbz	r0, 80158d4 <_dtoa_r+0x6c4>
 80158d0:	07e1      	lsls	r1, r4, #31
 80158d2:	d422      	bmi.n	801591a <_dtoa_r+0x70a>
 80158d4:	4628      	mov	r0, r5
 80158d6:	4659      	mov	r1, fp
 80158d8:	f000 fbb6 	bl	8016048 <_Bfree>
 80158dc:	2300      	movs	r3, #0
 80158de:	703b      	strb	r3, [r7, #0]
 80158e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80158e2:	f10a 0001 	add.w	r0, sl, #1
 80158e6:	6018      	str	r0, [r3, #0]
 80158e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	f43f acde 	beq.w	80152ac <_dtoa_r+0x9c>
 80158f0:	601f      	str	r7, [r3, #0]
 80158f2:	e4db      	b.n	80152ac <_dtoa_r+0x9c>
 80158f4:	4627      	mov	r7, r4
 80158f6:	463b      	mov	r3, r7
 80158f8:	461f      	mov	r7, r3
 80158fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80158fe:	2a39      	cmp	r2, #57	; 0x39
 8015900:	d107      	bne.n	8015912 <_dtoa_r+0x702>
 8015902:	9a03      	ldr	r2, [sp, #12]
 8015904:	429a      	cmp	r2, r3
 8015906:	d1f7      	bne.n	80158f8 <_dtoa_r+0x6e8>
 8015908:	2230      	movs	r2, #48	; 0x30
 801590a:	9903      	ldr	r1, [sp, #12]
 801590c:	f108 0801 	add.w	r8, r8, #1
 8015910:	700a      	strb	r2, [r1, #0]
 8015912:	781a      	ldrb	r2, [r3, #0]
 8015914:	3201      	adds	r2, #1
 8015916:	701a      	strb	r2, [r3, #0]
 8015918:	e79e      	b.n	8015858 <_dtoa_r+0x648>
 801591a:	46d0      	mov	r8, sl
 801591c:	e7eb      	b.n	80158f6 <_dtoa_r+0x6e6>
 801591e:	2200      	movs	r2, #0
 8015920:	4b6e      	ldr	r3, [pc, #440]	; (8015adc <_dtoa_r+0x8cc>)
 8015922:	f7ea fe49 	bl	80005b8 <__aeabi_dmul>
 8015926:	2200      	movs	r2, #0
 8015928:	2300      	movs	r3, #0
 801592a:	4680      	mov	r8, r0
 801592c:	4689      	mov	r9, r1
 801592e:	f7eb f8ab 	bl	8000a88 <__aeabi_dcmpeq>
 8015932:	2800      	cmp	r0, #0
 8015934:	d09b      	beq.n	801586e <_dtoa_r+0x65e>
 8015936:	e7cd      	b.n	80158d4 <_dtoa_r+0x6c4>
 8015938:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801593a:	2a00      	cmp	r2, #0
 801593c:	f000 80d0 	beq.w	8015ae0 <_dtoa_r+0x8d0>
 8015940:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015942:	2a01      	cmp	r2, #1
 8015944:	f300 80ae 	bgt.w	8015aa4 <_dtoa_r+0x894>
 8015948:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801594a:	2a00      	cmp	r2, #0
 801594c:	f000 80a6 	beq.w	8015a9c <_dtoa_r+0x88c>
 8015950:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015954:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015956:	9f06      	ldr	r7, [sp, #24]
 8015958:	9a06      	ldr	r2, [sp, #24]
 801595a:	2101      	movs	r1, #1
 801595c:	441a      	add	r2, r3
 801595e:	9206      	str	r2, [sp, #24]
 8015960:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015962:	4628      	mov	r0, r5
 8015964:	441a      	add	r2, r3
 8015966:	9209      	str	r2, [sp, #36]	; 0x24
 8015968:	f000 fc24 	bl	80161b4 <__i2b>
 801596c:	4606      	mov	r6, r0
 801596e:	2f00      	cmp	r7, #0
 8015970:	dd0c      	ble.n	801598c <_dtoa_r+0x77c>
 8015972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015974:	2b00      	cmp	r3, #0
 8015976:	dd09      	ble.n	801598c <_dtoa_r+0x77c>
 8015978:	42bb      	cmp	r3, r7
 801597a:	bfa8      	it	ge
 801597c:	463b      	movge	r3, r7
 801597e:	9a06      	ldr	r2, [sp, #24]
 8015980:	1aff      	subs	r7, r7, r3
 8015982:	1ad2      	subs	r2, r2, r3
 8015984:	9206      	str	r2, [sp, #24]
 8015986:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015988:	1ad3      	subs	r3, r2, r3
 801598a:	9309      	str	r3, [sp, #36]	; 0x24
 801598c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801598e:	b1f3      	cbz	r3, 80159ce <_dtoa_r+0x7be>
 8015990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015992:	2b00      	cmp	r3, #0
 8015994:	f000 80a8 	beq.w	8015ae8 <_dtoa_r+0x8d8>
 8015998:	2c00      	cmp	r4, #0
 801599a:	dd10      	ble.n	80159be <_dtoa_r+0x7ae>
 801599c:	4631      	mov	r1, r6
 801599e:	4622      	mov	r2, r4
 80159a0:	4628      	mov	r0, r5
 80159a2:	f000 fcc5 	bl	8016330 <__pow5mult>
 80159a6:	465a      	mov	r2, fp
 80159a8:	4601      	mov	r1, r0
 80159aa:	4606      	mov	r6, r0
 80159ac:	4628      	mov	r0, r5
 80159ae:	f000 fc17 	bl	80161e0 <__multiply>
 80159b2:	4680      	mov	r8, r0
 80159b4:	4659      	mov	r1, fp
 80159b6:	4628      	mov	r0, r5
 80159b8:	f000 fb46 	bl	8016048 <_Bfree>
 80159bc:	46c3      	mov	fp, r8
 80159be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159c0:	1b1a      	subs	r2, r3, r4
 80159c2:	d004      	beq.n	80159ce <_dtoa_r+0x7be>
 80159c4:	4659      	mov	r1, fp
 80159c6:	4628      	mov	r0, r5
 80159c8:	f000 fcb2 	bl	8016330 <__pow5mult>
 80159cc:	4683      	mov	fp, r0
 80159ce:	2101      	movs	r1, #1
 80159d0:	4628      	mov	r0, r5
 80159d2:	f000 fbef 	bl	80161b4 <__i2b>
 80159d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80159d8:	4604      	mov	r4, r0
 80159da:	2b00      	cmp	r3, #0
 80159dc:	f340 8086 	ble.w	8015aec <_dtoa_r+0x8dc>
 80159e0:	461a      	mov	r2, r3
 80159e2:	4601      	mov	r1, r0
 80159e4:	4628      	mov	r0, r5
 80159e6:	f000 fca3 	bl	8016330 <__pow5mult>
 80159ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80159ec:	4604      	mov	r4, r0
 80159ee:	2b01      	cmp	r3, #1
 80159f0:	dd7f      	ble.n	8015af2 <_dtoa_r+0x8e2>
 80159f2:	f04f 0800 	mov.w	r8, #0
 80159f6:	6923      	ldr	r3, [r4, #16]
 80159f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80159fc:	6918      	ldr	r0, [r3, #16]
 80159fe:	f000 fb8b 	bl	8016118 <__hi0bits>
 8015a02:	f1c0 0020 	rsb	r0, r0, #32
 8015a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a08:	4418      	add	r0, r3
 8015a0a:	f010 001f 	ands.w	r0, r0, #31
 8015a0e:	f000 8092 	beq.w	8015b36 <_dtoa_r+0x926>
 8015a12:	f1c0 0320 	rsb	r3, r0, #32
 8015a16:	2b04      	cmp	r3, #4
 8015a18:	f340 808a 	ble.w	8015b30 <_dtoa_r+0x920>
 8015a1c:	f1c0 001c 	rsb	r0, r0, #28
 8015a20:	9b06      	ldr	r3, [sp, #24]
 8015a22:	4407      	add	r7, r0
 8015a24:	4403      	add	r3, r0
 8015a26:	9306      	str	r3, [sp, #24]
 8015a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a2a:	4403      	add	r3, r0
 8015a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8015a2e:	9b06      	ldr	r3, [sp, #24]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	dd05      	ble.n	8015a40 <_dtoa_r+0x830>
 8015a34:	4659      	mov	r1, fp
 8015a36:	461a      	mov	r2, r3
 8015a38:	4628      	mov	r0, r5
 8015a3a:	f000 fcd3 	bl	80163e4 <__lshift>
 8015a3e:	4683      	mov	fp, r0
 8015a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	dd05      	ble.n	8015a52 <_dtoa_r+0x842>
 8015a46:	4621      	mov	r1, r4
 8015a48:	461a      	mov	r2, r3
 8015a4a:	4628      	mov	r0, r5
 8015a4c:	f000 fcca 	bl	80163e4 <__lshift>
 8015a50:	4604      	mov	r4, r0
 8015a52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d070      	beq.n	8015b3a <_dtoa_r+0x92a>
 8015a58:	4621      	mov	r1, r4
 8015a5a:	4658      	mov	r0, fp
 8015a5c:	f000 fd32 	bl	80164c4 <__mcmp>
 8015a60:	2800      	cmp	r0, #0
 8015a62:	da6a      	bge.n	8015b3a <_dtoa_r+0x92a>
 8015a64:	2300      	movs	r3, #0
 8015a66:	4659      	mov	r1, fp
 8015a68:	220a      	movs	r2, #10
 8015a6a:	4628      	mov	r0, r5
 8015a6c:	f000 fb0e 	bl	801608c <__multadd>
 8015a70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a72:	4683      	mov	fp, r0
 8015a74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	f000 8194 	beq.w	8015da6 <_dtoa_r+0xb96>
 8015a7e:	4631      	mov	r1, r6
 8015a80:	2300      	movs	r3, #0
 8015a82:	220a      	movs	r2, #10
 8015a84:	4628      	mov	r0, r5
 8015a86:	f000 fb01 	bl	801608c <__multadd>
 8015a8a:	f1b9 0f00 	cmp.w	r9, #0
 8015a8e:	4606      	mov	r6, r0
 8015a90:	f300 8093 	bgt.w	8015bba <_dtoa_r+0x9aa>
 8015a94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015a96:	2b02      	cmp	r3, #2
 8015a98:	dc57      	bgt.n	8015b4a <_dtoa_r+0x93a>
 8015a9a:	e08e      	b.n	8015bba <_dtoa_r+0x9aa>
 8015a9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015a9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015aa2:	e757      	b.n	8015954 <_dtoa_r+0x744>
 8015aa4:	9b08      	ldr	r3, [sp, #32]
 8015aa6:	1e5c      	subs	r4, r3, #1
 8015aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015aaa:	42a3      	cmp	r3, r4
 8015aac:	bfb7      	itett	lt
 8015aae:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015ab0:	1b1c      	subge	r4, r3, r4
 8015ab2:	1ae2      	sublt	r2, r4, r3
 8015ab4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015ab6:	bfbe      	ittt	lt
 8015ab8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8015aba:	189b      	addlt	r3, r3, r2
 8015abc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015abe:	9b08      	ldr	r3, [sp, #32]
 8015ac0:	bfb8      	it	lt
 8015ac2:	2400      	movlt	r4, #0
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	bfbb      	ittet	lt
 8015ac8:	9b06      	ldrlt	r3, [sp, #24]
 8015aca:	9a08      	ldrlt	r2, [sp, #32]
 8015acc:	9f06      	ldrge	r7, [sp, #24]
 8015ace:	1a9f      	sublt	r7, r3, r2
 8015ad0:	bfac      	ite	ge
 8015ad2:	9b08      	ldrge	r3, [sp, #32]
 8015ad4:	2300      	movlt	r3, #0
 8015ad6:	e73f      	b.n	8015958 <_dtoa_r+0x748>
 8015ad8:	3fe00000 	.word	0x3fe00000
 8015adc:	40240000 	.word	0x40240000
 8015ae0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015ae2:	9f06      	ldr	r7, [sp, #24]
 8015ae4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8015ae6:	e742      	b.n	801596e <_dtoa_r+0x75e>
 8015ae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015aea:	e76b      	b.n	80159c4 <_dtoa_r+0x7b4>
 8015aec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015aee:	2b01      	cmp	r3, #1
 8015af0:	dc19      	bgt.n	8015b26 <_dtoa_r+0x916>
 8015af2:	9b04      	ldr	r3, [sp, #16]
 8015af4:	b9bb      	cbnz	r3, 8015b26 <_dtoa_r+0x916>
 8015af6:	9b05      	ldr	r3, [sp, #20]
 8015af8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015afc:	b99b      	cbnz	r3, 8015b26 <_dtoa_r+0x916>
 8015afe:	9b05      	ldr	r3, [sp, #20]
 8015b00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015b04:	0d1b      	lsrs	r3, r3, #20
 8015b06:	051b      	lsls	r3, r3, #20
 8015b08:	b183      	cbz	r3, 8015b2c <_dtoa_r+0x91c>
 8015b0a:	f04f 0801 	mov.w	r8, #1
 8015b0e:	9b06      	ldr	r3, [sp, #24]
 8015b10:	3301      	adds	r3, #1
 8015b12:	9306      	str	r3, [sp, #24]
 8015b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b16:	3301      	adds	r3, #1
 8015b18:	9309      	str	r3, [sp, #36]	; 0x24
 8015b1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	f47f af6a 	bne.w	80159f6 <_dtoa_r+0x7e6>
 8015b22:	2001      	movs	r0, #1
 8015b24:	e76f      	b.n	8015a06 <_dtoa_r+0x7f6>
 8015b26:	f04f 0800 	mov.w	r8, #0
 8015b2a:	e7f6      	b.n	8015b1a <_dtoa_r+0x90a>
 8015b2c:	4698      	mov	r8, r3
 8015b2e:	e7f4      	b.n	8015b1a <_dtoa_r+0x90a>
 8015b30:	f43f af7d 	beq.w	8015a2e <_dtoa_r+0x81e>
 8015b34:	4618      	mov	r0, r3
 8015b36:	301c      	adds	r0, #28
 8015b38:	e772      	b.n	8015a20 <_dtoa_r+0x810>
 8015b3a:	9b08      	ldr	r3, [sp, #32]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	dc36      	bgt.n	8015bae <_dtoa_r+0x99e>
 8015b40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015b42:	2b02      	cmp	r3, #2
 8015b44:	dd33      	ble.n	8015bae <_dtoa_r+0x99e>
 8015b46:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015b4a:	f1b9 0f00 	cmp.w	r9, #0
 8015b4e:	d10d      	bne.n	8015b6c <_dtoa_r+0x95c>
 8015b50:	4621      	mov	r1, r4
 8015b52:	464b      	mov	r3, r9
 8015b54:	2205      	movs	r2, #5
 8015b56:	4628      	mov	r0, r5
 8015b58:	f000 fa98 	bl	801608c <__multadd>
 8015b5c:	4601      	mov	r1, r0
 8015b5e:	4604      	mov	r4, r0
 8015b60:	4658      	mov	r0, fp
 8015b62:	f000 fcaf 	bl	80164c4 <__mcmp>
 8015b66:	2800      	cmp	r0, #0
 8015b68:	f73f adb8 	bgt.w	80156dc <_dtoa_r+0x4cc>
 8015b6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015b6e:	9f03      	ldr	r7, [sp, #12]
 8015b70:	ea6f 0a03 	mvn.w	sl, r3
 8015b74:	f04f 0800 	mov.w	r8, #0
 8015b78:	4621      	mov	r1, r4
 8015b7a:	4628      	mov	r0, r5
 8015b7c:	f000 fa64 	bl	8016048 <_Bfree>
 8015b80:	2e00      	cmp	r6, #0
 8015b82:	f43f aea7 	beq.w	80158d4 <_dtoa_r+0x6c4>
 8015b86:	f1b8 0f00 	cmp.w	r8, #0
 8015b8a:	d005      	beq.n	8015b98 <_dtoa_r+0x988>
 8015b8c:	45b0      	cmp	r8, r6
 8015b8e:	d003      	beq.n	8015b98 <_dtoa_r+0x988>
 8015b90:	4641      	mov	r1, r8
 8015b92:	4628      	mov	r0, r5
 8015b94:	f000 fa58 	bl	8016048 <_Bfree>
 8015b98:	4631      	mov	r1, r6
 8015b9a:	4628      	mov	r0, r5
 8015b9c:	f000 fa54 	bl	8016048 <_Bfree>
 8015ba0:	e698      	b.n	80158d4 <_dtoa_r+0x6c4>
 8015ba2:	2400      	movs	r4, #0
 8015ba4:	4626      	mov	r6, r4
 8015ba6:	e7e1      	b.n	8015b6c <_dtoa_r+0x95c>
 8015ba8:	46c2      	mov	sl, r8
 8015baa:	4626      	mov	r6, r4
 8015bac:	e596      	b.n	80156dc <_dtoa_r+0x4cc>
 8015bae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015bb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	f000 80fd 	beq.w	8015db4 <_dtoa_r+0xba4>
 8015bba:	2f00      	cmp	r7, #0
 8015bbc:	dd05      	ble.n	8015bca <_dtoa_r+0x9ba>
 8015bbe:	4631      	mov	r1, r6
 8015bc0:	463a      	mov	r2, r7
 8015bc2:	4628      	mov	r0, r5
 8015bc4:	f000 fc0e 	bl	80163e4 <__lshift>
 8015bc8:	4606      	mov	r6, r0
 8015bca:	f1b8 0f00 	cmp.w	r8, #0
 8015bce:	d05c      	beq.n	8015c8a <_dtoa_r+0xa7a>
 8015bd0:	4628      	mov	r0, r5
 8015bd2:	6871      	ldr	r1, [r6, #4]
 8015bd4:	f000 f9f8 	bl	8015fc8 <_Balloc>
 8015bd8:	4607      	mov	r7, r0
 8015bda:	b928      	cbnz	r0, 8015be8 <_dtoa_r+0x9d8>
 8015bdc:	4602      	mov	r2, r0
 8015bde:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015be2:	4b7f      	ldr	r3, [pc, #508]	; (8015de0 <_dtoa_r+0xbd0>)
 8015be4:	f7ff bb28 	b.w	8015238 <_dtoa_r+0x28>
 8015be8:	6932      	ldr	r2, [r6, #16]
 8015bea:	f106 010c 	add.w	r1, r6, #12
 8015bee:	3202      	adds	r2, #2
 8015bf0:	0092      	lsls	r2, r2, #2
 8015bf2:	300c      	adds	r0, #12
 8015bf4:	f7fe fc80 	bl	80144f8 <memcpy>
 8015bf8:	2201      	movs	r2, #1
 8015bfa:	4639      	mov	r1, r7
 8015bfc:	4628      	mov	r0, r5
 8015bfe:	f000 fbf1 	bl	80163e4 <__lshift>
 8015c02:	46b0      	mov	r8, r6
 8015c04:	4606      	mov	r6, r0
 8015c06:	9b03      	ldr	r3, [sp, #12]
 8015c08:	3301      	adds	r3, #1
 8015c0a:	9308      	str	r3, [sp, #32]
 8015c0c:	9b03      	ldr	r3, [sp, #12]
 8015c0e:	444b      	add	r3, r9
 8015c10:	930a      	str	r3, [sp, #40]	; 0x28
 8015c12:	9b04      	ldr	r3, [sp, #16]
 8015c14:	f003 0301 	and.w	r3, r3, #1
 8015c18:	9309      	str	r3, [sp, #36]	; 0x24
 8015c1a:	9b08      	ldr	r3, [sp, #32]
 8015c1c:	4621      	mov	r1, r4
 8015c1e:	3b01      	subs	r3, #1
 8015c20:	4658      	mov	r0, fp
 8015c22:	9304      	str	r3, [sp, #16]
 8015c24:	f7ff fa68 	bl	80150f8 <quorem>
 8015c28:	4603      	mov	r3, r0
 8015c2a:	4641      	mov	r1, r8
 8015c2c:	3330      	adds	r3, #48	; 0x30
 8015c2e:	9006      	str	r0, [sp, #24]
 8015c30:	4658      	mov	r0, fp
 8015c32:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c34:	f000 fc46 	bl	80164c4 <__mcmp>
 8015c38:	4632      	mov	r2, r6
 8015c3a:	4681      	mov	r9, r0
 8015c3c:	4621      	mov	r1, r4
 8015c3e:	4628      	mov	r0, r5
 8015c40:	f000 fc5c 	bl	80164fc <__mdiff>
 8015c44:	68c2      	ldr	r2, [r0, #12]
 8015c46:	4607      	mov	r7, r0
 8015c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c4a:	bb02      	cbnz	r2, 8015c8e <_dtoa_r+0xa7e>
 8015c4c:	4601      	mov	r1, r0
 8015c4e:	4658      	mov	r0, fp
 8015c50:	f000 fc38 	bl	80164c4 <__mcmp>
 8015c54:	4602      	mov	r2, r0
 8015c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c58:	4639      	mov	r1, r7
 8015c5a:	4628      	mov	r0, r5
 8015c5c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8015c60:	f000 f9f2 	bl	8016048 <_Bfree>
 8015c64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015c66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015c68:	9f08      	ldr	r7, [sp, #32]
 8015c6a:	ea43 0102 	orr.w	r1, r3, r2
 8015c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c70:	430b      	orrs	r3, r1
 8015c72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c74:	d10d      	bne.n	8015c92 <_dtoa_r+0xa82>
 8015c76:	2b39      	cmp	r3, #57	; 0x39
 8015c78:	d029      	beq.n	8015cce <_dtoa_r+0xabe>
 8015c7a:	f1b9 0f00 	cmp.w	r9, #0
 8015c7e:	dd01      	ble.n	8015c84 <_dtoa_r+0xa74>
 8015c80:	9b06      	ldr	r3, [sp, #24]
 8015c82:	3331      	adds	r3, #49	; 0x31
 8015c84:	9a04      	ldr	r2, [sp, #16]
 8015c86:	7013      	strb	r3, [r2, #0]
 8015c88:	e776      	b.n	8015b78 <_dtoa_r+0x968>
 8015c8a:	4630      	mov	r0, r6
 8015c8c:	e7b9      	b.n	8015c02 <_dtoa_r+0x9f2>
 8015c8e:	2201      	movs	r2, #1
 8015c90:	e7e2      	b.n	8015c58 <_dtoa_r+0xa48>
 8015c92:	f1b9 0f00 	cmp.w	r9, #0
 8015c96:	db06      	blt.n	8015ca6 <_dtoa_r+0xa96>
 8015c98:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015c9a:	ea41 0909 	orr.w	r9, r1, r9
 8015c9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015ca0:	ea59 0101 	orrs.w	r1, r9, r1
 8015ca4:	d120      	bne.n	8015ce8 <_dtoa_r+0xad8>
 8015ca6:	2a00      	cmp	r2, #0
 8015ca8:	ddec      	ble.n	8015c84 <_dtoa_r+0xa74>
 8015caa:	4659      	mov	r1, fp
 8015cac:	2201      	movs	r2, #1
 8015cae:	4628      	mov	r0, r5
 8015cb0:	9308      	str	r3, [sp, #32]
 8015cb2:	f000 fb97 	bl	80163e4 <__lshift>
 8015cb6:	4621      	mov	r1, r4
 8015cb8:	4683      	mov	fp, r0
 8015cba:	f000 fc03 	bl	80164c4 <__mcmp>
 8015cbe:	2800      	cmp	r0, #0
 8015cc0:	9b08      	ldr	r3, [sp, #32]
 8015cc2:	dc02      	bgt.n	8015cca <_dtoa_r+0xaba>
 8015cc4:	d1de      	bne.n	8015c84 <_dtoa_r+0xa74>
 8015cc6:	07da      	lsls	r2, r3, #31
 8015cc8:	d5dc      	bpl.n	8015c84 <_dtoa_r+0xa74>
 8015cca:	2b39      	cmp	r3, #57	; 0x39
 8015ccc:	d1d8      	bne.n	8015c80 <_dtoa_r+0xa70>
 8015cce:	2339      	movs	r3, #57	; 0x39
 8015cd0:	9a04      	ldr	r2, [sp, #16]
 8015cd2:	7013      	strb	r3, [r2, #0]
 8015cd4:	463b      	mov	r3, r7
 8015cd6:	461f      	mov	r7, r3
 8015cd8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8015cdc:	3b01      	subs	r3, #1
 8015cde:	2a39      	cmp	r2, #57	; 0x39
 8015ce0:	d050      	beq.n	8015d84 <_dtoa_r+0xb74>
 8015ce2:	3201      	adds	r2, #1
 8015ce4:	701a      	strb	r2, [r3, #0]
 8015ce6:	e747      	b.n	8015b78 <_dtoa_r+0x968>
 8015ce8:	2a00      	cmp	r2, #0
 8015cea:	dd03      	ble.n	8015cf4 <_dtoa_r+0xae4>
 8015cec:	2b39      	cmp	r3, #57	; 0x39
 8015cee:	d0ee      	beq.n	8015cce <_dtoa_r+0xabe>
 8015cf0:	3301      	adds	r3, #1
 8015cf2:	e7c7      	b.n	8015c84 <_dtoa_r+0xa74>
 8015cf4:	9a08      	ldr	r2, [sp, #32]
 8015cf6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015cf8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015cfc:	428a      	cmp	r2, r1
 8015cfe:	d02a      	beq.n	8015d56 <_dtoa_r+0xb46>
 8015d00:	4659      	mov	r1, fp
 8015d02:	2300      	movs	r3, #0
 8015d04:	220a      	movs	r2, #10
 8015d06:	4628      	mov	r0, r5
 8015d08:	f000 f9c0 	bl	801608c <__multadd>
 8015d0c:	45b0      	cmp	r8, r6
 8015d0e:	4683      	mov	fp, r0
 8015d10:	f04f 0300 	mov.w	r3, #0
 8015d14:	f04f 020a 	mov.w	r2, #10
 8015d18:	4641      	mov	r1, r8
 8015d1a:	4628      	mov	r0, r5
 8015d1c:	d107      	bne.n	8015d2e <_dtoa_r+0xb1e>
 8015d1e:	f000 f9b5 	bl	801608c <__multadd>
 8015d22:	4680      	mov	r8, r0
 8015d24:	4606      	mov	r6, r0
 8015d26:	9b08      	ldr	r3, [sp, #32]
 8015d28:	3301      	adds	r3, #1
 8015d2a:	9308      	str	r3, [sp, #32]
 8015d2c:	e775      	b.n	8015c1a <_dtoa_r+0xa0a>
 8015d2e:	f000 f9ad 	bl	801608c <__multadd>
 8015d32:	4631      	mov	r1, r6
 8015d34:	4680      	mov	r8, r0
 8015d36:	2300      	movs	r3, #0
 8015d38:	220a      	movs	r2, #10
 8015d3a:	4628      	mov	r0, r5
 8015d3c:	f000 f9a6 	bl	801608c <__multadd>
 8015d40:	4606      	mov	r6, r0
 8015d42:	e7f0      	b.n	8015d26 <_dtoa_r+0xb16>
 8015d44:	f1b9 0f00 	cmp.w	r9, #0
 8015d48:	bfcc      	ite	gt
 8015d4a:	464f      	movgt	r7, r9
 8015d4c:	2701      	movle	r7, #1
 8015d4e:	f04f 0800 	mov.w	r8, #0
 8015d52:	9a03      	ldr	r2, [sp, #12]
 8015d54:	4417      	add	r7, r2
 8015d56:	4659      	mov	r1, fp
 8015d58:	2201      	movs	r2, #1
 8015d5a:	4628      	mov	r0, r5
 8015d5c:	9308      	str	r3, [sp, #32]
 8015d5e:	f000 fb41 	bl	80163e4 <__lshift>
 8015d62:	4621      	mov	r1, r4
 8015d64:	4683      	mov	fp, r0
 8015d66:	f000 fbad 	bl	80164c4 <__mcmp>
 8015d6a:	2800      	cmp	r0, #0
 8015d6c:	dcb2      	bgt.n	8015cd4 <_dtoa_r+0xac4>
 8015d6e:	d102      	bne.n	8015d76 <_dtoa_r+0xb66>
 8015d70:	9b08      	ldr	r3, [sp, #32]
 8015d72:	07db      	lsls	r3, r3, #31
 8015d74:	d4ae      	bmi.n	8015cd4 <_dtoa_r+0xac4>
 8015d76:	463b      	mov	r3, r7
 8015d78:	461f      	mov	r7, r3
 8015d7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015d7e:	2a30      	cmp	r2, #48	; 0x30
 8015d80:	d0fa      	beq.n	8015d78 <_dtoa_r+0xb68>
 8015d82:	e6f9      	b.n	8015b78 <_dtoa_r+0x968>
 8015d84:	9a03      	ldr	r2, [sp, #12]
 8015d86:	429a      	cmp	r2, r3
 8015d88:	d1a5      	bne.n	8015cd6 <_dtoa_r+0xac6>
 8015d8a:	2331      	movs	r3, #49	; 0x31
 8015d8c:	f10a 0a01 	add.w	sl, sl, #1
 8015d90:	e779      	b.n	8015c86 <_dtoa_r+0xa76>
 8015d92:	4b14      	ldr	r3, [pc, #80]	; (8015de4 <_dtoa_r+0xbd4>)
 8015d94:	f7ff baa8 	b.w	80152e8 <_dtoa_r+0xd8>
 8015d98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	f47f aa81 	bne.w	80152a2 <_dtoa_r+0x92>
 8015da0:	4b11      	ldr	r3, [pc, #68]	; (8015de8 <_dtoa_r+0xbd8>)
 8015da2:	f7ff baa1 	b.w	80152e8 <_dtoa_r+0xd8>
 8015da6:	f1b9 0f00 	cmp.w	r9, #0
 8015daa:	dc03      	bgt.n	8015db4 <_dtoa_r+0xba4>
 8015dac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015dae:	2b02      	cmp	r3, #2
 8015db0:	f73f aecb 	bgt.w	8015b4a <_dtoa_r+0x93a>
 8015db4:	9f03      	ldr	r7, [sp, #12]
 8015db6:	4621      	mov	r1, r4
 8015db8:	4658      	mov	r0, fp
 8015dba:	f7ff f99d 	bl	80150f8 <quorem>
 8015dbe:	9a03      	ldr	r2, [sp, #12]
 8015dc0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015dc4:	f807 3b01 	strb.w	r3, [r7], #1
 8015dc8:	1aba      	subs	r2, r7, r2
 8015dca:	4591      	cmp	r9, r2
 8015dcc:	ddba      	ble.n	8015d44 <_dtoa_r+0xb34>
 8015dce:	4659      	mov	r1, fp
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	220a      	movs	r2, #10
 8015dd4:	4628      	mov	r0, r5
 8015dd6:	f000 f959 	bl	801608c <__multadd>
 8015dda:	4683      	mov	fp, r0
 8015ddc:	e7eb      	b.n	8015db6 <_dtoa_r+0xba6>
 8015dde:	bf00      	nop
 8015de0:	080306b3 	.word	0x080306b3
 8015de4:	08030610 	.word	0x08030610
 8015de8:	08030634 	.word	0x08030634

08015dec <__sflush_r>:
 8015dec:	898a      	ldrh	r2, [r1, #12]
 8015dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015df0:	4605      	mov	r5, r0
 8015df2:	0710      	lsls	r0, r2, #28
 8015df4:	460c      	mov	r4, r1
 8015df6:	d457      	bmi.n	8015ea8 <__sflush_r+0xbc>
 8015df8:	684b      	ldr	r3, [r1, #4]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	dc04      	bgt.n	8015e08 <__sflush_r+0x1c>
 8015dfe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	dc01      	bgt.n	8015e08 <__sflush_r+0x1c>
 8015e04:	2000      	movs	r0, #0
 8015e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015e0a:	2e00      	cmp	r6, #0
 8015e0c:	d0fa      	beq.n	8015e04 <__sflush_r+0x18>
 8015e0e:	2300      	movs	r3, #0
 8015e10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015e14:	682f      	ldr	r7, [r5, #0]
 8015e16:	602b      	str	r3, [r5, #0]
 8015e18:	d032      	beq.n	8015e80 <__sflush_r+0x94>
 8015e1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015e1c:	89a3      	ldrh	r3, [r4, #12]
 8015e1e:	075a      	lsls	r2, r3, #29
 8015e20:	d505      	bpl.n	8015e2e <__sflush_r+0x42>
 8015e22:	6863      	ldr	r3, [r4, #4]
 8015e24:	1ac0      	subs	r0, r0, r3
 8015e26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015e28:	b10b      	cbz	r3, 8015e2e <__sflush_r+0x42>
 8015e2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015e2c:	1ac0      	subs	r0, r0, r3
 8015e2e:	2300      	movs	r3, #0
 8015e30:	4602      	mov	r2, r0
 8015e32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015e34:	4628      	mov	r0, r5
 8015e36:	6a21      	ldr	r1, [r4, #32]
 8015e38:	47b0      	blx	r6
 8015e3a:	1c43      	adds	r3, r0, #1
 8015e3c:	89a3      	ldrh	r3, [r4, #12]
 8015e3e:	d106      	bne.n	8015e4e <__sflush_r+0x62>
 8015e40:	6829      	ldr	r1, [r5, #0]
 8015e42:	291d      	cmp	r1, #29
 8015e44:	d82c      	bhi.n	8015ea0 <__sflush_r+0xb4>
 8015e46:	4a29      	ldr	r2, [pc, #164]	; (8015eec <__sflush_r+0x100>)
 8015e48:	40ca      	lsrs	r2, r1
 8015e4a:	07d6      	lsls	r6, r2, #31
 8015e4c:	d528      	bpl.n	8015ea0 <__sflush_r+0xb4>
 8015e4e:	2200      	movs	r2, #0
 8015e50:	6062      	str	r2, [r4, #4]
 8015e52:	6922      	ldr	r2, [r4, #16]
 8015e54:	04d9      	lsls	r1, r3, #19
 8015e56:	6022      	str	r2, [r4, #0]
 8015e58:	d504      	bpl.n	8015e64 <__sflush_r+0x78>
 8015e5a:	1c42      	adds	r2, r0, #1
 8015e5c:	d101      	bne.n	8015e62 <__sflush_r+0x76>
 8015e5e:	682b      	ldr	r3, [r5, #0]
 8015e60:	b903      	cbnz	r3, 8015e64 <__sflush_r+0x78>
 8015e62:	6560      	str	r0, [r4, #84]	; 0x54
 8015e64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e66:	602f      	str	r7, [r5, #0]
 8015e68:	2900      	cmp	r1, #0
 8015e6a:	d0cb      	beq.n	8015e04 <__sflush_r+0x18>
 8015e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e70:	4299      	cmp	r1, r3
 8015e72:	d002      	beq.n	8015e7a <__sflush_r+0x8e>
 8015e74:	4628      	mov	r0, r5
 8015e76:	f7fe fb55 	bl	8014524 <_free_r>
 8015e7a:	2000      	movs	r0, #0
 8015e7c:	6360      	str	r0, [r4, #52]	; 0x34
 8015e7e:	e7c2      	b.n	8015e06 <__sflush_r+0x1a>
 8015e80:	6a21      	ldr	r1, [r4, #32]
 8015e82:	2301      	movs	r3, #1
 8015e84:	4628      	mov	r0, r5
 8015e86:	47b0      	blx	r6
 8015e88:	1c41      	adds	r1, r0, #1
 8015e8a:	d1c7      	bne.n	8015e1c <__sflush_r+0x30>
 8015e8c:	682b      	ldr	r3, [r5, #0]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d0c4      	beq.n	8015e1c <__sflush_r+0x30>
 8015e92:	2b1d      	cmp	r3, #29
 8015e94:	d001      	beq.n	8015e9a <__sflush_r+0xae>
 8015e96:	2b16      	cmp	r3, #22
 8015e98:	d101      	bne.n	8015e9e <__sflush_r+0xb2>
 8015e9a:	602f      	str	r7, [r5, #0]
 8015e9c:	e7b2      	b.n	8015e04 <__sflush_r+0x18>
 8015e9e:	89a3      	ldrh	r3, [r4, #12]
 8015ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ea4:	81a3      	strh	r3, [r4, #12]
 8015ea6:	e7ae      	b.n	8015e06 <__sflush_r+0x1a>
 8015ea8:	690f      	ldr	r7, [r1, #16]
 8015eaa:	2f00      	cmp	r7, #0
 8015eac:	d0aa      	beq.n	8015e04 <__sflush_r+0x18>
 8015eae:	0793      	lsls	r3, r2, #30
 8015eb0:	bf18      	it	ne
 8015eb2:	2300      	movne	r3, #0
 8015eb4:	680e      	ldr	r6, [r1, #0]
 8015eb6:	bf08      	it	eq
 8015eb8:	694b      	ldreq	r3, [r1, #20]
 8015eba:	1bf6      	subs	r6, r6, r7
 8015ebc:	600f      	str	r7, [r1, #0]
 8015ebe:	608b      	str	r3, [r1, #8]
 8015ec0:	2e00      	cmp	r6, #0
 8015ec2:	dd9f      	ble.n	8015e04 <__sflush_r+0x18>
 8015ec4:	4633      	mov	r3, r6
 8015ec6:	463a      	mov	r2, r7
 8015ec8:	4628      	mov	r0, r5
 8015eca:	6a21      	ldr	r1, [r4, #32]
 8015ecc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8015ed0:	47e0      	blx	ip
 8015ed2:	2800      	cmp	r0, #0
 8015ed4:	dc06      	bgt.n	8015ee4 <__sflush_r+0xf8>
 8015ed6:	89a3      	ldrh	r3, [r4, #12]
 8015ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8015edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ee0:	81a3      	strh	r3, [r4, #12]
 8015ee2:	e790      	b.n	8015e06 <__sflush_r+0x1a>
 8015ee4:	4407      	add	r7, r0
 8015ee6:	1a36      	subs	r6, r6, r0
 8015ee8:	e7ea      	b.n	8015ec0 <__sflush_r+0xd4>
 8015eea:	bf00      	nop
 8015eec:	20400001 	.word	0x20400001

08015ef0 <_fflush_r>:
 8015ef0:	b538      	push	{r3, r4, r5, lr}
 8015ef2:	690b      	ldr	r3, [r1, #16]
 8015ef4:	4605      	mov	r5, r0
 8015ef6:	460c      	mov	r4, r1
 8015ef8:	b913      	cbnz	r3, 8015f00 <_fflush_r+0x10>
 8015efa:	2500      	movs	r5, #0
 8015efc:	4628      	mov	r0, r5
 8015efe:	bd38      	pop	{r3, r4, r5, pc}
 8015f00:	b118      	cbz	r0, 8015f0a <_fflush_r+0x1a>
 8015f02:	6983      	ldr	r3, [r0, #24]
 8015f04:	b90b      	cbnz	r3, 8015f0a <_fflush_r+0x1a>
 8015f06:	f7fe fa21 	bl	801434c <__sinit>
 8015f0a:	4b14      	ldr	r3, [pc, #80]	; (8015f5c <_fflush_r+0x6c>)
 8015f0c:	429c      	cmp	r4, r3
 8015f0e:	d11b      	bne.n	8015f48 <_fflush_r+0x58>
 8015f10:	686c      	ldr	r4, [r5, #4]
 8015f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d0ef      	beq.n	8015efa <_fflush_r+0xa>
 8015f1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015f1c:	07d0      	lsls	r0, r2, #31
 8015f1e:	d404      	bmi.n	8015f2a <_fflush_r+0x3a>
 8015f20:	0599      	lsls	r1, r3, #22
 8015f22:	d402      	bmi.n	8015f2a <_fflush_r+0x3a>
 8015f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f26:	f7fe fad4 	bl	80144d2 <__retarget_lock_acquire_recursive>
 8015f2a:	4628      	mov	r0, r5
 8015f2c:	4621      	mov	r1, r4
 8015f2e:	f7ff ff5d 	bl	8015dec <__sflush_r>
 8015f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015f34:	4605      	mov	r5, r0
 8015f36:	07da      	lsls	r2, r3, #31
 8015f38:	d4e0      	bmi.n	8015efc <_fflush_r+0xc>
 8015f3a:	89a3      	ldrh	r3, [r4, #12]
 8015f3c:	059b      	lsls	r3, r3, #22
 8015f3e:	d4dd      	bmi.n	8015efc <_fflush_r+0xc>
 8015f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015f42:	f7fe fac7 	bl	80144d4 <__retarget_lock_release_recursive>
 8015f46:	e7d9      	b.n	8015efc <_fflush_r+0xc>
 8015f48:	4b05      	ldr	r3, [pc, #20]	; (8015f60 <_fflush_r+0x70>)
 8015f4a:	429c      	cmp	r4, r3
 8015f4c:	d101      	bne.n	8015f52 <_fflush_r+0x62>
 8015f4e:	68ac      	ldr	r4, [r5, #8]
 8015f50:	e7df      	b.n	8015f12 <_fflush_r+0x22>
 8015f52:	4b04      	ldr	r3, [pc, #16]	; (8015f64 <_fflush_r+0x74>)
 8015f54:	429c      	cmp	r4, r3
 8015f56:	bf08      	it	eq
 8015f58:	68ec      	ldreq	r4, [r5, #12]
 8015f5a:	e7da      	b.n	8015f12 <_fflush_r+0x22>
 8015f5c:	080305bc 	.word	0x080305bc
 8015f60:	080305dc 	.word	0x080305dc
 8015f64:	0803059c 	.word	0x0803059c

08015f68 <_localeconv_r>:
 8015f68:	4800      	ldr	r0, [pc, #0]	; (8015f6c <_localeconv_r+0x4>)
 8015f6a:	4770      	bx	lr
 8015f6c:	2000027c 	.word	0x2000027c

08015f70 <_lseek_r>:
 8015f70:	b538      	push	{r3, r4, r5, lr}
 8015f72:	4604      	mov	r4, r0
 8015f74:	4608      	mov	r0, r1
 8015f76:	4611      	mov	r1, r2
 8015f78:	2200      	movs	r2, #0
 8015f7a:	4d05      	ldr	r5, [pc, #20]	; (8015f90 <_lseek_r+0x20>)
 8015f7c:	602a      	str	r2, [r5, #0]
 8015f7e:	461a      	mov	r2, r3
 8015f80:	f7ed f822 	bl	8002fc8 <_lseek>
 8015f84:	1c43      	adds	r3, r0, #1
 8015f86:	d102      	bne.n	8015f8e <_lseek_r+0x1e>
 8015f88:	682b      	ldr	r3, [r5, #0]
 8015f8a:	b103      	cbz	r3, 8015f8e <_lseek_r+0x1e>
 8015f8c:	6023      	str	r3, [r4, #0]
 8015f8e:	bd38      	pop	{r3, r4, r5, pc}
 8015f90:	200015d0 	.word	0x200015d0

08015f94 <memchr>:
 8015f94:	4603      	mov	r3, r0
 8015f96:	b510      	push	{r4, lr}
 8015f98:	b2c9      	uxtb	r1, r1
 8015f9a:	4402      	add	r2, r0
 8015f9c:	4293      	cmp	r3, r2
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	d101      	bne.n	8015fa6 <memchr+0x12>
 8015fa2:	2000      	movs	r0, #0
 8015fa4:	e003      	b.n	8015fae <memchr+0x1a>
 8015fa6:	7804      	ldrb	r4, [r0, #0]
 8015fa8:	3301      	adds	r3, #1
 8015faa:	428c      	cmp	r4, r1
 8015fac:	d1f6      	bne.n	8015f9c <memchr+0x8>
 8015fae:	bd10      	pop	{r4, pc}

08015fb0 <__malloc_lock>:
 8015fb0:	4801      	ldr	r0, [pc, #4]	; (8015fb8 <__malloc_lock+0x8>)
 8015fb2:	f7fe ba8e 	b.w	80144d2 <__retarget_lock_acquire_recursive>
 8015fb6:	bf00      	nop
 8015fb8:	200015c4 	.word	0x200015c4

08015fbc <__malloc_unlock>:
 8015fbc:	4801      	ldr	r0, [pc, #4]	; (8015fc4 <__malloc_unlock+0x8>)
 8015fbe:	f7fe ba89 	b.w	80144d4 <__retarget_lock_release_recursive>
 8015fc2:	bf00      	nop
 8015fc4:	200015c4 	.word	0x200015c4

08015fc8 <_Balloc>:
 8015fc8:	b570      	push	{r4, r5, r6, lr}
 8015fca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015fcc:	4604      	mov	r4, r0
 8015fce:	460d      	mov	r5, r1
 8015fd0:	b976      	cbnz	r6, 8015ff0 <_Balloc+0x28>
 8015fd2:	2010      	movs	r0, #16
 8015fd4:	f7fe fa80 	bl	80144d8 <malloc>
 8015fd8:	4602      	mov	r2, r0
 8015fda:	6260      	str	r0, [r4, #36]	; 0x24
 8015fdc:	b920      	cbnz	r0, 8015fe8 <_Balloc+0x20>
 8015fde:	2166      	movs	r1, #102	; 0x66
 8015fe0:	4b17      	ldr	r3, [pc, #92]	; (8016040 <_Balloc+0x78>)
 8015fe2:	4818      	ldr	r0, [pc, #96]	; (8016044 <_Balloc+0x7c>)
 8015fe4:	f000 fcf4 	bl	80169d0 <__assert_func>
 8015fe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015fec:	6006      	str	r6, [r0, #0]
 8015fee:	60c6      	str	r6, [r0, #12]
 8015ff0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015ff2:	68f3      	ldr	r3, [r6, #12]
 8015ff4:	b183      	cbz	r3, 8016018 <_Balloc+0x50>
 8015ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015ff8:	68db      	ldr	r3, [r3, #12]
 8015ffa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015ffe:	b9b8      	cbnz	r0, 8016030 <_Balloc+0x68>
 8016000:	2101      	movs	r1, #1
 8016002:	fa01 f605 	lsl.w	r6, r1, r5
 8016006:	1d72      	adds	r2, r6, #5
 8016008:	4620      	mov	r0, r4
 801600a:	0092      	lsls	r2, r2, #2
 801600c:	f000 fb5e 	bl	80166cc <_calloc_r>
 8016010:	b160      	cbz	r0, 801602c <_Balloc+0x64>
 8016012:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016016:	e00e      	b.n	8016036 <_Balloc+0x6e>
 8016018:	2221      	movs	r2, #33	; 0x21
 801601a:	2104      	movs	r1, #4
 801601c:	4620      	mov	r0, r4
 801601e:	f000 fb55 	bl	80166cc <_calloc_r>
 8016022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016024:	60f0      	str	r0, [r6, #12]
 8016026:	68db      	ldr	r3, [r3, #12]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d1e4      	bne.n	8015ff6 <_Balloc+0x2e>
 801602c:	2000      	movs	r0, #0
 801602e:	bd70      	pop	{r4, r5, r6, pc}
 8016030:	6802      	ldr	r2, [r0, #0]
 8016032:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016036:	2300      	movs	r3, #0
 8016038:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801603c:	e7f7      	b.n	801602e <_Balloc+0x66>
 801603e:	bf00      	nop
 8016040:	08030641 	.word	0x08030641
 8016044:	080306c4 	.word	0x080306c4

08016048 <_Bfree>:
 8016048:	b570      	push	{r4, r5, r6, lr}
 801604a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801604c:	4605      	mov	r5, r0
 801604e:	460c      	mov	r4, r1
 8016050:	b976      	cbnz	r6, 8016070 <_Bfree+0x28>
 8016052:	2010      	movs	r0, #16
 8016054:	f7fe fa40 	bl	80144d8 <malloc>
 8016058:	4602      	mov	r2, r0
 801605a:	6268      	str	r0, [r5, #36]	; 0x24
 801605c:	b920      	cbnz	r0, 8016068 <_Bfree+0x20>
 801605e:	218a      	movs	r1, #138	; 0x8a
 8016060:	4b08      	ldr	r3, [pc, #32]	; (8016084 <_Bfree+0x3c>)
 8016062:	4809      	ldr	r0, [pc, #36]	; (8016088 <_Bfree+0x40>)
 8016064:	f000 fcb4 	bl	80169d0 <__assert_func>
 8016068:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801606c:	6006      	str	r6, [r0, #0]
 801606e:	60c6      	str	r6, [r0, #12]
 8016070:	b13c      	cbz	r4, 8016082 <_Bfree+0x3a>
 8016072:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016074:	6862      	ldr	r2, [r4, #4]
 8016076:	68db      	ldr	r3, [r3, #12]
 8016078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801607c:	6021      	str	r1, [r4, #0]
 801607e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016082:	bd70      	pop	{r4, r5, r6, pc}
 8016084:	08030641 	.word	0x08030641
 8016088:	080306c4 	.word	0x080306c4

0801608c <__multadd>:
 801608c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016090:	4607      	mov	r7, r0
 8016092:	460c      	mov	r4, r1
 8016094:	461e      	mov	r6, r3
 8016096:	2000      	movs	r0, #0
 8016098:	690d      	ldr	r5, [r1, #16]
 801609a:	f101 0c14 	add.w	ip, r1, #20
 801609e:	f8dc 3000 	ldr.w	r3, [ip]
 80160a2:	3001      	adds	r0, #1
 80160a4:	b299      	uxth	r1, r3
 80160a6:	fb02 6101 	mla	r1, r2, r1, r6
 80160aa:	0c1e      	lsrs	r6, r3, #16
 80160ac:	0c0b      	lsrs	r3, r1, #16
 80160ae:	fb02 3306 	mla	r3, r2, r6, r3
 80160b2:	b289      	uxth	r1, r1
 80160b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80160b8:	4285      	cmp	r5, r0
 80160ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80160be:	f84c 1b04 	str.w	r1, [ip], #4
 80160c2:	dcec      	bgt.n	801609e <__multadd+0x12>
 80160c4:	b30e      	cbz	r6, 801610a <__multadd+0x7e>
 80160c6:	68a3      	ldr	r3, [r4, #8]
 80160c8:	42ab      	cmp	r3, r5
 80160ca:	dc19      	bgt.n	8016100 <__multadd+0x74>
 80160cc:	6861      	ldr	r1, [r4, #4]
 80160ce:	4638      	mov	r0, r7
 80160d0:	3101      	adds	r1, #1
 80160d2:	f7ff ff79 	bl	8015fc8 <_Balloc>
 80160d6:	4680      	mov	r8, r0
 80160d8:	b928      	cbnz	r0, 80160e6 <__multadd+0x5a>
 80160da:	4602      	mov	r2, r0
 80160dc:	21b5      	movs	r1, #181	; 0xb5
 80160de:	4b0c      	ldr	r3, [pc, #48]	; (8016110 <__multadd+0x84>)
 80160e0:	480c      	ldr	r0, [pc, #48]	; (8016114 <__multadd+0x88>)
 80160e2:	f000 fc75 	bl	80169d0 <__assert_func>
 80160e6:	6922      	ldr	r2, [r4, #16]
 80160e8:	f104 010c 	add.w	r1, r4, #12
 80160ec:	3202      	adds	r2, #2
 80160ee:	0092      	lsls	r2, r2, #2
 80160f0:	300c      	adds	r0, #12
 80160f2:	f7fe fa01 	bl	80144f8 <memcpy>
 80160f6:	4621      	mov	r1, r4
 80160f8:	4638      	mov	r0, r7
 80160fa:	f7ff ffa5 	bl	8016048 <_Bfree>
 80160fe:	4644      	mov	r4, r8
 8016100:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016104:	3501      	adds	r5, #1
 8016106:	615e      	str	r6, [r3, #20]
 8016108:	6125      	str	r5, [r4, #16]
 801610a:	4620      	mov	r0, r4
 801610c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016110:	080306b3 	.word	0x080306b3
 8016114:	080306c4 	.word	0x080306c4

08016118 <__hi0bits>:
 8016118:	0c02      	lsrs	r2, r0, #16
 801611a:	0412      	lsls	r2, r2, #16
 801611c:	4603      	mov	r3, r0
 801611e:	b9ca      	cbnz	r2, 8016154 <__hi0bits+0x3c>
 8016120:	0403      	lsls	r3, r0, #16
 8016122:	2010      	movs	r0, #16
 8016124:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016128:	bf04      	itt	eq
 801612a:	021b      	lsleq	r3, r3, #8
 801612c:	3008      	addeq	r0, #8
 801612e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016132:	bf04      	itt	eq
 8016134:	011b      	lsleq	r3, r3, #4
 8016136:	3004      	addeq	r0, #4
 8016138:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801613c:	bf04      	itt	eq
 801613e:	009b      	lsleq	r3, r3, #2
 8016140:	3002      	addeq	r0, #2
 8016142:	2b00      	cmp	r3, #0
 8016144:	db05      	blt.n	8016152 <__hi0bits+0x3a>
 8016146:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801614a:	f100 0001 	add.w	r0, r0, #1
 801614e:	bf08      	it	eq
 8016150:	2020      	moveq	r0, #32
 8016152:	4770      	bx	lr
 8016154:	2000      	movs	r0, #0
 8016156:	e7e5      	b.n	8016124 <__hi0bits+0xc>

08016158 <__lo0bits>:
 8016158:	6803      	ldr	r3, [r0, #0]
 801615a:	4602      	mov	r2, r0
 801615c:	f013 0007 	ands.w	r0, r3, #7
 8016160:	d00b      	beq.n	801617a <__lo0bits+0x22>
 8016162:	07d9      	lsls	r1, r3, #31
 8016164:	d421      	bmi.n	80161aa <__lo0bits+0x52>
 8016166:	0798      	lsls	r0, r3, #30
 8016168:	bf49      	itett	mi
 801616a:	085b      	lsrmi	r3, r3, #1
 801616c:	089b      	lsrpl	r3, r3, #2
 801616e:	2001      	movmi	r0, #1
 8016170:	6013      	strmi	r3, [r2, #0]
 8016172:	bf5c      	itt	pl
 8016174:	2002      	movpl	r0, #2
 8016176:	6013      	strpl	r3, [r2, #0]
 8016178:	4770      	bx	lr
 801617a:	b299      	uxth	r1, r3
 801617c:	b909      	cbnz	r1, 8016182 <__lo0bits+0x2a>
 801617e:	2010      	movs	r0, #16
 8016180:	0c1b      	lsrs	r3, r3, #16
 8016182:	b2d9      	uxtb	r1, r3
 8016184:	b909      	cbnz	r1, 801618a <__lo0bits+0x32>
 8016186:	3008      	adds	r0, #8
 8016188:	0a1b      	lsrs	r3, r3, #8
 801618a:	0719      	lsls	r1, r3, #28
 801618c:	bf04      	itt	eq
 801618e:	091b      	lsreq	r3, r3, #4
 8016190:	3004      	addeq	r0, #4
 8016192:	0799      	lsls	r1, r3, #30
 8016194:	bf04      	itt	eq
 8016196:	089b      	lsreq	r3, r3, #2
 8016198:	3002      	addeq	r0, #2
 801619a:	07d9      	lsls	r1, r3, #31
 801619c:	d403      	bmi.n	80161a6 <__lo0bits+0x4e>
 801619e:	085b      	lsrs	r3, r3, #1
 80161a0:	f100 0001 	add.w	r0, r0, #1
 80161a4:	d003      	beq.n	80161ae <__lo0bits+0x56>
 80161a6:	6013      	str	r3, [r2, #0]
 80161a8:	4770      	bx	lr
 80161aa:	2000      	movs	r0, #0
 80161ac:	4770      	bx	lr
 80161ae:	2020      	movs	r0, #32
 80161b0:	4770      	bx	lr
	...

080161b4 <__i2b>:
 80161b4:	b510      	push	{r4, lr}
 80161b6:	460c      	mov	r4, r1
 80161b8:	2101      	movs	r1, #1
 80161ba:	f7ff ff05 	bl	8015fc8 <_Balloc>
 80161be:	4602      	mov	r2, r0
 80161c0:	b928      	cbnz	r0, 80161ce <__i2b+0x1a>
 80161c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80161c6:	4b04      	ldr	r3, [pc, #16]	; (80161d8 <__i2b+0x24>)
 80161c8:	4804      	ldr	r0, [pc, #16]	; (80161dc <__i2b+0x28>)
 80161ca:	f000 fc01 	bl	80169d0 <__assert_func>
 80161ce:	2301      	movs	r3, #1
 80161d0:	6144      	str	r4, [r0, #20]
 80161d2:	6103      	str	r3, [r0, #16]
 80161d4:	bd10      	pop	{r4, pc}
 80161d6:	bf00      	nop
 80161d8:	080306b3 	.word	0x080306b3
 80161dc:	080306c4 	.word	0x080306c4

080161e0 <__multiply>:
 80161e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161e4:	4691      	mov	r9, r2
 80161e6:	690a      	ldr	r2, [r1, #16]
 80161e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80161ec:	460c      	mov	r4, r1
 80161ee:	429a      	cmp	r2, r3
 80161f0:	bfbe      	ittt	lt
 80161f2:	460b      	movlt	r3, r1
 80161f4:	464c      	movlt	r4, r9
 80161f6:	4699      	movlt	r9, r3
 80161f8:	6927      	ldr	r7, [r4, #16]
 80161fa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80161fe:	68a3      	ldr	r3, [r4, #8]
 8016200:	6861      	ldr	r1, [r4, #4]
 8016202:	eb07 060a 	add.w	r6, r7, sl
 8016206:	42b3      	cmp	r3, r6
 8016208:	b085      	sub	sp, #20
 801620a:	bfb8      	it	lt
 801620c:	3101      	addlt	r1, #1
 801620e:	f7ff fedb 	bl	8015fc8 <_Balloc>
 8016212:	b930      	cbnz	r0, 8016222 <__multiply+0x42>
 8016214:	4602      	mov	r2, r0
 8016216:	f240 115d 	movw	r1, #349	; 0x15d
 801621a:	4b43      	ldr	r3, [pc, #268]	; (8016328 <__multiply+0x148>)
 801621c:	4843      	ldr	r0, [pc, #268]	; (801632c <__multiply+0x14c>)
 801621e:	f000 fbd7 	bl	80169d0 <__assert_func>
 8016222:	f100 0514 	add.w	r5, r0, #20
 8016226:	462b      	mov	r3, r5
 8016228:	2200      	movs	r2, #0
 801622a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801622e:	4543      	cmp	r3, r8
 8016230:	d321      	bcc.n	8016276 <__multiply+0x96>
 8016232:	f104 0314 	add.w	r3, r4, #20
 8016236:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801623a:	f109 0314 	add.w	r3, r9, #20
 801623e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016242:	9202      	str	r2, [sp, #8]
 8016244:	1b3a      	subs	r2, r7, r4
 8016246:	3a15      	subs	r2, #21
 8016248:	f022 0203 	bic.w	r2, r2, #3
 801624c:	3204      	adds	r2, #4
 801624e:	f104 0115 	add.w	r1, r4, #21
 8016252:	428f      	cmp	r7, r1
 8016254:	bf38      	it	cc
 8016256:	2204      	movcc	r2, #4
 8016258:	9201      	str	r2, [sp, #4]
 801625a:	9a02      	ldr	r2, [sp, #8]
 801625c:	9303      	str	r3, [sp, #12]
 801625e:	429a      	cmp	r2, r3
 8016260:	d80c      	bhi.n	801627c <__multiply+0x9c>
 8016262:	2e00      	cmp	r6, #0
 8016264:	dd03      	ble.n	801626e <__multiply+0x8e>
 8016266:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801626a:	2b00      	cmp	r3, #0
 801626c:	d059      	beq.n	8016322 <__multiply+0x142>
 801626e:	6106      	str	r6, [r0, #16]
 8016270:	b005      	add	sp, #20
 8016272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016276:	f843 2b04 	str.w	r2, [r3], #4
 801627a:	e7d8      	b.n	801622e <__multiply+0x4e>
 801627c:	f8b3 a000 	ldrh.w	sl, [r3]
 8016280:	f1ba 0f00 	cmp.w	sl, #0
 8016284:	d023      	beq.n	80162ce <__multiply+0xee>
 8016286:	46a9      	mov	r9, r5
 8016288:	f04f 0c00 	mov.w	ip, #0
 801628c:	f104 0e14 	add.w	lr, r4, #20
 8016290:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016294:	f8d9 1000 	ldr.w	r1, [r9]
 8016298:	fa1f fb82 	uxth.w	fp, r2
 801629c:	b289      	uxth	r1, r1
 801629e:	fb0a 110b 	mla	r1, sl, fp, r1
 80162a2:	4461      	add	r1, ip
 80162a4:	f8d9 c000 	ldr.w	ip, [r9]
 80162a8:	0c12      	lsrs	r2, r2, #16
 80162aa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80162ae:	fb0a c202 	mla	r2, sl, r2, ip
 80162b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80162b6:	b289      	uxth	r1, r1
 80162b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80162bc:	4577      	cmp	r7, lr
 80162be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80162c2:	f849 1b04 	str.w	r1, [r9], #4
 80162c6:	d8e3      	bhi.n	8016290 <__multiply+0xb0>
 80162c8:	9a01      	ldr	r2, [sp, #4]
 80162ca:	f845 c002 	str.w	ip, [r5, r2]
 80162ce:	9a03      	ldr	r2, [sp, #12]
 80162d0:	3304      	adds	r3, #4
 80162d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80162d6:	f1b9 0f00 	cmp.w	r9, #0
 80162da:	d020      	beq.n	801631e <__multiply+0x13e>
 80162dc:	46ae      	mov	lr, r5
 80162de:	f04f 0a00 	mov.w	sl, #0
 80162e2:	6829      	ldr	r1, [r5, #0]
 80162e4:	f104 0c14 	add.w	ip, r4, #20
 80162e8:	f8bc b000 	ldrh.w	fp, [ip]
 80162ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80162f0:	b289      	uxth	r1, r1
 80162f2:	fb09 220b 	mla	r2, r9, fp, r2
 80162f6:	4492      	add	sl, r2
 80162f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80162fc:	f84e 1b04 	str.w	r1, [lr], #4
 8016300:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016304:	f8be 1000 	ldrh.w	r1, [lr]
 8016308:	0c12      	lsrs	r2, r2, #16
 801630a:	fb09 1102 	mla	r1, r9, r2, r1
 801630e:	4567      	cmp	r7, ip
 8016310:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8016314:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016318:	d8e6      	bhi.n	80162e8 <__multiply+0x108>
 801631a:	9a01      	ldr	r2, [sp, #4]
 801631c:	50a9      	str	r1, [r5, r2]
 801631e:	3504      	adds	r5, #4
 8016320:	e79b      	b.n	801625a <__multiply+0x7a>
 8016322:	3e01      	subs	r6, #1
 8016324:	e79d      	b.n	8016262 <__multiply+0x82>
 8016326:	bf00      	nop
 8016328:	080306b3 	.word	0x080306b3
 801632c:	080306c4 	.word	0x080306c4

08016330 <__pow5mult>:
 8016330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016334:	4615      	mov	r5, r2
 8016336:	f012 0203 	ands.w	r2, r2, #3
 801633a:	4606      	mov	r6, r0
 801633c:	460f      	mov	r7, r1
 801633e:	d007      	beq.n	8016350 <__pow5mult+0x20>
 8016340:	4c25      	ldr	r4, [pc, #148]	; (80163d8 <__pow5mult+0xa8>)
 8016342:	3a01      	subs	r2, #1
 8016344:	2300      	movs	r3, #0
 8016346:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801634a:	f7ff fe9f 	bl	801608c <__multadd>
 801634e:	4607      	mov	r7, r0
 8016350:	10ad      	asrs	r5, r5, #2
 8016352:	d03d      	beq.n	80163d0 <__pow5mult+0xa0>
 8016354:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016356:	b97c      	cbnz	r4, 8016378 <__pow5mult+0x48>
 8016358:	2010      	movs	r0, #16
 801635a:	f7fe f8bd 	bl	80144d8 <malloc>
 801635e:	4602      	mov	r2, r0
 8016360:	6270      	str	r0, [r6, #36]	; 0x24
 8016362:	b928      	cbnz	r0, 8016370 <__pow5mult+0x40>
 8016364:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016368:	4b1c      	ldr	r3, [pc, #112]	; (80163dc <__pow5mult+0xac>)
 801636a:	481d      	ldr	r0, [pc, #116]	; (80163e0 <__pow5mult+0xb0>)
 801636c:	f000 fb30 	bl	80169d0 <__assert_func>
 8016370:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016374:	6004      	str	r4, [r0, #0]
 8016376:	60c4      	str	r4, [r0, #12]
 8016378:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801637c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016380:	b94c      	cbnz	r4, 8016396 <__pow5mult+0x66>
 8016382:	f240 2171 	movw	r1, #625	; 0x271
 8016386:	4630      	mov	r0, r6
 8016388:	f7ff ff14 	bl	80161b4 <__i2b>
 801638c:	2300      	movs	r3, #0
 801638e:	4604      	mov	r4, r0
 8016390:	f8c8 0008 	str.w	r0, [r8, #8]
 8016394:	6003      	str	r3, [r0, #0]
 8016396:	f04f 0900 	mov.w	r9, #0
 801639a:	07eb      	lsls	r3, r5, #31
 801639c:	d50a      	bpl.n	80163b4 <__pow5mult+0x84>
 801639e:	4639      	mov	r1, r7
 80163a0:	4622      	mov	r2, r4
 80163a2:	4630      	mov	r0, r6
 80163a4:	f7ff ff1c 	bl	80161e0 <__multiply>
 80163a8:	4680      	mov	r8, r0
 80163aa:	4639      	mov	r1, r7
 80163ac:	4630      	mov	r0, r6
 80163ae:	f7ff fe4b 	bl	8016048 <_Bfree>
 80163b2:	4647      	mov	r7, r8
 80163b4:	106d      	asrs	r5, r5, #1
 80163b6:	d00b      	beq.n	80163d0 <__pow5mult+0xa0>
 80163b8:	6820      	ldr	r0, [r4, #0]
 80163ba:	b938      	cbnz	r0, 80163cc <__pow5mult+0x9c>
 80163bc:	4622      	mov	r2, r4
 80163be:	4621      	mov	r1, r4
 80163c0:	4630      	mov	r0, r6
 80163c2:	f7ff ff0d 	bl	80161e0 <__multiply>
 80163c6:	6020      	str	r0, [r4, #0]
 80163c8:	f8c0 9000 	str.w	r9, [r0]
 80163cc:	4604      	mov	r4, r0
 80163ce:	e7e4      	b.n	801639a <__pow5mult+0x6a>
 80163d0:	4638      	mov	r0, r7
 80163d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163d6:	bf00      	nop
 80163d8:	08030810 	.word	0x08030810
 80163dc:	08030641 	.word	0x08030641
 80163e0:	080306c4 	.word	0x080306c4

080163e4 <__lshift>:
 80163e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163e8:	460c      	mov	r4, r1
 80163ea:	4607      	mov	r7, r0
 80163ec:	4691      	mov	r9, r2
 80163ee:	6923      	ldr	r3, [r4, #16]
 80163f0:	6849      	ldr	r1, [r1, #4]
 80163f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80163f6:	68a3      	ldr	r3, [r4, #8]
 80163f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80163fc:	f108 0601 	add.w	r6, r8, #1
 8016400:	42b3      	cmp	r3, r6
 8016402:	db0b      	blt.n	801641c <__lshift+0x38>
 8016404:	4638      	mov	r0, r7
 8016406:	f7ff fddf 	bl	8015fc8 <_Balloc>
 801640a:	4605      	mov	r5, r0
 801640c:	b948      	cbnz	r0, 8016422 <__lshift+0x3e>
 801640e:	4602      	mov	r2, r0
 8016410:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016414:	4b29      	ldr	r3, [pc, #164]	; (80164bc <__lshift+0xd8>)
 8016416:	482a      	ldr	r0, [pc, #168]	; (80164c0 <__lshift+0xdc>)
 8016418:	f000 fada 	bl	80169d0 <__assert_func>
 801641c:	3101      	adds	r1, #1
 801641e:	005b      	lsls	r3, r3, #1
 8016420:	e7ee      	b.n	8016400 <__lshift+0x1c>
 8016422:	2300      	movs	r3, #0
 8016424:	f100 0114 	add.w	r1, r0, #20
 8016428:	f100 0210 	add.w	r2, r0, #16
 801642c:	4618      	mov	r0, r3
 801642e:	4553      	cmp	r3, sl
 8016430:	db37      	blt.n	80164a2 <__lshift+0xbe>
 8016432:	6920      	ldr	r0, [r4, #16]
 8016434:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016438:	f104 0314 	add.w	r3, r4, #20
 801643c:	f019 091f 	ands.w	r9, r9, #31
 8016440:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016444:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016448:	d02f      	beq.n	80164aa <__lshift+0xc6>
 801644a:	468a      	mov	sl, r1
 801644c:	f04f 0c00 	mov.w	ip, #0
 8016450:	f1c9 0e20 	rsb	lr, r9, #32
 8016454:	681a      	ldr	r2, [r3, #0]
 8016456:	fa02 f209 	lsl.w	r2, r2, r9
 801645a:	ea42 020c 	orr.w	r2, r2, ip
 801645e:	f84a 2b04 	str.w	r2, [sl], #4
 8016462:	f853 2b04 	ldr.w	r2, [r3], #4
 8016466:	4298      	cmp	r0, r3
 8016468:	fa22 fc0e 	lsr.w	ip, r2, lr
 801646c:	d8f2      	bhi.n	8016454 <__lshift+0x70>
 801646e:	1b03      	subs	r3, r0, r4
 8016470:	3b15      	subs	r3, #21
 8016472:	f023 0303 	bic.w	r3, r3, #3
 8016476:	3304      	adds	r3, #4
 8016478:	f104 0215 	add.w	r2, r4, #21
 801647c:	4290      	cmp	r0, r2
 801647e:	bf38      	it	cc
 8016480:	2304      	movcc	r3, #4
 8016482:	f841 c003 	str.w	ip, [r1, r3]
 8016486:	f1bc 0f00 	cmp.w	ip, #0
 801648a:	d001      	beq.n	8016490 <__lshift+0xac>
 801648c:	f108 0602 	add.w	r6, r8, #2
 8016490:	3e01      	subs	r6, #1
 8016492:	4638      	mov	r0, r7
 8016494:	4621      	mov	r1, r4
 8016496:	612e      	str	r6, [r5, #16]
 8016498:	f7ff fdd6 	bl	8016048 <_Bfree>
 801649c:	4628      	mov	r0, r5
 801649e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80164a6:	3301      	adds	r3, #1
 80164a8:	e7c1      	b.n	801642e <__lshift+0x4a>
 80164aa:	3904      	subs	r1, #4
 80164ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80164b0:	4298      	cmp	r0, r3
 80164b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80164b6:	d8f9      	bhi.n	80164ac <__lshift+0xc8>
 80164b8:	e7ea      	b.n	8016490 <__lshift+0xac>
 80164ba:	bf00      	nop
 80164bc:	080306b3 	.word	0x080306b3
 80164c0:	080306c4 	.word	0x080306c4

080164c4 <__mcmp>:
 80164c4:	4603      	mov	r3, r0
 80164c6:	690a      	ldr	r2, [r1, #16]
 80164c8:	6900      	ldr	r0, [r0, #16]
 80164ca:	b530      	push	{r4, r5, lr}
 80164cc:	1a80      	subs	r0, r0, r2
 80164ce:	d10d      	bne.n	80164ec <__mcmp+0x28>
 80164d0:	3314      	adds	r3, #20
 80164d2:	3114      	adds	r1, #20
 80164d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80164d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80164dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80164e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80164e4:	4295      	cmp	r5, r2
 80164e6:	d002      	beq.n	80164ee <__mcmp+0x2a>
 80164e8:	d304      	bcc.n	80164f4 <__mcmp+0x30>
 80164ea:	2001      	movs	r0, #1
 80164ec:	bd30      	pop	{r4, r5, pc}
 80164ee:	42a3      	cmp	r3, r4
 80164f0:	d3f4      	bcc.n	80164dc <__mcmp+0x18>
 80164f2:	e7fb      	b.n	80164ec <__mcmp+0x28>
 80164f4:	f04f 30ff 	mov.w	r0, #4294967295
 80164f8:	e7f8      	b.n	80164ec <__mcmp+0x28>
	...

080164fc <__mdiff>:
 80164fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016500:	460d      	mov	r5, r1
 8016502:	4607      	mov	r7, r0
 8016504:	4611      	mov	r1, r2
 8016506:	4628      	mov	r0, r5
 8016508:	4614      	mov	r4, r2
 801650a:	f7ff ffdb 	bl	80164c4 <__mcmp>
 801650e:	1e06      	subs	r6, r0, #0
 8016510:	d111      	bne.n	8016536 <__mdiff+0x3a>
 8016512:	4631      	mov	r1, r6
 8016514:	4638      	mov	r0, r7
 8016516:	f7ff fd57 	bl	8015fc8 <_Balloc>
 801651a:	4602      	mov	r2, r0
 801651c:	b928      	cbnz	r0, 801652a <__mdiff+0x2e>
 801651e:	f240 2132 	movw	r1, #562	; 0x232
 8016522:	4b3a      	ldr	r3, [pc, #232]	; (801660c <__mdiff+0x110>)
 8016524:	483a      	ldr	r0, [pc, #232]	; (8016610 <__mdiff+0x114>)
 8016526:	f000 fa53 	bl	80169d0 <__assert_func>
 801652a:	2301      	movs	r3, #1
 801652c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016530:	4610      	mov	r0, r2
 8016532:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016536:	bfa4      	itt	ge
 8016538:	4623      	movge	r3, r4
 801653a:	462c      	movge	r4, r5
 801653c:	4638      	mov	r0, r7
 801653e:	6861      	ldr	r1, [r4, #4]
 8016540:	bfa6      	itte	ge
 8016542:	461d      	movge	r5, r3
 8016544:	2600      	movge	r6, #0
 8016546:	2601      	movlt	r6, #1
 8016548:	f7ff fd3e 	bl	8015fc8 <_Balloc>
 801654c:	4602      	mov	r2, r0
 801654e:	b918      	cbnz	r0, 8016558 <__mdiff+0x5c>
 8016550:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016554:	4b2d      	ldr	r3, [pc, #180]	; (801660c <__mdiff+0x110>)
 8016556:	e7e5      	b.n	8016524 <__mdiff+0x28>
 8016558:	f102 0814 	add.w	r8, r2, #20
 801655c:	46c2      	mov	sl, r8
 801655e:	f04f 0c00 	mov.w	ip, #0
 8016562:	6927      	ldr	r7, [r4, #16]
 8016564:	60c6      	str	r6, [r0, #12]
 8016566:	692e      	ldr	r6, [r5, #16]
 8016568:	f104 0014 	add.w	r0, r4, #20
 801656c:	f105 0914 	add.w	r9, r5, #20
 8016570:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8016574:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016578:	3410      	adds	r4, #16
 801657a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801657e:	f859 3b04 	ldr.w	r3, [r9], #4
 8016582:	fa1f f18b 	uxth.w	r1, fp
 8016586:	448c      	add	ip, r1
 8016588:	b299      	uxth	r1, r3
 801658a:	0c1b      	lsrs	r3, r3, #16
 801658c:	ebac 0101 	sub.w	r1, ip, r1
 8016590:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016594:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016598:	b289      	uxth	r1, r1
 801659a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801659e:	454e      	cmp	r6, r9
 80165a0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80165a4:	f84a 3b04 	str.w	r3, [sl], #4
 80165a8:	d8e7      	bhi.n	801657a <__mdiff+0x7e>
 80165aa:	1b73      	subs	r3, r6, r5
 80165ac:	3b15      	subs	r3, #21
 80165ae:	f023 0303 	bic.w	r3, r3, #3
 80165b2:	3515      	adds	r5, #21
 80165b4:	3304      	adds	r3, #4
 80165b6:	42ae      	cmp	r6, r5
 80165b8:	bf38      	it	cc
 80165ba:	2304      	movcc	r3, #4
 80165bc:	4418      	add	r0, r3
 80165be:	4443      	add	r3, r8
 80165c0:	461e      	mov	r6, r3
 80165c2:	4605      	mov	r5, r0
 80165c4:	4575      	cmp	r5, lr
 80165c6:	d30e      	bcc.n	80165e6 <__mdiff+0xea>
 80165c8:	f10e 0103 	add.w	r1, lr, #3
 80165cc:	1a09      	subs	r1, r1, r0
 80165ce:	f021 0103 	bic.w	r1, r1, #3
 80165d2:	3803      	subs	r0, #3
 80165d4:	4586      	cmp	lr, r0
 80165d6:	bf38      	it	cc
 80165d8:	2100      	movcc	r1, #0
 80165da:	4419      	add	r1, r3
 80165dc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80165e0:	b18b      	cbz	r3, 8016606 <__mdiff+0x10a>
 80165e2:	6117      	str	r7, [r2, #16]
 80165e4:	e7a4      	b.n	8016530 <__mdiff+0x34>
 80165e6:	f855 8b04 	ldr.w	r8, [r5], #4
 80165ea:	fa1f f188 	uxth.w	r1, r8
 80165ee:	4461      	add	r1, ip
 80165f0:	140c      	asrs	r4, r1, #16
 80165f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80165f6:	b289      	uxth	r1, r1
 80165f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80165fc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8016600:	f846 1b04 	str.w	r1, [r6], #4
 8016604:	e7de      	b.n	80165c4 <__mdiff+0xc8>
 8016606:	3f01      	subs	r7, #1
 8016608:	e7e8      	b.n	80165dc <__mdiff+0xe0>
 801660a:	bf00      	nop
 801660c:	080306b3 	.word	0x080306b3
 8016610:	080306c4 	.word	0x080306c4

08016614 <__d2b>:
 8016614:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016618:	2101      	movs	r1, #1
 801661a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801661e:	4690      	mov	r8, r2
 8016620:	461d      	mov	r5, r3
 8016622:	f7ff fcd1 	bl	8015fc8 <_Balloc>
 8016626:	4604      	mov	r4, r0
 8016628:	b930      	cbnz	r0, 8016638 <__d2b+0x24>
 801662a:	4602      	mov	r2, r0
 801662c:	f240 310a 	movw	r1, #778	; 0x30a
 8016630:	4b24      	ldr	r3, [pc, #144]	; (80166c4 <__d2b+0xb0>)
 8016632:	4825      	ldr	r0, [pc, #148]	; (80166c8 <__d2b+0xb4>)
 8016634:	f000 f9cc 	bl	80169d0 <__assert_func>
 8016638:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801663c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8016640:	bb2d      	cbnz	r5, 801668e <__d2b+0x7a>
 8016642:	9301      	str	r3, [sp, #4]
 8016644:	f1b8 0300 	subs.w	r3, r8, #0
 8016648:	d026      	beq.n	8016698 <__d2b+0x84>
 801664a:	4668      	mov	r0, sp
 801664c:	9300      	str	r3, [sp, #0]
 801664e:	f7ff fd83 	bl	8016158 <__lo0bits>
 8016652:	9900      	ldr	r1, [sp, #0]
 8016654:	b1f0      	cbz	r0, 8016694 <__d2b+0x80>
 8016656:	9a01      	ldr	r2, [sp, #4]
 8016658:	f1c0 0320 	rsb	r3, r0, #32
 801665c:	fa02 f303 	lsl.w	r3, r2, r3
 8016660:	430b      	orrs	r3, r1
 8016662:	40c2      	lsrs	r2, r0
 8016664:	6163      	str	r3, [r4, #20]
 8016666:	9201      	str	r2, [sp, #4]
 8016668:	9b01      	ldr	r3, [sp, #4]
 801666a:	2b00      	cmp	r3, #0
 801666c:	bf14      	ite	ne
 801666e:	2102      	movne	r1, #2
 8016670:	2101      	moveq	r1, #1
 8016672:	61a3      	str	r3, [r4, #24]
 8016674:	6121      	str	r1, [r4, #16]
 8016676:	b1c5      	cbz	r5, 80166aa <__d2b+0x96>
 8016678:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801667c:	4405      	add	r5, r0
 801667e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016682:	603d      	str	r5, [r7, #0]
 8016684:	6030      	str	r0, [r6, #0]
 8016686:	4620      	mov	r0, r4
 8016688:	b002      	add	sp, #8
 801668a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801668e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016692:	e7d6      	b.n	8016642 <__d2b+0x2e>
 8016694:	6161      	str	r1, [r4, #20]
 8016696:	e7e7      	b.n	8016668 <__d2b+0x54>
 8016698:	a801      	add	r0, sp, #4
 801669a:	f7ff fd5d 	bl	8016158 <__lo0bits>
 801669e:	2101      	movs	r1, #1
 80166a0:	9b01      	ldr	r3, [sp, #4]
 80166a2:	6121      	str	r1, [r4, #16]
 80166a4:	6163      	str	r3, [r4, #20]
 80166a6:	3020      	adds	r0, #32
 80166a8:	e7e5      	b.n	8016676 <__d2b+0x62>
 80166aa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80166ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80166b2:	6038      	str	r0, [r7, #0]
 80166b4:	6918      	ldr	r0, [r3, #16]
 80166b6:	f7ff fd2f 	bl	8016118 <__hi0bits>
 80166ba:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80166be:	6031      	str	r1, [r6, #0]
 80166c0:	e7e1      	b.n	8016686 <__d2b+0x72>
 80166c2:	bf00      	nop
 80166c4:	080306b3 	.word	0x080306b3
 80166c8:	080306c4 	.word	0x080306c4

080166cc <_calloc_r>:
 80166cc:	b570      	push	{r4, r5, r6, lr}
 80166ce:	fba1 5402 	umull	r5, r4, r1, r2
 80166d2:	b934      	cbnz	r4, 80166e2 <_calloc_r+0x16>
 80166d4:	4629      	mov	r1, r5
 80166d6:	f7fd ff8d 	bl	80145f4 <_malloc_r>
 80166da:	4606      	mov	r6, r0
 80166dc:	b928      	cbnz	r0, 80166ea <_calloc_r+0x1e>
 80166de:	4630      	mov	r0, r6
 80166e0:	bd70      	pop	{r4, r5, r6, pc}
 80166e2:	220c      	movs	r2, #12
 80166e4:	2600      	movs	r6, #0
 80166e6:	6002      	str	r2, [r0, #0]
 80166e8:	e7f9      	b.n	80166de <_calloc_r+0x12>
 80166ea:	462a      	mov	r2, r5
 80166ec:	4621      	mov	r1, r4
 80166ee:	f7fd ff11 	bl	8014514 <memset>
 80166f2:	e7f4      	b.n	80166de <_calloc_r+0x12>

080166f4 <__ssputs_r>:
 80166f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166f8:	688e      	ldr	r6, [r1, #8]
 80166fa:	4682      	mov	sl, r0
 80166fc:	429e      	cmp	r6, r3
 80166fe:	460c      	mov	r4, r1
 8016700:	4690      	mov	r8, r2
 8016702:	461f      	mov	r7, r3
 8016704:	d838      	bhi.n	8016778 <__ssputs_r+0x84>
 8016706:	898a      	ldrh	r2, [r1, #12]
 8016708:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801670c:	d032      	beq.n	8016774 <__ssputs_r+0x80>
 801670e:	6825      	ldr	r5, [r4, #0]
 8016710:	6909      	ldr	r1, [r1, #16]
 8016712:	3301      	adds	r3, #1
 8016714:	eba5 0901 	sub.w	r9, r5, r1
 8016718:	6965      	ldr	r5, [r4, #20]
 801671a:	444b      	add	r3, r9
 801671c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016720:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016724:	106d      	asrs	r5, r5, #1
 8016726:	429d      	cmp	r5, r3
 8016728:	bf38      	it	cc
 801672a:	461d      	movcc	r5, r3
 801672c:	0553      	lsls	r3, r2, #21
 801672e:	d531      	bpl.n	8016794 <__ssputs_r+0xa0>
 8016730:	4629      	mov	r1, r5
 8016732:	f7fd ff5f 	bl	80145f4 <_malloc_r>
 8016736:	4606      	mov	r6, r0
 8016738:	b950      	cbnz	r0, 8016750 <__ssputs_r+0x5c>
 801673a:	230c      	movs	r3, #12
 801673c:	f04f 30ff 	mov.w	r0, #4294967295
 8016740:	f8ca 3000 	str.w	r3, [sl]
 8016744:	89a3      	ldrh	r3, [r4, #12]
 8016746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801674a:	81a3      	strh	r3, [r4, #12]
 801674c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016750:	464a      	mov	r2, r9
 8016752:	6921      	ldr	r1, [r4, #16]
 8016754:	f7fd fed0 	bl	80144f8 <memcpy>
 8016758:	89a3      	ldrh	r3, [r4, #12]
 801675a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801675e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016762:	81a3      	strh	r3, [r4, #12]
 8016764:	6126      	str	r6, [r4, #16]
 8016766:	444e      	add	r6, r9
 8016768:	6026      	str	r6, [r4, #0]
 801676a:	463e      	mov	r6, r7
 801676c:	6165      	str	r5, [r4, #20]
 801676e:	eba5 0509 	sub.w	r5, r5, r9
 8016772:	60a5      	str	r5, [r4, #8]
 8016774:	42be      	cmp	r6, r7
 8016776:	d900      	bls.n	801677a <__ssputs_r+0x86>
 8016778:	463e      	mov	r6, r7
 801677a:	4632      	mov	r2, r6
 801677c:	4641      	mov	r1, r8
 801677e:	6820      	ldr	r0, [r4, #0]
 8016780:	f000 f968 	bl	8016a54 <memmove>
 8016784:	68a3      	ldr	r3, [r4, #8]
 8016786:	2000      	movs	r0, #0
 8016788:	1b9b      	subs	r3, r3, r6
 801678a:	60a3      	str	r3, [r4, #8]
 801678c:	6823      	ldr	r3, [r4, #0]
 801678e:	4433      	add	r3, r6
 8016790:	6023      	str	r3, [r4, #0]
 8016792:	e7db      	b.n	801674c <__ssputs_r+0x58>
 8016794:	462a      	mov	r2, r5
 8016796:	f000 f977 	bl	8016a88 <_realloc_r>
 801679a:	4606      	mov	r6, r0
 801679c:	2800      	cmp	r0, #0
 801679e:	d1e1      	bne.n	8016764 <__ssputs_r+0x70>
 80167a0:	4650      	mov	r0, sl
 80167a2:	6921      	ldr	r1, [r4, #16]
 80167a4:	f7fd febe 	bl	8014524 <_free_r>
 80167a8:	e7c7      	b.n	801673a <__ssputs_r+0x46>
	...

080167ac <_svfiprintf_r>:
 80167ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167b0:	4698      	mov	r8, r3
 80167b2:	898b      	ldrh	r3, [r1, #12]
 80167b4:	4607      	mov	r7, r0
 80167b6:	061b      	lsls	r3, r3, #24
 80167b8:	460d      	mov	r5, r1
 80167ba:	4614      	mov	r4, r2
 80167bc:	b09d      	sub	sp, #116	; 0x74
 80167be:	d50e      	bpl.n	80167de <_svfiprintf_r+0x32>
 80167c0:	690b      	ldr	r3, [r1, #16]
 80167c2:	b963      	cbnz	r3, 80167de <_svfiprintf_r+0x32>
 80167c4:	2140      	movs	r1, #64	; 0x40
 80167c6:	f7fd ff15 	bl	80145f4 <_malloc_r>
 80167ca:	6028      	str	r0, [r5, #0]
 80167cc:	6128      	str	r0, [r5, #16]
 80167ce:	b920      	cbnz	r0, 80167da <_svfiprintf_r+0x2e>
 80167d0:	230c      	movs	r3, #12
 80167d2:	603b      	str	r3, [r7, #0]
 80167d4:	f04f 30ff 	mov.w	r0, #4294967295
 80167d8:	e0d1      	b.n	801697e <_svfiprintf_r+0x1d2>
 80167da:	2340      	movs	r3, #64	; 0x40
 80167dc:	616b      	str	r3, [r5, #20]
 80167de:	2300      	movs	r3, #0
 80167e0:	9309      	str	r3, [sp, #36]	; 0x24
 80167e2:	2320      	movs	r3, #32
 80167e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80167e8:	2330      	movs	r3, #48	; 0x30
 80167ea:	f04f 0901 	mov.w	r9, #1
 80167ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80167f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8016998 <_svfiprintf_r+0x1ec>
 80167f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80167fa:	4623      	mov	r3, r4
 80167fc:	469a      	mov	sl, r3
 80167fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016802:	b10a      	cbz	r2, 8016808 <_svfiprintf_r+0x5c>
 8016804:	2a25      	cmp	r2, #37	; 0x25
 8016806:	d1f9      	bne.n	80167fc <_svfiprintf_r+0x50>
 8016808:	ebba 0b04 	subs.w	fp, sl, r4
 801680c:	d00b      	beq.n	8016826 <_svfiprintf_r+0x7a>
 801680e:	465b      	mov	r3, fp
 8016810:	4622      	mov	r2, r4
 8016812:	4629      	mov	r1, r5
 8016814:	4638      	mov	r0, r7
 8016816:	f7ff ff6d 	bl	80166f4 <__ssputs_r>
 801681a:	3001      	adds	r0, #1
 801681c:	f000 80aa 	beq.w	8016974 <_svfiprintf_r+0x1c8>
 8016820:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016822:	445a      	add	r2, fp
 8016824:	9209      	str	r2, [sp, #36]	; 0x24
 8016826:	f89a 3000 	ldrb.w	r3, [sl]
 801682a:	2b00      	cmp	r3, #0
 801682c:	f000 80a2 	beq.w	8016974 <_svfiprintf_r+0x1c8>
 8016830:	2300      	movs	r3, #0
 8016832:	f04f 32ff 	mov.w	r2, #4294967295
 8016836:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801683a:	f10a 0a01 	add.w	sl, sl, #1
 801683e:	9304      	str	r3, [sp, #16]
 8016840:	9307      	str	r3, [sp, #28]
 8016842:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016846:	931a      	str	r3, [sp, #104]	; 0x68
 8016848:	4654      	mov	r4, sl
 801684a:	2205      	movs	r2, #5
 801684c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016850:	4851      	ldr	r0, [pc, #324]	; (8016998 <_svfiprintf_r+0x1ec>)
 8016852:	f7ff fb9f 	bl	8015f94 <memchr>
 8016856:	9a04      	ldr	r2, [sp, #16]
 8016858:	b9d8      	cbnz	r0, 8016892 <_svfiprintf_r+0xe6>
 801685a:	06d0      	lsls	r0, r2, #27
 801685c:	bf44      	itt	mi
 801685e:	2320      	movmi	r3, #32
 8016860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016864:	0711      	lsls	r1, r2, #28
 8016866:	bf44      	itt	mi
 8016868:	232b      	movmi	r3, #43	; 0x2b
 801686a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801686e:	f89a 3000 	ldrb.w	r3, [sl]
 8016872:	2b2a      	cmp	r3, #42	; 0x2a
 8016874:	d015      	beq.n	80168a2 <_svfiprintf_r+0xf6>
 8016876:	4654      	mov	r4, sl
 8016878:	2000      	movs	r0, #0
 801687a:	f04f 0c0a 	mov.w	ip, #10
 801687e:	9a07      	ldr	r2, [sp, #28]
 8016880:	4621      	mov	r1, r4
 8016882:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016886:	3b30      	subs	r3, #48	; 0x30
 8016888:	2b09      	cmp	r3, #9
 801688a:	d94e      	bls.n	801692a <_svfiprintf_r+0x17e>
 801688c:	b1b0      	cbz	r0, 80168bc <_svfiprintf_r+0x110>
 801688e:	9207      	str	r2, [sp, #28]
 8016890:	e014      	b.n	80168bc <_svfiprintf_r+0x110>
 8016892:	eba0 0308 	sub.w	r3, r0, r8
 8016896:	fa09 f303 	lsl.w	r3, r9, r3
 801689a:	4313      	orrs	r3, r2
 801689c:	46a2      	mov	sl, r4
 801689e:	9304      	str	r3, [sp, #16]
 80168a0:	e7d2      	b.n	8016848 <_svfiprintf_r+0x9c>
 80168a2:	9b03      	ldr	r3, [sp, #12]
 80168a4:	1d19      	adds	r1, r3, #4
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	9103      	str	r1, [sp, #12]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	bfbb      	ittet	lt
 80168ae:	425b      	neglt	r3, r3
 80168b0:	f042 0202 	orrlt.w	r2, r2, #2
 80168b4:	9307      	strge	r3, [sp, #28]
 80168b6:	9307      	strlt	r3, [sp, #28]
 80168b8:	bfb8      	it	lt
 80168ba:	9204      	strlt	r2, [sp, #16]
 80168bc:	7823      	ldrb	r3, [r4, #0]
 80168be:	2b2e      	cmp	r3, #46	; 0x2e
 80168c0:	d10c      	bne.n	80168dc <_svfiprintf_r+0x130>
 80168c2:	7863      	ldrb	r3, [r4, #1]
 80168c4:	2b2a      	cmp	r3, #42	; 0x2a
 80168c6:	d135      	bne.n	8016934 <_svfiprintf_r+0x188>
 80168c8:	9b03      	ldr	r3, [sp, #12]
 80168ca:	3402      	adds	r4, #2
 80168cc:	1d1a      	adds	r2, r3, #4
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	9203      	str	r2, [sp, #12]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	bfb8      	it	lt
 80168d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80168da:	9305      	str	r3, [sp, #20]
 80168dc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801699c <_svfiprintf_r+0x1f0>
 80168e0:	2203      	movs	r2, #3
 80168e2:	4650      	mov	r0, sl
 80168e4:	7821      	ldrb	r1, [r4, #0]
 80168e6:	f7ff fb55 	bl	8015f94 <memchr>
 80168ea:	b140      	cbz	r0, 80168fe <_svfiprintf_r+0x152>
 80168ec:	2340      	movs	r3, #64	; 0x40
 80168ee:	eba0 000a 	sub.w	r0, r0, sl
 80168f2:	fa03 f000 	lsl.w	r0, r3, r0
 80168f6:	9b04      	ldr	r3, [sp, #16]
 80168f8:	3401      	adds	r4, #1
 80168fa:	4303      	orrs	r3, r0
 80168fc:	9304      	str	r3, [sp, #16]
 80168fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016902:	2206      	movs	r2, #6
 8016904:	4826      	ldr	r0, [pc, #152]	; (80169a0 <_svfiprintf_r+0x1f4>)
 8016906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801690a:	f7ff fb43 	bl	8015f94 <memchr>
 801690e:	2800      	cmp	r0, #0
 8016910:	d038      	beq.n	8016984 <_svfiprintf_r+0x1d8>
 8016912:	4b24      	ldr	r3, [pc, #144]	; (80169a4 <_svfiprintf_r+0x1f8>)
 8016914:	bb1b      	cbnz	r3, 801695e <_svfiprintf_r+0x1b2>
 8016916:	9b03      	ldr	r3, [sp, #12]
 8016918:	3307      	adds	r3, #7
 801691a:	f023 0307 	bic.w	r3, r3, #7
 801691e:	3308      	adds	r3, #8
 8016920:	9303      	str	r3, [sp, #12]
 8016922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016924:	4433      	add	r3, r6
 8016926:	9309      	str	r3, [sp, #36]	; 0x24
 8016928:	e767      	b.n	80167fa <_svfiprintf_r+0x4e>
 801692a:	460c      	mov	r4, r1
 801692c:	2001      	movs	r0, #1
 801692e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016932:	e7a5      	b.n	8016880 <_svfiprintf_r+0xd4>
 8016934:	2300      	movs	r3, #0
 8016936:	f04f 0c0a 	mov.w	ip, #10
 801693a:	4619      	mov	r1, r3
 801693c:	3401      	adds	r4, #1
 801693e:	9305      	str	r3, [sp, #20]
 8016940:	4620      	mov	r0, r4
 8016942:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016946:	3a30      	subs	r2, #48	; 0x30
 8016948:	2a09      	cmp	r2, #9
 801694a:	d903      	bls.n	8016954 <_svfiprintf_r+0x1a8>
 801694c:	2b00      	cmp	r3, #0
 801694e:	d0c5      	beq.n	80168dc <_svfiprintf_r+0x130>
 8016950:	9105      	str	r1, [sp, #20]
 8016952:	e7c3      	b.n	80168dc <_svfiprintf_r+0x130>
 8016954:	4604      	mov	r4, r0
 8016956:	2301      	movs	r3, #1
 8016958:	fb0c 2101 	mla	r1, ip, r1, r2
 801695c:	e7f0      	b.n	8016940 <_svfiprintf_r+0x194>
 801695e:	ab03      	add	r3, sp, #12
 8016960:	9300      	str	r3, [sp, #0]
 8016962:	462a      	mov	r2, r5
 8016964:	4638      	mov	r0, r7
 8016966:	4b10      	ldr	r3, [pc, #64]	; (80169a8 <_svfiprintf_r+0x1fc>)
 8016968:	a904      	add	r1, sp, #16
 801696a:	f7fd ff55 	bl	8014818 <_printf_float>
 801696e:	1c42      	adds	r2, r0, #1
 8016970:	4606      	mov	r6, r0
 8016972:	d1d6      	bne.n	8016922 <_svfiprintf_r+0x176>
 8016974:	89ab      	ldrh	r3, [r5, #12]
 8016976:	065b      	lsls	r3, r3, #25
 8016978:	f53f af2c 	bmi.w	80167d4 <_svfiprintf_r+0x28>
 801697c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801697e:	b01d      	add	sp, #116	; 0x74
 8016980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016984:	ab03      	add	r3, sp, #12
 8016986:	9300      	str	r3, [sp, #0]
 8016988:	462a      	mov	r2, r5
 801698a:	4638      	mov	r0, r7
 801698c:	4b06      	ldr	r3, [pc, #24]	; (80169a8 <_svfiprintf_r+0x1fc>)
 801698e:	a904      	add	r1, sp, #16
 8016990:	f7fe f9de 	bl	8014d50 <_printf_i>
 8016994:	e7eb      	b.n	801696e <_svfiprintf_r+0x1c2>
 8016996:	bf00      	nop
 8016998:	0803081c 	.word	0x0803081c
 801699c:	08030822 	.word	0x08030822
 80169a0:	08030826 	.word	0x08030826
 80169a4:	08014819 	.word	0x08014819
 80169a8:	080166f5 	.word	0x080166f5

080169ac <_read_r>:
 80169ac:	b538      	push	{r3, r4, r5, lr}
 80169ae:	4604      	mov	r4, r0
 80169b0:	4608      	mov	r0, r1
 80169b2:	4611      	mov	r1, r2
 80169b4:	2200      	movs	r2, #0
 80169b6:	4d05      	ldr	r5, [pc, #20]	; (80169cc <_read_r+0x20>)
 80169b8:	602a      	str	r2, [r5, #0]
 80169ba:	461a      	mov	r2, r3
 80169bc:	f7ec faa7 	bl	8002f0e <_read>
 80169c0:	1c43      	adds	r3, r0, #1
 80169c2:	d102      	bne.n	80169ca <_read_r+0x1e>
 80169c4:	682b      	ldr	r3, [r5, #0]
 80169c6:	b103      	cbz	r3, 80169ca <_read_r+0x1e>
 80169c8:	6023      	str	r3, [r4, #0]
 80169ca:	bd38      	pop	{r3, r4, r5, pc}
 80169cc:	200015d0 	.word	0x200015d0

080169d0 <__assert_func>:
 80169d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80169d2:	4614      	mov	r4, r2
 80169d4:	461a      	mov	r2, r3
 80169d6:	4b09      	ldr	r3, [pc, #36]	; (80169fc <__assert_func+0x2c>)
 80169d8:	4605      	mov	r5, r0
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	68d8      	ldr	r0, [r3, #12]
 80169de:	b14c      	cbz	r4, 80169f4 <__assert_func+0x24>
 80169e0:	4b07      	ldr	r3, [pc, #28]	; (8016a00 <__assert_func+0x30>)
 80169e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80169e6:	9100      	str	r1, [sp, #0]
 80169e8:	462b      	mov	r3, r5
 80169ea:	4906      	ldr	r1, [pc, #24]	; (8016a04 <__assert_func+0x34>)
 80169ec:	f000 f80e 	bl	8016a0c <fiprintf>
 80169f0:	f000 fa9e 	bl	8016f30 <abort>
 80169f4:	4b04      	ldr	r3, [pc, #16]	; (8016a08 <__assert_func+0x38>)
 80169f6:	461c      	mov	r4, r3
 80169f8:	e7f3      	b.n	80169e2 <__assert_func+0x12>
 80169fa:	bf00      	nop
 80169fc:	20000128 	.word	0x20000128
 8016a00:	0803082d 	.word	0x0803082d
 8016a04:	0803083a 	.word	0x0803083a
 8016a08:	08030868 	.word	0x08030868

08016a0c <fiprintf>:
 8016a0c:	b40e      	push	{r1, r2, r3}
 8016a0e:	b503      	push	{r0, r1, lr}
 8016a10:	4601      	mov	r1, r0
 8016a12:	ab03      	add	r3, sp, #12
 8016a14:	4805      	ldr	r0, [pc, #20]	; (8016a2c <fiprintf+0x20>)
 8016a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a1a:	6800      	ldr	r0, [r0, #0]
 8016a1c:	9301      	str	r3, [sp, #4]
 8016a1e:	f000 f889 	bl	8016b34 <_vfiprintf_r>
 8016a22:	b002      	add	sp, #8
 8016a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a28:	b003      	add	sp, #12
 8016a2a:	4770      	bx	lr
 8016a2c:	20000128 	.word	0x20000128

08016a30 <__ascii_mbtowc>:
 8016a30:	b082      	sub	sp, #8
 8016a32:	b901      	cbnz	r1, 8016a36 <__ascii_mbtowc+0x6>
 8016a34:	a901      	add	r1, sp, #4
 8016a36:	b142      	cbz	r2, 8016a4a <__ascii_mbtowc+0x1a>
 8016a38:	b14b      	cbz	r3, 8016a4e <__ascii_mbtowc+0x1e>
 8016a3a:	7813      	ldrb	r3, [r2, #0]
 8016a3c:	600b      	str	r3, [r1, #0]
 8016a3e:	7812      	ldrb	r2, [r2, #0]
 8016a40:	1e10      	subs	r0, r2, #0
 8016a42:	bf18      	it	ne
 8016a44:	2001      	movne	r0, #1
 8016a46:	b002      	add	sp, #8
 8016a48:	4770      	bx	lr
 8016a4a:	4610      	mov	r0, r2
 8016a4c:	e7fb      	b.n	8016a46 <__ascii_mbtowc+0x16>
 8016a4e:	f06f 0001 	mvn.w	r0, #1
 8016a52:	e7f8      	b.n	8016a46 <__ascii_mbtowc+0x16>

08016a54 <memmove>:
 8016a54:	4288      	cmp	r0, r1
 8016a56:	b510      	push	{r4, lr}
 8016a58:	eb01 0402 	add.w	r4, r1, r2
 8016a5c:	d902      	bls.n	8016a64 <memmove+0x10>
 8016a5e:	4284      	cmp	r4, r0
 8016a60:	4623      	mov	r3, r4
 8016a62:	d807      	bhi.n	8016a74 <memmove+0x20>
 8016a64:	1e43      	subs	r3, r0, #1
 8016a66:	42a1      	cmp	r1, r4
 8016a68:	d008      	beq.n	8016a7c <memmove+0x28>
 8016a6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016a6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016a72:	e7f8      	b.n	8016a66 <memmove+0x12>
 8016a74:	4601      	mov	r1, r0
 8016a76:	4402      	add	r2, r0
 8016a78:	428a      	cmp	r2, r1
 8016a7a:	d100      	bne.n	8016a7e <memmove+0x2a>
 8016a7c:	bd10      	pop	{r4, pc}
 8016a7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016a82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016a86:	e7f7      	b.n	8016a78 <memmove+0x24>

08016a88 <_realloc_r>:
 8016a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a8c:	4680      	mov	r8, r0
 8016a8e:	4614      	mov	r4, r2
 8016a90:	460e      	mov	r6, r1
 8016a92:	b921      	cbnz	r1, 8016a9e <_realloc_r+0x16>
 8016a94:	4611      	mov	r1, r2
 8016a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a9a:	f7fd bdab 	b.w	80145f4 <_malloc_r>
 8016a9e:	b92a      	cbnz	r2, 8016aac <_realloc_r+0x24>
 8016aa0:	f7fd fd40 	bl	8014524 <_free_r>
 8016aa4:	4625      	mov	r5, r4
 8016aa6:	4628      	mov	r0, r5
 8016aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016aac:	f000 faac 	bl	8017008 <_malloc_usable_size_r>
 8016ab0:	4284      	cmp	r4, r0
 8016ab2:	4607      	mov	r7, r0
 8016ab4:	d802      	bhi.n	8016abc <_realloc_r+0x34>
 8016ab6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016aba:	d812      	bhi.n	8016ae2 <_realloc_r+0x5a>
 8016abc:	4621      	mov	r1, r4
 8016abe:	4640      	mov	r0, r8
 8016ac0:	f7fd fd98 	bl	80145f4 <_malloc_r>
 8016ac4:	4605      	mov	r5, r0
 8016ac6:	2800      	cmp	r0, #0
 8016ac8:	d0ed      	beq.n	8016aa6 <_realloc_r+0x1e>
 8016aca:	42bc      	cmp	r4, r7
 8016acc:	4622      	mov	r2, r4
 8016ace:	4631      	mov	r1, r6
 8016ad0:	bf28      	it	cs
 8016ad2:	463a      	movcs	r2, r7
 8016ad4:	f7fd fd10 	bl	80144f8 <memcpy>
 8016ad8:	4631      	mov	r1, r6
 8016ada:	4640      	mov	r0, r8
 8016adc:	f7fd fd22 	bl	8014524 <_free_r>
 8016ae0:	e7e1      	b.n	8016aa6 <_realloc_r+0x1e>
 8016ae2:	4635      	mov	r5, r6
 8016ae4:	e7df      	b.n	8016aa6 <_realloc_r+0x1e>

08016ae6 <__sfputc_r>:
 8016ae6:	6893      	ldr	r3, [r2, #8]
 8016ae8:	b410      	push	{r4}
 8016aea:	3b01      	subs	r3, #1
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	6093      	str	r3, [r2, #8]
 8016af0:	da07      	bge.n	8016b02 <__sfputc_r+0x1c>
 8016af2:	6994      	ldr	r4, [r2, #24]
 8016af4:	42a3      	cmp	r3, r4
 8016af6:	db01      	blt.n	8016afc <__sfputc_r+0x16>
 8016af8:	290a      	cmp	r1, #10
 8016afa:	d102      	bne.n	8016b02 <__sfputc_r+0x1c>
 8016afc:	bc10      	pop	{r4}
 8016afe:	f000 b949 	b.w	8016d94 <__swbuf_r>
 8016b02:	6813      	ldr	r3, [r2, #0]
 8016b04:	1c58      	adds	r0, r3, #1
 8016b06:	6010      	str	r0, [r2, #0]
 8016b08:	7019      	strb	r1, [r3, #0]
 8016b0a:	4608      	mov	r0, r1
 8016b0c:	bc10      	pop	{r4}
 8016b0e:	4770      	bx	lr

08016b10 <__sfputs_r>:
 8016b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b12:	4606      	mov	r6, r0
 8016b14:	460f      	mov	r7, r1
 8016b16:	4614      	mov	r4, r2
 8016b18:	18d5      	adds	r5, r2, r3
 8016b1a:	42ac      	cmp	r4, r5
 8016b1c:	d101      	bne.n	8016b22 <__sfputs_r+0x12>
 8016b1e:	2000      	movs	r0, #0
 8016b20:	e007      	b.n	8016b32 <__sfputs_r+0x22>
 8016b22:	463a      	mov	r2, r7
 8016b24:	4630      	mov	r0, r6
 8016b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b2a:	f7ff ffdc 	bl	8016ae6 <__sfputc_r>
 8016b2e:	1c43      	adds	r3, r0, #1
 8016b30:	d1f3      	bne.n	8016b1a <__sfputs_r+0xa>
 8016b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016b34 <_vfiprintf_r>:
 8016b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b38:	460d      	mov	r5, r1
 8016b3a:	4614      	mov	r4, r2
 8016b3c:	4698      	mov	r8, r3
 8016b3e:	4606      	mov	r6, r0
 8016b40:	b09d      	sub	sp, #116	; 0x74
 8016b42:	b118      	cbz	r0, 8016b4c <_vfiprintf_r+0x18>
 8016b44:	6983      	ldr	r3, [r0, #24]
 8016b46:	b90b      	cbnz	r3, 8016b4c <_vfiprintf_r+0x18>
 8016b48:	f7fd fc00 	bl	801434c <__sinit>
 8016b4c:	4b89      	ldr	r3, [pc, #548]	; (8016d74 <_vfiprintf_r+0x240>)
 8016b4e:	429d      	cmp	r5, r3
 8016b50:	d11b      	bne.n	8016b8a <_vfiprintf_r+0x56>
 8016b52:	6875      	ldr	r5, [r6, #4]
 8016b54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016b56:	07d9      	lsls	r1, r3, #31
 8016b58:	d405      	bmi.n	8016b66 <_vfiprintf_r+0x32>
 8016b5a:	89ab      	ldrh	r3, [r5, #12]
 8016b5c:	059a      	lsls	r2, r3, #22
 8016b5e:	d402      	bmi.n	8016b66 <_vfiprintf_r+0x32>
 8016b60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016b62:	f7fd fcb6 	bl	80144d2 <__retarget_lock_acquire_recursive>
 8016b66:	89ab      	ldrh	r3, [r5, #12]
 8016b68:	071b      	lsls	r3, r3, #28
 8016b6a:	d501      	bpl.n	8016b70 <_vfiprintf_r+0x3c>
 8016b6c:	692b      	ldr	r3, [r5, #16]
 8016b6e:	b9eb      	cbnz	r3, 8016bac <_vfiprintf_r+0x78>
 8016b70:	4629      	mov	r1, r5
 8016b72:	4630      	mov	r0, r6
 8016b74:	f000 f96e 	bl	8016e54 <__swsetup_r>
 8016b78:	b1c0      	cbz	r0, 8016bac <_vfiprintf_r+0x78>
 8016b7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016b7c:	07dc      	lsls	r4, r3, #31
 8016b7e:	d50e      	bpl.n	8016b9e <_vfiprintf_r+0x6a>
 8016b80:	f04f 30ff 	mov.w	r0, #4294967295
 8016b84:	b01d      	add	sp, #116	; 0x74
 8016b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b8a:	4b7b      	ldr	r3, [pc, #492]	; (8016d78 <_vfiprintf_r+0x244>)
 8016b8c:	429d      	cmp	r5, r3
 8016b8e:	d101      	bne.n	8016b94 <_vfiprintf_r+0x60>
 8016b90:	68b5      	ldr	r5, [r6, #8]
 8016b92:	e7df      	b.n	8016b54 <_vfiprintf_r+0x20>
 8016b94:	4b79      	ldr	r3, [pc, #484]	; (8016d7c <_vfiprintf_r+0x248>)
 8016b96:	429d      	cmp	r5, r3
 8016b98:	bf08      	it	eq
 8016b9a:	68f5      	ldreq	r5, [r6, #12]
 8016b9c:	e7da      	b.n	8016b54 <_vfiprintf_r+0x20>
 8016b9e:	89ab      	ldrh	r3, [r5, #12]
 8016ba0:	0598      	lsls	r0, r3, #22
 8016ba2:	d4ed      	bmi.n	8016b80 <_vfiprintf_r+0x4c>
 8016ba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016ba6:	f7fd fc95 	bl	80144d4 <__retarget_lock_release_recursive>
 8016baa:	e7e9      	b.n	8016b80 <_vfiprintf_r+0x4c>
 8016bac:	2300      	movs	r3, #0
 8016bae:	9309      	str	r3, [sp, #36]	; 0x24
 8016bb0:	2320      	movs	r3, #32
 8016bb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016bb6:	2330      	movs	r3, #48	; 0x30
 8016bb8:	f04f 0901 	mov.w	r9, #1
 8016bbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8016bc0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8016d80 <_vfiprintf_r+0x24c>
 8016bc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016bc8:	4623      	mov	r3, r4
 8016bca:	469a      	mov	sl, r3
 8016bcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016bd0:	b10a      	cbz	r2, 8016bd6 <_vfiprintf_r+0xa2>
 8016bd2:	2a25      	cmp	r2, #37	; 0x25
 8016bd4:	d1f9      	bne.n	8016bca <_vfiprintf_r+0x96>
 8016bd6:	ebba 0b04 	subs.w	fp, sl, r4
 8016bda:	d00b      	beq.n	8016bf4 <_vfiprintf_r+0xc0>
 8016bdc:	465b      	mov	r3, fp
 8016bde:	4622      	mov	r2, r4
 8016be0:	4629      	mov	r1, r5
 8016be2:	4630      	mov	r0, r6
 8016be4:	f7ff ff94 	bl	8016b10 <__sfputs_r>
 8016be8:	3001      	adds	r0, #1
 8016bea:	f000 80aa 	beq.w	8016d42 <_vfiprintf_r+0x20e>
 8016bee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016bf0:	445a      	add	r2, fp
 8016bf2:	9209      	str	r2, [sp, #36]	; 0x24
 8016bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	f000 80a2 	beq.w	8016d42 <_vfiprintf_r+0x20e>
 8016bfe:	2300      	movs	r3, #0
 8016c00:	f04f 32ff 	mov.w	r2, #4294967295
 8016c04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016c08:	f10a 0a01 	add.w	sl, sl, #1
 8016c0c:	9304      	str	r3, [sp, #16]
 8016c0e:	9307      	str	r3, [sp, #28]
 8016c10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016c14:	931a      	str	r3, [sp, #104]	; 0x68
 8016c16:	4654      	mov	r4, sl
 8016c18:	2205      	movs	r2, #5
 8016c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c1e:	4858      	ldr	r0, [pc, #352]	; (8016d80 <_vfiprintf_r+0x24c>)
 8016c20:	f7ff f9b8 	bl	8015f94 <memchr>
 8016c24:	9a04      	ldr	r2, [sp, #16]
 8016c26:	b9d8      	cbnz	r0, 8016c60 <_vfiprintf_r+0x12c>
 8016c28:	06d1      	lsls	r1, r2, #27
 8016c2a:	bf44      	itt	mi
 8016c2c:	2320      	movmi	r3, #32
 8016c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016c32:	0713      	lsls	r3, r2, #28
 8016c34:	bf44      	itt	mi
 8016c36:	232b      	movmi	r3, #43	; 0x2b
 8016c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8016c40:	2b2a      	cmp	r3, #42	; 0x2a
 8016c42:	d015      	beq.n	8016c70 <_vfiprintf_r+0x13c>
 8016c44:	4654      	mov	r4, sl
 8016c46:	2000      	movs	r0, #0
 8016c48:	f04f 0c0a 	mov.w	ip, #10
 8016c4c:	9a07      	ldr	r2, [sp, #28]
 8016c4e:	4621      	mov	r1, r4
 8016c50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016c54:	3b30      	subs	r3, #48	; 0x30
 8016c56:	2b09      	cmp	r3, #9
 8016c58:	d94e      	bls.n	8016cf8 <_vfiprintf_r+0x1c4>
 8016c5a:	b1b0      	cbz	r0, 8016c8a <_vfiprintf_r+0x156>
 8016c5c:	9207      	str	r2, [sp, #28]
 8016c5e:	e014      	b.n	8016c8a <_vfiprintf_r+0x156>
 8016c60:	eba0 0308 	sub.w	r3, r0, r8
 8016c64:	fa09 f303 	lsl.w	r3, r9, r3
 8016c68:	4313      	orrs	r3, r2
 8016c6a:	46a2      	mov	sl, r4
 8016c6c:	9304      	str	r3, [sp, #16]
 8016c6e:	e7d2      	b.n	8016c16 <_vfiprintf_r+0xe2>
 8016c70:	9b03      	ldr	r3, [sp, #12]
 8016c72:	1d19      	adds	r1, r3, #4
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	9103      	str	r1, [sp, #12]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	bfbb      	ittet	lt
 8016c7c:	425b      	neglt	r3, r3
 8016c7e:	f042 0202 	orrlt.w	r2, r2, #2
 8016c82:	9307      	strge	r3, [sp, #28]
 8016c84:	9307      	strlt	r3, [sp, #28]
 8016c86:	bfb8      	it	lt
 8016c88:	9204      	strlt	r2, [sp, #16]
 8016c8a:	7823      	ldrb	r3, [r4, #0]
 8016c8c:	2b2e      	cmp	r3, #46	; 0x2e
 8016c8e:	d10c      	bne.n	8016caa <_vfiprintf_r+0x176>
 8016c90:	7863      	ldrb	r3, [r4, #1]
 8016c92:	2b2a      	cmp	r3, #42	; 0x2a
 8016c94:	d135      	bne.n	8016d02 <_vfiprintf_r+0x1ce>
 8016c96:	9b03      	ldr	r3, [sp, #12]
 8016c98:	3402      	adds	r4, #2
 8016c9a:	1d1a      	adds	r2, r3, #4
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	9203      	str	r2, [sp, #12]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	bfb8      	it	lt
 8016ca4:	f04f 33ff 	movlt.w	r3, #4294967295
 8016ca8:	9305      	str	r3, [sp, #20]
 8016caa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8016d84 <_vfiprintf_r+0x250>
 8016cae:	2203      	movs	r2, #3
 8016cb0:	4650      	mov	r0, sl
 8016cb2:	7821      	ldrb	r1, [r4, #0]
 8016cb4:	f7ff f96e 	bl	8015f94 <memchr>
 8016cb8:	b140      	cbz	r0, 8016ccc <_vfiprintf_r+0x198>
 8016cba:	2340      	movs	r3, #64	; 0x40
 8016cbc:	eba0 000a 	sub.w	r0, r0, sl
 8016cc0:	fa03 f000 	lsl.w	r0, r3, r0
 8016cc4:	9b04      	ldr	r3, [sp, #16]
 8016cc6:	3401      	adds	r4, #1
 8016cc8:	4303      	orrs	r3, r0
 8016cca:	9304      	str	r3, [sp, #16]
 8016ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016cd0:	2206      	movs	r2, #6
 8016cd2:	482d      	ldr	r0, [pc, #180]	; (8016d88 <_vfiprintf_r+0x254>)
 8016cd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016cd8:	f7ff f95c 	bl	8015f94 <memchr>
 8016cdc:	2800      	cmp	r0, #0
 8016cde:	d03f      	beq.n	8016d60 <_vfiprintf_r+0x22c>
 8016ce0:	4b2a      	ldr	r3, [pc, #168]	; (8016d8c <_vfiprintf_r+0x258>)
 8016ce2:	bb1b      	cbnz	r3, 8016d2c <_vfiprintf_r+0x1f8>
 8016ce4:	9b03      	ldr	r3, [sp, #12]
 8016ce6:	3307      	adds	r3, #7
 8016ce8:	f023 0307 	bic.w	r3, r3, #7
 8016cec:	3308      	adds	r3, #8
 8016cee:	9303      	str	r3, [sp, #12]
 8016cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cf2:	443b      	add	r3, r7
 8016cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8016cf6:	e767      	b.n	8016bc8 <_vfiprintf_r+0x94>
 8016cf8:	460c      	mov	r4, r1
 8016cfa:	2001      	movs	r0, #1
 8016cfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8016d00:	e7a5      	b.n	8016c4e <_vfiprintf_r+0x11a>
 8016d02:	2300      	movs	r3, #0
 8016d04:	f04f 0c0a 	mov.w	ip, #10
 8016d08:	4619      	mov	r1, r3
 8016d0a:	3401      	adds	r4, #1
 8016d0c:	9305      	str	r3, [sp, #20]
 8016d0e:	4620      	mov	r0, r4
 8016d10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d14:	3a30      	subs	r2, #48	; 0x30
 8016d16:	2a09      	cmp	r2, #9
 8016d18:	d903      	bls.n	8016d22 <_vfiprintf_r+0x1ee>
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d0c5      	beq.n	8016caa <_vfiprintf_r+0x176>
 8016d1e:	9105      	str	r1, [sp, #20]
 8016d20:	e7c3      	b.n	8016caa <_vfiprintf_r+0x176>
 8016d22:	4604      	mov	r4, r0
 8016d24:	2301      	movs	r3, #1
 8016d26:	fb0c 2101 	mla	r1, ip, r1, r2
 8016d2a:	e7f0      	b.n	8016d0e <_vfiprintf_r+0x1da>
 8016d2c:	ab03      	add	r3, sp, #12
 8016d2e:	9300      	str	r3, [sp, #0]
 8016d30:	462a      	mov	r2, r5
 8016d32:	4630      	mov	r0, r6
 8016d34:	4b16      	ldr	r3, [pc, #88]	; (8016d90 <_vfiprintf_r+0x25c>)
 8016d36:	a904      	add	r1, sp, #16
 8016d38:	f7fd fd6e 	bl	8014818 <_printf_float>
 8016d3c:	4607      	mov	r7, r0
 8016d3e:	1c78      	adds	r0, r7, #1
 8016d40:	d1d6      	bne.n	8016cf0 <_vfiprintf_r+0x1bc>
 8016d42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016d44:	07d9      	lsls	r1, r3, #31
 8016d46:	d405      	bmi.n	8016d54 <_vfiprintf_r+0x220>
 8016d48:	89ab      	ldrh	r3, [r5, #12]
 8016d4a:	059a      	lsls	r2, r3, #22
 8016d4c:	d402      	bmi.n	8016d54 <_vfiprintf_r+0x220>
 8016d4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016d50:	f7fd fbc0 	bl	80144d4 <__retarget_lock_release_recursive>
 8016d54:	89ab      	ldrh	r3, [r5, #12]
 8016d56:	065b      	lsls	r3, r3, #25
 8016d58:	f53f af12 	bmi.w	8016b80 <_vfiprintf_r+0x4c>
 8016d5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016d5e:	e711      	b.n	8016b84 <_vfiprintf_r+0x50>
 8016d60:	ab03      	add	r3, sp, #12
 8016d62:	9300      	str	r3, [sp, #0]
 8016d64:	462a      	mov	r2, r5
 8016d66:	4630      	mov	r0, r6
 8016d68:	4b09      	ldr	r3, [pc, #36]	; (8016d90 <_vfiprintf_r+0x25c>)
 8016d6a:	a904      	add	r1, sp, #16
 8016d6c:	f7fd fff0 	bl	8014d50 <_printf_i>
 8016d70:	e7e4      	b.n	8016d3c <_vfiprintf_r+0x208>
 8016d72:	bf00      	nop
 8016d74:	080305bc 	.word	0x080305bc
 8016d78:	080305dc 	.word	0x080305dc
 8016d7c:	0803059c 	.word	0x0803059c
 8016d80:	0803081c 	.word	0x0803081c
 8016d84:	08030822 	.word	0x08030822
 8016d88:	08030826 	.word	0x08030826
 8016d8c:	08014819 	.word	0x08014819
 8016d90:	08016b11 	.word	0x08016b11

08016d94 <__swbuf_r>:
 8016d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d96:	460e      	mov	r6, r1
 8016d98:	4614      	mov	r4, r2
 8016d9a:	4605      	mov	r5, r0
 8016d9c:	b118      	cbz	r0, 8016da6 <__swbuf_r+0x12>
 8016d9e:	6983      	ldr	r3, [r0, #24]
 8016da0:	b90b      	cbnz	r3, 8016da6 <__swbuf_r+0x12>
 8016da2:	f7fd fad3 	bl	801434c <__sinit>
 8016da6:	4b21      	ldr	r3, [pc, #132]	; (8016e2c <__swbuf_r+0x98>)
 8016da8:	429c      	cmp	r4, r3
 8016daa:	d12b      	bne.n	8016e04 <__swbuf_r+0x70>
 8016dac:	686c      	ldr	r4, [r5, #4]
 8016dae:	69a3      	ldr	r3, [r4, #24]
 8016db0:	60a3      	str	r3, [r4, #8]
 8016db2:	89a3      	ldrh	r3, [r4, #12]
 8016db4:	071a      	lsls	r2, r3, #28
 8016db6:	d52f      	bpl.n	8016e18 <__swbuf_r+0x84>
 8016db8:	6923      	ldr	r3, [r4, #16]
 8016dba:	b36b      	cbz	r3, 8016e18 <__swbuf_r+0x84>
 8016dbc:	6923      	ldr	r3, [r4, #16]
 8016dbe:	6820      	ldr	r0, [r4, #0]
 8016dc0:	b2f6      	uxtb	r6, r6
 8016dc2:	1ac0      	subs	r0, r0, r3
 8016dc4:	6963      	ldr	r3, [r4, #20]
 8016dc6:	4637      	mov	r7, r6
 8016dc8:	4283      	cmp	r3, r0
 8016dca:	dc04      	bgt.n	8016dd6 <__swbuf_r+0x42>
 8016dcc:	4621      	mov	r1, r4
 8016dce:	4628      	mov	r0, r5
 8016dd0:	f7ff f88e 	bl	8015ef0 <_fflush_r>
 8016dd4:	bb30      	cbnz	r0, 8016e24 <__swbuf_r+0x90>
 8016dd6:	68a3      	ldr	r3, [r4, #8]
 8016dd8:	3001      	adds	r0, #1
 8016dda:	3b01      	subs	r3, #1
 8016ddc:	60a3      	str	r3, [r4, #8]
 8016dde:	6823      	ldr	r3, [r4, #0]
 8016de0:	1c5a      	adds	r2, r3, #1
 8016de2:	6022      	str	r2, [r4, #0]
 8016de4:	701e      	strb	r6, [r3, #0]
 8016de6:	6963      	ldr	r3, [r4, #20]
 8016de8:	4283      	cmp	r3, r0
 8016dea:	d004      	beq.n	8016df6 <__swbuf_r+0x62>
 8016dec:	89a3      	ldrh	r3, [r4, #12]
 8016dee:	07db      	lsls	r3, r3, #31
 8016df0:	d506      	bpl.n	8016e00 <__swbuf_r+0x6c>
 8016df2:	2e0a      	cmp	r6, #10
 8016df4:	d104      	bne.n	8016e00 <__swbuf_r+0x6c>
 8016df6:	4621      	mov	r1, r4
 8016df8:	4628      	mov	r0, r5
 8016dfa:	f7ff f879 	bl	8015ef0 <_fflush_r>
 8016dfe:	b988      	cbnz	r0, 8016e24 <__swbuf_r+0x90>
 8016e00:	4638      	mov	r0, r7
 8016e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e04:	4b0a      	ldr	r3, [pc, #40]	; (8016e30 <__swbuf_r+0x9c>)
 8016e06:	429c      	cmp	r4, r3
 8016e08:	d101      	bne.n	8016e0e <__swbuf_r+0x7a>
 8016e0a:	68ac      	ldr	r4, [r5, #8]
 8016e0c:	e7cf      	b.n	8016dae <__swbuf_r+0x1a>
 8016e0e:	4b09      	ldr	r3, [pc, #36]	; (8016e34 <__swbuf_r+0xa0>)
 8016e10:	429c      	cmp	r4, r3
 8016e12:	bf08      	it	eq
 8016e14:	68ec      	ldreq	r4, [r5, #12]
 8016e16:	e7ca      	b.n	8016dae <__swbuf_r+0x1a>
 8016e18:	4621      	mov	r1, r4
 8016e1a:	4628      	mov	r0, r5
 8016e1c:	f000 f81a 	bl	8016e54 <__swsetup_r>
 8016e20:	2800      	cmp	r0, #0
 8016e22:	d0cb      	beq.n	8016dbc <__swbuf_r+0x28>
 8016e24:	f04f 37ff 	mov.w	r7, #4294967295
 8016e28:	e7ea      	b.n	8016e00 <__swbuf_r+0x6c>
 8016e2a:	bf00      	nop
 8016e2c:	080305bc 	.word	0x080305bc
 8016e30:	080305dc 	.word	0x080305dc
 8016e34:	0803059c 	.word	0x0803059c

08016e38 <__ascii_wctomb>:
 8016e38:	4603      	mov	r3, r0
 8016e3a:	4608      	mov	r0, r1
 8016e3c:	b141      	cbz	r1, 8016e50 <__ascii_wctomb+0x18>
 8016e3e:	2aff      	cmp	r2, #255	; 0xff
 8016e40:	d904      	bls.n	8016e4c <__ascii_wctomb+0x14>
 8016e42:	228a      	movs	r2, #138	; 0x8a
 8016e44:	f04f 30ff 	mov.w	r0, #4294967295
 8016e48:	601a      	str	r2, [r3, #0]
 8016e4a:	4770      	bx	lr
 8016e4c:	2001      	movs	r0, #1
 8016e4e:	700a      	strb	r2, [r1, #0]
 8016e50:	4770      	bx	lr
	...

08016e54 <__swsetup_r>:
 8016e54:	4b32      	ldr	r3, [pc, #200]	; (8016f20 <__swsetup_r+0xcc>)
 8016e56:	b570      	push	{r4, r5, r6, lr}
 8016e58:	681d      	ldr	r5, [r3, #0]
 8016e5a:	4606      	mov	r6, r0
 8016e5c:	460c      	mov	r4, r1
 8016e5e:	b125      	cbz	r5, 8016e6a <__swsetup_r+0x16>
 8016e60:	69ab      	ldr	r3, [r5, #24]
 8016e62:	b913      	cbnz	r3, 8016e6a <__swsetup_r+0x16>
 8016e64:	4628      	mov	r0, r5
 8016e66:	f7fd fa71 	bl	801434c <__sinit>
 8016e6a:	4b2e      	ldr	r3, [pc, #184]	; (8016f24 <__swsetup_r+0xd0>)
 8016e6c:	429c      	cmp	r4, r3
 8016e6e:	d10f      	bne.n	8016e90 <__swsetup_r+0x3c>
 8016e70:	686c      	ldr	r4, [r5, #4]
 8016e72:	89a3      	ldrh	r3, [r4, #12]
 8016e74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e78:	0719      	lsls	r1, r3, #28
 8016e7a:	d42c      	bmi.n	8016ed6 <__swsetup_r+0x82>
 8016e7c:	06dd      	lsls	r5, r3, #27
 8016e7e:	d411      	bmi.n	8016ea4 <__swsetup_r+0x50>
 8016e80:	2309      	movs	r3, #9
 8016e82:	6033      	str	r3, [r6, #0]
 8016e84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016e88:	f04f 30ff 	mov.w	r0, #4294967295
 8016e8c:	81a3      	strh	r3, [r4, #12]
 8016e8e:	e03e      	b.n	8016f0e <__swsetup_r+0xba>
 8016e90:	4b25      	ldr	r3, [pc, #148]	; (8016f28 <__swsetup_r+0xd4>)
 8016e92:	429c      	cmp	r4, r3
 8016e94:	d101      	bne.n	8016e9a <__swsetup_r+0x46>
 8016e96:	68ac      	ldr	r4, [r5, #8]
 8016e98:	e7eb      	b.n	8016e72 <__swsetup_r+0x1e>
 8016e9a:	4b24      	ldr	r3, [pc, #144]	; (8016f2c <__swsetup_r+0xd8>)
 8016e9c:	429c      	cmp	r4, r3
 8016e9e:	bf08      	it	eq
 8016ea0:	68ec      	ldreq	r4, [r5, #12]
 8016ea2:	e7e6      	b.n	8016e72 <__swsetup_r+0x1e>
 8016ea4:	0758      	lsls	r0, r3, #29
 8016ea6:	d512      	bpl.n	8016ece <__swsetup_r+0x7a>
 8016ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016eaa:	b141      	cbz	r1, 8016ebe <__swsetup_r+0x6a>
 8016eac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016eb0:	4299      	cmp	r1, r3
 8016eb2:	d002      	beq.n	8016eba <__swsetup_r+0x66>
 8016eb4:	4630      	mov	r0, r6
 8016eb6:	f7fd fb35 	bl	8014524 <_free_r>
 8016eba:	2300      	movs	r3, #0
 8016ebc:	6363      	str	r3, [r4, #52]	; 0x34
 8016ebe:	89a3      	ldrh	r3, [r4, #12]
 8016ec0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016ec4:	81a3      	strh	r3, [r4, #12]
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	6063      	str	r3, [r4, #4]
 8016eca:	6923      	ldr	r3, [r4, #16]
 8016ecc:	6023      	str	r3, [r4, #0]
 8016ece:	89a3      	ldrh	r3, [r4, #12]
 8016ed0:	f043 0308 	orr.w	r3, r3, #8
 8016ed4:	81a3      	strh	r3, [r4, #12]
 8016ed6:	6923      	ldr	r3, [r4, #16]
 8016ed8:	b94b      	cbnz	r3, 8016eee <__swsetup_r+0x9a>
 8016eda:	89a3      	ldrh	r3, [r4, #12]
 8016edc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016ee4:	d003      	beq.n	8016eee <__swsetup_r+0x9a>
 8016ee6:	4621      	mov	r1, r4
 8016ee8:	4630      	mov	r0, r6
 8016eea:	f000 f84d 	bl	8016f88 <__smakebuf_r>
 8016eee:	89a0      	ldrh	r0, [r4, #12]
 8016ef0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016ef4:	f010 0301 	ands.w	r3, r0, #1
 8016ef8:	d00a      	beq.n	8016f10 <__swsetup_r+0xbc>
 8016efa:	2300      	movs	r3, #0
 8016efc:	60a3      	str	r3, [r4, #8]
 8016efe:	6963      	ldr	r3, [r4, #20]
 8016f00:	425b      	negs	r3, r3
 8016f02:	61a3      	str	r3, [r4, #24]
 8016f04:	6923      	ldr	r3, [r4, #16]
 8016f06:	b943      	cbnz	r3, 8016f1a <__swsetup_r+0xc6>
 8016f08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016f0c:	d1ba      	bne.n	8016e84 <__swsetup_r+0x30>
 8016f0e:	bd70      	pop	{r4, r5, r6, pc}
 8016f10:	0781      	lsls	r1, r0, #30
 8016f12:	bf58      	it	pl
 8016f14:	6963      	ldrpl	r3, [r4, #20]
 8016f16:	60a3      	str	r3, [r4, #8]
 8016f18:	e7f4      	b.n	8016f04 <__swsetup_r+0xb0>
 8016f1a:	2000      	movs	r0, #0
 8016f1c:	e7f7      	b.n	8016f0e <__swsetup_r+0xba>
 8016f1e:	bf00      	nop
 8016f20:	20000128 	.word	0x20000128
 8016f24:	080305bc 	.word	0x080305bc
 8016f28:	080305dc 	.word	0x080305dc
 8016f2c:	0803059c 	.word	0x0803059c

08016f30 <abort>:
 8016f30:	2006      	movs	r0, #6
 8016f32:	b508      	push	{r3, lr}
 8016f34:	f000 f898 	bl	8017068 <raise>
 8016f38:	2001      	movs	r0, #1
 8016f3a:	f7eb ffde 	bl	8002efa <_exit>

08016f3e <__swhatbuf_r>:
 8016f3e:	b570      	push	{r4, r5, r6, lr}
 8016f40:	460e      	mov	r6, r1
 8016f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f46:	4614      	mov	r4, r2
 8016f48:	2900      	cmp	r1, #0
 8016f4a:	461d      	mov	r5, r3
 8016f4c:	b096      	sub	sp, #88	; 0x58
 8016f4e:	da08      	bge.n	8016f62 <__swhatbuf_r+0x24>
 8016f50:	2200      	movs	r2, #0
 8016f52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016f56:	602a      	str	r2, [r5, #0]
 8016f58:	061a      	lsls	r2, r3, #24
 8016f5a:	d410      	bmi.n	8016f7e <__swhatbuf_r+0x40>
 8016f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016f60:	e00e      	b.n	8016f80 <__swhatbuf_r+0x42>
 8016f62:	466a      	mov	r2, sp
 8016f64:	f000 f89c 	bl	80170a0 <_fstat_r>
 8016f68:	2800      	cmp	r0, #0
 8016f6a:	dbf1      	blt.n	8016f50 <__swhatbuf_r+0x12>
 8016f6c:	9a01      	ldr	r2, [sp, #4]
 8016f6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016f72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016f76:	425a      	negs	r2, r3
 8016f78:	415a      	adcs	r2, r3
 8016f7a:	602a      	str	r2, [r5, #0]
 8016f7c:	e7ee      	b.n	8016f5c <__swhatbuf_r+0x1e>
 8016f7e:	2340      	movs	r3, #64	; 0x40
 8016f80:	2000      	movs	r0, #0
 8016f82:	6023      	str	r3, [r4, #0]
 8016f84:	b016      	add	sp, #88	; 0x58
 8016f86:	bd70      	pop	{r4, r5, r6, pc}

08016f88 <__smakebuf_r>:
 8016f88:	898b      	ldrh	r3, [r1, #12]
 8016f8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016f8c:	079d      	lsls	r5, r3, #30
 8016f8e:	4606      	mov	r6, r0
 8016f90:	460c      	mov	r4, r1
 8016f92:	d507      	bpl.n	8016fa4 <__smakebuf_r+0x1c>
 8016f94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016f98:	6023      	str	r3, [r4, #0]
 8016f9a:	6123      	str	r3, [r4, #16]
 8016f9c:	2301      	movs	r3, #1
 8016f9e:	6163      	str	r3, [r4, #20]
 8016fa0:	b002      	add	sp, #8
 8016fa2:	bd70      	pop	{r4, r5, r6, pc}
 8016fa4:	466a      	mov	r2, sp
 8016fa6:	ab01      	add	r3, sp, #4
 8016fa8:	f7ff ffc9 	bl	8016f3e <__swhatbuf_r>
 8016fac:	9900      	ldr	r1, [sp, #0]
 8016fae:	4605      	mov	r5, r0
 8016fb0:	4630      	mov	r0, r6
 8016fb2:	f7fd fb1f 	bl	80145f4 <_malloc_r>
 8016fb6:	b948      	cbnz	r0, 8016fcc <__smakebuf_r+0x44>
 8016fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016fbc:	059a      	lsls	r2, r3, #22
 8016fbe:	d4ef      	bmi.n	8016fa0 <__smakebuf_r+0x18>
 8016fc0:	f023 0303 	bic.w	r3, r3, #3
 8016fc4:	f043 0302 	orr.w	r3, r3, #2
 8016fc8:	81a3      	strh	r3, [r4, #12]
 8016fca:	e7e3      	b.n	8016f94 <__smakebuf_r+0xc>
 8016fcc:	4b0d      	ldr	r3, [pc, #52]	; (8017004 <__smakebuf_r+0x7c>)
 8016fce:	62b3      	str	r3, [r6, #40]	; 0x28
 8016fd0:	89a3      	ldrh	r3, [r4, #12]
 8016fd2:	6020      	str	r0, [r4, #0]
 8016fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016fd8:	81a3      	strh	r3, [r4, #12]
 8016fda:	9b00      	ldr	r3, [sp, #0]
 8016fdc:	6120      	str	r0, [r4, #16]
 8016fde:	6163      	str	r3, [r4, #20]
 8016fe0:	9b01      	ldr	r3, [sp, #4]
 8016fe2:	b15b      	cbz	r3, 8016ffc <__smakebuf_r+0x74>
 8016fe4:	4630      	mov	r0, r6
 8016fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016fea:	f000 f86b 	bl	80170c4 <_isatty_r>
 8016fee:	b128      	cbz	r0, 8016ffc <__smakebuf_r+0x74>
 8016ff0:	89a3      	ldrh	r3, [r4, #12]
 8016ff2:	f023 0303 	bic.w	r3, r3, #3
 8016ff6:	f043 0301 	orr.w	r3, r3, #1
 8016ffa:	81a3      	strh	r3, [r4, #12]
 8016ffc:	89a0      	ldrh	r0, [r4, #12]
 8016ffe:	4305      	orrs	r5, r0
 8017000:	81a5      	strh	r5, [r4, #12]
 8017002:	e7cd      	b.n	8016fa0 <__smakebuf_r+0x18>
 8017004:	080142e5 	.word	0x080142e5

08017008 <_malloc_usable_size_r>:
 8017008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801700c:	1f18      	subs	r0, r3, #4
 801700e:	2b00      	cmp	r3, #0
 8017010:	bfbc      	itt	lt
 8017012:	580b      	ldrlt	r3, [r1, r0]
 8017014:	18c0      	addlt	r0, r0, r3
 8017016:	4770      	bx	lr

08017018 <_raise_r>:
 8017018:	291f      	cmp	r1, #31
 801701a:	b538      	push	{r3, r4, r5, lr}
 801701c:	4604      	mov	r4, r0
 801701e:	460d      	mov	r5, r1
 8017020:	d904      	bls.n	801702c <_raise_r+0x14>
 8017022:	2316      	movs	r3, #22
 8017024:	6003      	str	r3, [r0, #0]
 8017026:	f04f 30ff 	mov.w	r0, #4294967295
 801702a:	bd38      	pop	{r3, r4, r5, pc}
 801702c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801702e:	b112      	cbz	r2, 8017036 <_raise_r+0x1e>
 8017030:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017034:	b94b      	cbnz	r3, 801704a <_raise_r+0x32>
 8017036:	4620      	mov	r0, r4
 8017038:	f000 f830 	bl	801709c <_getpid_r>
 801703c:	462a      	mov	r2, r5
 801703e:	4601      	mov	r1, r0
 8017040:	4620      	mov	r0, r4
 8017042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017046:	f000 b817 	b.w	8017078 <_kill_r>
 801704a:	2b01      	cmp	r3, #1
 801704c:	d00a      	beq.n	8017064 <_raise_r+0x4c>
 801704e:	1c59      	adds	r1, r3, #1
 8017050:	d103      	bne.n	801705a <_raise_r+0x42>
 8017052:	2316      	movs	r3, #22
 8017054:	6003      	str	r3, [r0, #0]
 8017056:	2001      	movs	r0, #1
 8017058:	e7e7      	b.n	801702a <_raise_r+0x12>
 801705a:	2400      	movs	r4, #0
 801705c:	4628      	mov	r0, r5
 801705e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017062:	4798      	blx	r3
 8017064:	2000      	movs	r0, #0
 8017066:	e7e0      	b.n	801702a <_raise_r+0x12>

08017068 <raise>:
 8017068:	4b02      	ldr	r3, [pc, #8]	; (8017074 <raise+0xc>)
 801706a:	4601      	mov	r1, r0
 801706c:	6818      	ldr	r0, [r3, #0]
 801706e:	f7ff bfd3 	b.w	8017018 <_raise_r>
 8017072:	bf00      	nop
 8017074:	20000128 	.word	0x20000128

08017078 <_kill_r>:
 8017078:	b538      	push	{r3, r4, r5, lr}
 801707a:	2300      	movs	r3, #0
 801707c:	4d06      	ldr	r5, [pc, #24]	; (8017098 <_kill_r+0x20>)
 801707e:	4604      	mov	r4, r0
 8017080:	4608      	mov	r0, r1
 8017082:	4611      	mov	r1, r2
 8017084:	602b      	str	r3, [r5, #0]
 8017086:	f7eb ff28 	bl	8002eda <_kill>
 801708a:	1c43      	adds	r3, r0, #1
 801708c:	d102      	bne.n	8017094 <_kill_r+0x1c>
 801708e:	682b      	ldr	r3, [r5, #0]
 8017090:	b103      	cbz	r3, 8017094 <_kill_r+0x1c>
 8017092:	6023      	str	r3, [r4, #0]
 8017094:	bd38      	pop	{r3, r4, r5, pc}
 8017096:	bf00      	nop
 8017098:	200015d0 	.word	0x200015d0

0801709c <_getpid_r>:
 801709c:	f7eb bf16 	b.w	8002ecc <_getpid>

080170a0 <_fstat_r>:
 80170a0:	b538      	push	{r3, r4, r5, lr}
 80170a2:	2300      	movs	r3, #0
 80170a4:	4d06      	ldr	r5, [pc, #24]	; (80170c0 <_fstat_r+0x20>)
 80170a6:	4604      	mov	r4, r0
 80170a8:	4608      	mov	r0, r1
 80170aa:	4611      	mov	r1, r2
 80170ac:	602b      	str	r3, [r5, #0]
 80170ae:	f7eb ff72 	bl	8002f96 <_fstat>
 80170b2:	1c43      	adds	r3, r0, #1
 80170b4:	d102      	bne.n	80170bc <_fstat_r+0x1c>
 80170b6:	682b      	ldr	r3, [r5, #0]
 80170b8:	b103      	cbz	r3, 80170bc <_fstat_r+0x1c>
 80170ba:	6023      	str	r3, [r4, #0]
 80170bc:	bd38      	pop	{r3, r4, r5, pc}
 80170be:	bf00      	nop
 80170c0:	200015d0 	.word	0x200015d0

080170c4 <_isatty_r>:
 80170c4:	b538      	push	{r3, r4, r5, lr}
 80170c6:	2300      	movs	r3, #0
 80170c8:	4d05      	ldr	r5, [pc, #20]	; (80170e0 <_isatty_r+0x1c>)
 80170ca:	4604      	mov	r4, r0
 80170cc:	4608      	mov	r0, r1
 80170ce:	602b      	str	r3, [r5, #0]
 80170d0:	f7eb ff70 	bl	8002fb4 <_isatty>
 80170d4:	1c43      	adds	r3, r0, #1
 80170d6:	d102      	bne.n	80170de <_isatty_r+0x1a>
 80170d8:	682b      	ldr	r3, [r5, #0]
 80170da:	b103      	cbz	r3, 80170de <_isatty_r+0x1a>
 80170dc:	6023      	str	r3, [r4, #0]
 80170de:	bd38      	pop	{r3, r4, r5, pc}
 80170e0:	200015d0 	.word	0x200015d0

080170e4 <_init>:
 80170e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170e6:	bf00      	nop
 80170e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170ea:	bc08      	pop	{r3}
 80170ec:	469e      	mov	lr, r3
 80170ee:	4770      	bx	lr

080170f0 <_fini>:
 80170f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170f2:	bf00      	nop
 80170f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170f6:	bc08      	pop	{r3}
 80170f8:	469e      	mov	lr, r3
 80170fa:	4770      	bx	lr
