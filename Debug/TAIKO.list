
TAIKO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df64  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a94  0800e150  0800e150  0001e150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebe4  0800ebe4  00020310  2**0
                  CONTENTS
  4 .ARM          00000000  0800ebe4  0800ebe4  00020310  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ebe4  0800ebe4  00020310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebe4  0800ebe4  0001ebe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ebe8  0800ebe8  0001ebe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000310  20000000  0800ebec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a68  20000310  0800eefc  00020310  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d78  0800eefc  00020d78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001791e  00000000  00000000  00020339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d8d  00000000  00000000  00037c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  0003b9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  0003cec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eabb  00000000  00000000  0003e1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001993f  00000000  00000000  0005cc8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5257  00000000  00000000  000765ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b821  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068a0  00000000  00000000  0011b874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000310 	.word	0x20000310
 8000204:	00000000 	.word	0x00000000
 8000208:	0800e134 	.word	0x0800e134

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000314 	.word	0x20000314
 8000224:	0800e134 	.word	0x0800e134

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <DrumOutputDefault>:
uint32_t drum_sensor_values[4];
DrumStruct drums[4];
DrumOutputDevice drum_output_device;
DrumOutputCallback drum_output_callback;

void DrumOutputDefault(DrumType type) {
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	drums[type].hit_count++;
 8001026:	79fa      	ldrb	r2, [r7, #7]
 8001028:	490a      	ldr	r1, [pc, #40]	; (8001054 <DrumOutputDefault+0x38>)
 800102a:	4613      	mov	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4413      	add	r3, r2
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	440b      	add	r3, r1
 8001034:	3304      	adds	r3, #4
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	1c59      	adds	r1, r3, #1
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <DrumOutputDefault+0x38>)
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	4403      	add	r3, r0
 8001046:	3304      	adds	r3, #4
 8001048:	6019      	str	r1, [r3, #0]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	20000340 	.word	0x20000340

08001058 <DrumInit>:

void DrumInit() {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

	drum_output_device = DRUM_OUTPUT_NONE;
 800105e:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <DrumInit+0xa0>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
	drum_output_callback = &DrumOutputDefault;
 8001064:	4b25      	ldr	r3, [pc, #148]	; (80010fc <DrumInit+0xa4>)
 8001066:	4a26      	ldr	r2, [pc, #152]	; (8001100 <DrumInit+0xa8>)
 8001068:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_DRUMS; i++) {
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	e03b      	b.n	80010e8 <DrumInit+0x90>
		drums[i].type = i;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	b2d8      	uxtb	r0, r3
 8001074:	4923      	ldr	r1, [pc, #140]	; (8001104 <DrumInit+0xac>)
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	440b      	add	r3, r1
 8001082:	4602      	mov	r2, r0
 8001084:	701a      	strb	r2, [r3, #0]
		drums[i].state = DRUM_IDLE;
 8001086:	491f      	ldr	r1, [pc, #124]	; (8001104 <DrumInit+0xac>)
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	4413      	add	r3, r2
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	440b      	add	r3, r1
 8001094:	3308      	adds	r3, #8
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
		drums[i].sensor_value_pt = &(drum_sensor_values[i]);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <DrumInit+0xb0>)
 80010a0:	1899      	adds	r1, r3, r2
 80010a2:	4818      	ldr	r0, [pc, #96]	; (8001104 <DrumInit+0xac>)
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	4403      	add	r3, r0
 80010b0:	3310      	adds	r3, #16
 80010b2:	6019      	str	r1, [r3, #0]
		drums[i].hit_count = 0;
 80010b4:	4913      	ldr	r1, [pc, #76]	; (8001104 <DrumInit+0xac>)
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	440b      	add	r3, r1
 80010c2:	3304      	adds	r3, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
		drums[i].last_tick = HAL_GetTick();
 80010c8:	f001 fc1a 	bl	8002900 <HAL_GetTick>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4618      	mov	r0, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	; (8001104 <DrumInit+0xac>)
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	440b      	add	r3, r1
 80010de:	330c      	adds	r3, #12
 80010e0:	6018      	str	r0, [r3, #0]
	for (int i = 0; i < NUM_DRUMS; i++) {
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3301      	adds	r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	ddc0      	ble.n	8001070 <DrumInit+0x18>
	}

}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000400 	.word	0x20000400
 80010fc:	20000404 	.word	0x20000404
 8001100:	0800101d 	.word	0x0800101d
 8001104:	20000340 	.word	0x20000340
 8001108:	2000032c 	.word	0x2000032c
 800110c:	00000000 	.word	0x00000000

08001110 <DrumCalibrate>:

void DrumCalibrate() {
 8001110:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001114:	b092      	sub	sp, #72	; 0x48
 8001116:	af00      	add	r7, sp, #0

	uint32_t last_tick = HAL_GetTick();
 8001118:	f001 fbf2 	bl	8002900 <HAL_GetTick>
 800111c:	4603      	mov	r3, r0
 800111e:	647b      	str	r3, [r7, #68]	; 0x44
	//	uint16_t values[NUM_DRUMS][DRUM_CALIBRATION_SAMPLE_NUM];
	// Dynamically allocate memory for the 2D array
	uint16_t **values = (uint16_t**) malloc(NUM_DRUMS * sizeof(uint16_t*));
 8001120:	2010      	movs	r0, #16
 8001122:	f009 ffed 	bl	800b100 <malloc>
 8001126:	4603      	mov	r3, r0
 8001128:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < NUM_DRUMS; ++i) {
 800112a:	2300      	movs	r3, #0
 800112c:	643b      	str	r3, [r7, #64]	; 0x40
 800112e:	e00c      	b.n	800114a <DrumCalibrate+0x3a>
		values[i] = (uint16_t*) malloc(DRUM_CALIBRATION_SAMPLE_NUM * sizeof(uint16_t));
 8001130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	18d4      	adds	r4, r2, r3
 8001138:	f44f 7016 	mov.w	r0, #600	; 0x258
 800113c:	f009 ffe0 	bl	800b100 <malloc>
 8001140:	4603      	mov	r3, r0
 8001142:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001146:	3301      	adds	r3, #1
 8001148:	643b      	str	r3, [r7, #64]	; 0x40
 800114a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800114c:	2b03      	cmp	r3, #3
 800114e:	ddef      	ble.n	8001130 <DrumCalibrate+0x20>
	}

	// sampling
	for (int i = 0; i < DRUM_CALIBRATION_SAMPLE_NUM; i++) {
 8001150:	2300      	movs	r3, #0
 8001152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001154:	e024      	b.n	80011a0 <DrumCalibrate+0x90>
		while (last_tick == HAL_GetTick()) {
 8001156:	bf00      	nop
 8001158:	f001 fbd2 	bl	8002900 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001160:	429a      	cmp	r2, r3
 8001162:	d0f9      	beq.n	8001158 <DrumCalibrate+0x48>
		} // waits for 1 tick
		last_tick = HAL_GetTick();
 8001164:	f001 fbcc 	bl	8002900 <HAL_GetTick>
 8001168:	4603      	mov	r3, r0
 800116a:	647b      	str	r3, [r7, #68]	; 0x44
		for (int j = 0; j < NUM_DRUMS; j++) {
 800116c:	2300      	movs	r3, #0
 800116e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001170:	e010      	b.n	8001194 <DrumCalibrate+0x84>
			values[j][i] = drum_sensor_values[j];
 8001172:	4a99      	ldr	r2, [pc, #612]	; (80013d8 <DrumCalibrate+0x2c8>)
 8001174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001176:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800117a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	4413      	add	r3, r2
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	b28a      	uxth	r2, r1
 800118c:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < NUM_DRUMS; j++) {
 800118e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001190:	3301      	adds	r3, #1
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
 8001194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001196:	2b03      	cmp	r3, #3
 8001198:	ddeb      	ble.n	8001172 <DrumCalibrate+0x62>
	for (int i = 0; i < DRUM_CALIBRATION_SAMPLE_NUM; i++) {
 800119a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800119c:	3301      	adds	r3, #1
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011a2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011a6:	dbd6      	blt.n	8001156 <DrumCalibrate+0x46>
		}
	}

	// calculates avg and sd for each drum, tunes threshold
	for (int i = 0; i < NUM_DRUMS; i++) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
 80011ac:	e0ec      	b.n	8001388 <DrumCalibrate+0x278>
		uint32_t sum = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t max_val = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 80011b6:	2300      	movs	r3, #0
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ba:	e026      	b.n	800120a <DrumCalibrate+0xfa>
			sum += values[i][j];
 80011bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	4413      	add	r3, r2
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d2:	4413      	add	r3, r2
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
			if (values[i][j] > max_val)
 80011d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	4413      	add	r3, r2
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d209      	bcs.n	8001204 <DrumCalibrate+0xf4>
				max_val = values[i][j];
 80011f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	4413      	add	r3, r2
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001206:	3301      	adds	r3, #1
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
 800120a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001210:	dbd4      	blt.n	80011bc <DrumCalibrate+0xac>
		}
		double avg = (double) sum / DRUM_CALIBRATION_SAMPLE_NUM;
 8001212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001214:	f7ff f952 	bl	80004bc <__aeabi_ui2d>
 8001218:	a36b      	add	r3, pc, #428	; (adr r3, 80013c8 <DrumCalibrate+0x2b8>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff faf1 	bl	8000804 <__aeabi_ddiv>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	e9c7 2302 	strd	r2, r3, [r7, #8]
		double sqerr = 0;
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
 800123a:	e036      	b.n	80012aa <DrumCalibrate+0x19a>
			sqerr += (values[i][j] - avg) * (values[i][j] - avg);
 800123c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	4413      	add	r3, r2
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f944 	bl	80004dc <__aeabi_i2d>
 8001254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001258:	f7fe fff2 	bl	8000240 <__aeabi_dsub>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4614      	mov	r4, r2
 8001262:	461d      	mov	r5, r3
 8001264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	4413      	add	r3, r2
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f930 	bl	80004dc <__aeabi_i2d>
 800127c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001280:	f7fe ffde 	bl	8000240 <__aeabi_dsub>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4620      	mov	r0, r4
 800128a:	4629      	mov	r1, r5
 800128c:	f7ff f990 	bl	80005b0 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001298:	f7fe ffd4 	bl	8000244 <__adddf3>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	3301      	adds	r3, #1
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80012b0:	dbc4      	blt.n	800123c <DrumCalibrate+0x12c>
		}
		double sd = sqrt(sqerr / (DRUM_CALIBRATION_SAMPLE_NUM - 1));
 80012b2:	a347      	add	r3, pc, #284	; (adr r3, 80013d0 <DrumCalibrate+0x2c0>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012bc:	f7ff faa2 	bl	8000804 <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f00c fe60 	bl	800df8c <sqrt>
 80012cc:	e9c7 0100 	strd	r0, r1, [r7]

		drums[i].sensor_avg = avg;
 80012d0:	4942      	ldr	r1, [pc, #264]	; (80013dc <DrumCalibrate+0x2cc>)
 80012d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	440b      	add	r3, r1
 80012de:	f103 0118 	add.w	r1, r3, #24
 80012e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012e6:	e9c1 2300 	strd	r2, r3, [r1]
		drums[i].sensor_max = max_val;
 80012ea:	493c      	ldr	r1, [pc, #240]	; (80013dc <DrumCalibrate+0x2cc>)
 80012ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	440b      	add	r3, r1
 80012f8:	3314      	adds	r3, #20
 80012fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012fc:	601a      	str	r2, [r3, #0]
		drums[i].sensor_sd = sd;
 80012fe:	4937      	ldr	r1, [pc, #220]	; (80013dc <DrumCalibrate+0x2cc>)
 8001300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001302:	4613      	mov	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4413      	add	r3, r2
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	440b      	add	r3, r1
 800130c:	f103 0120 	add.w	r1, r3, #32
 8001310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001314:	e9c1 2300 	strd	r2, r3, [r1]
		drums[i].sensor_thresh = fmin(avg + 7 * sd, max_val + 5 * sd);
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <DrumCalibrate+0x2d0>)
 800131e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001322:	f7ff f945 	bl	80005b0 <__aeabi_dmul>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001332:	f7fe ff87 	bl	8000244 <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4690      	mov	r8, r2
 800133c:	4699      	mov	r9, r3
 800133e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001340:	f7ff f8bc 	bl	80004bc <__aeabi_ui2d>
 8001344:	4604      	mov	r4, r0
 8001346:	460d      	mov	r5, r1
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <DrumCalibrate+0x2d4>)
 800134e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001352:	f7ff f92d 	bl	80005b0 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4620      	mov	r0, r4
 800135c:	4629      	mov	r1, r5
 800135e:	f7fe ff71 	bl	8000244 <__adddf3>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4640      	mov	r0, r8
 8001368:	4649      	mov	r1, r9
 800136a:	f00c fdcd 	bl	800df08 <fmin>
 800136e:	4c1b      	ldr	r4, [pc, #108]	; (80013dc <DrumCalibrate+0x2cc>)
 8001370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001372:	4613      	mov	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	4423      	add	r3, r4
 800137c:	3328      	adds	r3, #40	; 0x28
 800137e:	e9c3 0100 	strd	r0, r1, [r3]
	for (int i = 0; i < NUM_DRUMS; i++) {
 8001382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001384:	3301      	adds	r3, #1
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
 8001388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138a:	2b03      	cmp	r3, #3
 800138c:	f77f af0f 	ble.w	80011ae <DrumCalibrate+0x9e>

	}

	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	e00a      	b.n	80013ac <DrumCalibrate+0x29c>
		free(values[i]);
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4413      	add	r3, r2
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f009 feb5 	bl	800b110 <free>
	for (int i = 0; i < NUM_DRUMS; ++i) {
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	3301      	adds	r3, #1
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	ddf1      	ble.n	8001396 <DrumCalibrate+0x286>
	}
	free(values);
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f009 feac 	bl	800b110 <free>

}
 80013b8:	bf00      	nop
 80013ba:	3748      	adds	r7, #72	; 0x48
 80013bc:	46bd      	mov	sp, r7
 80013be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013c2:	bf00      	nop
 80013c4:	f3af 8000 	nop.w
 80013c8:	00000000 	.word	0x00000000
 80013cc:	4072c000 	.word	0x4072c000
 80013d0:	00000000 	.word	0x00000000
 80013d4:	4072b000 	.word	0x4072b000
 80013d8:	2000032c 	.word	0x2000032c
 80013dc:	20000340 	.word	0x20000340
 80013e0:	401c0000 	.word	0x401c0000
 80013e4:	40140000 	.word	0x40140000

080013e8 <ILI9341_Send_Command>:
static void ILI9341_Send_Command(unsigned char command);
static void ILI9341_Send_Burst(unsigned short color, unsigned long len);
static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size);


static inline void ILI9341_Send_Command(unsigned char command) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f8:	4808      	ldr	r0, [pc, #32]	; (800141c <ILI9341_Send_Command+0x34>)
 80013fa:	f002 fc6f 	bl	8003cdc <HAL_GPIO_WritePin>
	DC_COMMAND;
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <ILI9341_Send_Command+0x34>)
 8001406:	f002 fc69 	bl	8003cdc <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f000 f95d 	bl	80016cc <ILI9341_SPI_Send>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40010c00 	.word	0x40010c00

08001420 <ILI9341_Send_Data>:

static inline void ILI9341_Send_Data(unsigned char data) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001430:	4808      	ldr	r0, [pc, #32]	; (8001454 <ILI9341_Send_Data+0x34>)
 8001432:	f002 fc53 	bl	8003cdc <HAL_GPIO_WritePin>
	DC_DATA;
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <ILI9341_Send_Data+0x34>)
 800143e:	f002 fc4d 	bl	8003cdc <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data);
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4618      	mov	r0, r3
 8001446:	f000 f941 	bl	80016cc <ILI9341_SPI_Send>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40010c00 	.word	0x40010c00

08001458 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	ILI9341_SPI_Init();
 800145c:	f000 f900 	bl	8001660 <ILI9341_SPI_Init>

	/* Reset The Screen */
	ILI9341_Reset();
 8001460:	f000 f958 	bl	8001714 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 8001464:	2001      	movs	r0, #1
 8001466:	f7ff ffbf 	bl	80013e8 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 800146a:	20cb      	movs	r0, #203	; 0xcb
 800146c:	f7ff ffbc 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 8001470:	2039      	movs	r0, #57	; 0x39
 8001472:	f7ff ffd5 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 8001476:	202c      	movs	r0, #44	; 0x2c
 8001478:	f7ff ffd2 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff ffcf 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8001482:	2034      	movs	r0, #52	; 0x34
 8001484:	f7ff ffcc 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8001488:	2002      	movs	r0, #2
 800148a:	f7ff ffc9 	bl	8001420 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800148e:	20cf      	movs	r0, #207	; 0xcf
 8001490:	f7ff ffaa 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff ffc3 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800149a:	20c1      	movs	r0, #193	; 0xc1
 800149c:	f7ff ffc0 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 80014a0:	2030      	movs	r0, #48	; 0x30
 80014a2:	f7ff ffbd 	bl	8001420 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 80014a6:	20e8      	movs	r0, #232	; 0xe8
 80014a8:	f7ff ff9e 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 80014ac:	2085      	movs	r0, #133	; 0x85
 80014ae:	f7ff ffb7 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff ffb4 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 80014b8:	2078      	movs	r0, #120	; 0x78
 80014ba:	f7ff ffb1 	bl	8001420 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 80014be:	20ea      	movs	r0, #234	; 0xea
 80014c0:	f7ff ff92 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff ffab 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7ff ffa8 	bl	8001420 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 80014d0:	20ed      	movs	r0, #237	; 0xed
 80014d2:	f7ff ff89 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 80014d6:	2064      	movs	r0, #100	; 0x64
 80014d8:	f7ff ffa2 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80014dc:	2003      	movs	r0, #3
 80014de:	f7ff ff9f 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 80014e2:	2012      	movs	r0, #18
 80014e4:	f7ff ff9c 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 80014e8:	2081      	movs	r0, #129	; 0x81
 80014ea:	f7ff ff99 	bl	8001420 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 80014ee:	20f7      	movs	r0, #247	; 0xf7
 80014f0:	f7ff ff7a 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 80014f4:	2020      	movs	r0, #32
 80014f6:	f7ff ff93 	bl	8001420 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 80014fa:	20c0      	movs	r0, #192	; 0xc0
 80014fc:	f7ff ff74 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8001500:	2010      	movs	r0, #16
 8001502:	f7ff ff8d 	bl	8001420 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8001506:	20c1      	movs	r0, #193	; 0xc1
 8001508:	f7ff ff6e 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800150c:	2010      	movs	r0, #16
 800150e:	f7ff ff87 	bl	8001420 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8001512:	20c5      	movs	r0, #197	; 0xc5
 8001514:	f7ff ff68 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8001518:	203e      	movs	r0, #62	; 0x3e
 800151a:	f7ff ff81 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800151e:	2028      	movs	r0, #40	; 0x28
 8001520:	f7ff ff7e 	bl	8001420 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 8001524:	20c7      	movs	r0, #199	; 0xc7
 8001526:	f7ff ff5f 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 800152a:	2086      	movs	r0, #134	; 0x86
 800152c:	f7ff ff78 	bl	8001420 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 8001530:	2036      	movs	r0, #54	; 0x36
 8001532:	f7ff ff59 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 8001536:	2048      	movs	r0, #72	; 0x48
 8001538:	f7ff ff72 	bl	8001420 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 800153c:	203a      	movs	r0, #58	; 0x3a
 800153e:	f7ff ff53 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 8001542:	2055      	movs	r0, #85	; 0x55
 8001544:	f7ff ff6c 	bl	8001420 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8001548:	20b1      	movs	r0, #177	; 0xb1
 800154a:	f7ff ff4d 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff ff66 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8001554:	2018      	movs	r0, #24
 8001556:	f7ff ff63 	bl	8001420 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 800155a:	20b6      	movs	r0, #182	; 0xb6
 800155c:	f7ff ff44 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 8001560:	2008      	movs	r0, #8
 8001562:	f7ff ff5d 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 8001566:	2082      	movs	r0, #130	; 0x82
 8001568:	f7ff ff5a 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 800156c:	2027      	movs	r0, #39	; 0x27
 800156e:	f7ff ff57 	bl	8001420 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 8001572:	20f2      	movs	r0, #242	; 0xf2
 8001574:	f7ff ff38 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff ff51 	bl	8001420 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 800157e:	2026      	movs	r0, #38	; 0x26
 8001580:	f7ff ff32 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8001584:	2001      	movs	r0, #1
 8001586:	f7ff ff4b 	bl	8001420 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800158a:	20e0      	movs	r0, #224	; 0xe0
 800158c:	f7ff ff2c 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8001590:	200f      	movs	r0, #15
 8001592:	f7ff ff45 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8001596:	2031      	movs	r0, #49	; 0x31
 8001598:	f7ff ff42 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800159c:	202b      	movs	r0, #43	; 0x2b
 800159e:	f7ff ff3f 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80015a2:	200c      	movs	r0, #12
 80015a4:	f7ff ff3c 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80015a8:	200e      	movs	r0, #14
 80015aa:	f7ff ff39 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80015ae:	2008      	movs	r0, #8
 80015b0:	f7ff ff36 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 80015b4:	204e      	movs	r0, #78	; 0x4e
 80015b6:	f7ff ff33 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 80015ba:	20f1      	movs	r0, #241	; 0xf1
 80015bc:	f7ff ff30 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 80015c0:	2037      	movs	r0, #55	; 0x37
 80015c2:	f7ff ff2d 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80015c6:	2007      	movs	r0, #7
 80015c8:	f7ff ff2a 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 80015cc:	2010      	movs	r0, #16
 80015ce:	f7ff ff27 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80015d2:	2003      	movs	r0, #3
 80015d4:	f7ff ff24 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80015d8:	200e      	movs	r0, #14
 80015da:	f7ff ff21 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 80015de:	2009      	movs	r0, #9
 80015e0:	f7ff ff1e 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80015e4:	2000      	movs	r0, #0
 80015e6:	f7ff ff1b 	bl	8001420 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 80015ea:	20e1      	movs	r0, #225	; 0xe1
 80015ec:	f7ff fefc 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80015f0:	2000      	movs	r0, #0
 80015f2:	f7ff ff15 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80015f6:	200e      	movs	r0, #14
 80015f8:	f7ff ff12 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 80015fc:	2014      	movs	r0, #20
 80015fe:	f7ff ff0f 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8001602:	2003      	movs	r0, #3
 8001604:	f7ff ff0c 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8001608:	2011      	movs	r0, #17
 800160a:	f7ff ff09 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800160e:	2007      	movs	r0, #7
 8001610:	f7ff ff06 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8001614:	2031      	movs	r0, #49	; 0x31
 8001616:	f7ff ff03 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800161a:	20c1      	movs	r0, #193	; 0xc1
 800161c:	f7ff ff00 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 8001620:	2048      	movs	r0, #72	; 0x48
 8001622:	f7ff fefd 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8001626:	2008      	movs	r0, #8
 8001628:	f7ff fefa 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 800162c:	200f      	movs	r0, #15
 800162e:	f7ff fef7 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8001632:	200c      	movs	r0, #12
 8001634:	f7ff fef4 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8001638:	2031      	movs	r0, #49	; 0x31
 800163a:	f7ff fef1 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 800163e:	2036      	movs	r0, #54	; 0x36
 8001640:	f7ff feee 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8001644:	200f      	movs	r0, #15
 8001646:	f7ff feeb 	bl	8001420 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 800164a:	2011      	movs	r0, #17
 800164c:	f7ff fecc 	bl	80013e8 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 8001650:	2029      	movs	r0, #41	; 0x29
 8001652:	f7ff fec9 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 8001656:	202c      	movs	r0, #44	; 0x2c
 8001658:	f7ff fee2 	bl	8001420 <ILI9341_Send_Data>
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <ILI9341_SPI_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init()
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	lcd_spi.Instance 				= SPI2;
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 8001666:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <ILI9341_SPI_Init+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 800166c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001670:	605a      	str	r2, [r3, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 800168c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001690:	619a      	str	r2, [r3, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	61da      	str	r2, [r3, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	621a      	str	r2, [r3, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	629a      	str	r2, [r3, #40]	; 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 80016ac:	220a      	movs	r2, #10
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK) {
 80016b0:	4804      	ldr	r0, [pc, #16]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 80016b2:	f004 fd2f 	bl	8006114 <HAL_SPI_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <ILI9341_SPI_Init+0x60>
		Error_Handler();
 80016bc:	f000 fe82 	bl	80023c4 <Error_Handler>
	}
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000408 	.word	0x20000408
 80016c8:	40003800 	.word	0x40003800

080016cc <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(unsigned char data)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 80016d6:	1df9      	adds	r1, r7, #7
 80016d8:	2301      	movs	r3, #1
 80016da:	2201      	movs	r2, #1
 80016dc:	4803      	ldr	r0, [pc, #12]	; (80016ec <ILI9341_SPI_Send+0x20>)
 80016de:	f004 fd9d 	bl	800621c <HAL_SPI_Transmit>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000408 	.word	0x20000408

080016f0 <ILI9341_SPI_Send_Multiple>:
{
	HAL_SPI_Transmit(&lcd_spi, &data, 2, 1);
}

void ILI9341_SPI_Send_Multiple(uint8_t* data, int size)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&lcd_spi, data, size, 10);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	230a      	movs	r3, #10
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4803      	ldr	r0, [pc, #12]	; (8001710 <ILI9341_SPI_Send_Multiple+0x20>)
 8001704:	f004 fd8a 	bl	800621c <HAL_SPI_Transmit>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000408 	.word	0x20000408

08001714 <ILI9341_Reset>:

void ILI9341_Reset() {
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	RESET_ON;
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800171e:	4810      	ldr	r0, [pc, #64]	; (8001760 <ILI9341_Reset+0x4c>)
 8001720:	f002 fadc 	bl	8003cdc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001724:	2032      	movs	r0, #50	; 0x32
 8001726:	f001 f8f5 	bl	8002914 <HAL_Delay>
	RESET_OFF;
 800172a:	2201      	movs	r2, #1
 800172c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001730:	480b      	ldr	r0, [pc, #44]	; (8001760 <ILI9341_Reset+0x4c>)
 8001732:	f002 fad3 	bl	8003cdc <HAL_GPIO_WritePin>
	CS_ON;
 8001736:	2200      	movs	r2, #0
 8001738:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800173c:	4808      	ldr	r0, [pc, #32]	; (8001760 <ILI9341_Reset+0x4c>)
 800173e:	f002 facd 	bl	8003cdc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001742:	2032      	movs	r0, #50	; 0x32
 8001744:	f001 f8e6 	bl	8002914 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8001748:	2001      	movs	r0, #1
 800174a:	f7ff fe4d 	bl	80013e8 <ILI9341_Send_Command>
	CS_OFF;
 800174e:	2201      	movs	r2, #1
 8001750:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <ILI9341_Reset+0x4c>)
 8001756:	f002 fac1 	bl	8003cdc <HAL_GPIO_WritePin>
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40010c00 	.word	0x40010c00

08001764 <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 800176e:	2036      	movs	r0, #54	; 0x36
 8001770:	f7ff fe3a 	bl	80013e8 <ILI9341_Send_Command>
	switch (rotation) {
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d836      	bhi.n	80017e8 <ILI9341_Set_Rotation+0x84>
 800177a:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <ILI9341_Set_Rotation+0x1c>)
 800177c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001780:	08001791 	.word	0x08001791
 8001784:	080017a7 	.word	0x080017a7
 8001788:	080017bd 	.word	0x080017bd
 800178c:	080017d3 	.word	0x080017d3
	case 0:
		ILI9341_Send_Data(0x48);
 8001790:	2048      	movs	r0, #72	; 0x48
 8001792:	f7ff fe45 	bl	8001420 <ILI9341_Send_Data>
		X_SIZE = 240;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <ILI9341_Set_Rotation+0x8c>)
 8001798:	22f0      	movs	r2, #240	; 0xf0
 800179a:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <ILI9341_Set_Rotation+0x90>)
 800179e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017a2:	601a      	str	r2, [r3, #0]
		break;
 80017a4:	e020      	b.n	80017e8 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 80017a6:	2028      	movs	r0, #40	; 0x28
 80017a8:	f7ff fe3a 	bl	8001420 <ILI9341_Send_Data>
		X_SIZE = 320;
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <ILI9341_Set_Rotation+0x8c>)
 80017ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017b2:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <ILI9341_Set_Rotation+0x90>)
 80017b6:	22f0      	movs	r2, #240	; 0xf0
 80017b8:	601a      	str	r2, [r3, #0]
		break;
 80017ba:	e015      	b.n	80017e8 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80017bc:	2088      	movs	r0, #136	; 0x88
 80017be:	f7ff fe2f 	bl	8001420 <ILI9341_Send_Data>
		X_SIZE = 240;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <ILI9341_Set_Rotation+0x8c>)
 80017c4:	22f0      	movs	r2, #240	; 0xf0
 80017c6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <ILI9341_Set_Rotation+0x90>)
 80017ca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017ce:	601a      	str	r2, [r3, #0]
		break;
 80017d0:	e00a      	b.n	80017e8 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80017d2:	20e8      	movs	r0, #232	; 0xe8
 80017d4:	f7ff fe24 	bl	8001420 <ILI9341_Send_Data>
		X_SIZE = 320;
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <ILI9341_Set_Rotation+0x8c>)
 80017da:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017de:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <ILI9341_Set_Rotation+0x90>)
 80017e2:	22f0      	movs	r2, #240	; 0xf0
 80017e4:	601a      	str	r2, [r3, #0]
		break;
 80017e6:	bf00      	nop
	}
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000000 	.word	0x20000000
 80017f4:	20000004 	.word	0x20000004

080017f8 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800180a:	4817      	ldr	r0, [pc, #92]	; (8001868 <ILI9341_SPI_Send_32+0x70>)
 800180c:	f002 fa66 	bl	8003cdc <HAL_GPIO_WritePin>
	DC_COMMAND;
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001816:	4814      	ldr	r0, [pc, #80]	; (8001868 <ILI9341_SPI_Send_32+0x70>)
 8001818:	f002 fa60 	bl	8003cdc <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff54 	bl	80016cc <ILI9341_SPI_Send>

	DC_DATA;
 8001824:	2201      	movs	r2, #1
 8001826:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800182a:	480f      	ldr	r0, [pc, #60]	; (8001868 <ILI9341_SPI_Send_32+0x70>)
 800182c:	f002 fa56 	bl	8003cdc <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	0e1b      	lsrs	r3, r3, #24
 8001834:	b2db      	uxtb	r3, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff48 	bl	80016cc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	0c1b      	lsrs	r3, r3, #16
 8001840:	b2db      	uxtb	r3, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff42 	bl	80016cc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	b2db      	uxtb	r3, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff3c 	bl	80016cc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff37 	bl	80016cc <ILI9341_SPI_Send>

}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40010c00 	.word	0x40010c00

0800186c <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	617b      	str	r3, [r7, #20]
	t <<= 16;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	041b      	lsls	r3, r3, #16
 8001882:	617b      	str	r3, [r7, #20]
	t |= x2;
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4313      	orrs	r3, r2
 800188a:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 800188c:	6979      	ldr	r1, [r7, #20]
 800188e:	202a      	movs	r0, #42	; 0x2a
 8001890:	f7ff ffb2 	bl	80017f8 <ILI9341_SPI_Send_32>
	t = y1;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	041b      	lsls	r3, r3, #16
 800189c:	617b      	str	r3, [r7, #20]
	t |= y2;
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 80018a6:	6979      	ldr	r1, [r7, #20]
 80018a8:	202b      	movs	r0, #43	; 0x2b
 80018aa:	f7ff ffa5 	bl	80017f8 <ILI9341_SPI_Send_32>
}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <LCD_OpenWindow>:
	ILI9341_SPI_Send(data);
	ILI9341_SPI_Send(data);
}

void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{
 80018b6:	b590      	push	{r4, r7, lr}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4604      	mov	r4, r0
 80018be:	4608      	mov	r0, r1
 80018c0:	4611      	mov	r1, r2
 80018c2:	461a      	mov	r2, r3
 80018c4:	4623      	mov	r3, r4
 80018c6:	80fb      	strh	r3, [r7, #6]
 80018c8:	4603      	mov	r3, r0
 80018ca:	80bb      	strh	r3, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
 80018d0:	4613      	mov	r3, r2
 80018d2:	803b      	strh	r3, [r7, #0]
	ILI9341_Set_Address(usCOLUMN, usPAGE, usCOLUMN + usWidth - 1, usPAGE + usHeight - 1);
 80018d4:	88f8      	ldrh	r0, [r7, #6]
 80018d6:	88b9      	ldrh	r1, [r7, #4]
 80018d8:	88fa      	ldrh	r2, [r7, #6]
 80018da:	887b      	ldrh	r3, [r7, #2]
 80018dc:	4413      	add	r3, r2
 80018de:	3b01      	subs	r3, #1
 80018e0:	461c      	mov	r4, r3
 80018e2:	88ba      	ldrh	r2, [r7, #4]
 80018e4:	883b      	ldrh	r3, [r7, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	3b01      	subs	r3, #1
 80018ea:	4622      	mov	r2, r4
 80018ec:	f7ff ffbe 	bl	800186c <ILI9341_Set_Address>
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}

080018f8 <LCD_FillWindow>:

void LCD_FillWindow ( uint32_t usPoint, uint16_t usColor )
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]

	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );
 8001908:	202c      	movs	r0, #44	; 0x2c
 800190a:	f7ff fd6d 	bl	80013e8 <ILI9341_Send_Command>

	CS_ON;
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001914:	482a      	ldr	r0, [pc, #168]	; (80019c0 <LCD_FillWindow+0xc8>)
 8001916:	f002 f9e1 	bl	8003cdc <HAL_GPIO_WritePin>
	DC_DATA;
 800191a:	2201      	movs	r2, #1
 800191c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001920:	4827      	ldr	r0, [pc, #156]	; (80019c0 <LCD_FillWindow+0xc8>)
 8001922:	f002 f9db 	bl	8003cdc <HAL_GPIO_WritePin>

	int chunk_size = usPoint / 10;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a26      	ldr	r2, [pc, #152]	; (80019c4 <LCD_FillWindow+0xcc>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	08db      	lsrs	r3, r3, #3
 8001930:	61fb      	str	r3, [r7, #28]
	if (chunk_size < 64) chunk_size = 64;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	2b3f      	cmp	r3, #63	; 0x3f
 8001936:	dc01      	bgt.n	800193c <LCD_FillWindow+0x44>
 8001938:	2340      	movs	r3, #64	; 0x40
 800193a:	61fb      	str	r3, [r7, #28]
	if (chunk_size > 240) chunk_size = 240;
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	2bf0      	cmp	r3, #240	; 0xf0
 8001940:	dd01      	ble.n	8001946 <LCD_FillWindow+0x4e>
 8001942:	23f0      	movs	r3, #240	; 0xf0
 8001944:	61fb      	str	r3, [r7, #28]
	unsigned int revertedColor = (usColor >> 8) | ((usColor & 0x00ff) << 8);
 8001946:	887b      	ldrh	r3, [r7, #2]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	b29b      	uxth	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	b29b      	uxth	r3, r3
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
	uint16_t* array = (uint16_t*) malloc(chunk_size * sizeof(uint16_t));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4618      	mov	r0, r3
 800195e:	f009 fbcf 	bl	800b100 <malloc>
 8001962:	4603      	mov	r3, r0
 8001964:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < chunk_size; i++) {
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	e009      	b.n	8001980 <LCD_FillWindow+0x88>
		array[i] = revertedColor;
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	b292      	uxth	r2, r2
 8001978:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < chunk_size; i++) {
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	3301      	adds	r3, #1
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	429a      	cmp	r2, r3
 8001986:	dbf1      	blt.n	800196c <LCD_FillWindow+0x74>
	}

	while (usPoint > chunk_size) {
 8001988:	e009      	b.n	800199e <LCD_FillWindow+0xa6>
		ILI9341_SPI_Send_Multiple(array, chunk_size * 2);
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4619      	mov	r1, r3
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f7ff fead 	bl	80016f0 <ILI9341_SPI_Send_Multiple>
		usPoint -= chunk_size;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	607b      	str	r3, [r7, #4]
	while (usPoint > chunk_size) {
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d8f1      	bhi.n	800198a <LCD_FillWindow+0x92>
	}
	ILI9341_SPI_Send_Multiple(array, usPoint * 2);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4619      	mov	r1, r3
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7ff fe9f 	bl	80016f0 <ILI9341_SPI_Send_Multiple>

	free(array);
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f009 fbac 	bl	800b110 <free>

//	for ( i = 0; i < usPoint; i ++ ) {
//		ILI9341_SPI_SendU16(revertedColor);
//	}

}
 80019b8:	bf00      	nop
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40010c00 	.word	0x40010c00
 80019c4:	cccccccd 	.word	0xcccccccd

080019c8 <LCD_DrawFilledRectangle>:

void LCD_DrawFilledRectangle ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4604      	mov	r4, r0
 80019d0:	4608      	mov	r0, r1
 80019d2:	4611      	mov	r1, r2
 80019d4:	461a      	mov	r2, r3
 80019d6:	4623      	mov	r3, r4
 80019d8:	80fb      	strh	r3, [r7, #6]
 80019da:	4603      	mov	r3, r0
 80019dc:	80bb      	strh	r3, [r7, #4]
 80019de:	460b      	mov	r3, r1
 80019e0:	807b      	strh	r3, [r7, #2]
 80019e2:	4613      	mov	r3, r2
 80019e4:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80019e6:	883b      	ldrh	r3, [r7, #0]
 80019e8:	887a      	ldrh	r2, [r7, #2]
 80019ea:	88b9      	ldrh	r1, [r7, #4]
 80019ec:	88f8      	ldrh	r0, [r7, #6]
 80019ee:	f7ff ff62 	bl	80018b6 <LCD_OpenWindow>
	LCD_FillWindow ( usWidth * usHeight, usColor );
 80019f2:	887b      	ldrh	r3, [r7, #2]
 80019f4:	883a      	ldrh	r2, [r7, #0]
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	8b3b      	ldrh	r3, [r7, #24]
 80019fe:	4619      	mov	r1, r3
 8001a00:	4610      	mov	r0, r2
 8001a02:	f7ff ff79 	bl	80018f8 <LCD_FillWindow>
//	ILI9341_Send_Burst(usColor,  usWidth * usHeight);
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd90      	pop	{r4, r7, pc}
	...

08001a10 <LCD_FillScreen>:


void LCD_FillScreen (uint16_t usColor )
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af02      	add	r7, sp, #8
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
	LCD_DrawFilledRectangle(0, 0, X_SIZE, Y_SIZE, usColor);
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <LCD_FillScreen+0x2c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <LCD_FillScreen+0x30>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	b299      	uxth	r1, r3
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff ffca 	bl	80019c8 <LCD_DrawFilledRectangle>
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	20000004 	.word	0x20000004

08001a44 <LCD_DrawChar>:

	}
}

void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80fb      	strh	r3, [r7, #6]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	80bb      	strh	r3, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	3b20      	subs	r3, #32
 8001a5a:	73fb      	strb	r3, [r7, #15]

	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001a5c:	88b9      	ldrh	r1, [r7, #4]
 8001a5e:	88f8      	ldrh	r0, [r7, #6]
 8001a60:	2310      	movs	r3, #16
 8001a62:	2208      	movs	r2, #8
 8001a64:	f7ff ff27 	bl	80018b6 <LCD_OpenWindow>

	LCD_Write_Cmd ( CMD_SetPixel );
 8001a68:	202c      	movs	r0, #44	; 0x2c
 8001a6a:	f7ff fcbd 	bl	80013e8 <ILI9341_Send_Command>

	uint16_t* array = (uint16_t*) malloc(HEIGHT_EN_CHAR * WIDTH_EN_CHAR * sizeof(uint16_t));
 8001a6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a72:	f009 fb45 	bl	800b100 <malloc>
 8001a76:	4603      	mov	r3, r0
 8001a78:	60bb      	str	r3, [r7, #8]
	uint16_t* pt = array;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	613b      	str	r3, [r7, #16]
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001a7e:	2300      	movs	r3, #0
 8001a80:	75bb      	strb	r3, [r7, #22]
 8001a82:	e026      	b.n	8001ad2 <LCD_DrawChar+0x8e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	7dbb      	ldrb	r3, [r7, #22]
 8001a88:	491c      	ldr	r1, [pc, #112]	; (8001afc <LCD_DrawChar+0xb8>)
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	440a      	add	r2, r1
 8001a8e:	4413      	add	r3, r2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	75fb      	strb	r3, [r7, #23]

		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001a94:	2300      	movs	r3, #0
 8001a96:	757b      	strb	r3, [r7, #21]
 8001a98:	e015      	b.n	8001ac6 <LCD_DrawChar+0x82>
		{

			if ( ucTemp & 0x01 ) {
 8001a9a:	7dfb      	ldrb	r3, [r7, #23]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <LCD_DrawChar+0x68>
				*pt = 0x0000;
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	801a      	strh	r2, [r3, #0]
 8001aaa:	e003      	b.n	8001ab4 <LCD_DrawChar+0x70>
			} else {
				*pt = 0xFFFF;
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab2:	801a      	strh	r2, [r3, #0]
			}
			ucTemp >>= 1;
 8001ab4:	7dfb      	ldrb	r3, [r7, #23]
 8001ab6:	085b      	lsrs	r3, r3, #1
 8001ab8:	75fb      	strb	r3, [r7, #23]
			pt++;
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	3302      	adds	r3, #2
 8001abe:	613b      	str	r3, [r7, #16]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001ac0:	7d7b      	ldrb	r3, [r7, #21]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	757b      	strb	r3, [r7, #21]
 8001ac6:	7d7b      	ldrb	r3, [r7, #21]
 8001ac8:	2b07      	cmp	r3, #7
 8001aca:	d9e6      	bls.n	8001a9a <LCD_DrawChar+0x56>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001acc:	7dbb      	ldrb	r3, [r7, #22]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	75bb      	strb	r3, [r7, #22]
 8001ad2:	7dbb      	ldrb	r3, [r7, #22]
 8001ad4:	2b0f      	cmp	r3, #15
 8001ad6:	d9d5      	bls.n	8001a84 <LCD_DrawChar+0x40>
		}
	}
	DC_DATA;
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ade:	4808      	ldr	r0, [pc, #32]	; (8001b00 <LCD_DrawChar+0xbc>)
 8001ae0:	f002 f8fc 	bl	8003cdc <HAL_GPIO_WritePin>
	ILI9341_SPI_Send_Multiple(array, HEIGHT_EN_CHAR * WIDTH_EN_CHAR * 2);
 8001ae4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ae8:	68b8      	ldr	r0, [r7, #8]
 8001aea:	f7ff fe01 	bl	80016f0 <ILI9341_SPI_Send_Multiple>
	free(array);
 8001aee:	68b8      	ldr	r0, [r7, #8]
 8001af0:	f009 fb0e 	bl	800b110 <free>
}
 8001af4:	bf00      	nop
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	0800e1f4 	.word	0x0800e1f4
 8001b00:	40010c00 	.word	0x40010c00

08001b04 <LCD_DrawString>:
}



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	603a      	str	r2, [r7, #0]
 8001b0e:	80fb      	strh	r3, [r7, #6]
 8001b10:	460b      	mov	r3, r1
 8001b12:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001b14:	e01d      	b.n	8001b52 <LCD_DrawString+0x4e>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001b1c:	d904      	bls.n	8001b28 <LCD_DrawString+0x24>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001b22:	88bb      	ldrh	r3, [r7, #4]
 8001b24:	3310      	adds	r3, #16
 8001b26:	80bb      	strh	r3, [r7, #4]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001b28:	88bb      	ldrh	r3, [r7, #4]
 8001b2a:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001b2e:	d903      	bls.n	8001b38 <LCD_DrawString+0x34>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001b30:	2300      	movs	r3, #0
 8001b32:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	80bb      	strh	r3, [r7, #4]
		}

		LCD_DrawChar ( usC, usP, * pStr );
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	781a      	ldrb	r2, [r3, #0]
 8001b3c:	88b9      	ldrh	r1, [r7, #4]
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff7f 	bl	8001a44 <LCD_DrawChar>

		pStr ++;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	603b      	str	r3, [r7, #0]

		usC += WIDTH_EN_CHAR;
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	3308      	adds	r3, #8
 8001b50:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1dd      	bne.n	8001b16 <LCD_DrawString+0x12>

	}

}
 8001b5a:	bf00      	nop
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <LCD_Print>:

	if (num_chars_to_print < 0) return;
	LCD_DrawString(x, y, formatted_str);
}

void LCD_Print(uint16_t xc, uint16_t yc, const char* fmt, ...) {
 8001b64:	b40c      	push	{r2, r3}
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b08e      	sub	sp, #56	; 0x38
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	460a      	mov	r2, r1
 8001b70:	80fb      	strh	r3, [r7, #6]
 8001b72:	4613      	mov	r3, r2
 8001b74:	80bb      	strh	r3, [r7, #4]

	char formatted_str[40];

	va_list arglist;
	va_start(arglist, fmt);
 8001b76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b7a:	60bb      	str	r3, [r7, #8]

	int num_chars_to_print = vsnprintf(formatted_str, sizeof(formatted_str), fmt, arglist);
 8001b7c:	f107 000c 	add.w	r0, r7, #12
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b84:	2128      	movs	r1, #40	; 0x28
 8001b86:	f00a f84b 	bl	800bc20 <vsniprintf>
 8001b8a:	6378      	str	r0, [r7, #52]	; 0x34
	va_end(arglist);

	if (num_chars_to_print < 0) return;
 8001b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db0b      	blt.n	8001baa <LCD_Print+0x46>
	LCD_DrawString(xc * WIDTH_EN_CHAR, yc * HEIGHT_EN_CHAR, formatted_str);
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	b298      	uxth	r0, r3
 8001b98:	88bb      	ldrh	r3, [r7, #4]
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	f107 020c 	add.w	r2, r7, #12
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f7ff ffae 	bl	8001b04 <LCD_DrawString>
 8001ba8:	e000      	b.n	8001bac <LCD_Print+0x48>
	if (num_chars_to_print < 0) return;
 8001baa:	bf00      	nop
}
 8001bac:	3738      	adds	r7, #56	; 0x38
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bb4:	b002      	add	sp, #8
 8001bb6:	4770      	bx	lr

08001bb8 <DrumUpdate>:

void DrumInit();
void DrumCalibrate();

// This runs every millisecond
static inline void DrumUpdate() {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0

	int i = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
	DrumStruct* drum = drums;
 8001bc2:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <DrumUpdate+0xb0>)
 8001bc4:	603b      	str	r3, [r7, #0]
	for (; i < 4; i++, drum++) {
 8001bc6:	e046      	b.n	8001c56 <DrumUpdate+0x9e>
		if (*(drum->sensor_value_pt) > drum->sensor_thresh) {
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fc74 	bl	80004bc <__aeabi_ui2d>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001bda:	f7fe ff79 	bl	8000ad0 <__aeabi_dcmpgt>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d016      	beq.n	8001c12 <DrumUpdate+0x5a>
			if (drum->state != DRUM_HIT) {
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	7a1b      	ldrb	r3, [r3, #8]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d02e      	beq.n	8001c4a <DrumUpdate+0x92>
				drum->last_tick = HAL_GetTick();
 8001bec:	f000 fe88 	bl	8002900 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	60da      	str	r2, [r3, #12]
				if (drum->state == DRUM_IDLE) {
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	7a1b      	ldrb	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d105      	bne.n	8001c0a <DrumUpdate+0x52>
					drum_output_callback(i);
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <DrumUpdate+0xb4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	4610      	mov	r0, r2
 8001c08:	4798      	blx	r3
				}
				drum->state = DRUM_HIT;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	721a      	strb	r2, [r3, #8]
 8001c10:	e01b      	b.n	8001c4a <DrumUpdate+0x92>
			}
		} else {
			if (drum->state == DRUM_IDLE) {
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	7a1b      	ldrb	r3, [r3, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d017      	beq.n	8001c4a <DrumUpdate+0x92>
			} else if (drum->state == DRUM_HIT) {
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	7a1b      	ldrb	r3, [r3, #8]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d108      	bne.n	8001c34 <DrumUpdate+0x7c>
				drum->last_tick = HAL_GetTick();
 8001c22:	f000 fe6d 	bl	8002900 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	60da      	str	r2, [r3, #12]
				drum->state = DRUM_COOLDOWN;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	721a      	strb	r2, [r3, #8]
 8001c32:	e00a      	b.n	8001c4a <DrumUpdate+0x92>
			} else if (HAL_GetTick() - drum->last_tick > DRUM_COOLDOWN_LENGTH) {
 8001c34:	f000 fe64 	bl	8002900 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d902      	bls.n	8001c4a <DrumUpdate+0x92>
//				drum->last_tick = HAL_GetTick();
				drum->state = DRUM_IDLE;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2200      	movs	r2, #0
 8001c48:	721a      	strb	r2, [r3, #8]
	for (; i < 4; i++, drum++) {
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	3330      	adds	r3, #48	; 0x30
 8001c54:	603b      	str	r3, [r7, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	ddb5      	ble.n	8001bc8 <DrumUpdate+0x10>
			}
		}
	}

}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000340 	.word	0x20000340
 8001c6c:	20000404 	.word	0x20000404

08001c70 <HAL_TIM_PeriodElapsedCallback>:

int drum_max_val[4] = {0, 0, 0, 0};
int drum_interrupt_start_tick = 0;
int drum_interrupt_counts = 0;
extern USB_JoystickReport_Input joystick_input_data;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a26      	ldr	r2, [pc, #152]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d144      	bne.n	8001d0a <HAL_TIM_PeriodElapsedCallback+0x9a>
		drum_interrupt_counts++;
 8001c80:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3301      	adds	r3, #1
 8001c86:	4a24      	ldr	r2, [pc, #144]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001c88:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c8e:	4823      	ldr	r0, [pc, #140]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001c90:	f002 f83c 	bl	8003d0c <HAL_GPIO_TogglePin>
		DrumUpdate();
 8001c94:	f7ff ff90 	bl	8001bb8 <DrumUpdate>

		if (HAL_GetTick() % 3000 < 10) {
 8001c98:	f000 fe32 	bl	8002900 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ca4:	099b      	lsrs	r3, r3, #6
 8001ca6:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001caa:	fb01 f303 	mul.w	r3, r1, r3
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b09      	cmp	r3, #9
 8001cb2:	d80d      	bhi.n	8001cd0 <HAL_TIM_PeriodElapsedCallback+0x60>
			for (int i = 0; i < 4; i++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	e007      	b.n	8001cca <HAL_TIM_PeriodElapsedCallback+0x5a>
				drum_max_val[i] = 0;
 8001cba:	4a1a      	ldr	r2, [pc, #104]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = 0; i < 4; i++) {
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	ddf4      	ble.n	8001cba <HAL_TIM_PeriodElapsedCallback+0x4a>
			}
		}
		for (int i = 0; i < 4; i++) {
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	e016      	b.n	8001d04 <HAL_TIM_PeriodElapsedCallback+0x94>
			if (drum_max_val[i] < drum_sensor_values[i]) {
 8001cd6:	4a13      	ldr	r2, [pc, #76]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce8:	4299      	cmp	r1, r3
 8001cea:	d208      	bcs.n	8001cfe <HAL_TIM_PeriodElapsedCallback+0x8e>
				drum_max_val[i] = drum_sensor_values[i];
 8001cec:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 4; i++) {
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	3301      	adds	r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	dde5      	ble.n	8001cd6 <HAL_TIM_PeriodElapsedCallback+0x66>
			}
		}
	}

}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000052c 	.word	0x2000052c
 8001d18:	20000588 	.word	0x20000588
 8001d1c:	40011000 	.word	0x40011000
 8001d20:	057619f1 	.word	0x057619f1
 8001d24:	20000574 	.word	0x20000574
 8001d28:	2000032c 	.word	0x2000032c

08001d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d30:	b090      	sub	sp, #64	; 0x40
 8001d32:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d34:	f000 fd8c 	bl	8002850 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d38:	f000 f944 	bl	8001fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d3c:	f000 faae 	bl	800229c <MX_GPIO_Init>
  MX_DMA_Init();
 8001d40:	f000 fa8e 	bl	8002260 <MX_DMA_Init>
  MX_SPI2_Init();
 8001d44:	f000 fa08 	bl	8002158 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001d48:	f000 fa3c 	bl	80021c4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001d4c:	f000 f99a 	bl	8002084 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8001d50:	f008 fdf2 	bl	800a938 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	ILI9341_Init();
 8001d54:	f7ff fb80 	bl	8001458 <ILI9341_Init>
	ILI9341_Set_Rotation(2);
 8001d58:	2002      	movs	r0, #2
 8001d5a:	f7ff fd03 	bl	8001764 <ILI9341_Set_Rotation>
	LCD_FillScreen(PINK);
 8001d5e:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8001d62:	f7ff fe55 	bl	8001a10 <LCD_FillScreen>
	HAL_ADC_Start_DMA(&hadc1, drum_sensor_values, 4);
 8001d66:	2204      	movs	r2, #4
 8001d68:	4984      	ldr	r1, [pc, #528]	; (8001f7c <main+0x250>)
 8001d6a:	4885      	ldr	r0, [pc, #532]	; (8001f80 <main+0x254>)
 8001d6c:	f000 fee0 	bl	8002b30 <HAL_ADC_Start_DMA>
	DrumInit();
 8001d70:	f7ff f972 	bl	8001058 <DrumInit>
  	DrumCalibrate();
 8001d74:	f7ff f9cc 	bl	8001110 <DrumCalibrate>
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  	drum_interrupt_start_tick = HAL_GetTick();
 8001d78:	f000 fdc2 	bl	8002900 <HAL_GetTick>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b80      	ldr	r3, [pc, #512]	; (8001f84 <main+0x258>)
 8001d82:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim3);
 8001d84:	4880      	ldr	r0, [pc, #512]	; (8001f88 <main+0x25c>)
 8001d86:	f004 fc83 	bl	8006690 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */


//  LCD_DrawFilledRectangle(0, 0, 240, 320, RED);

	long last_ticks = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
	long tft_last_ticks = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
	long ticks = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
	int num_hits = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
	int hit_state = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
//		keyboardhid.MODIFIER = 0x00;  // shift release
//		keyboardhid.KEYCODE1 = 0x00;  // release key
//		keyboardhid.KEYCODE2 = 0x00;  // release key
//		USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));

		joystick_input_data.Button = SWITCH_A | SWITCH_CAPTURE;  // left Shift
 8001d9e:	4b7b      	ldr	r3, [pc, #492]	; (8001f8c <main+0x260>)
 8001da0:	f242 0204 	movw	r2, #8196	; 0x2004
 8001da4:	801a      	strh	r2, [r3, #0]
		SendReport(&hUsbDeviceFS, &joystick_input_data);
 8001da6:	4979      	ldr	r1, [pc, #484]	; (8001f8c <main+0x260>)
 8001da8:	4879      	ldr	r0, [pc, #484]	; (8001f90 <main+0x264>)
 8001daa:	f000 fb10 	bl	80023ce <SendReport>
		HAL_Delay (50);
 8001dae:	2032      	movs	r0, #50	; 0x32
 8001db0:	f000 fdb0 	bl	8002914 <HAL_Delay>

		joystick_input_data.Button = 0;  // left Shift
 8001db4:	4b75      	ldr	r3, [pc, #468]	; (8001f8c <main+0x260>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	801a      	strh	r2, [r3, #0]
		SendReport(&hUsbDeviceFS, &joystick_input_data);
 8001dba:	4974      	ldr	r1, [pc, #464]	; (8001f8c <main+0x260>)
 8001dbc:	4874      	ldr	r0, [pc, #464]	; (8001f90 <main+0x264>)
 8001dbe:	f000 fb06 	bl	80023ce <SendReport>
		HAL_Delay (200);
 8001dc2:	20c8      	movs	r0, #200	; 0xc8
 8001dc4:	f000 fda6 	bl	8002914 <HAL_Delay>
//		  num_hits += 1;
//	  } else {
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
//	  }
//
		if (HAL_GetTick() - tft_last_ticks > 30) {
 8001dc8:	f000 fd9a 	bl	8002900 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b1e      	cmp	r3, #30
 8001dd4:	d9e3      	bls.n	8001d9e <main+0x72>

//			__disable_irq();
			int r = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz",
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	623a      	str	r2, [r7, #32]
 8001de0:	fa1f f883 	uxth.w	r8, r3
					HAL_GetTick() / (1000 * 60 * 60),
 8001de4:	f000 fd8c 	bl	8002900 <HAL_GetTick>
 8001de8:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz",
 8001dea:	4a6a      	ldr	r2, [pc, #424]	; (8001f94 <main+0x268>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	ea4f 5953 	mov.w	r9, r3, lsr #21
					HAL_GetTick() / (1000 * 60) % 60,
 8001df4:	f000 fd84 	bl	8002900 <HAL_GetTick>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4a67      	ldr	r2, [pc, #412]	; (8001f98 <main+0x26c>)
 8001dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001e00:	0b9a      	lsrs	r2, r3, #14
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz",
 8001e02:	4b66      	ldr	r3, [pc, #408]	; (8001f9c <main+0x270>)
 8001e04:	fba3 1302 	umull	r1, r3, r3, r2
 8001e08:	095c      	lsrs	r4, r3, #5
 8001e0a:	4623      	mov	r3, r4
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	1b1b      	subs	r3, r3, r4
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	1ad4      	subs	r4, r2, r3
					(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000,
 8001e14:	f000 fd74 	bl	8002900 <HAL_GetTick>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4a61      	ldr	r2, [pc, #388]	; (8001fa0 <main+0x274>)
 8001e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e20:	099a      	lsrs	r2, r3, #6
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz",
 8001e22:	4b5e      	ldr	r3, [pc, #376]	; (8001f9c <main+0x270>)
 8001e24:	fba3 1302 	umull	r1, r3, r3, r2
 8001e28:	095d      	lsrs	r5, r3, #5
 8001e2a:	462b      	mov	r3, r5
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	1b5b      	subs	r3, r3, r5
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	1ad5      	subs	r5, r2, r3
					(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000,
 8001e34:	f000 fd64 	bl	8002900 <HAL_GetTick>
 8001e38:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz",
 8001e3a:	4a59      	ldr	r2, [pc, #356]	; (8001fa0 <main+0x274>)
 8001e3c:	fba2 1203 	umull	r1, r2, r2, r3
 8001e40:	0996      	lsrs	r6, r2, #6
 8001e42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e46:	fb06 f202 	mul.w	r2, r6, r2
 8001e4a:	1a9e      	subs	r6, r3, r2
					(float) drum_interrupt_counts / (HAL_GetTick() - drum_interrupt_start_tick + 1) * 1000);
 8001e4c:	4b55      	ldr	r3, [pc, #340]	; (8001fa4 <main+0x278>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe ff3f 	bl	8000cd4 <__aeabi_i2f>
 8001e56:	4682      	mov	sl, r0
 8001e58:	f000 fd52 	bl	8002900 <HAL_GetTick>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	4a49      	ldr	r2, [pc, #292]	; (8001f84 <main+0x258>)
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	3301      	adds	r3, #1
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe ff30 	bl	8000ccc <__aeabi_ui2f>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4650      	mov	r0, sl
 8001e72:	f7ff f837 	bl	8000ee4 <__aeabi_fdiv>
 8001e76:	4603      	mov	r3, r0
 8001e78:	494b      	ldr	r1, [pc, #300]	; (8001fa8 <main+0x27c>)
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe ff7e 	bl	8000d7c <__aeabi_fmul>
 8001e80:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz",
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe fb3c 	bl	8000500 <__aeabi_f2d>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001e90:	9602      	str	r6, [sp, #8]
 8001e92:	9501      	str	r5, [sp, #4]
 8001e94:	9400      	str	r4, [sp, #0]
 8001e96:	464b      	mov	r3, r9
 8001e98:	4a44      	ldr	r2, [pc, #272]	; (8001fac <main+0x280>)
 8001e9a:	4641      	mov	r1, r8
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff fe61 	bl	8001b64 <LCD_Print>

			LCD_Print(0, r++, "         adc | hits");
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	623a      	str	r2, [r7, #32]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4a41      	ldr	r2, [pc, #260]	; (8001fb0 <main+0x284>)
 8001eac:	4619      	mov	r1, r3
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f7ff fe58 	bl	8001b64 <LCD_Print>
			for (int i = 0; i < 4; i++) {
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
 8001eb8:	e020      	b.n	8001efc <main+0x1d0>
				LCD_Print(0, r++, "Drum %d: %4ld | %4d | %4d", i,
 8001eba:	6a3b      	ldr	r3, [r7, #32]
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	623a      	str	r2, [r7, #32]
 8001ec0:	b298      	uxth	r0, r3
 8001ec2:	4a2e      	ldr	r2, [pc, #184]	; (8001f7c <main+0x250>)
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001eca:	4c3a      	ldr	r4, [pc, #232]	; (8001fb4 <main+0x288>)
 8001ecc:	69fa      	ldr	r2, [r7, #28]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	4423      	add	r3, r4
 8001ed8:	3304      	adds	r3, #4
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4c36      	ldr	r4, [pc, #216]	; (8001fb8 <main+0x28c>)
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8001ee4:	9202      	str	r2, [sp, #8]
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	9100      	str	r1, [sp, #0]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	4a33      	ldr	r2, [pc, #204]	; (8001fbc <main+0x290>)
 8001eee:	4601      	mov	r1, r0
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7ff fe37 	bl	8001b64 <LCD_Print>
			for (int i = 0; i < 4; i++) {
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	61fb      	str	r3, [r7, #28]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	dddb      	ble.n	8001eba <main+0x18e>
						drum_sensor_values[i], drums[i].hit_count, drum_max_val[i]);
			}

			for (int i = 0; i < 4; i++) {
 8001f02:	2300      	movs	r3, #0
 8001f04:	61bb      	str	r3, [r7, #24]
 8001f06:	e031      	b.n	8001f6c <main+0x240>
				LCD_Print(0, r++, "%lf, %lf, %lf",
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	623a      	str	r2, [r7, #32]
 8001f0e:	b29e      	uxth	r6, r3
 8001f10:	4928      	ldr	r1, [pc, #160]	; (8001fb4 <main+0x288>)
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	440b      	add	r3, r1
 8001f1e:	3318      	adds	r3, #24
 8001f20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f24:	4c23      	ldr	r4, [pc, #140]	; (8001fb4 <main+0x288>)
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4413      	add	r3, r2
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	4423      	add	r3, r4
 8001f32:	3320      	adds	r3, #32
 8001f34:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001f38:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <main+0x288>)
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	3328      	adds	r3, #40	; 0x28
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001f54:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001f58:	e9cd 0100 	strd	r0, r1, [sp]
 8001f5c:	4a18      	ldr	r2, [pc, #96]	; (8001fc0 <main+0x294>)
 8001f5e:	4631      	mov	r1, r6
 8001f60:	2000      	movs	r0, #0
 8001f62:	f7ff fdff 	bl	8001b64 <LCD_Print>
			for (int i = 0; i < 4; i++) {
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	ddca      	ble.n	8001f08 <main+0x1dc>
						drums[i].sensor_avg, drums[i].sensor_sd, drums[i].sensor_thresh);
			}

//			__enable_irq();

			tft_last_ticks = HAL_GetTick();
 8001f72:	f000 fcc5 	bl	8002900 <HAL_GetTick>
 8001f76:	4603      	mov	r3, r0
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
		joystick_input_data.Button = SWITCH_A | SWITCH_CAPTURE;  // left Shift
 8001f7a:	e710      	b.n	8001d9e <main+0x72>
 8001f7c:	2000032c 	.word	0x2000032c
 8001f80:	20000460 	.word	0x20000460
 8001f84:	20000584 	.word	0x20000584
 8001f88:	2000052c 	.word	0x2000052c
 8001f8c:	20000008 	.word	0x20000008
 8001f90:	200005a0 	.word	0x200005a0
 8001f94:	95217cb1 	.word	0x95217cb1
 8001f98:	45e7b273 	.word	0x45e7b273
 8001f9c:	88888889 	.word	0x88888889
 8001fa0:	10624dd3 	.word	0x10624dd3
 8001fa4:	20000588 	.word	0x20000588
 8001fa8:	447a0000 	.word	0x447a0000
 8001fac:	0800e150 	.word	0x0800e150
 8001fb0:	0800e174 	.word	0x0800e174
 8001fb4:	20000340 	.word	0x20000340
 8001fb8:	20000574 	.word	0x20000574
 8001fbc:	0800e188 	.word	0x0800e188
 8001fc0:	0800e1a4 	.word	0x0800e1a4

08001fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b096      	sub	sp, #88	; 0x58
 8001fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fce:	2228      	movs	r2, #40	; 0x28
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f009 f8a4 	bl	800b120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd8:	f107 031c 	add.w	r3, r7, #28
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	611a      	str	r2, [r3, #16]
 8001ff6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ffc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002000:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002002:	2300      	movs	r3, #0
 8002004:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002006:	2301      	movs	r3, #1
 8002008:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800200a:	2302      	movs	r3, #2
 800200c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800200e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002012:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002014:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002018:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800201a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800201e:	4618      	mov	r0, r3
 8002020:	f003 fbe4 	bl	80057ec <HAL_RCC_OscConfig>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800202a:	f000 f9cb 	bl	80023c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800202e:	230f      	movs	r3, #15
 8002030:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002032:	2302      	movs	r3, #2
 8002034:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800203a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002040:	2300      	movs	r3, #0
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	2102      	movs	r1, #2
 800204a:	4618      	mov	r0, r3
 800204c:	f003 fe50 	bl	8005cf0 <HAL_RCC_ClockConfig>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002056:	f000 f9b5 	bl	80023c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800205a:	2312      	movs	r3, #18
 800205c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800205e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002062:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002064:	2300      	movs	r3, #0
 8002066:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	4618      	mov	r0, r3
 800206c:	f003 ff9c 	bl	8005fa8 <HAL_RCCEx_PeriphCLKConfig>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002076:	f000 f9a5 	bl	80023c4 <Error_Handler>
  }
}
 800207a:	bf00      	nop
 800207c:	3758      	adds	r7, #88	; 0x58
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002094:	4b2e      	ldr	r3, [pc, #184]	; (8002150 <MX_ADC1_Init+0xcc>)
 8002096:	4a2f      	ldr	r2, [pc, #188]	; (8002154 <MX_ADC1_Init+0xd0>)
 8002098:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800209a:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <MX_ADC1_Init+0xcc>)
 800209c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80020a2:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <MX_ADC1_Init+0xcc>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020a8:	4b29      	ldr	r3, [pc, #164]	; (8002150 <MX_ADC1_Init+0xcc>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020ae:	4b28      	ldr	r3, [pc, #160]	; (8002150 <MX_ADC1_Init+0xcc>)
 80020b0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80020b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <MX_ADC1_Init+0xcc>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80020bc:	4b24      	ldr	r3, [pc, #144]	; (8002150 <MX_ADC1_Init+0xcc>)
 80020be:	2204      	movs	r2, #4
 80020c0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020c2:	4823      	ldr	r0, [pc, #140]	; (8002150 <MX_ADC1_Init+0xcc>)
 80020c4:	f000 fc4a 	bl	800295c <HAL_ADC_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80020ce:	f000 f979 	bl	80023c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80020da:	2307      	movs	r3, #7
 80020dc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	4619      	mov	r1, r3
 80020e2:	481b      	ldr	r0, [pc, #108]	; (8002150 <MX_ADC1_Init+0xcc>)
 80020e4:	f000 fe1e 	bl	8002d24 <HAL_ADC_ConfigChannel>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80020ee:	f000 f969 	bl	80023c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80020f2:	2301      	movs	r3, #1
 80020f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020f6:	2302      	movs	r3, #2
 80020f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	4619      	mov	r1, r3
 80020fe:	4814      	ldr	r0, [pc, #80]	; (8002150 <MX_ADC1_Init+0xcc>)
 8002100:	f000 fe10 	bl	8002d24 <HAL_ADC_ConfigChannel>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800210a:	f000 f95b 	bl	80023c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800210e:	2302      	movs	r3, #2
 8002110:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002112:	2303      	movs	r3, #3
 8002114:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	4619      	mov	r1, r3
 800211a:	480d      	ldr	r0, [pc, #52]	; (8002150 <MX_ADC1_Init+0xcc>)
 800211c:	f000 fe02 	bl	8002d24 <HAL_ADC_ConfigChannel>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002126:	f000 f94d 	bl	80023c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800212a:	2303      	movs	r3, #3
 800212c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800212e:	2304      	movs	r3, #4
 8002130:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002132:	1d3b      	adds	r3, r7, #4
 8002134:	4619      	mov	r1, r3
 8002136:	4806      	ldr	r0, [pc, #24]	; (8002150 <MX_ADC1_Init+0xcc>)
 8002138:	f000 fdf4 	bl	8002d24 <HAL_ADC_ConfigChannel>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002142:	f000 f93f 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000460 	.word	0x20000460
 8002154:	40012400 	.word	0x40012400

08002158 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <MX_SPI2_Init+0x64>)
 800215e:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <MX_SPI2_Init+0x68>)
 8002160:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002162:	4b16      	ldr	r3, [pc, #88]	; (80021bc <MX_SPI2_Init+0x64>)
 8002164:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002168:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <MX_SPI2_Init+0x64>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <MX_SPI2_Init+0x64>)
 8002172:	2200      	movs	r2, #0
 8002174:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <MX_SPI2_Init+0x64>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800217c:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <MX_SPI2_Init+0x64>)
 800217e:	2200      	movs	r2, #0
 8002180:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <MX_SPI2_Init+0x64>)
 8002184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002188:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <MX_SPI2_Init+0x64>)
 800218c:	2200      	movs	r2, #0
 800218e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002190:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <MX_SPI2_Init+0x64>)
 8002192:	2200      	movs	r2, #0
 8002194:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <MX_SPI2_Init+0x64>)
 8002198:	2200      	movs	r2, #0
 800219a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800219c:	4b07      	ldr	r3, [pc, #28]	; (80021bc <MX_SPI2_Init+0x64>)
 800219e:	2200      	movs	r2, #0
 80021a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <MX_SPI2_Init+0x64>)
 80021a4:	220a      	movs	r2, #10
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021a8:	4804      	ldr	r0, [pc, #16]	; (80021bc <MX_SPI2_Init+0x64>)
 80021aa:	f003 ffb3 	bl	8006114 <HAL_SPI_Init>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80021b4:	f000 f906 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	200004d4 	.word	0x200004d4
 80021c0:	40003800 	.word	0x40003800

080021c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ca:	f107 0308 	add.w	r3, r7, #8
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d8:	463b      	mov	r3, r7
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021e0:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <MX_TIM3_Init+0x94>)
 80021e2:	4a1e      	ldr	r2, [pc, #120]	; (800225c <MX_TIM3_Init+0x98>)
 80021e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 80021e6:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <MX_TIM3_Init+0x94>)
 80021e8:	f240 22cf 	movw	r2, #719	; 0x2cf
 80021ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ee:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <MX_TIM3_Init+0x94>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 80021f4:	4b18      	ldr	r3, [pc, #96]	; (8002258 <MX_TIM3_Init+0x94>)
 80021f6:	2231      	movs	r2, #49	; 0x31
 80021f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021fa:	4b17      	ldr	r3, [pc, #92]	; (8002258 <MX_TIM3_Init+0x94>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002200:	4b15      	ldr	r3, [pc, #84]	; (8002258 <MX_TIM3_Init+0x94>)
 8002202:	2200      	movs	r2, #0
 8002204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002206:	4814      	ldr	r0, [pc, #80]	; (8002258 <MX_TIM3_Init+0x94>)
 8002208:	f004 f9f2 	bl	80065f0 <HAL_TIM_Base_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002212:	f000 f8d7 	bl	80023c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800221a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800221c:	f107 0308 	add.w	r3, r7, #8
 8002220:	4619      	mov	r1, r3
 8002222:	480d      	ldr	r0, [pc, #52]	; (8002258 <MX_TIM3_Init+0x94>)
 8002224:	f004 fb9c 	bl	8006960 <HAL_TIM_ConfigClockSource>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800222e:	f000 f8c9 	bl	80023c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002232:	2300      	movs	r3, #0
 8002234:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800223a:	463b      	mov	r3, r7
 800223c:	4619      	mov	r1, r3
 800223e:	4806      	ldr	r0, [pc, #24]	; (8002258 <MX_TIM3_Init+0x94>)
 8002240:	f004 fd8a 	bl	8006d58 <HAL_TIMEx_MasterConfigSynchronization>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800224a:	f000 f8bb 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	2000052c 	.word	0x2000052c
 800225c:	40000400 	.word	0x40000400

08002260 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <MX_DMA_Init+0x38>)
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <MX_DMA_Init+0x38>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6153      	str	r3, [r2, #20]
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <MX_DMA_Init+0x38>)
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	607b      	str	r3, [r7, #4]
 800227c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	200b      	movs	r0, #11
 8002284:	f001 f81f 	bl	80032c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002288:	200b      	movs	r0, #11
 800228a:	f001 f838 	bl	80032fe <HAL_NVIC_EnableIRQ>

}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000

0800229c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a2:	f107 0310 	add.w	r3, r7, #16
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b0:	4b40      	ldr	r3, [pc, #256]	; (80023b4 <MX_GPIO_Init+0x118>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	4a3f      	ldr	r2, [pc, #252]	; (80023b4 <MX_GPIO_Init+0x118>)
 80022b6:	f043 0310 	orr.w	r3, r3, #16
 80022ba:	6193      	str	r3, [r2, #24]
 80022bc:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <MX_GPIO_Init+0x118>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c8:	4b3a      	ldr	r3, [pc, #232]	; (80023b4 <MX_GPIO_Init+0x118>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	4a39      	ldr	r2, [pc, #228]	; (80023b4 <MX_GPIO_Init+0x118>)
 80022ce:	f043 0304 	orr.w	r3, r3, #4
 80022d2:	6193      	str	r3, [r2, #24]
 80022d4:	4b37      	ldr	r3, [pc, #220]	; (80023b4 <MX_GPIO_Init+0x118>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022e0:	4b34      	ldr	r3, [pc, #208]	; (80023b4 <MX_GPIO_Init+0x118>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	4a33      	ldr	r2, [pc, #204]	; (80023b4 <MX_GPIO_Init+0x118>)
 80022e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ea:	6193      	str	r3, [r2, #24]
 80022ec:	4b31      	ldr	r3, [pc, #196]	; (80023b4 <MX_GPIO_Init+0x118>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f4:	607b      	str	r3, [r7, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f8:	4b2e      	ldr	r3, [pc, #184]	; (80023b4 <MX_GPIO_Init+0x118>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	4a2d      	ldr	r2, [pc, #180]	; (80023b4 <MX_GPIO_Init+0x118>)
 80022fe:	f043 0308 	orr.w	r3, r3, #8
 8002302:	6193      	str	r3, [r2, #24]
 8002304:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <MX_GPIO_Init+0x118>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	603b      	str	r3, [r7, #0]
 800230e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED_Pin, GPIO_PIN_RESET);
 8002310:	2200      	movs	r2, #0
 8002312:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8002316:	4828      	ldr	r0, [pc, #160]	; (80023b8 <MX_GPIO_Init+0x11c>)
 8002318:	f001 fce0 	bl	8003cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_CS_Pin|T_DIN_Pin|T_DO_Pin
 800231c:	2200      	movs	r2, #0
 800231e:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002322:	4826      	ldr	r0, [pc, #152]	; (80023bc <MX_GPIO_Init+0x120>)
 8002324:	f001 fcda 	bl	8003cdc <HAL_GPIO_WritePin>
                          |T_IRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8002328:	2200      	movs	r2, #0
 800232a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800232e:	4824      	ldr	r0, [pc, #144]	; (80023c0 <MX_GPIO_Init+0x124>)
 8002330:	f001 fcd4 	bl	8003cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233a:	2301      	movs	r3, #1
 800233c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800233e:	2301      	movs	r3, #1
 8002340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002342:	2303      	movs	r3, #3
 8002344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002346:	f107 0310 	add.w	r3, r7, #16
 800234a:	4619      	mov	r1, r3
 800234c:	481a      	ldr	r0, [pc, #104]	; (80023b8 <MX_GPIO_Init+0x11c>)
 800234e:	f001 fb31 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin T_DIN_Pin T_DO_Pin
                           T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin|T_DIN_Pin|T_DO_Pin
 8002352:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002356:	613b      	str	r3, [r7, #16]
                          |T_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002358:	2301      	movs	r3, #1
 800235a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002360:	2302      	movs	r3, #2
 8002362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002364:	f107 0310 	add.w	r3, r7, #16
 8002368:	4619      	mov	r1, r3
 800236a:	4814      	ldr	r0, [pc, #80]	; (80023bc <MX_GPIO_Init+0x120>)
 800236c:	f001 fb22 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8002370:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002376:	2301      	movs	r3, #1
 8002378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2302      	movs	r3, #2
 8002380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002382:	f107 0310 	add.w	r3, r7, #16
 8002386:	4619      	mov	r1, r3
 8002388:	480d      	ldr	r0, [pc, #52]	; (80023c0 <MX_GPIO_Init+0x124>)
 800238a:	f001 fb13 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002392:	2301      	movs	r3, #1
 8002394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800239a:	2303      	movs	r3, #3
 800239c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800239e:	f107 0310 	add.w	r3, r7, #16
 80023a2:	4619      	mov	r1, r3
 80023a4:	4804      	ldr	r0, [pc, #16]	; (80023b8 <MX_GPIO_Init+0x11c>)
 80023a6:	f001 fb05 	bl	80039b4 <HAL_GPIO_Init>

}
 80023aa:	bf00      	nop
 80023ac:	3720      	adds	r7, #32
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40011000 	.word	0x40011000
 80023bc:	40011800 	.word	0x40011800
 80023c0:	40010c00 	.word	0x40010c00

080023c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023c8:	b672      	cpsid	i
}
 80023ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023cc:	e7fe      	b.n	80023cc <Error_Handler+0x8>

080023ce <SendReport>:
  report->RY = STICK_CENTER;
  report->HAT = HAT_CENTER;
}

uint8_t SendReport(USBD_HandleTypeDef* pdev, USB_JoystickReport_Input* input_data)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b084      	sub	sp, #16
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	6039      	str	r1, [r7, #0]
  uint8_t result = USBD_FAIL;
 80023d8:	2302      	movs	r3, #2
 80023da:	73fb      	strb	r3, [r7, #15]
  result = USBD_HID_SendReport(pdev, (uint8_t*)input_data, sizeof(USB_JoystickReport_Input));
 80023dc:	2208      	movs	r2, #8
 80023de:	6839      	ldr	r1, [r7, #0]
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f007 f9c1 	bl	8009768 <USBD_HID_SendReport>
 80023e6:	4603      	mov	r3, r0
 80023e8:	73fb      	strb	r3, [r7, #15]
  return result;
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023fa:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <HAL_MspInit+0x40>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	4a0d      	ldr	r2, [pc, #52]	; (8002434 <HAL_MspInit+0x40>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6193      	str	r3, [r2, #24]
 8002406:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_MspInit+0x40>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	4b08      	ldr	r3, [pc, #32]	; (8002434 <HAL_MspInit+0x40>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4a07      	ldr	r2, [pc, #28]	; (8002434 <HAL_MspInit+0x40>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241c:	61d3      	str	r3, [r2, #28]
 800241e:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_MspInit+0x40>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	40021000 	.word	0x40021000

08002438 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0310 	add.w	r3, r7, #16
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a28      	ldr	r2, [pc, #160]	; (80024f4 <HAL_ADC_MspInit+0xbc>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d149      	bne.n	80024ec <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002458:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <HAL_ADC_MspInit+0xc0>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	4a26      	ldr	r2, [pc, #152]	; (80024f8 <HAL_ADC_MspInit+0xc0>)
 800245e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002462:	6193      	str	r3, [r2, #24]
 8002464:	4b24      	ldr	r3, [pc, #144]	; (80024f8 <HAL_ADC_MspInit+0xc0>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002470:	4b21      	ldr	r3, [pc, #132]	; (80024f8 <HAL_ADC_MspInit+0xc0>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	4a20      	ldr	r2, [pc, #128]	; (80024f8 <HAL_ADC_MspInit+0xc0>)
 8002476:	f043 0304 	orr.w	r3, r3, #4
 800247a:	6193      	str	r3, [r2, #24]
 800247c:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <HAL_ADC_MspInit+0xc0>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002488:	230f      	movs	r3, #15
 800248a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800248c:	2303      	movs	r3, #3
 800248e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002490:	f107 0310 	add.w	r3, r7, #16
 8002494:	4619      	mov	r1, r3
 8002496:	4819      	ldr	r0, [pc, #100]	; (80024fc <HAL_ADC_MspInit+0xc4>)
 8002498:	f001 fa8c 	bl	80039b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800249c:	4b18      	ldr	r3, [pc, #96]	; (8002500 <HAL_ADC_MspInit+0xc8>)
 800249e:	4a19      	ldr	r2, [pc, #100]	; (8002504 <HAL_ADC_MspInit+0xcc>)
 80024a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024a2:	4b17      	ldr	r3, [pc, #92]	; (8002500 <HAL_ADC_MspInit+0xc8>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a8:	4b15      	ldr	r3, [pc, #84]	; (8002500 <HAL_ADC_MspInit+0xc8>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80024ae:	4b14      	ldr	r3, [pc, #80]	; (8002500 <HAL_ADC_MspInit+0xc8>)
 80024b0:	2280      	movs	r2, #128	; 0x80
 80024b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_ADC_MspInit+0xc8>)
 80024b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024bc:	4b10      	ldr	r3, [pc, #64]	; (8002500 <HAL_ADC_MspInit+0xc8>)
 80024be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80024c4:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <HAL_ADC_MspInit+0xc8>)
 80024c6:	2220      	movs	r2, #32
 80024c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024ca:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <HAL_ADC_MspInit+0xc8>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024d0:	480b      	ldr	r0, [pc, #44]	; (8002500 <HAL_ADC_MspInit+0xc8>)
 80024d2:	f000 ff2f 	bl	8003334 <HAL_DMA_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80024dc:	f7ff ff72 	bl	80023c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a07      	ldr	r2, [pc, #28]	; (8002500 <HAL_ADC_MspInit+0xc8>)
 80024e4:	621a      	str	r2, [r3, #32]
 80024e6:	4a06      	ldr	r2, [pc, #24]	; (8002500 <HAL_ADC_MspInit+0xc8>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024ec:	bf00      	nop
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40012400 	.word	0x40012400
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40010800 	.word	0x40010800
 8002500:	20000490 	.word	0x20000490
 8002504:	40020008 	.word	0x40020008

08002508 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002510:	f107 0310 	add.w	r3, r7, #16
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <HAL_SPI_MspInit+0x8c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d131      	bne.n	800258c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002528:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <HAL_SPI_MspInit+0x90>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	4a1a      	ldr	r2, [pc, #104]	; (8002598 <HAL_SPI_MspInit+0x90>)
 800252e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002532:	61d3      	str	r3, [r2, #28]
 8002534:	4b18      	ldr	r3, [pc, #96]	; (8002598 <HAL_SPI_MspInit+0x90>)
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002540:	4b15      	ldr	r3, [pc, #84]	; (8002598 <HAL_SPI_MspInit+0x90>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	4a14      	ldr	r2, [pc, #80]	; (8002598 <HAL_SPI_MspInit+0x90>)
 8002546:	f043 0308 	orr.w	r3, r3, #8
 800254a:	6193      	str	r3, [r2, #24]
 800254c:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_SPI_MspInit+0x90>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002558:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800255c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002562:	2303      	movs	r3, #3
 8002564:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002566:	f107 0310 	add.w	r3, r7, #16
 800256a:	4619      	mov	r1, r3
 800256c:	480b      	ldr	r0, [pc, #44]	; (800259c <HAL_SPI_MspInit+0x94>)
 800256e:	f001 fa21 	bl	80039b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002572:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002580:	f107 0310 	add.w	r3, r7, #16
 8002584:	4619      	mov	r1, r3
 8002586:	4805      	ldr	r0, [pc, #20]	; (800259c <HAL_SPI_MspInit+0x94>)
 8002588:	f001 fa14 	bl	80039b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800258c:	bf00      	nop
 800258e:	3720      	adds	r7, #32
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40003800 	.word	0x40003800
 8002598:	40021000 	.word	0x40021000
 800259c:	40010c00 	.word	0x40010c00

080025a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0d      	ldr	r2, [pc, #52]	; (80025e4 <HAL_TIM_Base_MspInit+0x44>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d113      	bne.n	80025da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <HAL_TIM_Base_MspInit+0x48>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <HAL_TIM_Base_MspInit+0x48>)
 80025b8:	f043 0302 	orr.w	r3, r3, #2
 80025bc:	61d3      	str	r3, [r2, #28]
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <HAL_TIM_Base_MspInit+0x48>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2100      	movs	r1, #0
 80025ce:	201d      	movs	r0, #29
 80025d0:	f000 fe79 	bl	80032c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025d4:	201d      	movs	r0, #29
 80025d6:	f000 fe92 	bl	80032fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40000400 	.word	0x40000400
 80025e8:	40021000 	.word	0x40021000

080025ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025f0:	e7fe      	b.n	80025f0 <NMI_Handler+0x4>

080025f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f6:	e7fe      	b.n	80025f6 <HardFault_Handler+0x4>

080025f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025fc:	e7fe      	b.n	80025fc <MemManage_Handler+0x4>

080025fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002602:	e7fe      	b.n	8002602 <BusFault_Handler+0x4>

08002604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002608:	e7fe      	b.n	8002608 <UsageFault_Handler+0x4>

0800260a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002632:	f000 f953 	bl	80028dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <DMA1_Channel1_IRQHandler+0x10>)
 8002642:	f000 ff4d 	bl	80034e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000490 	.word	0x20000490

08002650 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002656:	f001 fc97 	bl	8003f88 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000a64 	.word	0x20000a64

08002664 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <TIM3_IRQHandler+0x10>)
 800266a:	f004 f871 	bl	8006750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2000052c 	.word	0x2000052c

08002678 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
	return 1;
 800267c:	2301      	movs	r3, #1
}
 800267e:	4618      	mov	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <_kill>:

int _kill(int pid, int sig)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002690:	f008 fd0c 	bl	800b0ac <__errno>
 8002694:	4603      	mov	r3, r0
 8002696:	2216      	movs	r2, #22
 8002698:	601a      	str	r2, [r3, #0]
	return -1;
 800269a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <_exit>:

void _exit (int status)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026ae:	f04f 31ff 	mov.w	r1, #4294967295
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff ffe7 	bl	8002686 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026b8:	e7fe      	b.n	80026b8 <_exit+0x12>

080026ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	e00a      	b.n	80026e2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026cc:	f3af 8000 	nop.w
 80026d0:	4601      	mov	r1, r0
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	60ba      	str	r2, [r7, #8]
 80026d8:	b2ca      	uxtb	r2, r1
 80026da:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3301      	adds	r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	dbf0      	blt.n	80026cc <_read+0x12>
	}

return len;
 80026ea:	687b      	ldr	r3, [r7, #4]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	e009      	b.n	800271a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	60ba      	str	r2, [r7, #8]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	3301      	adds	r3, #1
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	429a      	cmp	r2, r3
 8002720:	dbf1      	blt.n	8002706 <_write+0x12>
	}
	return len;
 8002722:	687b      	ldr	r3, [r7, #4]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <_close>:

int _close(int file)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	return -1;
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002752:	605a      	str	r2, [r3, #4]
	return 0;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <_isatty>:

int _isatty(int file)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	return 1;
 8002768:	2301      	movs	r3, #1
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
	return 0;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002794:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <_sbrk+0x5c>)
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <_sbrk+0x60>)
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <_sbrk+0x64>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <_sbrk+0x64>)
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <_sbrk+0x68>)
 80027ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <_sbrk+0x64>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d207      	bcs.n	80027cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027bc:	f008 fc76 	bl	800b0ac <__errno>
 80027c0:	4603      	mov	r3, r0
 80027c2:	220c      	movs	r2, #12
 80027c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ca:	e009      	b.n	80027e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <_sbrk+0x64>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027d2:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <_sbrk+0x64>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	4a05      	ldr	r2, [pc, #20]	; (80027f0 <_sbrk+0x64>)
 80027dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027de:	68fb      	ldr	r3, [r7, #12]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20010000 	.word	0x20010000
 80027ec:	00000400 	.word	0x00000400
 80027f0:	20000594 	.word	0x20000594
 80027f4:	20000d78 	.word	0x20000d78

080027f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002804:	f7ff fff8 	bl	80027f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002808:	480b      	ldr	r0, [pc, #44]	; (8002838 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800280a:	490c      	ldr	r1, [pc, #48]	; (800283c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800280c:	4a0c      	ldr	r2, [pc, #48]	; (8002840 <LoopFillZerobss+0x16>)
  movs r3, #0
 800280e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002810:	e002      	b.n	8002818 <LoopCopyDataInit>

08002812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002816:	3304      	adds	r3, #4

08002818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800281a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800281c:	d3f9      	bcc.n	8002812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800281e:	4a09      	ldr	r2, [pc, #36]	; (8002844 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002820:	4c09      	ldr	r4, [pc, #36]	; (8002848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002824:	e001      	b.n	800282a <LoopFillZerobss>

08002826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002828:	3204      	adds	r2, #4

0800282a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800282a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800282c:	d3fb      	bcc.n	8002826 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800282e:	f008 fc43 	bl	800b0b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002832:	f7ff fa7b 	bl	8001d2c <main>
  bx lr
 8002836:	4770      	bx	lr
  ldr r0, =_sdata
 8002838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800283c:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 8002840:	0800ebec 	.word	0x0800ebec
  ldr r2, =_sbss
 8002844:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 8002848:	20000d78 	.word	0x20000d78

0800284c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800284c:	e7fe      	b.n	800284c <ADC1_2_IRQHandler>
	...

08002850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <HAL_Init+0x28>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a07      	ldr	r2, [pc, #28]	; (8002878 <HAL_Init+0x28>)
 800285a:	f043 0310 	orr.w	r3, r3, #16
 800285e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002860:	2003      	movs	r0, #3
 8002862:	f000 fd25 	bl	80032b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002866:	2000      	movs	r0, #0
 8002868:	f000 f808 	bl	800287c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800286c:	f7ff fdc2 	bl	80023f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40022000 	.word	0x40022000

0800287c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002884:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_InitTick+0x54>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_InitTick+0x58>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	4619      	mov	r1, r3
 800288e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002892:	fbb3 f3f1 	udiv	r3, r3, r1
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fd3d 	bl	800331a <HAL_SYSTICK_Config>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00e      	b.n	80028c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b0f      	cmp	r3, #15
 80028ae:	d80a      	bhi.n	80028c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028b0:	2200      	movs	r2, #0
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295
 80028b8:	f000 fd05 	bl	80032c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028bc:	4a06      	ldr	r2, [pc, #24]	; (80028d8 <HAL_InitTick+0x5c>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e000      	b.n	80028c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000010 	.word	0x20000010
 80028d4:	20000018 	.word	0x20000018
 80028d8:	20000014 	.word	0x20000014

080028dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_IncTick+0x1c>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_IncTick+0x20>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	4a03      	ldr	r2, [pc, #12]	; (80028fc <HAL_IncTick+0x20>)
 80028ee:	6013      	str	r3, [r2, #0]
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	20000018 	.word	0x20000018
 80028fc:	20000598 	.word	0x20000598

08002900 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return uwTick;
 8002904:	4b02      	ldr	r3, [pc, #8]	; (8002910 <HAL_GetTick+0x10>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	20000598 	.word	0x20000598

08002914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800291c:	f7ff fff0 	bl	8002900 <HAL_GetTick>
 8002920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292c:	d005      	beq.n	800293a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_Delay+0x44>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4413      	add	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800293a:	bf00      	nop
 800293c:	f7ff ffe0 	bl	8002900 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	429a      	cmp	r2, r3
 800294a:	d8f7      	bhi.n	800293c <HAL_Delay+0x28>
  {
  }
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000018 	.word	0x20000018

0800295c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0ce      	b.n	8002b1c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	2b00      	cmp	r3, #0
 800298a:	d109      	bne.n	80029a0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff fd4c 	bl	8002438 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fb11 	bl	8002fc8 <ADC_ConversionStop_Disable>
 80029a6:	4603      	mov	r3, r0
 80029a8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f040 80a9 	bne.w	8002b0a <HAL_ADC_Init+0x1ae>
 80029b8:	7dfb      	ldrb	r3, [r7, #23]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 80a5 	bne.w	8002b0a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029c8:	f023 0302 	bic.w	r3, r3, #2
 80029cc:	f043 0202 	orr.w	r2, r3, #2
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4951      	ldr	r1, [pc, #324]	; (8002b24 <HAL_ADC_Init+0x1c8>)
 80029de:	428b      	cmp	r3, r1
 80029e0:	d10a      	bne.n	80029f8 <HAL_ADC_Init+0x9c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029ea:	d002      	beq.n	80029f2 <HAL_ADC_Init+0x96>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	e004      	b.n	80029fc <HAL_ADC_Init+0xa0>
 80029f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029f6:	e001      	b.n	80029fc <HAL_ADC_Init+0xa0>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	7b1b      	ldrb	r3, [r3, #12]
 8002a02:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a04:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a14:	d003      	beq.n	8002a1e <HAL_ADC_Init+0xc2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d102      	bne.n	8002a24 <HAL_ADC_Init+0xc8>
 8002a1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a22:	e000      	b.n	8002a26 <HAL_ADC_Init+0xca>
 8002a24:	2300      	movs	r3, #0
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	7d1b      	ldrb	r3, [r3, #20]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d119      	bne.n	8002a68 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	7b1b      	ldrb	r3, [r3, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	035a      	lsls	r2, r3, #13
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	e00b      	b.n	8002a68 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	f043 0220 	orr.w	r2, r3, #32
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	4b29      	ldr	r3, [pc, #164]	; (8002b28 <HAL_ADC_Init+0x1cc>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a98:	d003      	beq.n	8002aa2 <HAL_ADC_Init+0x146>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d104      	bne.n	8002aac <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	051b      	lsls	r3, r3, #20
 8002aaa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <HAL_ADC_Init+0x1d0>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d10b      	bne.n	8002ae8 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	f023 0303 	bic.w	r3, r3, #3
 8002ade:	f043 0201 	orr.w	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ae6:	e018      	b.n	8002b1a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	f023 0312 	bic.w	r3, r3, #18
 8002af0:	f043 0210 	orr.w	r2, r3, #16
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	f043 0201 	orr.w	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b08:	e007      	b.n	8002b1a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0e:	f043 0210 	orr.w	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40013c00 	.word	0x40013c00
 8002b28:	ffe1f7fd 	.word	0xffe1f7fd
 8002b2c:	ff1f0efe 	.word	0xff1f0efe

08002b30 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a64      	ldr	r2, [pc, #400]	; (8002cd8 <HAL_ADC_Start_DMA+0x1a8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d004      	beq.n	8002b54 <HAL_ADC_Start_DMA+0x24>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a63      	ldr	r2, [pc, #396]	; (8002cdc <HAL_ADC_Start_DMA+0x1ac>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d106      	bne.n	8002b62 <HAL_ADC_Start_DMA+0x32>
 8002b54:	4b60      	ldr	r3, [pc, #384]	; (8002cd8 <HAL_ADC_Start_DMA+0x1a8>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f040 80b3 	bne.w	8002cc8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_Start_DMA+0x40>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e0ae      	b.n	8002cce <HAL_ADC_Start_DMA+0x19e>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f9cb 	bl	8002f14 <ADC_Enable>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f040 809a 	bne.w	8002cbe <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a4e      	ldr	r2, [pc, #312]	; (8002cdc <HAL_ADC_Start_DMA+0x1ac>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d105      	bne.n	8002bb4 <HAL_ADC_Start_DMA+0x84>
 8002ba8:	4b4b      	ldr	r3, [pc, #300]	; (8002cd8 <HAL_ADC_Start_DMA+0x1a8>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d115      	bne.n	8002be0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d026      	beq.n	8002c1c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bde:	e01d      	b.n	8002c1c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a39      	ldr	r2, [pc, #228]	; (8002cd8 <HAL_ADC_Start_DMA+0x1a8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d004      	beq.n	8002c00 <HAL_ADC_Start_DMA+0xd0>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a38      	ldr	r2, [pc, #224]	; (8002cdc <HAL_ADC_Start_DMA+0x1ac>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d10d      	bne.n	8002c1c <HAL_ADC_Start_DMA+0xec>
 8002c00:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <HAL_ADC_Start_DMA+0x1a8>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d006      	beq.n	8002c36 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	f023 0206 	bic.w	r2, r3, #6
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c34:	e002      	b.n	8002c3c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	4a25      	ldr	r2, [pc, #148]	; (8002ce0 <HAL_ADC_Start_DMA+0x1b0>)
 8002c4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	4a24      	ldr	r2, [pc, #144]	; (8002ce4 <HAL_ADC_Start_DMA+0x1b4>)
 8002c52:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	4a23      	ldr	r2, [pc, #140]	; (8002ce8 <HAL_ADC_Start_DMA+0x1b8>)
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0202 	mvn.w	r2, #2
 8002c64:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c74:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a18      	ldr	r0, [r3, #32]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	334c      	adds	r3, #76	; 0x4c
 8002c80:	4619      	mov	r1, r3
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f000 fbcb 	bl	8003420 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c94:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c98:	d108      	bne.n	8002cac <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002ca8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002caa:	e00f      	b.n	8002ccc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002cba:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002cbc:	e006      	b.n	8002ccc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002cc6:	e001      	b.n	8002ccc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40012400 	.word	0x40012400
 8002cdc:	40012800 	.word	0x40012800
 8002ce0:	0800304b 	.word	0x0800304b
 8002ce4:	080030c7 	.word	0x080030c7
 8002ce8:	080030e3 	.word	0x080030e3

08002cec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr
	...

08002d24 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x20>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e0dc      	b.n	8002efe <HAL_ADC_ConfigChannel+0x1da>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b06      	cmp	r3, #6
 8002d52:	d81c      	bhi.n	8002d8e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	3b05      	subs	r3, #5
 8002d66:	221f      	movs	r2, #31
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	4019      	ands	r1, r3
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3b05      	subs	r3, #5
 8002d80:	fa00 f203 	lsl.w	r2, r0, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	635a      	str	r2, [r3, #52]	; 0x34
 8002d8c:	e03c      	b.n	8002e08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b0c      	cmp	r3, #12
 8002d94:	d81c      	bhi.n	8002dd0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	3b23      	subs	r3, #35	; 0x23
 8002da8:	221f      	movs	r2, #31
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	4019      	ands	r1, r3
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3b23      	subs	r3, #35	; 0x23
 8002dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	631a      	str	r2, [r3, #48]	; 0x30
 8002dce:	e01b      	b.n	8002e08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	3b41      	subs	r3, #65	; 0x41
 8002de2:	221f      	movs	r2, #31
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	4019      	ands	r1, r3
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	3b41      	subs	r3, #65	; 0x41
 8002dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b09      	cmp	r3, #9
 8002e0e:	d91c      	bls.n	8002e4a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68d9      	ldr	r1, [r3, #12]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	3b1e      	subs	r3, #30
 8002e22:	2207      	movs	r2, #7
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	4019      	ands	r1, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	6898      	ldr	r0, [r3, #8]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	3b1e      	subs	r3, #30
 8002e3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	60da      	str	r2, [r3, #12]
 8002e48:	e019      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6919      	ldr	r1, [r3, #16]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	2207      	movs	r2, #7
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	4019      	ands	r1, r3
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6898      	ldr	r0, [r3, #8]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4413      	add	r3, r2
 8002e72:	fa00 f203 	lsl.w	r2, r0, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b10      	cmp	r3, #16
 8002e84:	d003      	beq.n	8002e8e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e8a:	2b11      	cmp	r3, #17
 8002e8c:	d132      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <HAL_ADC_ConfigChannel+0x1e4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d125      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d126      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002eb4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b10      	cmp	r3, #16
 8002ebc:	d11a      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ebe:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <HAL_ADC_ConfigChannel+0x1e8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <HAL_ADC_ConfigChannel+0x1ec>)
 8002ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec8:	0c9a      	lsrs	r2, r3, #18
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ed4:	e002      	b.n	8002edc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f9      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x1b2>
 8002ee2:	e007      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	f043 0220 	orr.w	r2, r3, #32
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	40012400 	.word	0x40012400
 8002f0c:	20000010 	.word	0x20000010
 8002f10:	431bde83 	.word	0x431bde83

08002f14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d040      	beq.n	8002fb4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0201 	orr.w	r2, r2, #1
 8002f40:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f42:	4b1f      	ldr	r3, [pc, #124]	; (8002fc0 <ADC_Enable+0xac>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1f      	ldr	r2, [pc, #124]	; (8002fc4 <ADC_Enable+0xb0>)
 8002f48:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4c:	0c9b      	lsrs	r3, r3, #18
 8002f4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f50:	e002      	b.n	8002f58 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	3b01      	subs	r3, #1
 8002f56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f9      	bne.n	8002f52 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f5e:	f7ff fccf 	bl	8002900 <HAL_GetTick>
 8002f62:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f64:	e01f      	b.n	8002fa6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f66:	f7ff fccb 	bl	8002900 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d918      	bls.n	8002fa6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d011      	beq.n	8002fa6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	f043 0210 	orr.w	r2, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	f043 0201 	orr.w	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e007      	b.n	8002fb6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d1d8      	bne.n	8002f66 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000010 	.word	0x20000010
 8002fc4:	431bde83 	.word	0x431bde83

08002fc8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d12e      	bne.n	8003040 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0201 	bic.w	r2, r2, #1
 8002ff0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ff2:	f7ff fc85 	bl	8002900 <HAL_GetTick>
 8002ff6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ff8:	e01b      	b.n	8003032 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ffa:	f7ff fc81 	bl	8002900 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d914      	bls.n	8003032 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b01      	cmp	r3, #1
 8003014:	d10d      	bne.n	8003032 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301a:	f043 0210 	orr.w	r2, r3, #16
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	f043 0201 	orr.w	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e007      	b.n	8003042 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d0dc      	beq.n	8002ffa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003060:	2b00      	cmp	r3, #0
 8003062:	d127      	bne.n	80030b4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800307a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800307e:	d115      	bne.n	80030ac <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003084:	2b00      	cmp	r3, #0
 8003086:	d111      	bne.n	80030ac <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d105      	bne.n	80030ac <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	f043 0201 	orr.w	r2, r3, #1
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f7ff fe1d 	bl	8002cec <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80030b2:	e004      	b.n	80030be <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	4798      	blx	r3
}
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f7ff fe12 	bl	8002cfe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	f043 0204 	orr.w	r2, r3, #4
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f7ff fe01 	bl	8002d10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003128:	4b0c      	ldr	r3, [pc, #48]	; (800315c <__NVIC_SetPriorityGrouping+0x44>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003134:	4013      	ands	r3, r2
 8003136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800314a:	4a04      	ldr	r2, [pc, #16]	; (800315c <__NVIC_SetPriorityGrouping+0x44>)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	60d3      	str	r3, [r2, #12]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003164:	4b04      	ldr	r3, [pc, #16]	; (8003178 <__NVIC_GetPriorityGrouping+0x18>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	f003 0307 	and.w	r3, r3, #7
}
 800316e:	4618      	mov	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	2b00      	cmp	r3, #0
 800318c:	db0b      	blt.n	80031a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	f003 021f 	and.w	r2, r3, #31
 8003194:	4906      	ldr	r1, [pc, #24]	; (80031b0 <__NVIC_EnableIRQ+0x34>)
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	2001      	movs	r0, #1
 800319e:	fa00 f202 	lsl.w	r2, r0, r2
 80031a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	e000e100 	.word	0xe000e100

080031b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	6039      	str	r1, [r7, #0]
 80031be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	db0a      	blt.n	80031de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	490c      	ldr	r1, [pc, #48]	; (8003200 <__NVIC_SetPriority+0x4c>)
 80031ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d2:	0112      	lsls	r2, r2, #4
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	440b      	add	r3, r1
 80031d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031dc:	e00a      	b.n	80031f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	4908      	ldr	r1, [pc, #32]	; (8003204 <__NVIC_SetPriority+0x50>)
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	3b04      	subs	r3, #4
 80031ec:	0112      	lsls	r2, r2, #4
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	440b      	add	r3, r1
 80031f2:	761a      	strb	r2, [r3, #24]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000e100 	.word	0xe000e100
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f1c3 0307 	rsb	r3, r3, #7
 8003222:	2b04      	cmp	r3, #4
 8003224:	bf28      	it	cs
 8003226:	2304      	movcs	r3, #4
 8003228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3304      	adds	r3, #4
 800322e:	2b06      	cmp	r3, #6
 8003230:	d902      	bls.n	8003238 <NVIC_EncodePriority+0x30>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3b03      	subs	r3, #3
 8003236:	e000      	b.n	800323a <NVIC_EncodePriority+0x32>
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	f04f 32ff 	mov.w	r2, #4294967295
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	401a      	ands	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003250:	f04f 31ff 	mov.w	r1, #4294967295
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	43d9      	mvns	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	4313      	orrs	r3, r2
         );
}
 8003262:	4618      	mov	r0, r3
 8003264:	3724      	adds	r7, #36	; 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3b01      	subs	r3, #1
 8003278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800327c:	d301      	bcc.n	8003282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800327e:	2301      	movs	r3, #1
 8003280:	e00f      	b.n	80032a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003282:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <SysTick_Config+0x40>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3b01      	subs	r3, #1
 8003288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800328a:	210f      	movs	r1, #15
 800328c:	f04f 30ff 	mov.w	r0, #4294967295
 8003290:	f7ff ff90 	bl	80031b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <SysTick_Config+0x40>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800329a:	4b04      	ldr	r3, [pc, #16]	; (80032ac <SysTick_Config+0x40>)
 800329c:	2207      	movs	r2, #7
 800329e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	e000e010 	.word	0xe000e010

080032b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff2d 	bl	8003118 <__NVIC_SetPriorityGrouping>
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	4603      	mov	r3, r0
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032d8:	f7ff ff42 	bl	8003160 <__NVIC_GetPriorityGrouping>
 80032dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	6978      	ldr	r0, [r7, #20]
 80032e4:	f7ff ff90 	bl	8003208 <NVIC_EncodePriority>
 80032e8:	4602      	mov	r2, r0
 80032ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff5f 	bl	80031b4 <__NVIC_SetPriority>
}
 80032f6:	bf00      	nop
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	4603      	mov	r3, r0
 8003306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff ff35 	bl	800317c <__NVIC_EnableIRQ>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff ffa2 	bl	800326c <SysTick_Config>
 8003328:	4603      	mov	r3, r0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e059      	b.n	80033fe <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	4b2d      	ldr	r3, [pc, #180]	; (8003408 <HAL_DMA_Init+0xd4>)
 8003352:	429a      	cmp	r2, r3
 8003354:	d80f      	bhi.n	8003376 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	4b2b      	ldr	r3, [pc, #172]	; (800340c <HAL_DMA_Init+0xd8>)
 800335e:	4413      	add	r3, r2
 8003360:	4a2b      	ldr	r2, [pc, #172]	; (8003410 <HAL_DMA_Init+0xdc>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	009a      	lsls	r2, r3, #2
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a28      	ldr	r2, [pc, #160]	; (8003414 <HAL_DMA_Init+0xe0>)
 8003372:	63da      	str	r2, [r3, #60]	; 0x3c
 8003374:	e00e      	b.n	8003394 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	4b26      	ldr	r3, [pc, #152]	; (8003418 <HAL_DMA_Init+0xe4>)
 800337e:	4413      	add	r3, r2
 8003380:	4a23      	ldr	r2, [pc, #140]	; (8003410 <HAL_DMA_Init+0xdc>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	009a      	lsls	r2, r3, #2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a22      	ldr	r2, [pc, #136]	; (800341c <HAL_DMA_Init+0xe8>)
 8003392:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80033ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80033b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	40020407 	.word	0x40020407
 800340c:	bffdfff8 	.word	0xbffdfff8
 8003410:	cccccccd 	.word	0xcccccccd
 8003414:	40020000 	.word	0x40020000
 8003418:	bffdfbf8 	.word	0xbffdfbf8
 800341c:	40020400 	.word	0x40020400

08003420 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_DMA_Start_IT+0x20>
 800343c:	2302      	movs	r3, #2
 800343e:	e04b      	b.n	80034d8 <HAL_DMA_Start_IT+0xb8>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	d13a      	bne.n	80034ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0201 	bic.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	68b9      	ldr	r1, [r7, #8]
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fa6d 	bl	8003958 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 020e 	orr.w	r2, r2, #14
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e00f      	b.n	80034b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0204 	bic.w	r2, r2, #4
 80034a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 020a 	orr.w	r2, r2, #10
 80034b6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	e005      	b.n	80034d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
 80034d4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	2204      	movs	r2, #4
 80034fe:	409a      	lsls	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80f1 	beq.w	80036ec <HAL_DMA_IRQHandler+0x20c>
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80eb 	beq.w	80036ec <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	2b00      	cmp	r3, #0
 8003522:	d107      	bne.n	8003534 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0204 	bic.w	r2, r2, #4
 8003532:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	4b5f      	ldr	r3, [pc, #380]	; (80036b8 <HAL_DMA_IRQHandler+0x1d8>)
 800353c:	429a      	cmp	r2, r3
 800353e:	d958      	bls.n	80035f2 <HAL_DMA_IRQHandler+0x112>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a5d      	ldr	r2, [pc, #372]	; (80036bc <HAL_DMA_IRQHandler+0x1dc>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d04f      	beq.n	80035ea <HAL_DMA_IRQHandler+0x10a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a5c      	ldr	r2, [pc, #368]	; (80036c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d048      	beq.n	80035e6 <HAL_DMA_IRQHandler+0x106>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a5a      	ldr	r2, [pc, #360]	; (80036c4 <HAL_DMA_IRQHandler+0x1e4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d040      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x100>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a59      	ldr	r2, [pc, #356]	; (80036c8 <HAL_DMA_IRQHandler+0x1e8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d038      	beq.n	80035da <HAL_DMA_IRQHandler+0xfa>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a57      	ldr	r2, [pc, #348]	; (80036cc <HAL_DMA_IRQHandler+0x1ec>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d030      	beq.n	80035d4 <HAL_DMA_IRQHandler+0xf4>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a56      	ldr	r2, [pc, #344]	; (80036d0 <HAL_DMA_IRQHandler+0x1f0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d028      	beq.n	80035ce <HAL_DMA_IRQHandler+0xee>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a4d      	ldr	r2, [pc, #308]	; (80036b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d020      	beq.n	80035c8 <HAL_DMA_IRQHandler+0xe8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a52      	ldr	r2, [pc, #328]	; (80036d4 <HAL_DMA_IRQHandler+0x1f4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d019      	beq.n	80035c4 <HAL_DMA_IRQHandler+0xe4>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a50      	ldr	r2, [pc, #320]	; (80036d8 <HAL_DMA_IRQHandler+0x1f8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d012      	beq.n	80035c0 <HAL_DMA_IRQHandler+0xe0>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a4f      	ldr	r2, [pc, #316]	; (80036dc <HAL_DMA_IRQHandler+0x1fc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00a      	beq.n	80035ba <HAL_DMA_IRQHandler+0xda>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a4d      	ldr	r2, [pc, #308]	; (80036e0 <HAL_DMA_IRQHandler+0x200>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d102      	bne.n	80035b4 <HAL_DMA_IRQHandler+0xd4>
 80035ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035b2:	e01b      	b.n	80035ec <HAL_DMA_IRQHandler+0x10c>
 80035b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035b8:	e018      	b.n	80035ec <HAL_DMA_IRQHandler+0x10c>
 80035ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035be:	e015      	b.n	80035ec <HAL_DMA_IRQHandler+0x10c>
 80035c0:	2340      	movs	r3, #64	; 0x40
 80035c2:	e013      	b.n	80035ec <HAL_DMA_IRQHandler+0x10c>
 80035c4:	2304      	movs	r3, #4
 80035c6:	e011      	b.n	80035ec <HAL_DMA_IRQHandler+0x10c>
 80035c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80035cc:	e00e      	b.n	80035ec <HAL_DMA_IRQHandler+0x10c>
 80035ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035d2:	e00b      	b.n	80035ec <HAL_DMA_IRQHandler+0x10c>
 80035d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035d8:	e008      	b.n	80035ec <HAL_DMA_IRQHandler+0x10c>
 80035da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035de:	e005      	b.n	80035ec <HAL_DMA_IRQHandler+0x10c>
 80035e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035e4:	e002      	b.n	80035ec <HAL_DMA_IRQHandler+0x10c>
 80035e6:	2340      	movs	r3, #64	; 0x40
 80035e8:	e000      	b.n	80035ec <HAL_DMA_IRQHandler+0x10c>
 80035ea:	2304      	movs	r3, #4
 80035ec:	4a3d      	ldr	r2, [pc, #244]	; (80036e4 <HAL_DMA_IRQHandler+0x204>)
 80035ee:	6053      	str	r3, [r2, #4]
 80035f0:	e057      	b.n	80036a2 <HAL_DMA_IRQHandler+0x1c2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a31      	ldr	r2, [pc, #196]	; (80036bc <HAL_DMA_IRQHandler+0x1dc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d04f      	beq.n	800369c <HAL_DMA_IRQHandler+0x1bc>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a2f      	ldr	r2, [pc, #188]	; (80036c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d048      	beq.n	8003698 <HAL_DMA_IRQHandler+0x1b8>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a2e      	ldr	r2, [pc, #184]	; (80036c4 <HAL_DMA_IRQHandler+0x1e4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d040      	beq.n	8003692 <HAL_DMA_IRQHandler+0x1b2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a2c      	ldr	r2, [pc, #176]	; (80036c8 <HAL_DMA_IRQHandler+0x1e8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d038      	beq.n	800368c <HAL_DMA_IRQHandler+0x1ac>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a2b      	ldr	r2, [pc, #172]	; (80036cc <HAL_DMA_IRQHandler+0x1ec>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d030      	beq.n	8003686 <HAL_DMA_IRQHandler+0x1a6>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a29      	ldr	r2, [pc, #164]	; (80036d0 <HAL_DMA_IRQHandler+0x1f0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d028      	beq.n	8003680 <HAL_DMA_IRQHandler+0x1a0>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a21      	ldr	r2, [pc, #132]	; (80036b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d020      	beq.n	800367a <HAL_DMA_IRQHandler+0x19a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a25      	ldr	r2, [pc, #148]	; (80036d4 <HAL_DMA_IRQHandler+0x1f4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d019      	beq.n	8003676 <HAL_DMA_IRQHandler+0x196>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a24      	ldr	r2, [pc, #144]	; (80036d8 <HAL_DMA_IRQHandler+0x1f8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d012      	beq.n	8003672 <HAL_DMA_IRQHandler+0x192>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a22      	ldr	r2, [pc, #136]	; (80036dc <HAL_DMA_IRQHandler+0x1fc>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00a      	beq.n	800366c <HAL_DMA_IRQHandler+0x18c>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a21      	ldr	r2, [pc, #132]	; (80036e0 <HAL_DMA_IRQHandler+0x200>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d102      	bne.n	8003666 <HAL_DMA_IRQHandler+0x186>
 8003660:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003664:	e01b      	b.n	800369e <HAL_DMA_IRQHandler+0x1be>
 8003666:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800366a:	e018      	b.n	800369e <HAL_DMA_IRQHandler+0x1be>
 800366c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003670:	e015      	b.n	800369e <HAL_DMA_IRQHandler+0x1be>
 8003672:	2340      	movs	r3, #64	; 0x40
 8003674:	e013      	b.n	800369e <HAL_DMA_IRQHandler+0x1be>
 8003676:	2304      	movs	r3, #4
 8003678:	e011      	b.n	800369e <HAL_DMA_IRQHandler+0x1be>
 800367a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800367e:	e00e      	b.n	800369e <HAL_DMA_IRQHandler+0x1be>
 8003680:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003684:	e00b      	b.n	800369e <HAL_DMA_IRQHandler+0x1be>
 8003686:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800368a:	e008      	b.n	800369e <HAL_DMA_IRQHandler+0x1be>
 800368c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003690:	e005      	b.n	800369e <HAL_DMA_IRQHandler+0x1be>
 8003692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003696:	e002      	b.n	800369e <HAL_DMA_IRQHandler+0x1be>
 8003698:	2340      	movs	r3, #64	; 0x40
 800369a:	e000      	b.n	800369e <HAL_DMA_IRQHandler+0x1be>
 800369c:	2304      	movs	r3, #4
 800369e:	4a12      	ldr	r2, [pc, #72]	; (80036e8 <HAL_DMA_IRQHandler+0x208>)
 80036a0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 8136 	beq.w	8003918 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80036b4:	e130      	b.n	8003918 <HAL_DMA_IRQHandler+0x438>
 80036b6:	bf00      	nop
 80036b8:	40020080 	.word	0x40020080
 80036bc:	40020008 	.word	0x40020008
 80036c0:	4002001c 	.word	0x4002001c
 80036c4:	40020030 	.word	0x40020030
 80036c8:	40020044 	.word	0x40020044
 80036cc:	40020058 	.word	0x40020058
 80036d0:	4002006c 	.word	0x4002006c
 80036d4:	40020408 	.word	0x40020408
 80036d8:	4002041c 	.word	0x4002041c
 80036dc:	40020430 	.word	0x40020430
 80036e0:	40020444 	.word	0x40020444
 80036e4:	40020400 	.word	0x40020400
 80036e8:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	2202      	movs	r2, #2
 80036f2:	409a      	lsls	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80dd 	beq.w	80038b8 <HAL_DMA_IRQHandler+0x3d8>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80d7 	beq.w	80038b8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10b      	bne.n	8003730 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 020a 	bic.w	r2, r2, #10
 8003726:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	4b7b      	ldr	r3, [pc, #492]	; (8003924 <HAL_DMA_IRQHandler+0x444>)
 8003738:	429a      	cmp	r2, r3
 800373a:	d958      	bls.n	80037ee <HAL_DMA_IRQHandler+0x30e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a79      	ldr	r2, [pc, #484]	; (8003928 <HAL_DMA_IRQHandler+0x448>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d04f      	beq.n	80037e6 <HAL_DMA_IRQHandler+0x306>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a78      	ldr	r2, [pc, #480]	; (800392c <HAL_DMA_IRQHandler+0x44c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d048      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x302>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a76      	ldr	r2, [pc, #472]	; (8003930 <HAL_DMA_IRQHandler+0x450>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d040      	beq.n	80037dc <HAL_DMA_IRQHandler+0x2fc>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a75      	ldr	r2, [pc, #468]	; (8003934 <HAL_DMA_IRQHandler+0x454>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d038      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x2f6>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a73      	ldr	r2, [pc, #460]	; (8003938 <HAL_DMA_IRQHandler+0x458>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d030      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x2f0>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a72      	ldr	r2, [pc, #456]	; (800393c <HAL_DMA_IRQHandler+0x45c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d028      	beq.n	80037ca <HAL_DMA_IRQHandler+0x2ea>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a69      	ldr	r2, [pc, #420]	; (8003924 <HAL_DMA_IRQHandler+0x444>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d020      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x2e4>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a6e      	ldr	r2, [pc, #440]	; (8003940 <HAL_DMA_IRQHandler+0x460>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d019      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x2e0>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a6c      	ldr	r2, [pc, #432]	; (8003944 <HAL_DMA_IRQHandler+0x464>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d012      	beq.n	80037bc <HAL_DMA_IRQHandler+0x2dc>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a6b      	ldr	r2, [pc, #428]	; (8003948 <HAL_DMA_IRQHandler+0x468>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00a      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x2d6>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a69      	ldr	r2, [pc, #420]	; (800394c <HAL_DMA_IRQHandler+0x46c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d102      	bne.n	80037b0 <HAL_DMA_IRQHandler+0x2d0>
 80037aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037ae:	e01b      	b.n	80037e8 <HAL_DMA_IRQHandler+0x308>
 80037b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037b4:	e018      	b.n	80037e8 <HAL_DMA_IRQHandler+0x308>
 80037b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037ba:	e015      	b.n	80037e8 <HAL_DMA_IRQHandler+0x308>
 80037bc:	2320      	movs	r3, #32
 80037be:	e013      	b.n	80037e8 <HAL_DMA_IRQHandler+0x308>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e011      	b.n	80037e8 <HAL_DMA_IRQHandler+0x308>
 80037c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037c8:	e00e      	b.n	80037e8 <HAL_DMA_IRQHandler+0x308>
 80037ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80037ce:	e00b      	b.n	80037e8 <HAL_DMA_IRQHandler+0x308>
 80037d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037d4:	e008      	b.n	80037e8 <HAL_DMA_IRQHandler+0x308>
 80037d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037da:	e005      	b.n	80037e8 <HAL_DMA_IRQHandler+0x308>
 80037dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037e0:	e002      	b.n	80037e8 <HAL_DMA_IRQHandler+0x308>
 80037e2:	2320      	movs	r3, #32
 80037e4:	e000      	b.n	80037e8 <HAL_DMA_IRQHandler+0x308>
 80037e6:	2302      	movs	r3, #2
 80037e8:	4a59      	ldr	r2, [pc, #356]	; (8003950 <HAL_DMA_IRQHandler+0x470>)
 80037ea:	6053      	str	r3, [r2, #4]
 80037ec:	e057      	b.n	800389e <HAL_DMA_IRQHandler+0x3be>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a4d      	ldr	r2, [pc, #308]	; (8003928 <HAL_DMA_IRQHandler+0x448>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d04f      	beq.n	8003898 <HAL_DMA_IRQHandler+0x3b8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a4b      	ldr	r2, [pc, #300]	; (800392c <HAL_DMA_IRQHandler+0x44c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d048      	beq.n	8003894 <HAL_DMA_IRQHandler+0x3b4>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a4a      	ldr	r2, [pc, #296]	; (8003930 <HAL_DMA_IRQHandler+0x450>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d040      	beq.n	800388e <HAL_DMA_IRQHandler+0x3ae>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a48      	ldr	r2, [pc, #288]	; (8003934 <HAL_DMA_IRQHandler+0x454>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d038      	beq.n	8003888 <HAL_DMA_IRQHandler+0x3a8>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a47      	ldr	r2, [pc, #284]	; (8003938 <HAL_DMA_IRQHandler+0x458>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d030      	beq.n	8003882 <HAL_DMA_IRQHandler+0x3a2>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a45      	ldr	r2, [pc, #276]	; (800393c <HAL_DMA_IRQHandler+0x45c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d028      	beq.n	800387c <HAL_DMA_IRQHandler+0x39c>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a3d      	ldr	r2, [pc, #244]	; (8003924 <HAL_DMA_IRQHandler+0x444>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d020      	beq.n	8003876 <HAL_DMA_IRQHandler+0x396>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a41      	ldr	r2, [pc, #260]	; (8003940 <HAL_DMA_IRQHandler+0x460>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d019      	beq.n	8003872 <HAL_DMA_IRQHandler+0x392>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a40      	ldr	r2, [pc, #256]	; (8003944 <HAL_DMA_IRQHandler+0x464>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d012      	beq.n	800386e <HAL_DMA_IRQHandler+0x38e>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a3e      	ldr	r2, [pc, #248]	; (8003948 <HAL_DMA_IRQHandler+0x468>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00a      	beq.n	8003868 <HAL_DMA_IRQHandler+0x388>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a3d      	ldr	r2, [pc, #244]	; (800394c <HAL_DMA_IRQHandler+0x46c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d102      	bne.n	8003862 <HAL_DMA_IRQHandler+0x382>
 800385c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003860:	e01b      	b.n	800389a <HAL_DMA_IRQHandler+0x3ba>
 8003862:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003866:	e018      	b.n	800389a <HAL_DMA_IRQHandler+0x3ba>
 8003868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800386c:	e015      	b.n	800389a <HAL_DMA_IRQHandler+0x3ba>
 800386e:	2320      	movs	r3, #32
 8003870:	e013      	b.n	800389a <HAL_DMA_IRQHandler+0x3ba>
 8003872:	2302      	movs	r3, #2
 8003874:	e011      	b.n	800389a <HAL_DMA_IRQHandler+0x3ba>
 8003876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800387a:	e00e      	b.n	800389a <HAL_DMA_IRQHandler+0x3ba>
 800387c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003880:	e00b      	b.n	800389a <HAL_DMA_IRQHandler+0x3ba>
 8003882:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003886:	e008      	b.n	800389a <HAL_DMA_IRQHandler+0x3ba>
 8003888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800388c:	e005      	b.n	800389a <HAL_DMA_IRQHandler+0x3ba>
 800388e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003892:	e002      	b.n	800389a <HAL_DMA_IRQHandler+0x3ba>
 8003894:	2320      	movs	r3, #32
 8003896:	e000      	b.n	800389a <HAL_DMA_IRQHandler+0x3ba>
 8003898:	2302      	movs	r3, #2
 800389a:	4a2e      	ldr	r2, [pc, #184]	; (8003954 <HAL_DMA_IRQHandler+0x474>)
 800389c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d034      	beq.n	8003918 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80038b6:	e02f      	b.n	8003918 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	2208      	movs	r2, #8
 80038be:	409a      	lsls	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d028      	beq.n	800391a <HAL_DMA_IRQHandler+0x43a>
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d023      	beq.n	800391a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 020e 	bic.w	r2, r2, #14
 80038e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f202 	lsl.w	r2, r1, r2
 80038f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	2b00      	cmp	r3, #0
 800390e:	d004      	beq.n	800391a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	4798      	blx	r3
    }
  }
  return;
 8003918:	bf00      	nop
 800391a:	bf00      	nop
}
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40020080 	.word	0x40020080
 8003928:	40020008 	.word	0x40020008
 800392c:	4002001c 	.word	0x4002001c
 8003930:	40020030 	.word	0x40020030
 8003934:	40020044 	.word	0x40020044
 8003938:	40020058 	.word	0x40020058
 800393c:	4002006c 	.word	0x4002006c
 8003940:	40020408 	.word	0x40020408
 8003944:	4002041c 	.word	0x4002041c
 8003948:	40020430 	.word	0x40020430
 800394c:	40020444 	.word	0x40020444
 8003950:	40020400 	.word	0x40020400
 8003954:	40020000 	.word	0x40020000

08003958 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396e:	2101      	movs	r1, #1
 8003970:	fa01 f202 	lsl.w	r2, r1, r2
 8003974:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b10      	cmp	r3, #16
 8003984:	d108      	bne.n	8003998 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003996:	e007      	b.n	80039a8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	60da      	str	r2, [r3, #12]
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr
	...

080039b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b08b      	sub	sp, #44	; 0x2c
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039be:	2300      	movs	r3, #0
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039c2:	2300      	movs	r3, #0
 80039c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039c6:	e179      	b.n	8003cbc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039c8:	2201      	movs	r2, #1
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69fa      	ldr	r2, [r7, #28]
 80039d8:	4013      	ands	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	f040 8168 	bne.w	8003cb6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	4a96      	ldr	r2, [pc, #600]	; (8003c44 <HAL_GPIO_Init+0x290>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d05e      	beq.n	8003aae <HAL_GPIO_Init+0xfa>
 80039f0:	4a94      	ldr	r2, [pc, #592]	; (8003c44 <HAL_GPIO_Init+0x290>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d875      	bhi.n	8003ae2 <HAL_GPIO_Init+0x12e>
 80039f6:	4a94      	ldr	r2, [pc, #592]	; (8003c48 <HAL_GPIO_Init+0x294>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d058      	beq.n	8003aae <HAL_GPIO_Init+0xfa>
 80039fc:	4a92      	ldr	r2, [pc, #584]	; (8003c48 <HAL_GPIO_Init+0x294>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d86f      	bhi.n	8003ae2 <HAL_GPIO_Init+0x12e>
 8003a02:	4a92      	ldr	r2, [pc, #584]	; (8003c4c <HAL_GPIO_Init+0x298>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d052      	beq.n	8003aae <HAL_GPIO_Init+0xfa>
 8003a08:	4a90      	ldr	r2, [pc, #576]	; (8003c4c <HAL_GPIO_Init+0x298>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d869      	bhi.n	8003ae2 <HAL_GPIO_Init+0x12e>
 8003a0e:	4a90      	ldr	r2, [pc, #576]	; (8003c50 <HAL_GPIO_Init+0x29c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d04c      	beq.n	8003aae <HAL_GPIO_Init+0xfa>
 8003a14:	4a8e      	ldr	r2, [pc, #568]	; (8003c50 <HAL_GPIO_Init+0x29c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d863      	bhi.n	8003ae2 <HAL_GPIO_Init+0x12e>
 8003a1a:	4a8e      	ldr	r2, [pc, #568]	; (8003c54 <HAL_GPIO_Init+0x2a0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d046      	beq.n	8003aae <HAL_GPIO_Init+0xfa>
 8003a20:	4a8c      	ldr	r2, [pc, #560]	; (8003c54 <HAL_GPIO_Init+0x2a0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d85d      	bhi.n	8003ae2 <HAL_GPIO_Init+0x12e>
 8003a26:	2b12      	cmp	r3, #18
 8003a28:	d82a      	bhi.n	8003a80 <HAL_GPIO_Init+0xcc>
 8003a2a:	2b12      	cmp	r3, #18
 8003a2c:	d859      	bhi.n	8003ae2 <HAL_GPIO_Init+0x12e>
 8003a2e:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <HAL_GPIO_Init+0x80>)
 8003a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a34:	08003aaf 	.word	0x08003aaf
 8003a38:	08003a89 	.word	0x08003a89
 8003a3c:	08003a9b 	.word	0x08003a9b
 8003a40:	08003add 	.word	0x08003add
 8003a44:	08003ae3 	.word	0x08003ae3
 8003a48:	08003ae3 	.word	0x08003ae3
 8003a4c:	08003ae3 	.word	0x08003ae3
 8003a50:	08003ae3 	.word	0x08003ae3
 8003a54:	08003ae3 	.word	0x08003ae3
 8003a58:	08003ae3 	.word	0x08003ae3
 8003a5c:	08003ae3 	.word	0x08003ae3
 8003a60:	08003ae3 	.word	0x08003ae3
 8003a64:	08003ae3 	.word	0x08003ae3
 8003a68:	08003ae3 	.word	0x08003ae3
 8003a6c:	08003ae3 	.word	0x08003ae3
 8003a70:	08003ae3 	.word	0x08003ae3
 8003a74:	08003ae3 	.word	0x08003ae3
 8003a78:	08003a91 	.word	0x08003a91
 8003a7c:	08003aa5 	.word	0x08003aa5
 8003a80:	4a75      	ldr	r2, [pc, #468]	; (8003c58 <HAL_GPIO_Init+0x2a4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a86:	e02c      	b.n	8003ae2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	623b      	str	r3, [r7, #32]
          break;
 8003a8e:	e029      	b.n	8003ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	3304      	adds	r3, #4
 8003a96:	623b      	str	r3, [r7, #32]
          break;
 8003a98:	e024      	b.n	8003ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	623b      	str	r3, [r7, #32]
          break;
 8003aa2:	e01f      	b.n	8003ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	330c      	adds	r3, #12
 8003aaa:	623b      	str	r3, [r7, #32]
          break;
 8003aac:	e01a      	b.n	8003ae4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d102      	bne.n	8003abc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	623b      	str	r3, [r7, #32]
          break;
 8003aba:	e013      	b.n	8003ae4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d105      	bne.n	8003ad0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ac4:	2308      	movs	r3, #8
 8003ac6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69fa      	ldr	r2, [r7, #28]
 8003acc:	611a      	str	r2, [r3, #16]
          break;
 8003ace:	e009      	b.n	8003ae4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ad0:	2308      	movs	r3, #8
 8003ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	615a      	str	r2, [r3, #20]
          break;
 8003ada:	e003      	b.n	8003ae4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003adc:	2300      	movs	r3, #0
 8003ade:	623b      	str	r3, [r7, #32]
          break;
 8003ae0:	e000      	b.n	8003ae4 <HAL_GPIO_Init+0x130>
          break;
 8003ae2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2bff      	cmp	r3, #255	; 0xff
 8003ae8:	d801      	bhi.n	8003aee <HAL_GPIO_Init+0x13a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	e001      	b.n	8003af2 <HAL_GPIO_Init+0x13e>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3304      	adds	r3, #4
 8003af2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	2bff      	cmp	r3, #255	; 0xff
 8003af8:	d802      	bhi.n	8003b00 <HAL_GPIO_Init+0x14c>
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	e002      	b.n	8003b06 <HAL_GPIO_Init+0x152>
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	3b08      	subs	r3, #8
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	210f      	movs	r1, #15
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	fa01 f303 	lsl.w	r3, r1, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	401a      	ands	r2, r3
 8003b18:	6a39      	ldr	r1, [r7, #32]
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	431a      	orrs	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 80c1 	beq.w	8003cb6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b34:	4b49      	ldr	r3, [pc, #292]	; (8003c5c <HAL_GPIO_Init+0x2a8>)
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	4a48      	ldr	r2, [pc, #288]	; (8003c5c <HAL_GPIO_Init+0x2a8>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	6193      	str	r3, [r2, #24]
 8003b40:	4b46      	ldr	r3, [pc, #280]	; (8003c5c <HAL_GPIO_Init+0x2a8>)
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b4c:	4a44      	ldr	r2, [pc, #272]	; (8003c60 <HAL_GPIO_Init+0x2ac>)
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	089b      	lsrs	r3, r3, #2
 8003b52:	3302      	adds	r3, #2
 8003b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	220f      	movs	r2, #15
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a3c      	ldr	r2, [pc, #240]	; (8003c64 <HAL_GPIO_Init+0x2b0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d01f      	beq.n	8003bb8 <HAL_GPIO_Init+0x204>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a3b      	ldr	r2, [pc, #236]	; (8003c68 <HAL_GPIO_Init+0x2b4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d019      	beq.n	8003bb4 <HAL_GPIO_Init+0x200>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a3a      	ldr	r2, [pc, #232]	; (8003c6c <HAL_GPIO_Init+0x2b8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d013      	beq.n	8003bb0 <HAL_GPIO_Init+0x1fc>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a39      	ldr	r2, [pc, #228]	; (8003c70 <HAL_GPIO_Init+0x2bc>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d00d      	beq.n	8003bac <HAL_GPIO_Init+0x1f8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a38      	ldr	r2, [pc, #224]	; (8003c74 <HAL_GPIO_Init+0x2c0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d007      	beq.n	8003ba8 <HAL_GPIO_Init+0x1f4>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a37      	ldr	r2, [pc, #220]	; (8003c78 <HAL_GPIO_Init+0x2c4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d101      	bne.n	8003ba4 <HAL_GPIO_Init+0x1f0>
 8003ba0:	2305      	movs	r3, #5
 8003ba2:	e00a      	b.n	8003bba <HAL_GPIO_Init+0x206>
 8003ba4:	2306      	movs	r3, #6
 8003ba6:	e008      	b.n	8003bba <HAL_GPIO_Init+0x206>
 8003ba8:	2304      	movs	r3, #4
 8003baa:	e006      	b.n	8003bba <HAL_GPIO_Init+0x206>
 8003bac:	2303      	movs	r3, #3
 8003bae:	e004      	b.n	8003bba <HAL_GPIO_Init+0x206>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e002      	b.n	8003bba <HAL_GPIO_Init+0x206>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <HAL_GPIO_Init+0x206>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bbc:	f002 0203 	and.w	r2, r2, #3
 8003bc0:	0092      	lsls	r2, r2, #2
 8003bc2:	4093      	lsls	r3, r2
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003bca:	4925      	ldr	r1, [pc, #148]	; (8003c60 <HAL_GPIO_Init+0x2ac>)
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	089b      	lsrs	r3, r3, #2
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d006      	beq.n	8003bf2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003be4:	4b25      	ldr	r3, [pc, #148]	; (8003c7c <HAL_GPIO_Init+0x2c8>)
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	4924      	ldr	r1, [pc, #144]	; (8003c7c <HAL_GPIO_Init+0x2c8>)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	608b      	str	r3, [r1, #8]
 8003bf0:	e006      	b.n	8003c00 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003bf2:	4b22      	ldr	r3, [pc, #136]	; (8003c7c <HAL_GPIO_Init+0x2c8>)
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	4920      	ldr	r1, [pc, #128]	; (8003c7c <HAL_GPIO_Init+0x2c8>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d006      	beq.n	8003c1a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c0c:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <HAL_GPIO_Init+0x2c8>)
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	491a      	ldr	r1, [pc, #104]	; (8003c7c <HAL_GPIO_Init+0x2c8>)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60cb      	str	r3, [r1, #12]
 8003c18:	e006      	b.n	8003c28 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c1a:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <HAL_GPIO_Init+0x2c8>)
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	4916      	ldr	r1, [pc, #88]	; (8003c7c <HAL_GPIO_Init+0x2c8>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d025      	beq.n	8003c80 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c34:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <HAL_GPIO_Init+0x2c8>)
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	4910      	ldr	r1, [pc, #64]	; (8003c7c <HAL_GPIO_Init+0x2c8>)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	604b      	str	r3, [r1, #4]
 8003c40:	e025      	b.n	8003c8e <HAL_GPIO_Init+0x2da>
 8003c42:	bf00      	nop
 8003c44:	10320000 	.word	0x10320000
 8003c48:	10310000 	.word	0x10310000
 8003c4c:	10220000 	.word	0x10220000
 8003c50:	10210000 	.word	0x10210000
 8003c54:	10120000 	.word	0x10120000
 8003c58:	10110000 	.word	0x10110000
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40010000 	.word	0x40010000
 8003c64:	40010800 	.word	0x40010800
 8003c68:	40010c00 	.word	0x40010c00
 8003c6c:	40011000 	.word	0x40011000
 8003c70:	40011400 	.word	0x40011400
 8003c74:	40011800 	.word	0x40011800
 8003c78:	40011c00 	.word	0x40011c00
 8003c7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c80:	4b15      	ldr	r3, [pc, #84]	; (8003cd8 <HAL_GPIO_Init+0x324>)
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	43db      	mvns	r3, r3
 8003c88:	4913      	ldr	r1, [pc, #76]	; (8003cd8 <HAL_GPIO_Init+0x324>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d006      	beq.n	8003ca8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c9a:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <HAL_GPIO_Init+0x324>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	490e      	ldr	r1, [pc, #56]	; (8003cd8 <HAL_GPIO_Init+0x324>)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]
 8003ca6:	e006      	b.n	8003cb6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_GPIO_Init+0x324>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	4909      	ldr	r1, [pc, #36]	; (8003cd8 <HAL_GPIO_Init+0x324>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	3301      	adds	r3, #1
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f47f ae7e 	bne.w	80039c8 <HAL_GPIO_Init+0x14>
  }
}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	372c      	adds	r7, #44	; 0x2c
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr
 8003cd8:	40010400 	.word	0x40010400

08003cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	807b      	strh	r3, [r7, #2]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cec:	787b      	ldrb	r3, [r7, #1]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cf2:	887a      	ldrh	r2, [r7, #2]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003cf8:	e003      	b.n	8003d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003cfa:	887b      	ldrh	r3, [r7, #2]
 8003cfc:	041a      	lsls	r2, r3, #16
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	611a      	str	r2, [r3, #16]
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d1e:	887a      	ldrh	r2, [r7, #2]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4013      	ands	r3, r2
 8003d24:	041a      	lsls	r2, r3, #16
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	43d9      	mvns	r1, r3
 8003d2a:	887b      	ldrh	r3, [r7, #2]
 8003d2c:	400b      	ands	r3, r1
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	611a      	str	r2, [r3, #16]
}
 8003d34:	bf00      	nop
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr

08003d3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d40:	b08b      	sub	sp, #44	; 0x2c
 8003d42:	af06      	add	r7, sp, #24
 8003d44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0f1      	b.n	8003f34 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d106      	bne.n	8003d6a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f006 ff1b 	bl	800aba0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f003 f892 	bl	8006ea0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	603b      	str	r3, [r7, #0]
 8003d82:	687e      	ldr	r6, [r7, #4]
 8003d84:	466d      	mov	r5, sp
 8003d86:	f106 0410 	add.w	r4, r6, #16
 8003d8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	602b      	str	r3, [r5, #0]
 8003d92:	1d33      	adds	r3, r6, #4
 8003d94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d96:	6838      	ldr	r0, [r7, #0]
 8003d98:	f003 f85c 	bl	8006e54 <USB_CoreInit>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d005      	beq.n	8003dae <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2202      	movs	r2, #2
 8003da6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e0c2      	b.n	8003f34 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2100      	movs	r1, #0
 8003db4:	4618      	mov	r0, r3
 8003db6:	f003 f88d 	bl	8006ed4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dba:	2300      	movs	r3, #0
 8003dbc:	73fb      	strb	r3, [r7, #15]
 8003dbe:	e040      	b.n	8003e42 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	440b      	add	r3, r1
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	440b      	add	r3, r1
 8003de6:	7bfa      	ldrb	r2, [r7, #15]
 8003de8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	440b      	add	r3, r1
 8003dfa:	3303      	adds	r3, #3
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e00:	7bfa      	ldrb	r2, [r7, #15]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	440b      	add	r3, r1
 8003e0e:	3338      	adds	r3, #56	; 0x38
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e14:	7bfa      	ldrb	r2, [r7, #15]
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	440b      	add	r3, r1
 8003e22:	333c      	adds	r3, #60	; 0x3c
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e28:	7bfa      	ldrb	r2, [r7, #15]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	440b      	add	r3, r1
 8003e36:	3340      	adds	r3, #64	; 0x40
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	73fb      	strb	r3, [r7, #15]
 8003e42:	7bfa      	ldrb	r2, [r7, #15]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d3b9      	bcc.n	8003dc0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	73fb      	strb	r3, [r7, #15]
 8003e50:	e044      	b.n	8003edc <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e52:	7bfa      	ldrb	r2, [r7, #15]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	440b      	add	r3, r1
 8003e60:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003e64:	2200      	movs	r2, #0
 8003e66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e68:	7bfa      	ldrb	r2, [r7, #15]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	440b      	add	r3, r1
 8003e76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e7a:	7bfa      	ldrb	r2, [r7, #15]
 8003e7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e7e:	7bfa      	ldrb	r2, [r7, #15]
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	440b      	add	r3, r1
 8003e8c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003e90:	2200      	movs	r2, #0
 8003e92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e94:	7bfa      	ldrb	r2, [r7, #15]
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	440b      	add	r3, r1
 8003ea2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003eaa:	7bfa      	ldrb	r2, [r7, #15]
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	440b      	add	r3, r1
 8003eb8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ec0:	7bfa      	ldrb	r2, [r7, #15]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	440b      	add	r3, r1
 8003ece:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
 8003edc:	7bfa      	ldrb	r2, [r7, #15]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d3b5      	bcc.n	8003e52 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	687e      	ldr	r6, [r7, #4]
 8003eee:	466d      	mov	r5, sp
 8003ef0:	f106 0410 	add.w	r4, r6, #16
 8003ef4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	602b      	str	r3, [r5, #0]
 8003efc:	1d33      	adds	r3, r6, #4
 8003efe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f00:	6838      	ldr	r0, [r7, #0]
 8003f02:	f002 fff3 	bl	8006eec <USB_DevInit>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e00d      	b.n	8003f34 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f005 fa74 	bl	800941a <USB_DevDisconnect>

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <HAL_PCD_Start+0x16>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e016      	b.n	8003f80 <HAL_PCD_Start+0x44>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f002 ff88 	bl	8006e74 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003f64:	2101      	movs	r1, #1
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f007 f869 	bl	800b03e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f005 fa48 	bl	8009406 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f005 fa4a 	bl	800942e <USB_ReadInterrupts>
 8003f9a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fb04 	bl	80045b4 <PCD_EP_ISR_Handler>

    return;
 8003fac:	e119      	b.n	80041e2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d013      	beq.n	8003fe0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fca:	b292      	uxth	r2, r2
 8003fcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f006 fe60 	bl	800ac96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f905 	bl	80041e8 <HAL_PCD_SetAddress>

    return;
 8003fde:	e100      	b.n	80041e2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00c      	beq.n	8004004 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ffc:	b292      	uxth	r2, r2
 8003ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004002:	e0ee      	b.n	80041e2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00c      	beq.n	8004028 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004016:	b29a      	uxth	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004020:	b292      	uxth	r2, r2
 8004022:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004026:	e0dc      	b.n	80041e2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d027      	beq.n	8004082 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800403a:	b29a      	uxth	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0204 	bic.w	r2, r2, #4
 8004044:	b292      	uxth	r2, r2
 8004046:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004052:	b29a      	uxth	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0208 	bic.w	r2, r2, #8
 800405c:	b292      	uxth	r2, r2
 800405e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f006 fe50 	bl	800ad08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004070:	b29a      	uxth	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800407a:	b292      	uxth	r2, r2
 800407c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004080:	e0af      	b.n	80041e2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8083 	beq.w	8004194 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800408e:	2300      	movs	r3, #0
 8004090:	77fb      	strb	r3, [r7, #31]
 8004092:	e010      	b.n	80040b6 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	7ffb      	ldrb	r3, [r7, #31]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	441a      	add	r2, r3
 80040a0:	7ffb      	ldrb	r3, [r7, #31]
 80040a2:	8812      	ldrh	r2, [r2, #0]
 80040a4:	b292      	uxth	r2, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	3320      	adds	r3, #32
 80040aa:	443b      	add	r3, r7
 80040ac:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80040b0:	7ffb      	ldrb	r3, [r7, #31]
 80040b2:	3301      	adds	r3, #1
 80040b4:	77fb      	strb	r3, [r7, #31]
 80040b6:	7ffb      	ldrb	r3, [r7, #31]
 80040b8:	2b07      	cmp	r3, #7
 80040ba:	d9eb      	bls.n	8004094 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	b292      	uxth	r2, r2
 80040d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040dc:	b29a      	uxth	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	b292      	uxth	r2, r2
 80040e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80040ec:	bf00      	nop
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f6      	beq.n	80040ee <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004108:	b29a      	uxth	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004112:	b292      	uxth	r2, r2
 8004114:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004118:	2300      	movs	r3, #0
 800411a:	77fb      	strb	r3, [r7, #31]
 800411c:	e00f      	b.n	800413e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800411e:	7ffb      	ldrb	r3, [r7, #31]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	4611      	mov	r1, r2
 8004126:	7ffa      	ldrb	r2, [r7, #31]
 8004128:	0092      	lsls	r2, r2, #2
 800412a:	440a      	add	r2, r1
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	3320      	adds	r3, #32
 8004130:	443b      	add	r3, r7
 8004132:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004136:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004138:	7ffb      	ldrb	r3, [r7, #31]
 800413a:	3301      	adds	r3, #1
 800413c:	77fb      	strb	r3, [r7, #31]
 800413e:	7ffb      	ldrb	r3, [r7, #31]
 8004140:	2b07      	cmp	r3, #7
 8004142:	d9ec      	bls.n	800411e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800414c:	b29a      	uxth	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0208 	orr.w	r2, r2, #8
 8004156:	b292      	uxth	r2, r2
 8004158:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004164:	b29a      	uxth	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800416e:	b292      	uxth	r2, r2
 8004170:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800417c:	b29a      	uxth	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0204 	orr.w	r2, r2, #4
 8004186:	b292      	uxth	r2, r2
 8004188:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f006 fda1 	bl	800acd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004192:	e026      	b.n	80041e2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00f      	beq.n	80041be <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041b0:	b292      	uxth	r2, r2
 80041b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f006 fd5f 	bl	800ac7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80041bc:	e011      	b.n	80041e2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00c      	beq.n	80041e2 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041da:	b292      	uxth	r2, r2
 80041dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80041e0:	bf00      	nop
  }
}
 80041e2:	3720      	adds	r7, #32
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_PCD_SetAddress+0x1a>
 80041fe:	2302      	movs	r3, #2
 8004200:	e013      	b.n	800422a <HAL_PCD_SetAddress+0x42>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	78fa      	ldrb	r2, [r7, #3]
 800420e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	78fa      	ldrb	r2, [r7, #3]
 8004218:	4611      	mov	r1, r2
 800421a:	4618      	mov	r0, r3
 800421c:	f005 f8e0 	bl	80093e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	4608      	mov	r0, r1
 800423c:	4611      	mov	r1, r2
 800423e:	461a      	mov	r2, r3
 8004240:	4603      	mov	r3, r0
 8004242:	70fb      	strb	r3, [r7, #3]
 8004244:	460b      	mov	r3, r1
 8004246:	803b      	strh	r3, [r7, #0]
 8004248:	4613      	mov	r3, r2
 800424a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004250:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004254:	2b00      	cmp	r3, #0
 8004256:	da0e      	bge.n	8004276 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	4413      	add	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2201      	movs	r2, #1
 8004272:	705a      	strb	r2, [r3, #1]
 8004274:	e00e      	b.n	8004294 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004276:	78fb      	ldrb	r3, [r7, #3]
 8004278:	f003 0207 	and.w	r2, r3, #7
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	4413      	add	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	b2da      	uxtb	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80042a0:	883a      	ldrh	r2, [r7, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	78ba      	ldrb	r2, [r7, #2]
 80042aa:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80042ac:	78bb      	ldrb	r3, [r7, #2]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d102      	bne.n	80042b8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <HAL_PCD_EP_Open+0x94>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e00e      	b.n	80042e4 <HAL_PCD_EP_Open+0xb2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68f9      	ldr	r1, [r7, #12]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f002 fe29 	bl	8006f2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80042e2:	7afb      	ldrb	r3, [r7, #11]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	da0e      	bge.n	800431e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	4413      	add	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	705a      	strb	r2, [r3, #1]
 800431c:	e00e      	b.n	800433c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800431e:	78fb      	ldrb	r3, [r7, #3]
 8004320:	f003 0207 	and.w	r2, r3, #7
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	4413      	add	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	b2da      	uxtb	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_PCD_EP_Close+0x6a>
 8004352:	2302      	movs	r3, #2
 8004354:	e00e      	b.n	8004374 <HAL_PCD_EP_Close+0x88>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68f9      	ldr	r1, [r7, #12]
 8004364:	4618      	mov	r0, r3
 8004366:	f003 f9a1 	bl	80076ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	607a      	str	r2, [r7, #4]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	460b      	mov	r3, r1
 800438a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800438c:	7afb      	ldrb	r3, [r7, #11]
 800438e:	f003 0207 	and.w	r2, r3, #7
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4413      	add	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2200      	movs	r2, #0
 80043b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2200      	movs	r2, #0
 80043ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043bc:	7afb      	ldrb	r3, [r7, #11]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6979      	ldr	r1, [r7, #20]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f003 fb58 	bl	8007a84 <USB_EPStartXfer>

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b086      	sub	sp, #24
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
 80043ea:	460b      	mov	r3, r1
 80043ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043ee:	7afb      	ldrb	r3, [r7, #11]
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4413      	add	r3, r2
 8004402:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2200      	movs	r2, #0
 8004422:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2201      	movs	r2, #1
 8004428:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800442a:	7afb      	ldrb	r3, [r7, #11]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	b2da      	uxtb	r2, r3
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6979      	ldr	r1, [r7, #20]
 800443c:	4618      	mov	r0, r3
 800443e:	f003 fb21 	bl	8007a84 <USB_EPStartXfer>

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	f003 0207 	and.w	r2, r3, #7
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	429a      	cmp	r2, r3
 8004464:	d901      	bls.n	800446a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e04c      	b.n	8004504 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800446a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800446e:	2b00      	cmp	r3, #0
 8004470:	da0e      	bge.n	8004490 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004472:	78fb      	ldrb	r3, [r7, #3]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	4413      	add	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2201      	movs	r2, #1
 800448c:	705a      	strb	r2, [r3, #1]
 800448e:	e00c      	b.n	80044aa <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004490:	78fa      	ldrb	r2, [r7, #3]
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4413      	add	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_PCD_EP_SetStall+0x7e>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e01c      	b.n	8004504 <HAL_PCD_EP_SetStall+0xb8>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68f9      	ldr	r1, [r7, #12]
 80044d8:	4618      	mov	r0, r3
 80044da:	f004 fe84 	bl	80091e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044de:	78fb      	ldrb	r3, [r7, #3]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d108      	bne.n	80044fa <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80044f2:	4619      	mov	r1, r3
 80044f4:	4610      	mov	r0, r2
 80044f6:	f004 ffa9 	bl	800944c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	f003 020f 	and.w	r2, r3, #15
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	429a      	cmp	r2, r3
 8004524:	d901      	bls.n	800452a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e040      	b.n	80045ac <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800452a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800452e:	2b00      	cmp	r3, #0
 8004530:	da0e      	bge.n	8004550 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	4413      	add	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2201      	movs	r2, #1
 800454c:	705a      	strb	r2, [r3, #1]
 800454e:	e00e      	b.n	800456e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	f003 0207 	and.w	r2, r3, #7
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	4413      	add	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004574:	78fb      	ldrb	r3, [r7, #3]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	b2da      	uxtb	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_PCD_EP_ClrStall+0x82>
 800458a:	2302      	movs	r3, #2
 800458c:	e00e      	b.n	80045ac <HAL_PCD_EP_ClrStall+0xa0>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68f9      	ldr	r1, [r7, #12]
 800459c:	4618      	mov	r0, r3
 800459e:	f004 fe72 	bl	8009286 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b096      	sub	sp, #88	; 0x58
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80045bc:	e3bf      	b.n	8004d3e <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80045ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	f003 030f 	and.w	r3, r3, #15
 80045d4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80045d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f040 8179 	bne.w	80048d4 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80045e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d152      	bne.n	8004694 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80045fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fe:	81fb      	strh	r3, [r7, #14]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	89fb      	ldrh	r3, [r7, #14]
 8004606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800460a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800460e:	b29b      	uxth	r3, r3
 8004610:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3328      	adds	r3, #40	; 0x28
 8004616:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004620:	b29b      	uxth	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	4413      	add	r3, r2
 800462c:	3302      	adds	r3, #2
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004642:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	441a      	add	r2, r3
 800464e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004650:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004652:	2100      	movs	r1, #0
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f006 faf6 	bl	800ac46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 836b 	beq.w	8004d3e <PCD_EP_ISR_Handler+0x78a>
 8004668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	f040 8366 	bne.w	8004d3e <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004678:	b2db      	uxtb	r3, r3
 800467a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800467e:	b2da      	uxtb	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	b292      	uxth	r2, r2
 8004686:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004692:	e354      	b.n	8004d3e <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800469a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80046a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d034      	beq.n	800471c <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4413      	add	r3, r2
 80046c6:	3306      	adds	r3, #6
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6812      	ldr	r2, [r2, #0]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80046da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046dc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80046e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ea:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80046ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ee:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	f004 fefb 	bl	80094ec <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004702:	4013      	ands	r3, r2
 8004704:	823b      	strh	r3, [r7, #16]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	8a3a      	ldrh	r2, [r7, #16]
 800470c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004710:	b292      	uxth	r2, r2
 8004712:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f006 fa69 	bl	800abec <HAL_PCD_SetupStageCallback>
 800471a:	e310      	b.n	8004d3e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800471c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004720:	2b00      	cmp	r3, #0
 8004722:	f280 830c 	bge.w	8004d3e <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29a      	uxth	r2, r3
 800472e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004732:	4013      	ands	r3, r2
 8004734:	83fb      	strh	r3, [r7, #30]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	8bfa      	ldrh	r2, [r7, #30]
 800473c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004740:	b292      	uxth	r2, r2
 8004742:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800474c:	b29b      	uxth	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	4413      	add	r3, r2
 8004758:	3306      	adds	r3, #6
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	4413      	add	r3, r2
 8004762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800476c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800476e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d019      	beq.n	80047ac <PCD_EP_ISR_Handler+0x1f8>
 8004778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d015      	beq.n	80047ac <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004786:	6959      	ldr	r1, [r3, #20]
 8004788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800478a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800478c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800478e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004790:	b29b      	uxth	r3, r3
 8004792:	f004 feab 	bl	80094ec <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004798:	695a      	ldr	r2, [r3, #20]
 800479a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	441a      	add	r2, r3
 80047a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047a2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80047a4:	2100      	movs	r1, #0
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f006 fa32 	bl	800ac10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80047b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80047ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f040 82bd 	bne.w	8004d3e <PCD_EP_ISR_Handler+0x78a>
 80047c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80047c8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80047cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047d0:	f000 82b5 	beq.w	8004d3e <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	461a      	mov	r2, r3
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	4413      	add	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047fe:	b29a      	uxth	r2, r3
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	801a      	strh	r2, [r3, #0]
 8004804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2b3e      	cmp	r3, #62	; 0x3e
 800480a:	d91d      	bls.n	8004848 <PCD_EP_ISR_Handler+0x294>
 800480c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	095b      	lsrs	r3, r3, #5
 8004812:	647b      	str	r3, [r7, #68]	; 0x44
 8004814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	2b00      	cmp	r3, #0
 800481e:	d102      	bne.n	8004826 <PCD_EP_ISR_Handler+0x272>
 8004820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004822:	3b01      	subs	r3, #1
 8004824:	647b      	str	r3, [r7, #68]	; 0x44
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b29a      	uxth	r2, r3
 800482c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800482e:	b29b      	uxth	r3, r3
 8004830:	029b      	lsls	r3, r3, #10
 8004832:	b29b      	uxth	r3, r3
 8004834:	4313      	orrs	r3, r2
 8004836:	b29b      	uxth	r3, r3
 8004838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800483c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004840:	b29a      	uxth	r2, r3
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	801a      	strh	r2, [r3, #0]
 8004846:	e026      	b.n	8004896 <PCD_EP_ISR_Handler+0x2e2>
 8004848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10a      	bne.n	8004866 <PCD_EP_ISR_Handler+0x2b2>
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	b29b      	uxth	r3, r3
 8004856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800485a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800485e:	b29a      	uxth	r2, r3
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	801a      	strh	r2, [r3, #0]
 8004864:	e017      	b.n	8004896 <PCD_EP_ISR_Handler+0x2e2>
 8004866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	085b      	lsrs	r3, r3, #1
 800486c:	647b      	str	r3, [r7, #68]	; 0x44
 800486e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <PCD_EP_ISR_Handler+0x2cc>
 800487a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800487c:	3301      	adds	r3, #1
 800487e:	647b      	str	r3, [r7, #68]	; 0x44
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	b29a      	uxth	r2, r3
 8004886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004888:	b29b      	uxth	r3, r3
 800488a:	029b      	lsls	r3, r3, #10
 800488c:	b29b      	uxth	r3, r3
 800488e:	4313      	orrs	r3, r2
 8004890:	b29a      	uxth	r2, r3
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	b29b      	uxth	r3, r3
 800489e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a6:	827b      	strh	r3, [r7, #18]
 80048a8:	8a7b      	ldrh	r3, [r7, #18]
 80048aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048ae:	827b      	strh	r3, [r7, #18]
 80048b0:	8a7b      	ldrh	r3, [r7, #18]
 80048b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048b6:	827b      	strh	r3, [r7, #18]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	8a7b      	ldrh	r3, [r7, #18]
 80048be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	8013      	strh	r3, [r2, #0]
 80048d2:	e234      	b.n	8004d3e <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80048e8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f280 80fc 	bge.w	8004aea <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b29a      	uxth	r2, r3
 8004904:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004908:	4013      	ands	r3, r2
 800490a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004920:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004924:	b292      	uxth	r2, r2
 8004926:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004928:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	4413      	add	r3, r2
 800493c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800493e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004940:	7b1b      	ldrb	r3, [r3, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d125      	bne.n	8004992 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800494e:	b29b      	uxth	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	4413      	add	r3, r2
 800495a:	3306      	adds	r3, #6
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800496e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004972:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 8092 	beq.w	8004aa0 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004982:	6959      	ldr	r1, [r3, #20]
 8004984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004986:	88da      	ldrh	r2, [r3, #6]
 8004988:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800498c:	f004 fdae 	bl	80094ec <USB_ReadPMA>
 8004990:	e086      	b.n	8004aa0 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004994:	78db      	ldrb	r3, [r3, #3]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d10a      	bne.n	80049b0 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800499a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800499e:	461a      	mov	r2, r3
 80049a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f9d9 	bl	8004d5a <HAL_PCD_EP_DB_Receive>
 80049a8:	4603      	mov	r3, r0
 80049aa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80049ae:	e077      	b.n	8004aa0 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ca:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	441a      	add	r2, r3
 80049dc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80049e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d024      	beq.n	8004a58 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4413      	add	r3, r2
 8004a22:	3302      	adds	r3, #2
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6812      	ldr	r2, [r2, #0]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a36:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004a3a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d02e      	beq.n	8004aa0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a48:	6959      	ldr	r1, [r3, #20]
 8004a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a4c:	891a      	ldrh	r2, [r3, #8]
 8004a4e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004a52:	f004 fd4b 	bl	80094ec <USB_ReadPMA>
 8004a56:	e023      	b.n	8004aa0 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3306      	adds	r3, #6
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6812      	ldr	r2, [r2, #0]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a80:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004a84:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d009      	beq.n	8004aa0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a92:	6959      	ldr	r1, [r3, #20]
 8004a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a96:	895a      	ldrh	r2, [r3, #10]
 8004a98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004a9c:	f004 fd26 	bl	80094ec <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004aa8:	441a      	add	r2, r3
 8004aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ab0:	695a      	ldr	r2, [r3, #20]
 8004ab2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004ab6:	441a      	add	r2, r3
 8004ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aba:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d005      	beq.n	8004ad0 <PCD_EP_ISR_Handler+0x51c>
 8004ac4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d206      	bcs.n	8004ade <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f006 f89a 	bl	800ac10 <HAL_PCD_DataOutStageCallback>
 8004adc:	e005      	b.n	8004aea <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f002 ffcd 	bl	8007a84 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004aea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 8123 	beq.w	8004d3e <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8004af8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	4613      	mov	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	4413      	add	r3, r2
 8004b0a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	461a      	mov	r2, r3
 8004b12:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	441a      	add	r2, r3
 8004b38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b4a:	78db      	ldrb	r3, [r3, #3]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	f040 80a2 	bne.w	8004c96 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8004b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b54:	2200      	movs	r2, #0
 8004b56:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b5a:	7b1b      	ldrb	r3, [r3, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8093 	beq.w	8004c88 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b62:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d046      	beq.n	8004bfc <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b70:	785b      	ldrb	r3, [r3, #1]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d126      	bne.n	8004bc4 <PCD_EP_ISR_Handler+0x610>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	461a      	mov	r2, r3
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	4413      	add	r3, r2
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	011a      	lsls	r2, r3, #4
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	4413      	add	r3, r2
 8004b98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b9c:	623b      	str	r3, [r7, #32]
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	801a      	strh	r2, [r3, #0]
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	801a      	strh	r2, [r3, #0]
 8004bc2:	e061      	b.n	8004c88 <PCD_EP_ISR_Handler+0x6d4>
 8004bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bc6:	785b      	ldrb	r3, [r3, #1]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d15d      	bne.n	8004c88 <PCD_EP_ISR_Handler+0x6d4>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be0:	4413      	add	r3, r2
 8004be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	011a      	lsls	r2, r3, #4
 8004bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bec:	4413      	add	r3, r2
 8004bee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	801a      	strh	r2, [r3, #0]
 8004bfa:	e045      	b.n	8004c88 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c04:	785b      	ldrb	r3, [r3, #1]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d126      	bne.n	8004c58 <PCD_EP_ISR_Handler+0x6a4>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1e:	4413      	add	r3, r2
 8004c20:	637b      	str	r3, [r7, #52]	; 0x34
 8004c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	011a      	lsls	r2, r3, #4
 8004c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c30:	633b      	str	r3, [r7, #48]	; 0x30
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	801a      	strh	r2, [r3, #0]
 8004c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	801a      	strh	r2, [r3, #0]
 8004c56:	e017      	b.n	8004c88 <PCD_EP_ISR_Handler+0x6d4>
 8004c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c5a:	785b      	ldrb	r3, [r3, #1]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d113      	bne.n	8004c88 <PCD_EP_ISR_Handler+0x6d4>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6e:	4413      	add	r3, r2
 8004c70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	011a      	lsls	r2, r3, #4
 8004c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c80:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c84:	2200      	movs	r2, #0
 8004c86:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f005 ffd9 	bl	800ac46 <HAL_PCD_DataInStageCallback>
 8004c94:	e053      	b.n	8004d3e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004c96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d146      	bne.n	8004d30 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	4413      	add	r3, r2
 8004cb6:	3302      	adds	r3, #2
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd0:	699a      	ldr	r2, [r3, #24]
 8004cd2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d907      	bls.n	8004cea <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8004cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ce2:	1ad2      	subs	r2, r2, r3
 8004ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce6:	619a      	str	r2, [r3, #24]
 8004ce8:	e002      	b.n	8004cf0 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8004cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cec:	2200      	movs	r2, #0
 8004cee:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d106      	bne.n	8004d06 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f005 ffa1 	bl	800ac46 <HAL_PCD_DataInStageCallback>
 8004d04:	e01b      	b.n	8004d3e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d08:	695a      	ldr	r2, [r3, #20]
 8004d0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d0e:	441a      	add	r2, r3
 8004d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d12:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d16:	69da      	ldr	r2, [r3, #28]
 8004d18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d1c:	441a      	add	r2, r3
 8004d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d20:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f002 feab 	bl	8007a84 <USB_EPStartXfer>
 8004d2e:	e006      	b.n	8004d3e <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004d30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004d34:	461a      	mov	r2, r3
 8004d36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f91b 	bl	8004f74 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	b21b      	sxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f6ff ac37 	blt.w	80045be <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3758      	adds	r7, #88	; 0x58
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b088      	sub	sp, #32
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	4613      	mov	r3, r2
 8004d66:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d68:	88fb      	ldrh	r3, [r7, #6]
 8004d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d07e      	beq.n	8004e70 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	4413      	add	r3, r2
 8004d86:	3302      	adds	r3, #2
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	6812      	ldr	r2, [r2, #0]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d9a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	699a      	ldr	r2, [r3, #24]
 8004da0:	8b7b      	ldrh	r3, [r7, #26]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d306      	bcc.n	8004db4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	8b7b      	ldrh	r3, [r7, #26]
 8004dac:	1ad2      	subs	r2, r2, r3
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	619a      	str	r2, [r3, #24]
 8004db2:	e002      	b.n	8004dba <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2200      	movs	r2, #0
 8004db8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d123      	bne.n	8004e0a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ddc:	833b      	strh	r3, [r7, #24]
 8004dde:	8b3b      	ldrh	r3, [r7, #24]
 8004de0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004de4:	833b      	strh	r3, [r7, #24]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	441a      	add	r2, r3
 8004df4:	8b3b      	ldrh	r3, [r7, #24]
 8004df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e0a:	88fb      	ldrh	r3, [r7, #6]
 8004e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01f      	beq.n	8004e54 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2e:	82fb      	strh	r3, [r7, #22]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	461a      	mov	r2, r3
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	441a      	add	r2, r3
 8004e3e:	8afb      	ldrh	r3, [r7, #22]
 8004e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004e54:	8b7b      	ldrh	r3, [r7, #26]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 8087 	beq.w	8004f6a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	6959      	ldr	r1, [r3, #20]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	891a      	ldrh	r2, [r3, #8]
 8004e68:	8b7b      	ldrh	r3, [r7, #26]
 8004e6a:	f004 fb3f 	bl	80094ec <USB_ReadPMA>
 8004e6e:	e07c      	b.n	8004f6a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	4413      	add	r3, r2
 8004e84:	3306      	adds	r3, #6
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	6812      	ldr	r2, [r2, #0]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e98:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	699a      	ldr	r2, [r3, #24]
 8004e9e:	8b7b      	ldrh	r3, [r7, #26]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d306      	bcc.n	8004eb2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	699a      	ldr	r2, [r3, #24]
 8004ea8:	8b7b      	ldrh	r3, [r7, #26]
 8004eaa:	1ad2      	subs	r2, r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	619a      	str	r2, [r3, #24]
 8004eb0:	e002      	b.n	8004eb8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d123      	bne.n	8004f08 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eda:	83fb      	strh	r3, [r7, #30]
 8004edc:	8bfb      	ldrh	r3, [r7, #30]
 8004ede:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ee2:	83fb      	strh	r3, [r7, #30]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	441a      	add	r2, r3
 8004ef2:	8bfb      	ldrh	r3, [r7, #30]
 8004ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004f08:	88fb      	ldrh	r3, [r7, #6]
 8004f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d11f      	bne.n	8004f52 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2c:	83bb      	strh	r3, [r7, #28]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	441a      	add	r2, r3
 8004f3c:	8bbb      	ldrh	r3, [r7, #28]
 8004f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004f52:	8b7b      	ldrh	r3, [r7, #26]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d008      	beq.n	8004f6a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	6959      	ldr	r1, [r3, #20]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	895a      	ldrh	r2, [r3, #10]
 8004f64:	8b7b      	ldrh	r3, [r7, #26]
 8004f66:	f004 fac1 	bl	80094ec <USB_ReadPMA>
    }
  }

  return count;
 8004f6a:	8b7b      	ldrh	r3, [r7, #26]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3720      	adds	r7, #32
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b0a4      	sub	sp, #144	; 0x90
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f82:	88fb      	ldrh	r3, [r7, #6]
 8004f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 81dd 	beq.w	8005348 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	4413      	add	r3, r2
 8004fa2:	3302      	adds	r3, #2
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	6812      	ldr	r2, [r2, #0]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fb6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d907      	bls.n	8004fd6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004fce:	1ad2      	subs	r2, r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	619a      	str	r2, [r3, #24]
 8004fd4:	e002      	b.n	8004fdc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f040 80b9 	bne.w	8005158 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	785b      	ldrb	r3, [r3, #1]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d126      	bne.n	800503c <HAL_PCD_EP_DB_Transmit+0xc8>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	461a      	mov	r2, r3
 8005000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005002:	4413      	add	r3, r2
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	011a      	lsls	r2, r3, #4
 800500c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500e:	4413      	add	r3, r2
 8005010:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005014:	62bb      	str	r3, [r7, #40]	; 0x28
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	b29b      	uxth	r3, r3
 800501c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005020:	b29a      	uxth	r2, r3
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	801a      	strh	r2, [r3, #0]
 8005026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	b29b      	uxth	r3, r3
 800502c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005034:	b29a      	uxth	r2, r3
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	801a      	strh	r2, [r3, #0]
 800503a:	e01a      	b.n	8005072 <HAL_PCD_EP_DB_Transmit+0xfe>
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	785b      	ldrb	r3, [r3, #1]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d116      	bne.n	8005072 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	637b      	str	r3, [r7, #52]	; 0x34
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005052:	b29b      	uxth	r3, r3
 8005054:	461a      	mov	r2, r3
 8005056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005058:	4413      	add	r3, r2
 800505a:	637b      	str	r3, [r7, #52]	; 0x34
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	011a      	lsls	r2, r3, #4
 8005062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005064:	4413      	add	r3, r2
 8005066:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800506a:	633b      	str	r3, [r7, #48]	; 0x30
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	2200      	movs	r2, #0
 8005070:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	785b      	ldrb	r3, [r3, #1]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d126      	bne.n	80050ce <HAL_PCD_EP_DB_Transmit+0x15a>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	61fb      	str	r3, [r7, #28]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800508e:	b29b      	uxth	r3, r3
 8005090:	461a      	mov	r2, r3
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	4413      	add	r3, r2
 8005096:	61fb      	str	r3, [r7, #28]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	011a      	lsls	r2, r3, #4
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	4413      	add	r3, r2
 80050a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050a6:	61bb      	str	r3, [r7, #24]
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	801a      	strh	r2, [r3, #0]
 80050cc:	e017      	b.n	80050fe <HAL_PCD_EP_DB_Transmit+0x18a>
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	785b      	ldrb	r3, [r3, #1]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d113      	bne.n	80050fe <HAL_PCD_EP_DB_Transmit+0x18a>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050de:	b29b      	uxth	r3, r3
 80050e0:	461a      	mov	r2, r3
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	4413      	add	r3, r2
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	011a      	lsls	r2, r3, #4
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	4413      	add	r3, r2
 80050f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050f6:	623b      	str	r3, [r7, #32]
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	2200      	movs	r2, #0
 80050fc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	4619      	mov	r1, r3
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f005 fd9e 	bl	800ac46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 82fc 	beq.w	800570e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	b29b      	uxth	r3, r3
 8005128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005130:	82fb      	strh	r3, [r7, #22]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	441a      	add	r2, r3
 8005140:	8afb      	ldrh	r3, [r7, #22]
 8005142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800514a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800514e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005152:	b29b      	uxth	r3, r3
 8005154:	8013      	strh	r3, [r2, #0]
 8005156:	e2da      	b.n	800570e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005158:	88fb      	ldrh	r3, [r7, #6]
 800515a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d021      	beq.n	80051a6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	441a      	add	r2, r3
 800518e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800519a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800519e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	f040 82ae 	bne.w	800570e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80051ba:	441a      	add	r2, r3
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	69da      	ldr	r2, [r3, #28]
 80051c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80051c8:	441a      	add	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	6a1a      	ldr	r2, [r3, #32]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d30b      	bcc.n	80051f2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	6a1a      	ldr	r2, [r3, #32]
 80051e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051ea:	1ad2      	subs	r2, r2, r3
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	621a      	str	r2, [r3, #32]
 80051f0:	e017      	b.n	8005222 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d108      	bne.n	800520c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80051fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80051fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800520a:	e00a      	b.n	8005222 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2200      	movs	r2, #0
 8005220:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	785b      	ldrb	r3, [r3, #1]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d165      	bne.n	80052f6 <HAL_PCD_EP_DB_Transmit+0x382>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005238:	b29b      	uxth	r3, r3
 800523a:	461a      	mov	r2, r3
 800523c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523e:	4413      	add	r3, r2
 8005240:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	011a      	lsls	r2, r3, #4
 8005248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800524a:	4413      	add	r3, r2
 800524c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005250:	63bb      	str	r3, [r7, #56]	; 0x38
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	b29b      	uxth	r3, r3
 8005258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800525c:	b29a      	uxth	r2, r3
 800525e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005260:	801a      	strh	r2, [r3, #0]
 8005262:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005266:	2b3e      	cmp	r3, #62	; 0x3e
 8005268:	d91d      	bls.n	80052a6 <HAL_PCD_EP_DB_Transmit+0x332>
 800526a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	64bb      	str	r3, [r7, #72]	; 0x48
 8005272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005276:	f003 031f 	and.w	r3, r3, #31
 800527a:	2b00      	cmp	r3, #0
 800527c:	d102      	bne.n	8005284 <HAL_PCD_EP_DB_Transmit+0x310>
 800527e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005280:	3b01      	subs	r3, #1
 8005282:	64bb      	str	r3, [r7, #72]	; 0x48
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	b29a      	uxth	r2, r3
 800528a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800528c:	b29b      	uxth	r3, r3
 800528e:	029b      	lsls	r3, r3, #10
 8005290:	b29b      	uxth	r3, r3
 8005292:	4313      	orrs	r3, r2
 8005294:	b29b      	uxth	r3, r3
 8005296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800529a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800529e:	b29a      	uxth	r2, r3
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	801a      	strh	r2, [r3, #0]
 80052a4:	e044      	b.n	8005330 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80052a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10a      	bne.n	80052c4 <HAL_PCD_EP_DB_Transmit+0x350>
 80052ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052bc:	b29a      	uxth	r2, r3
 80052be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c0:	801a      	strh	r2, [r3, #0]
 80052c2:	e035      	b.n	8005330 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80052c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052c8:	085b      	lsrs	r3, r3, #1
 80052ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80052cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <HAL_PCD_EP_DB_Transmit+0x36a>
 80052d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052da:	3301      	adds	r3, #1
 80052dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	029b      	lsls	r3, r3, #10
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	4313      	orrs	r3, r2
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f2:	801a      	strh	r2, [r3, #0]
 80052f4:	e01c      	b.n	8005330 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	785b      	ldrb	r3, [r3, #1]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d118      	bne.n	8005330 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	647b      	str	r3, [r7, #68]	; 0x44
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800530c:	b29b      	uxth	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005312:	4413      	add	r3, r2
 8005314:	647b      	str	r3, [r7, #68]	; 0x44
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	011a      	lsls	r2, r3, #4
 800531c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531e:	4413      	add	r3, r2
 8005320:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005324:	643b      	str	r3, [r7, #64]	; 0x40
 8005326:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800532a:	b29a      	uxth	r2, r3
 800532c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6818      	ldr	r0, [r3, #0]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	6959      	ldr	r1, [r3, #20]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	891a      	ldrh	r2, [r3, #8]
 800533c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005340:	b29b      	uxth	r3, r3
 8005342:	f004 f88e 	bl	8009462 <USB_WritePMA>
 8005346:	e1e2      	b.n	800570e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005350:	b29b      	uxth	r3, r3
 8005352:	461a      	mov	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	4413      	add	r3, r2
 800535c:	3306      	adds	r3, #6
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	6812      	ldr	r2, [r2, #0]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005370:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	699a      	ldr	r2, [r3, #24]
 8005378:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800537c:	429a      	cmp	r2, r3
 800537e:	d307      	bcc.n	8005390 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	699a      	ldr	r2, [r3, #24]
 8005384:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005388:	1ad2      	subs	r2, r2, r3
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	619a      	str	r2, [r3, #24]
 800538e:	e002      	b.n	8005396 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2200      	movs	r2, #0
 8005394:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	f040 80c0 	bne.w	8005520 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	785b      	ldrb	r3, [r3, #1]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d126      	bne.n	80053f6 <HAL_PCD_EP_DB_Transmit+0x482>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	461a      	mov	r2, r3
 80053ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053bc:	4413      	add	r3, r2
 80053be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	011a      	lsls	r2, r3, #4
 80053c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053c8:	4413      	add	r3, r2
 80053ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80053d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053da:	b29a      	uxth	r2, r3
 80053dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053de:	801a      	strh	r2, [r3, #0]
 80053e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053f2:	801a      	strh	r2, [r3, #0]
 80053f4:	e01a      	b.n	800542c <HAL_PCD_EP_DB_Transmit+0x4b8>
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	785b      	ldrb	r3, [r3, #1]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d116      	bne.n	800542c <HAL_PCD_EP_DB_Transmit+0x4b8>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	667b      	str	r3, [r7, #100]	; 0x64
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800540c:	b29b      	uxth	r3, r3
 800540e:	461a      	mov	r2, r3
 8005410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005412:	4413      	add	r3, r2
 8005414:	667b      	str	r3, [r7, #100]	; 0x64
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	011a      	lsls	r2, r3, #4
 800541c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800541e:	4413      	add	r3, r2
 8005420:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005424:	663b      	str	r3, [r7, #96]	; 0x60
 8005426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005428:	2200      	movs	r2, #0
 800542a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	677b      	str	r3, [r7, #116]	; 0x74
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	785b      	ldrb	r3, [r3, #1]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d12b      	bne.n	8005492 <HAL_PCD_EP_DB_Transmit+0x51e>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005448:	b29b      	uxth	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800544e:	4413      	add	r3, r2
 8005450:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	011a      	lsls	r2, r3, #4
 8005458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800545a:	4413      	add	r3, r2
 800545c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005460:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005464:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	b29b      	uxth	r3, r3
 800546c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005470:	b29a      	uxth	r2, r3
 8005472:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005476:	801a      	strh	r2, [r3, #0]
 8005478:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005488:	b29a      	uxth	r2, r3
 800548a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800548e:	801a      	strh	r2, [r3, #0]
 8005490:	e017      	b.n	80054c2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d113      	bne.n	80054c2 <HAL_PCD_EP_DB_Transmit+0x54e>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	461a      	mov	r2, r3
 80054a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054a8:	4413      	add	r3, r2
 80054aa:	677b      	str	r3, [r7, #116]	; 0x74
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	011a      	lsls	r2, r3, #4
 80054b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054b4:	4413      	add	r3, r2
 80054b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054ba:	673b      	str	r3, [r7, #112]	; 0x70
 80054bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054be:	2200      	movs	r2, #0
 80054c0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	4619      	mov	r1, r3
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f005 fbbc 	bl	800ac46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80054ce:	88fb      	ldrh	r3, [r7, #6]
 80054d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f040 811a 	bne.w	800570e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	461a      	mov	r2, r3
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	441a      	add	r2, r3
 8005506:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800550a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800550e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005512:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551a:	b29b      	uxth	r3, r3
 800551c:	8013      	strh	r3, [r2, #0]
 800551e:	e0f6      	b.n	800570e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005520:	88fb      	ldrh	r3, [r7, #6]
 8005522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d121      	bne.n	800556e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	b29b      	uxth	r3, r3
 800553c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005544:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	461a      	mov	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	441a      	add	r2, r3
 8005556:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800555a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800555e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005562:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556a:	b29b      	uxth	r3, r3
 800556c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005574:	2b01      	cmp	r3, #1
 8005576:	f040 80ca 	bne.w	800570e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	695a      	ldr	r2, [r3, #20]
 800557e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005582:	441a      	add	r2, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	69da      	ldr	r2, [r3, #28]
 800558c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005590:	441a      	add	r2, r3
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6a1a      	ldr	r2, [r3, #32]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d30b      	bcc.n	80055ba <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	6a1a      	ldr	r2, [r3, #32]
 80055ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055b2:	1ad2      	subs	r2, r2, r3
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	621a      	str	r2, [r3, #32]
 80055b8:	e017      	b.n	80055ea <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d108      	bne.n	80055d4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80055c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80055c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80055d2:	e00a      	b.n	80055ea <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2200      	movs	r2, #0
 80055e0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	657b      	str	r3, [r7, #84]	; 0x54
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	785b      	ldrb	r3, [r3, #1]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d165      	bne.n	80056c4 <HAL_PCD_EP_DB_Transmit+0x750>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005606:	b29b      	uxth	r3, r3
 8005608:	461a      	mov	r2, r3
 800560a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800560c:	4413      	add	r3, r2
 800560e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	011a      	lsls	r2, r3, #4
 8005616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005618:	4413      	add	r3, r2
 800561a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800561e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005620:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	b29b      	uxth	r3, r3
 8005626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800562a:	b29a      	uxth	r2, r3
 800562c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800562e:	801a      	strh	r2, [r3, #0]
 8005630:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005634:	2b3e      	cmp	r3, #62	; 0x3e
 8005636:	d91d      	bls.n	8005674 <HAL_PCD_EP_DB_Transmit+0x700>
 8005638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005644:	f003 031f 	and.w	r3, r3, #31
 8005648:	2b00      	cmp	r3, #0
 800564a:	d102      	bne.n	8005652 <HAL_PCD_EP_DB_Transmit+0x6de>
 800564c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800564e:	3b01      	subs	r3, #1
 8005650:	66bb      	str	r3, [r7, #104]	; 0x68
 8005652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	b29a      	uxth	r2, r3
 8005658:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800565a:	b29b      	uxth	r3, r3
 800565c:	029b      	lsls	r3, r3, #10
 800565e:	b29b      	uxth	r3, r3
 8005660:	4313      	orrs	r3, r2
 8005662:	b29b      	uxth	r3, r3
 8005664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800566c:	b29a      	uxth	r2, r3
 800566e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005670:	801a      	strh	r2, [r3, #0]
 8005672:	e041      	b.n	80056f8 <HAL_PCD_EP_DB_Transmit+0x784>
 8005674:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10a      	bne.n	8005692 <HAL_PCD_EP_DB_Transmit+0x71e>
 800567c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800568a:	b29a      	uxth	r2, r3
 800568c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800568e:	801a      	strh	r2, [r3, #0]
 8005690:	e032      	b.n	80056f8 <HAL_PCD_EP_DB_Transmit+0x784>
 8005692:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005696:	085b      	lsrs	r3, r3, #1
 8005698:	66bb      	str	r3, [r7, #104]	; 0x68
 800569a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <HAL_PCD_EP_DB_Transmit+0x738>
 80056a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056a8:	3301      	adds	r3, #1
 80056aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80056ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	029b      	lsls	r3, r3, #10
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	4313      	orrs	r3, r2
 80056bc:	b29a      	uxth	r2, r3
 80056be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056c0:	801a      	strh	r2, [r3, #0]
 80056c2:	e019      	b.n	80056f8 <HAL_PCD_EP_DB_Transmit+0x784>
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	785b      	ldrb	r3, [r3, #1]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d115      	bne.n	80056f8 <HAL_PCD_EP_DB_Transmit+0x784>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	461a      	mov	r2, r3
 80056d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056da:	4413      	add	r3, r2
 80056dc:	657b      	str	r3, [r7, #84]	; 0x54
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	011a      	lsls	r2, r3, #4
 80056e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056e6:	4413      	add	r3, r2
 80056e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056ec:	653b      	str	r3, [r7, #80]	; 0x50
 80056ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056f6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6818      	ldr	r0, [r3, #0]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	6959      	ldr	r1, [r3, #20]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	895a      	ldrh	r2, [r3, #10]
 8005704:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005708:	b29b      	uxth	r3, r3
 800570a:	f003 feaa 	bl	8009462 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29b      	uxth	r3, r3
 8005720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005728:	82bb      	strh	r3, [r7, #20]
 800572a:	8abb      	ldrh	r3, [r7, #20]
 800572c:	f083 0310 	eor.w	r3, r3, #16
 8005730:	82bb      	strh	r3, [r7, #20]
 8005732:	8abb      	ldrh	r3, [r7, #20]
 8005734:	f083 0320 	eor.w	r3, r3, #32
 8005738:	82bb      	strh	r3, [r7, #20]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	461a      	mov	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	441a      	add	r2, r3
 8005748:	8abb      	ldrh	r3, [r7, #20]
 800574a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800574e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800575a:	b29b      	uxth	r3, r3
 800575c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3790      	adds	r7, #144	; 0x90
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	607b      	str	r3, [r7, #4]
 8005772:	460b      	mov	r3, r1
 8005774:	817b      	strh	r3, [r7, #10]
 8005776:	4613      	mov	r3, r2
 8005778:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800577a:	897b      	ldrh	r3, [r7, #10]
 800577c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005780:	b29b      	uxth	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00b      	beq.n	800579e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005786:	897b      	ldrh	r3, [r7, #10]
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4413      	add	r3, r2
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	e009      	b.n	80057b2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800579e:	897a      	ldrh	r2, [r7, #10]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4413      	add	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80057b2:	893b      	ldrh	r3, [r7, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d107      	bne.n	80057c8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2200      	movs	r2, #0
 80057bc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	80da      	strh	r2, [r3, #6]
 80057c6:	e00b      	b.n	80057e0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2201      	movs	r2, #1
 80057cc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	0c1b      	lsrs	r3, r3, #16
 80057da:	b29a      	uxth	r2, r3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr

080057ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e272      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 8087 	beq.w	800591a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800580c:	4b92      	ldr	r3, [pc, #584]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f003 030c 	and.w	r3, r3, #12
 8005814:	2b04      	cmp	r3, #4
 8005816:	d00c      	beq.n	8005832 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005818:	4b8f      	ldr	r3, [pc, #572]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 030c 	and.w	r3, r3, #12
 8005820:	2b08      	cmp	r3, #8
 8005822:	d112      	bne.n	800584a <HAL_RCC_OscConfig+0x5e>
 8005824:	4b8c      	ldr	r3, [pc, #560]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800582c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005830:	d10b      	bne.n	800584a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005832:	4b89      	ldr	r3, [pc, #548]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d06c      	beq.n	8005918 <HAL_RCC_OscConfig+0x12c>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d168      	bne.n	8005918 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e24c      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005852:	d106      	bne.n	8005862 <HAL_RCC_OscConfig+0x76>
 8005854:	4b80      	ldr	r3, [pc, #512]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a7f      	ldr	r2, [pc, #508]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 800585a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800585e:	6013      	str	r3, [r2, #0]
 8005860:	e02e      	b.n	80058c0 <HAL_RCC_OscConfig+0xd4>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10c      	bne.n	8005884 <HAL_RCC_OscConfig+0x98>
 800586a:	4b7b      	ldr	r3, [pc, #492]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a7a      	ldr	r2, [pc, #488]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	4b78      	ldr	r3, [pc, #480]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a77      	ldr	r2, [pc, #476]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 800587c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	e01d      	b.n	80058c0 <HAL_RCC_OscConfig+0xd4>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800588c:	d10c      	bne.n	80058a8 <HAL_RCC_OscConfig+0xbc>
 800588e:	4b72      	ldr	r3, [pc, #456]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a71      	ldr	r2, [pc, #452]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	4b6f      	ldr	r3, [pc, #444]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a6e      	ldr	r2, [pc, #440]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80058a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	e00b      	b.n	80058c0 <HAL_RCC_OscConfig+0xd4>
 80058a8:	4b6b      	ldr	r3, [pc, #428]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a6a      	ldr	r2, [pc, #424]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80058ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	4b68      	ldr	r3, [pc, #416]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a67      	ldr	r2, [pc, #412]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80058ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d013      	beq.n	80058f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c8:	f7fd f81a 	bl	8002900 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058d0:	f7fd f816 	bl	8002900 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b64      	cmp	r3, #100	; 0x64
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e200      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e2:	4b5d      	ldr	r3, [pc, #372]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0f0      	beq.n	80058d0 <HAL_RCC_OscConfig+0xe4>
 80058ee:	e014      	b.n	800591a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f0:	f7fd f806 	bl	8002900 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058f8:	f7fd f802 	bl	8002900 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b64      	cmp	r3, #100	; 0x64
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e1ec      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800590a:	4b53      	ldr	r3, [pc, #332]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f0      	bne.n	80058f8 <HAL_RCC_OscConfig+0x10c>
 8005916:	e000      	b.n	800591a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d063      	beq.n	80059ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005926:	4b4c      	ldr	r3, [pc, #304]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f003 030c 	and.w	r3, r3, #12
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00b      	beq.n	800594a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005932:	4b49      	ldr	r3, [pc, #292]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f003 030c 	and.w	r3, r3, #12
 800593a:	2b08      	cmp	r3, #8
 800593c:	d11c      	bne.n	8005978 <HAL_RCC_OscConfig+0x18c>
 800593e:	4b46      	ldr	r3, [pc, #280]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d116      	bne.n	8005978 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800594a:	4b43      	ldr	r3, [pc, #268]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d005      	beq.n	8005962 <HAL_RCC_OscConfig+0x176>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d001      	beq.n	8005962 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e1c0      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005962:	4b3d      	ldr	r3, [pc, #244]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	4939      	ldr	r1, [pc, #228]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005972:	4313      	orrs	r3, r2
 8005974:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005976:	e03a      	b.n	80059ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d020      	beq.n	80059c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005980:	4b36      	ldr	r3, [pc, #216]	; (8005a5c <HAL_RCC_OscConfig+0x270>)
 8005982:	2201      	movs	r2, #1
 8005984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005986:	f7fc ffbb 	bl	8002900 <HAL_GetTick>
 800598a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800598c:	e008      	b.n	80059a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800598e:	f7fc ffb7 	bl	8002900 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e1a1      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a0:	4b2d      	ldr	r3, [pc, #180]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0f0      	beq.n	800598e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ac:	4b2a      	ldr	r3, [pc, #168]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	4927      	ldr	r1, [pc, #156]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	600b      	str	r3, [r1, #0]
 80059c0:	e015      	b.n	80059ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059c2:	4b26      	ldr	r3, [pc, #152]	; (8005a5c <HAL_RCC_OscConfig+0x270>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c8:	f7fc ff9a 	bl	8002900 <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059d0:	f7fc ff96 	bl	8002900 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e180      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059e2:	4b1d      	ldr	r3, [pc, #116]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1f0      	bne.n	80059d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d03a      	beq.n	8005a70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d019      	beq.n	8005a36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a02:	4b17      	ldr	r3, [pc, #92]	; (8005a60 <HAL_RCC_OscConfig+0x274>)
 8005a04:	2201      	movs	r2, #1
 8005a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a08:	f7fc ff7a 	bl	8002900 <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a10:	f7fc ff76 	bl	8002900 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e160      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a22:	4b0d      	ldr	r3, [pc, #52]	; (8005a58 <HAL_RCC_OscConfig+0x26c>)
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0f0      	beq.n	8005a10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a2e:	2001      	movs	r0, #1
 8005a30:	f000 fa9c 	bl	8005f6c <RCC_Delay>
 8005a34:	e01c      	b.n	8005a70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a36:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <HAL_RCC_OscConfig+0x274>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a3c:	f7fc ff60 	bl	8002900 <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a42:	e00f      	b.n	8005a64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a44:	f7fc ff5c 	bl	8002900 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d908      	bls.n	8005a64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e146      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
 8005a56:	bf00      	nop
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	42420000 	.word	0x42420000
 8005a60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a64:	4b92      	ldr	r3, [pc, #584]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e9      	bne.n	8005a44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 80a6 	beq.w	8005bca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a82:	4b8b      	ldr	r3, [pc, #556]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10d      	bne.n	8005aaa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a8e:	4b88      	ldr	r3, [pc, #544]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	4a87      	ldr	r2, [pc, #540]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a98:	61d3      	str	r3, [r2, #28]
 8005a9a:	4b85      	ldr	r3, [pc, #532]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa2:	60bb      	str	r3, [r7, #8]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aaa:	4b82      	ldr	r3, [pc, #520]	; (8005cb4 <HAL_RCC_OscConfig+0x4c8>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d118      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ab6:	4b7f      	ldr	r3, [pc, #508]	; (8005cb4 <HAL_RCC_OscConfig+0x4c8>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a7e      	ldr	r2, [pc, #504]	; (8005cb4 <HAL_RCC_OscConfig+0x4c8>)
 8005abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ac2:	f7fc ff1d 	bl	8002900 <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aca:	f7fc ff19 	bl	8002900 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b64      	cmp	r3, #100	; 0x64
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e103      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005adc:	4b75      	ldr	r3, [pc, #468]	; (8005cb4 <HAL_RCC_OscConfig+0x4c8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0f0      	beq.n	8005aca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d106      	bne.n	8005afe <HAL_RCC_OscConfig+0x312>
 8005af0:	4b6f      	ldr	r3, [pc, #444]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	4a6e      	ldr	r2, [pc, #440]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005af6:	f043 0301 	orr.w	r3, r3, #1
 8005afa:	6213      	str	r3, [r2, #32]
 8005afc:	e02d      	b.n	8005b5a <HAL_RCC_OscConfig+0x36e>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10c      	bne.n	8005b20 <HAL_RCC_OscConfig+0x334>
 8005b06:	4b6a      	ldr	r3, [pc, #424]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	4a69      	ldr	r2, [pc, #420]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b0c:	f023 0301 	bic.w	r3, r3, #1
 8005b10:	6213      	str	r3, [r2, #32]
 8005b12:	4b67      	ldr	r3, [pc, #412]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	4a66      	ldr	r2, [pc, #408]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b18:	f023 0304 	bic.w	r3, r3, #4
 8005b1c:	6213      	str	r3, [r2, #32]
 8005b1e:	e01c      	b.n	8005b5a <HAL_RCC_OscConfig+0x36e>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	2b05      	cmp	r3, #5
 8005b26:	d10c      	bne.n	8005b42 <HAL_RCC_OscConfig+0x356>
 8005b28:	4b61      	ldr	r3, [pc, #388]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	4a60      	ldr	r2, [pc, #384]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b2e:	f043 0304 	orr.w	r3, r3, #4
 8005b32:	6213      	str	r3, [r2, #32]
 8005b34:	4b5e      	ldr	r3, [pc, #376]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	4a5d      	ldr	r2, [pc, #372]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b3a:	f043 0301 	orr.w	r3, r3, #1
 8005b3e:	6213      	str	r3, [r2, #32]
 8005b40:	e00b      	b.n	8005b5a <HAL_RCC_OscConfig+0x36e>
 8005b42:	4b5b      	ldr	r3, [pc, #364]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	4a5a      	ldr	r2, [pc, #360]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b48:	f023 0301 	bic.w	r3, r3, #1
 8005b4c:	6213      	str	r3, [r2, #32]
 8005b4e:	4b58      	ldr	r3, [pc, #352]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	4a57      	ldr	r2, [pc, #348]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b54:	f023 0304 	bic.w	r3, r3, #4
 8005b58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d015      	beq.n	8005b8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b62:	f7fc fecd 	bl	8002900 <HAL_GetTick>
 8005b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b68:	e00a      	b.n	8005b80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b6a:	f7fc fec9 	bl	8002900 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e0b1      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b80:	4b4b      	ldr	r3, [pc, #300]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0ee      	beq.n	8005b6a <HAL_RCC_OscConfig+0x37e>
 8005b8c:	e014      	b.n	8005bb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b8e:	f7fc feb7 	bl	8002900 <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b94:	e00a      	b.n	8005bac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b96:	f7fc feb3 	bl	8002900 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e09b      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bac:	4b40      	ldr	r3, [pc, #256]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1ee      	bne.n	8005b96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005bb8:	7dfb      	ldrb	r3, [r7, #23]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d105      	bne.n	8005bca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bbe:	4b3c      	ldr	r3, [pc, #240]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	4a3b      	ldr	r2, [pc, #236]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 8087 	beq.w	8005ce2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bd4:	4b36      	ldr	r3, [pc, #216]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f003 030c 	and.w	r3, r3, #12
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d061      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d146      	bne.n	8005c76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be8:	4b33      	ldr	r3, [pc, #204]	; (8005cb8 <HAL_RCC_OscConfig+0x4cc>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bee:	f7fc fe87 	bl	8002900 <HAL_GetTick>
 8005bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf6:	f7fc fe83 	bl	8002900 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e06d      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c08:	4b29      	ldr	r3, [pc, #164]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1f0      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c1c:	d108      	bne.n	8005c30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005c1e:	4b24      	ldr	r3, [pc, #144]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	4921      	ldr	r1, [pc, #132]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c30:	4b1f      	ldr	r3, [pc, #124]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a19      	ldr	r1, [r3, #32]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	430b      	orrs	r3, r1
 8005c42:	491b      	ldr	r1, [pc, #108]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c48:	4b1b      	ldr	r3, [pc, #108]	; (8005cb8 <HAL_RCC_OscConfig+0x4cc>)
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c4e:	f7fc fe57 	bl	8002900 <HAL_GetTick>
 8005c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c54:	e008      	b.n	8005c68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c56:	f7fc fe53 	bl	8002900 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d901      	bls.n	8005c68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e03d      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c68:	4b11      	ldr	r3, [pc, #68]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0f0      	beq.n	8005c56 <HAL_RCC_OscConfig+0x46a>
 8005c74:	e035      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c76:	4b10      	ldr	r3, [pc, #64]	; (8005cb8 <HAL_RCC_OscConfig+0x4cc>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7c:	f7fc fe40 	bl	8002900 <HAL_GetTick>
 8005c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c84:	f7fc fe3c 	bl	8002900 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e026      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c96:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <HAL_RCC_OscConfig+0x4c4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f0      	bne.n	8005c84 <HAL_RCC_OscConfig+0x498>
 8005ca2:	e01e      	b.n	8005ce2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d107      	bne.n	8005cbc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e019      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
 8005cb0:	40021000 	.word	0x40021000
 8005cb4:	40007000 	.word	0x40007000
 8005cb8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <HAL_RCC_OscConfig+0x500>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d106      	bne.n	8005cde <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d001      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	40021000 	.word	0x40021000

08005cf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0d0      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d04:	4b6a      	ldr	r3, [pc, #424]	; (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d910      	bls.n	8005d34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d12:	4b67      	ldr	r3, [pc, #412]	; (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f023 0207 	bic.w	r2, r3, #7
 8005d1a:	4965      	ldr	r1, [pc, #404]	; (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d22:	4b63      	ldr	r3, [pc, #396]	; (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0307 	and.w	r3, r3, #7
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d001      	beq.n	8005d34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e0b8      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d020      	beq.n	8005d82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d4c:	4b59      	ldr	r3, [pc, #356]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	4a58      	ldr	r2, [pc, #352]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d005      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d64:	4b53      	ldr	r3, [pc, #332]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	4a52      	ldr	r2, [pc, #328]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005d6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d70:	4b50      	ldr	r3, [pc, #320]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	494d      	ldr	r1, [pc, #308]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d040      	beq.n	8005e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d107      	bne.n	8005da6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d96:	4b47      	ldr	r3, [pc, #284]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d115      	bne.n	8005dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e07f      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d107      	bne.n	8005dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dae:	4b41      	ldr	r3, [pc, #260]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d109      	bne.n	8005dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e073      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dbe:	4b3d      	ldr	r3, [pc, #244]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e06b      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dce:	4b39      	ldr	r3, [pc, #228]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f023 0203 	bic.w	r2, r3, #3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	4936      	ldr	r1, [pc, #216]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005de0:	f7fc fd8e 	bl	8002900 <HAL_GetTick>
 8005de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005de6:	e00a      	b.n	8005dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005de8:	f7fc fd8a 	bl	8002900 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e053      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dfe:	4b2d      	ldr	r3, [pc, #180]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f003 020c 	and.w	r2, r3, #12
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d1eb      	bne.n	8005de8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e10:	4b27      	ldr	r3, [pc, #156]	; (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d210      	bcs.n	8005e40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e1e:	4b24      	ldr	r3, [pc, #144]	; (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f023 0207 	bic.w	r2, r3, #7
 8005e26:	4922      	ldr	r1, [pc, #136]	; (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e2e:	4b20      	ldr	r3, [pc, #128]	; (8005eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d001      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e032      	b.n	8005ea6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d008      	beq.n	8005e5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e4c:	4b19      	ldr	r3, [pc, #100]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	4916      	ldr	r1, [pc, #88]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d009      	beq.n	8005e7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e6a:	4b12      	ldr	r3, [pc, #72]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	490e      	ldr	r1, [pc, #56]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e7e:	f000 f821 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 8005e82:	4602      	mov	r2, r0
 8005e84:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	091b      	lsrs	r3, r3, #4
 8005e8a:	f003 030f 	and.w	r3, r3, #15
 8005e8e:	490a      	ldr	r1, [pc, #40]	; (8005eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8005e90:	5ccb      	ldrb	r3, [r1, r3]
 8005e92:	fa22 f303 	lsr.w	r3, r2, r3
 8005e96:	4a09      	ldr	r2, [pc, #36]	; (8005ebc <HAL_RCC_ClockConfig+0x1cc>)
 8005e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e9a:	4b09      	ldr	r3, [pc, #36]	; (8005ec0 <HAL_RCC_ClockConfig+0x1d0>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fc fcec 	bl	800287c <HAL_InitTick>

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	40022000 	.word	0x40022000
 8005eb4:	40021000 	.word	0x40021000
 8005eb8:	0800e7e4 	.word	0x0800e7e4
 8005ebc:	20000010 	.word	0x20000010
 8005ec0:	20000014 	.word	0x20000014

08005ec4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60bb      	str	r3, [r7, #8]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	617b      	str	r3, [r7, #20]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005ede:	4b1e      	ldr	r3, [pc, #120]	; (8005f58 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f003 030c 	and.w	r3, r3, #12
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d002      	beq.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x30>
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d003      	beq.n	8005efa <HAL_RCC_GetSysClockFreq+0x36>
 8005ef2:	e027      	b.n	8005f44 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ef4:	4b19      	ldr	r3, [pc, #100]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x98>)
 8005ef6:	613b      	str	r3, [r7, #16]
      break;
 8005ef8:	e027      	b.n	8005f4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	0c9b      	lsrs	r3, r3, #18
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	4a17      	ldr	r2, [pc, #92]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005f04:	5cd3      	ldrb	r3, [r2, r3]
 8005f06:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d010      	beq.n	8005f34 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f12:	4b11      	ldr	r3, [pc, #68]	; (8005f58 <HAL_RCC_GetSysClockFreq+0x94>)
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	0c5b      	lsrs	r3, r3, #17
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	4a11      	ldr	r2, [pc, #68]	; (8005f64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005f1e:	5cd3      	ldrb	r3, [r2, r3]
 8005f20:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a0d      	ldr	r2, [pc, #52]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x98>)
 8005f26:	fb03 f202 	mul.w	r2, r3, r2
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	e004      	b.n	8005f3e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a0c      	ldr	r2, [pc, #48]	; (8005f68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f38:	fb02 f303 	mul.w	r3, r2, r3
 8005f3c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	613b      	str	r3, [r7, #16]
      break;
 8005f42:	e002      	b.n	8005f4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f44:	4b05      	ldr	r3, [pc, #20]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x98>)
 8005f46:	613b      	str	r3, [r7, #16]
      break;
 8005f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f4a:	693b      	ldr	r3, [r7, #16]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bc80      	pop	{r7}
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	007a1200 	.word	0x007a1200
 8005f60:	0800e7f4 	.word	0x0800e7f4
 8005f64:	0800e804 	.word	0x0800e804
 8005f68:	003d0900 	.word	0x003d0900

08005f6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f74:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <RCC_Delay+0x34>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a0a      	ldr	r2, [pc, #40]	; (8005fa4 <RCC_Delay+0x38>)
 8005f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7e:	0a5b      	lsrs	r3, r3, #9
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	fb02 f303 	mul.w	r3, r2, r3
 8005f86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f88:	bf00      	nop
  }
  while (Delay --);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	1e5a      	subs	r2, r3, #1
 8005f8e:	60fa      	str	r2, [r7, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1f9      	bne.n	8005f88 <RCC_Delay+0x1c>
}
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bc80      	pop	{r7}
 8005f9e:	4770      	bx	lr
 8005fa0:	20000010 	.word	0x20000010
 8005fa4:	10624dd3 	.word	0x10624dd3

08005fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d07d      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fc8:	4b4f      	ldr	r3, [pc, #316]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10d      	bne.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fd4:	4b4c      	ldr	r3, [pc, #304]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	4a4b      	ldr	r2, [pc, #300]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fde:	61d3      	str	r3, [r2, #28]
 8005fe0:	4b49      	ldr	r3, [pc, #292]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe8:	60bb      	str	r3, [r7, #8]
 8005fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fec:	2301      	movs	r3, #1
 8005fee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff0:	4b46      	ldr	r3, [pc, #280]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d118      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ffc:	4b43      	ldr	r3, [pc, #268]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a42      	ldr	r2, [pc, #264]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006006:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006008:	f7fc fc7a 	bl	8002900 <HAL_GetTick>
 800600c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800600e:	e008      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006010:	f7fc fc76 	bl	8002900 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b64      	cmp	r3, #100	; 0x64
 800601c:	d901      	bls.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e06d      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006022:	4b3a      	ldr	r3, [pc, #232]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0f0      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800602e:	4b36      	ldr	r3, [pc, #216]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006036:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d02e      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	429a      	cmp	r2, r3
 800604a:	d027      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800604c:	4b2e      	ldr	r3, [pc, #184]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006054:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006056:	4b2e      	ldr	r3, [pc, #184]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006058:	2201      	movs	r2, #1
 800605a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800605c:	4b2c      	ldr	r3, [pc, #176]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800605e:	2200      	movs	r2, #0
 8006060:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006062:	4a29      	ldr	r2, [pc, #164]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d014      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006072:	f7fc fc45 	bl	8002900 <HAL_GetTick>
 8006076:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006078:	e00a      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800607a:	f7fc fc41 	bl	8002900 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	f241 3288 	movw	r2, #5000	; 0x1388
 8006088:	4293      	cmp	r3, r2
 800608a:	d901      	bls.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e036      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006090:	4b1d      	ldr	r3, [pc, #116]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0ee      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800609c:	4b1a      	ldr	r3, [pc, #104]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	4917      	ldr	r1, [pc, #92]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d105      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060b4:	4b14      	ldr	r3, [pc, #80]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	4a13      	ldr	r2, [pc, #76]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d008      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060cc:	4b0e      	ldr	r3, [pc, #56]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	490b      	ldr	r1, [pc, #44]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0310 	and.w	r3, r3, #16
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d008      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060ea:	4b07      	ldr	r3, [pc, #28]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	4904      	ldr	r1, [pc, #16]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	40021000 	.word	0x40021000
 800610c:	40007000 	.word	0x40007000
 8006110:	42420440 	.word	0x42420440

08006114 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e076      	b.n	8006214 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	2b00      	cmp	r3, #0
 800612c:	d108      	bne.n	8006140 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006136:	d009      	beq.n	800614c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	61da      	str	r2, [r3, #28]
 800613e:	e005      	b.n	800614c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fc f9ce 	bl	8002508 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006182:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006194:	431a      	orrs	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	431a      	orrs	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061bc:	431a      	orrs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d0:	ea42 0103 	orr.w	r1, r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	0c1a      	lsrs	r2, r3, #16
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f002 0204 	and.w	r2, r2, #4
 80061f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	69da      	ldr	r2, [r3, #28]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006202:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	603b      	str	r3, [r7, #0]
 8006228:	4613      	mov	r3, r2
 800622a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_SPI_Transmit+0x22>
 800623a:	2302      	movs	r3, #2
 800623c:	e12d      	b.n	800649a <HAL_SPI_Transmit+0x27e>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006246:	f7fc fb5b 	bl	8002900 <HAL_GetTick>
 800624a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800624c:	88fb      	ldrh	r3, [r7, #6]
 800624e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b01      	cmp	r3, #1
 800625a:	d002      	beq.n	8006262 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800625c:	2302      	movs	r3, #2
 800625e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006260:	e116      	b.n	8006490 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <HAL_SPI_Transmit+0x52>
 8006268:	88fb      	ldrh	r3, [r7, #6]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d102      	bne.n	8006274 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006272:	e10d      	b.n	8006490 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2203      	movs	r2, #3
 8006278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	88fa      	ldrh	r2, [r7, #6]
 800628c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	88fa      	ldrh	r2, [r7, #6]
 8006292:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ba:	d10f      	bne.n	80062dc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e6:	2b40      	cmp	r3, #64	; 0x40
 80062e8:	d007      	beq.n	80062fa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006302:	d14f      	bne.n	80063a4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <HAL_SPI_Transmit+0xf6>
 800630c:	8afb      	ldrh	r3, [r7, #22]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d142      	bne.n	8006398 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006316:	881a      	ldrh	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	1c9a      	adds	r2, r3, #2
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800632c:	b29b      	uxth	r3, r3
 800632e:	3b01      	subs	r3, #1
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006336:	e02f      	b.n	8006398 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b02      	cmp	r3, #2
 8006344:	d112      	bne.n	800636c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634a:	881a      	ldrh	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	1c9a      	adds	r2, r3, #2
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006360:	b29b      	uxth	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	86da      	strh	r2, [r3, #54]	; 0x36
 800636a:	e015      	b.n	8006398 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800636c:	f7fc fac8 	bl	8002900 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	429a      	cmp	r2, r3
 800637a:	d803      	bhi.n	8006384 <HAL_SPI_Transmit+0x168>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006382:	d102      	bne.n	800638a <HAL_SPI_Transmit+0x16e>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d106      	bne.n	8006398 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006396:	e07b      	b.n	8006490 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1ca      	bne.n	8006338 <HAL_SPI_Transmit+0x11c>
 80063a2:	e050      	b.n	8006446 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <HAL_SPI_Transmit+0x196>
 80063ac:	8afb      	ldrh	r3, [r7, #22]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d144      	bne.n	800643c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	330c      	adds	r3, #12
 80063bc:	7812      	ldrb	r2, [r2, #0]
 80063be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	3b01      	subs	r3, #1
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80063d8:	e030      	b.n	800643c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d113      	bne.n	8006410 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	330c      	adds	r3, #12
 80063f2:	7812      	ldrb	r2, [r2, #0]
 80063f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	86da      	strh	r2, [r3, #54]	; 0x36
 800640e:	e015      	b.n	800643c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006410:	f7fc fa76 	bl	8002900 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d803      	bhi.n	8006428 <HAL_SPI_Transmit+0x20c>
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006426:	d102      	bne.n	800642e <HAL_SPI_Transmit+0x212>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d106      	bne.n	800643c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800643a:	e029      	b.n	8006490 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1c9      	bne.n	80063da <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 f8b2 	bl	80065b4 <SPI_EndRxTxTransaction>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2220      	movs	r2, #32
 800645a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006464:	2300      	movs	r3, #0
 8006466:	613b      	str	r3, [r7, #16]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	613b      	str	r3, [r7, #16]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	613b      	str	r3, [r7, #16]
 8006478:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	77fb      	strb	r3, [r7, #31]
 8006486:	e003      	b.n	8006490 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006498:	7ffb      	ldrb	r3, [r7, #31]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3720      	adds	r7, #32
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b088      	sub	sp, #32
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	4613      	mov	r3, r2
 80064b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064b4:	f7fc fa24 	bl	8002900 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064bc:	1a9b      	subs	r3, r3, r2
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	4413      	add	r3, r2
 80064c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064c4:	f7fc fa1c 	bl	8002900 <HAL_GetTick>
 80064c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064ca:	4b39      	ldr	r3, [pc, #228]	; (80065b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	015b      	lsls	r3, r3, #5
 80064d0:	0d1b      	lsrs	r3, r3, #20
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	fb02 f303 	mul.w	r3, r2, r3
 80064d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064da:	e054      	b.n	8006586 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e2:	d050      	beq.n	8006586 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064e4:	f7fc fa0c 	bl	8002900 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	69fa      	ldr	r2, [r7, #28]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d902      	bls.n	80064fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d13d      	bne.n	8006576 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006508:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006512:	d111      	bne.n	8006538 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800651c:	d004      	beq.n	8006528 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006526:	d107      	bne.n	8006538 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006536:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006540:	d10f      	bne.n	8006562 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006560:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e017      	b.n	80065a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800657c:	2300      	movs	r3, #0
 800657e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	3b01      	subs	r3, #1
 8006584:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	4013      	ands	r3, r2
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	429a      	cmp	r2, r3
 8006594:	bf0c      	ite	eq
 8006596:	2301      	moveq	r3, #1
 8006598:	2300      	movne	r3, #0
 800659a:	b2db      	uxtb	r3, r3
 800659c:	461a      	mov	r2, r3
 800659e:	79fb      	ldrb	r3, [r7, #7]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d19b      	bne.n	80064dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3720      	adds	r7, #32
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20000010 	.word	0x20000010

080065b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af02      	add	r7, sp, #8
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2200      	movs	r2, #0
 80065c8:	2180      	movs	r1, #128	; 0x80
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f7ff ff6a 	bl	80064a4 <SPI_WaitFlagStateUntilTimeout>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d007      	beq.n	80065e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065da:	f043 0220 	orr.w	r2, r3, #32
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e000      	b.n	80065e8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e041      	b.n	8006686 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d106      	bne.n	800661c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fb ffc2 	bl	80025a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3304      	adds	r3, #4
 800662c:	4619      	mov	r1, r3
 800662e:	4610      	mov	r0, r2
 8006630:	f000 fa82 	bl	8006b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d001      	beq.n	80066a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e044      	b.n	8006732 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 0201 	orr.w	r2, r2, #1
 80066be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a1d      	ldr	r2, [pc, #116]	; (800673c <HAL_TIM_Base_Start_IT+0xac>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d018      	beq.n	80066fc <HAL_TIM_Base_Start_IT+0x6c>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1c      	ldr	r2, [pc, #112]	; (8006740 <HAL_TIM_Base_Start_IT+0xb0>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d013      	beq.n	80066fc <HAL_TIM_Base_Start_IT+0x6c>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066dc:	d00e      	beq.n	80066fc <HAL_TIM_Base_Start_IT+0x6c>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a18      	ldr	r2, [pc, #96]	; (8006744 <HAL_TIM_Base_Start_IT+0xb4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d009      	beq.n	80066fc <HAL_TIM_Base_Start_IT+0x6c>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a16      	ldr	r2, [pc, #88]	; (8006748 <HAL_TIM_Base_Start_IT+0xb8>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d004      	beq.n	80066fc <HAL_TIM_Base_Start_IT+0x6c>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a15      	ldr	r2, [pc, #84]	; (800674c <HAL_TIM_Base_Start_IT+0xbc>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d111      	bne.n	8006720 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2b06      	cmp	r3, #6
 800670c:	d010      	beq.n	8006730 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f042 0201 	orr.w	r2, r2, #1
 800671c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800671e:	e007      	b.n	8006730 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0201 	orr.w	r2, r2, #1
 800672e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr
 800673c:	40012c00 	.word	0x40012c00
 8006740:	40013400 	.word	0x40013400
 8006744:	40000400 	.word	0x40000400
 8006748:	40000800 	.word	0x40000800
 800674c:	40000c00 	.word	0x40000c00

08006750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b02      	cmp	r3, #2
 8006764:	d122      	bne.n	80067ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b02      	cmp	r3, #2
 8006772:	d11b      	bne.n	80067ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f06f 0202 	mvn.w	r2, #2
 800677c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f9b4 	bl	8006b00 <HAL_TIM_IC_CaptureCallback>
 8006798:	e005      	b.n	80067a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f9a7 	bl	8006aee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f9b6 	bl	8006b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f003 0304 	and.w	r3, r3, #4
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d122      	bne.n	8006800 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b04      	cmp	r3, #4
 80067c6:	d11b      	bne.n	8006800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f06f 0204 	mvn.w	r2, #4
 80067d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2202      	movs	r2, #2
 80067d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f98a 	bl	8006b00 <HAL_TIM_IC_CaptureCallback>
 80067ec:	e005      	b.n	80067fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f97d 	bl	8006aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f98c 	bl	8006b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f003 0308 	and.w	r3, r3, #8
 800680a:	2b08      	cmp	r3, #8
 800680c:	d122      	bne.n	8006854 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f003 0308 	and.w	r3, r3, #8
 8006818:	2b08      	cmp	r3, #8
 800681a:	d11b      	bne.n	8006854 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f06f 0208 	mvn.w	r2, #8
 8006824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2204      	movs	r2, #4
 800682a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	f003 0303 	and.w	r3, r3, #3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f960 	bl	8006b00 <HAL_TIM_IC_CaptureCallback>
 8006840:	e005      	b.n	800684e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f953 	bl	8006aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f962 	bl	8006b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	f003 0310 	and.w	r3, r3, #16
 800685e:	2b10      	cmp	r3, #16
 8006860:	d122      	bne.n	80068a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f003 0310 	and.w	r3, r3, #16
 800686c:	2b10      	cmp	r3, #16
 800686e:	d11b      	bne.n	80068a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f06f 0210 	mvn.w	r2, #16
 8006878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2208      	movs	r2, #8
 800687e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f936 	bl	8006b00 <HAL_TIM_IC_CaptureCallback>
 8006894:	e005      	b.n	80068a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f929 	bl	8006aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f938 	bl	8006b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d10e      	bne.n	80068d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d107      	bne.n	80068d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f06f 0201 	mvn.w	r2, #1
 80068cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7fb f9ce 	bl	8001c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068de:	2b80      	cmp	r3, #128	; 0x80
 80068e0:	d10e      	bne.n	8006900 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ec:	2b80      	cmp	r3, #128	; 0x80
 80068ee:	d107      	bne.n	8006900 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 faa1 	bl	8006e42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690a:	2b40      	cmp	r3, #64	; 0x40
 800690c:	d10e      	bne.n	800692c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006918:	2b40      	cmp	r3, #64	; 0x40
 800691a:	d107      	bne.n	800692c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f8fc 	bl	8006b24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b20      	cmp	r3, #32
 8006938:	d10e      	bne.n	8006958 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f003 0320 	and.w	r3, r3, #32
 8006944:	2b20      	cmp	r3, #32
 8006946:	d107      	bne.n	8006958 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f06f 0220 	mvn.w	r2, #32
 8006950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fa6c 	bl	8006e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006958:	bf00      	nop
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_TIM_ConfigClockSource+0x1c>
 8006978:	2302      	movs	r3, #2
 800697a:	e0b4      	b.n	8006ae6 <HAL_TIM_ConfigClockSource+0x186>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800699a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069b4:	d03e      	beq.n	8006a34 <HAL_TIM_ConfigClockSource+0xd4>
 80069b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ba:	f200 8087 	bhi.w	8006acc <HAL_TIM_ConfigClockSource+0x16c>
 80069be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c2:	f000 8086 	beq.w	8006ad2 <HAL_TIM_ConfigClockSource+0x172>
 80069c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ca:	d87f      	bhi.n	8006acc <HAL_TIM_ConfigClockSource+0x16c>
 80069cc:	2b70      	cmp	r3, #112	; 0x70
 80069ce:	d01a      	beq.n	8006a06 <HAL_TIM_ConfigClockSource+0xa6>
 80069d0:	2b70      	cmp	r3, #112	; 0x70
 80069d2:	d87b      	bhi.n	8006acc <HAL_TIM_ConfigClockSource+0x16c>
 80069d4:	2b60      	cmp	r3, #96	; 0x60
 80069d6:	d050      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x11a>
 80069d8:	2b60      	cmp	r3, #96	; 0x60
 80069da:	d877      	bhi.n	8006acc <HAL_TIM_ConfigClockSource+0x16c>
 80069dc:	2b50      	cmp	r3, #80	; 0x50
 80069de:	d03c      	beq.n	8006a5a <HAL_TIM_ConfigClockSource+0xfa>
 80069e0:	2b50      	cmp	r3, #80	; 0x50
 80069e2:	d873      	bhi.n	8006acc <HAL_TIM_ConfigClockSource+0x16c>
 80069e4:	2b40      	cmp	r3, #64	; 0x40
 80069e6:	d058      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0x13a>
 80069e8:	2b40      	cmp	r3, #64	; 0x40
 80069ea:	d86f      	bhi.n	8006acc <HAL_TIM_ConfigClockSource+0x16c>
 80069ec:	2b30      	cmp	r3, #48	; 0x30
 80069ee:	d064      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0x15a>
 80069f0:	2b30      	cmp	r3, #48	; 0x30
 80069f2:	d86b      	bhi.n	8006acc <HAL_TIM_ConfigClockSource+0x16c>
 80069f4:	2b20      	cmp	r3, #32
 80069f6:	d060      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0x15a>
 80069f8:	2b20      	cmp	r3, #32
 80069fa:	d867      	bhi.n	8006acc <HAL_TIM_ConfigClockSource+0x16c>
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d05c      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0x15a>
 8006a00:	2b10      	cmp	r3, #16
 8006a02:	d05a      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0x15a>
 8006a04:	e062      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	6899      	ldr	r1, [r3, #8]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f000 f980 	bl	8006d1a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	609a      	str	r2, [r3, #8]
      break;
 8006a32:	e04f      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6818      	ldr	r0, [r3, #0]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	6899      	ldr	r1, [r3, #8]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f000 f969 	bl	8006d1a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689a      	ldr	r2, [r3, #8]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a56:	609a      	str	r2, [r3, #8]
      break;
 8006a58:	e03c      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	6859      	ldr	r1, [r3, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	461a      	mov	r2, r3
 8006a68:	f000 f8e0 	bl	8006c2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2150      	movs	r1, #80	; 0x50
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 f937 	bl	8006ce6 <TIM_ITRx_SetConfig>
      break;
 8006a78:	e02c      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6818      	ldr	r0, [r3, #0]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	6859      	ldr	r1, [r3, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	461a      	mov	r2, r3
 8006a88:	f000 f8fe 	bl	8006c88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2160      	movs	r1, #96	; 0x60
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 f927 	bl	8006ce6 <TIM_ITRx_SetConfig>
      break;
 8006a98:	e01c      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	6859      	ldr	r1, [r3, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f000 f8c0 	bl	8006c2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2140      	movs	r1, #64	; 0x40
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 f917 	bl	8006ce6 <TIM_ITRx_SetConfig>
      break;
 8006ab8:	e00c      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	f000 f90e 	bl	8006ce6 <TIM_ITRx_SetConfig>
      break;
 8006aca:	e003      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad0:	e000      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ad2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bc80      	pop	{r7}
 8006afe:	4770      	bx	lr

08006b00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bc80      	pop	{r7}
 8006b10:	4770      	bx	lr

08006b12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b083      	sub	sp, #12
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b1a:	bf00      	nop
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bc80      	pop	{r7}
 8006b22:	4770      	bx	lr

08006b24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr
	...

08006b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a33      	ldr	r2, [pc, #204]	; (8006c18 <TIM_Base_SetConfig+0xe0>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d013      	beq.n	8006b78 <TIM_Base_SetConfig+0x40>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a32      	ldr	r2, [pc, #200]	; (8006c1c <TIM_Base_SetConfig+0xe4>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00f      	beq.n	8006b78 <TIM_Base_SetConfig+0x40>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b5e:	d00b      	beq.n	8006b78 <TIM_Base_SetConfig+0x40>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a2f      	ldr	r2, [pc, #188]	; (8006c20 <TIM_Base_SetConfig+0xe8>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d007      	beq.n	8006b78 <TIM_Base_SetConfig+0x40>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a2e      	ldr	r2, [pc, #184]	; (8006c24 <TIM_Base_SetConfig+0xec>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d003      	beq.n	8006b78 <TIM_Base_SetConfig+0x40>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a2d      	ldr	r2, [pc, #180]	; (8006c28 <TIM_Base_SetConfig+0xf0>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d108      	bne.n	8006b8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a22      	ldr	r2, [pc, #136]	; (8006c18 <TIM_Base_SetConfig+0xe0>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d013      	beq.n	8006bba <TIM_Base_SetConfig+0x82>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a21      	ldr	r2, [pc, #132]	; (8006c1c <TIM_Base_SetConfig+0xe4>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d00f      	beq.n	8006bba <TIM_Base_SetConfig+0x82>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba0:	d00b      	beq.n	8006bba <TIM_Base_SetConfig+0x82>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a1e      	ldr	r2, [pc, #120]	; (8006c20 <TIM_Base_SetConfig+0xe8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d007      	beq.n	8006bba <TIM_Base_SetConfig+0x82>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a1d      	ldr	r2, [pc, #116]	; (8006c24 <TIM_Base_SetConfig+0xec>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d003      	beq.n	8006bba <TIM_Base_SetConfig+0x82>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a1c      	ldr	r2, [pc, #112]	; (8006c28 <TIM_Base_SetConfig+0xf0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d108      	bne.n	8006bcc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a09      	ldr	r2, [pc, #36]	; (8006c18 <TIM_Base_SetConfig+0xe0>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d003      	beq.n	8006c00 <TIM_Base_SetConfig+0xc8>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a08      	ldr	r2, [pc, #32]	; (8006c1c <TIM_Base_SetConfig+0xe4>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d103      	bne.n	8006c08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	691a      	ldr	r2, [r3, #16]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	615a      	str	r2, [r3, #20]
}
 8006c0e:	bf00      	nop
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr
 8006c18:	40012c00 	.word	0x40012c00
 8006c1c:	40013400 	.word	0x40013400
 8006c20:	40000400 	.word	0x40000400
 8006c24:	40000800 	.word	0x40000800
 8006c28:	40000c00 	.word	0x40000c00

08006c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	f023 0201 	bic.w	r2, r3, #1
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f023 030a 	bic.w	r3, r3, #10
 8006c68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	621a      	str	r2, [r3, #32]
}
 8006c7e:	bf00      	nop
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bc80      	pop	{r7}
 8006c86:	4770      	bx	lr

08006c88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	f023 0210 	bic.w	r2, r3, #16
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	031b      	lsls	r3, r3, #12
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	621a      	str	r2, [r3, #32]
}
 8006cdc:	bf00      	nop
 8006cde:	371c      	adds	r7, #28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bc80      	pop	{r7}
 8006ce4:	4770      	bx	lr

08006ce6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b085      	sub	sp, #20
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	f043 0307 	orr.w	r3, r3, #7
 8006d08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	609a      	str	r2, [r3, #8]
}
 8006d10:	bf00      	nop
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bc80      	pop	{r7}
 8006d18:	4770      	bx	lr

08006d1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b087      	sub	sp, #28
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	60f8      	str	r0, [r7, #12]
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	607a      	str	r2, [r7, #4]
 8006d26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	021a      	lsls	r2, r3, #8
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	609a      	str	r2, [r3, #8]
}
 8006d4e:	bf00      	nop
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr

08006d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d101      	bne.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	e050      	b.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a1b      	ldr	r2, [pc, #108]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d018      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a19      	ldr	r2, [pc, #100]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d013      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc6:	d00e      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a15      	ldr	r2, [pc, #84]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d009      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a14      	ldr	r2, [pc, #80]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d004      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a12      	ldr	r2, [pc, #72]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d10c      	bne.n	8006e00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bc80      	pop	{r7}
 8006e1a:	4770      	bx	lr
 8006e1c:	40012c00 	.word	0x40012c00
 8006e20:	40013400 	.word	0x40013400
 8006e24:	40000400 	.word	0x40000400
 8006e28:	40000800 	.word	0x40000800
 8006e2c:	40000c00 	.word	0x40000c00

08006e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr

08006e42 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc80      	pop	{r7}
 8006e52:	4770      	bx	lr

08006e54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006e54:	b084      	sub	sp, #16
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	f107 0014 	add.w	r0, r7, #20
 8006e62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	b004      	add	sp, #16
 8006e72:	4770      	bx	lr

08006e74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006e84:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006e88:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bc80      	pop	{r7}
 8006e9e:	4770      	bx	lr

08006ea0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006ea8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006eac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	43db      	mvns	r3, r3
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bc80      	pop	{r7}
 8006ed2:	4770      	bx	lr

08006ed4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bc80      	pop	{r7}
 8006eea:	4770      	bx	lr

08006eec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006eec:	b084      	sub	sp, #16
 8006eee:	b480      	push	{r7}
 8006ef0:	b083      	sub	sp, #12
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	f107 0014 	add.w	r0, r7, #20
 8006efa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bc80      	pop	{r7}
 8006f28:	b004      	add	sp, #16
 8006f2a:	4770      	bx	lr

08006f2c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b09d      	sub	sp, #116	; 0x74
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f52:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	78db      	ldrb	r3, [r3, #3]
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d81f      	bhi.n	8006f9e <USB_ActivateEndpoint+0x72>
 8006f5e:	a201      	add	r2, pc, #4	; (adr r2, 8006f64 <USB_ActivateEndpoint+0x38>)
 8006f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f64:	08006f75 	.word	0x08006f75
 8006f68:	08006f91 	.word	0x08006f91
 8006f6c:	08006fa7 	.word	0x08006fa7
 8006f70:	08006f83 	.word	0x08006f83
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006f74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006f78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f7c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006f80:	e012      	b.n	8006fa8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006f82:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006f86:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006f8a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006f8e:	e00b      	b.n	8006fa8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006f90:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006f94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f98:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006f9c:	e004      	b.n	8006fa8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006fa4:	e000      	b.n	8006fa8 <USB_ActivateEndpoint+0x7c>
      break;
 8006fa6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	441a      	add	r2, r3
 8006fb2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4413      	add	r3, r2
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	441a      	add	r2, r3
 8006ff8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800700c:	b29b      	uxth	r3, r3
 800700e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	7b1b      	ldrb	r3, [r3, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	f040 8178 	bne.w	800730a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	785b      	ldrb	r3, [r3, #1]
 800701e:	2b00      	cmp	r3, #0
 8007020:	f000 8084 	beq.w	800712c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	61bb      	str	r3, [r7, #24]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800702e:	b29b      	uxth	r3, r3
 8007030:	461a      	mov	r2, r3
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	4413      	add	r3, r2
 8007036:	61bb      	str	r3, [r7, #24]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	011a      	lsls	r2, r3, #4
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	88db      	ldrh	r3, [r3, #6]
 800704c:	085b      	lsrs	r3, r3, #1
 800704e:	b29b      	uxth	r3, r3
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	b29a      	uxth	r2, r3
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	827b      	strh	r3, [r7, #18]
 8007066:	8a7b      	ldrh	r3, [r7, #18]
 8007068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706c:	2b00      	cmp	r3, #0
 800706e:	d01b      	beq.n	80070a8 <USB_ActivateEndpoint+0x17c>
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	b29b      	uxth	r3, r3
 800707e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007086:	823b      	strh	r3, [r7, #16]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	441a      	add	r2, r3
 8007092:	8a3b      	ldrh	r3, [r7, #16]
 8007094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800709c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	78db      	ldrb	r3, [r3, #3]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d020      	beq.n	80070f2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	b29b      	uxth	r3, r3
 80070be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070c6:	81bb      	strh	r3, [r7, #12]
 80070c8:	89bb      	ldrh	r3, [r7, #12]
 80070ca:	f083 0320 	eor.w	r3, r3, #32
 80070ce:	81bb      	strh	r3, [r7, #12]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	441a      	add	r2, r3
 80070da:	89bb      	ldrh	r3, [r7, #12]
 80070dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	8013      	strh	r3, [r2, #0]
 80070f0:	e2d5      	b.n	800769e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007108:	81fb      	strh	r3, [r7, #14]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	441a      	add	r2, r3
 8007114:	89fb      	ldrh	r3, [r7, #14]
 8007116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800711a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800711e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007126:	b29b      	uxth	r3, r3
 8007128:	8013      	strh	r3, [r2, #0]
 800712a:	e2b8      	b.n	800769e <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	633b      	str	r3, [r7, #48]	; 0x30
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007136:	b29b      	uxth	r3, r3
 8007138:	461a      	mov	r2, r3
 800713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713c:	4413      	add	r3, r2
 800713e:	633b      	str	r3, [r7, #48]	; 0x30
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	011a      	lsls	r2, r3, #4
 8007146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007148:	4413      	add	r3, r2
 800714a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800714e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	88db      	ldrh	r3, [r3, #6]
 8007154:	085b      	lsrs	r3, r3, #1
 8007156:	b29b      	uxth	r3, r3
 8007158:	005b      	lsls	r3, r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	62bb      	str	r3, [r7, #40]	; 0x28
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800716a:	b29b      	uxth	r3, r3
 800716c:	461a      	mov	r2, r3
 800716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007170:	4413      	add	r3, r2
 8007172:	62bb      	str	r3, [r7, #40]	; 0x28
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	011a      	lsls	r2, r3, #4
 800717a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717c:	4413      	add	r3, r2
 800717e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007182:	627b      	str	r3, [r7, #36]	; 0x24
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	b29b      	uxth	r3, r3
 800718a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800718e:	b29a      	uxth	r2, r3
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	801a      	strh	r2, [r3, #0]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	2b3e      	cmp	r3, #62	; 0x3e
 800719a:	d91d      	bls.n	80071d8 <USB_ActivateEndpoint+0x2ac>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	095b      	lsrs	r3, r3, #5
 80071a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	f003 031f 	and.w	r3, r3, #31
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d102      	bne.n	80071b6 <USB_ActivateEndpoint+0x28a>
 80071b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071b2:	3b01      	subs	r3, #1
 80071b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071be:	b29b      	uxth	r3, r3
 80071c0:	029b      	lsls	r3, r3, #10
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	4313      	orrs	r3, r2
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d4:	801a      	strh	r2, [r3, #0]
 80071d6:	e026      	b.n	8007226 <USB_ActivateEndpoint+0x2fa>
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10a      	bne.n	80071f6 <USB_ActivateEndpoint+0x2ca>
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	801a      	strh	r2, [r3, #0]
 80071f4:	e017      	b.n	8007226 <USB_ActivateEndpoint+0x2fa>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	085b      	lsrs	r3, r3, #1
 80071fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <USB_ActivateEndpoint+0x2e4>
 800720a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800720c:	3301      	adds	r3, #1
 800720e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	881b      	ldrh	r3, [r3, #0]
 8007214:	b29a      	uxth	r2, r3
 8007216:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007218:	b29b      	uxth	r3, r3
 800721a:	029b      	lsls	r3, r3, #10
 800721c:	b29b      	uxth	r3, r3
 800721e:	4313      	orrs	r3, r2
 8007220:	b29a      	uxth	r2, r3
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	881b      	ldrh	r3, [r3, #0]
 8007232:	847b      	strh	r3, [r7, #34]	; 0x22
 8007234:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d01b      	beq.n	8007276 <USB_ActivateEndpoint+0x34a>
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	b29b      	uxth	r3, r3
 800724c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007254:	843b      	strh	r3, [r7, #32]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	441a      	add	r2, r3
 8007260:	8c3b      	ldrh	r3, [r7, #32]
 8007262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800726a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800726e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007272:	b29b      	uxth	r3, r3
 8007274:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d124      	bne.n	80072c8 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007294:	83bb      	strh	r3, [r7, #28]
 8007296:	8bbb      	ldrh	r3, [r7, #28]
 8007298:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800729c:	83bb      	strh	r3, [r7, #28]
 800729e:	8bbb      	ldrh	r3, [r7, #28]
 80072a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80072a4:	83bb      	strh	r3, [r7, #28]
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	441a      	add	r2, r3
 80072b0:	8bbb      	ldrh	r3, [r7, #28]
 80072b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	8013      	strh	r3, [r2, #0]
 80072c6:	e1ea      	b.n	800769e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072de:	83fb      	strh	r3, [r7, #30]
 80072e0:	8bfb      	ldrh	r3, [r7, #30]
 80072e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80072e6:	83fb      	strh	r3, [r7, #30]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	441a      	add	r2, r3
 80072f2:	8bfb      	ldrh	r3, [r7, #30]
 80072f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007304:	b29b      	uxth	r3, r3
 8007306:	8013      	strh	r3, [r2, #0]
 8007308:	e1c9      	b.n	800769e <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	78db      	ldrb	r3, [r3, #3]
 800730e:	2b02      	cmp	r3, #2
 8007310:	d11e      	bne.n	8007350 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	b29b      	uxth	r3, r3
 8007320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007328:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	441a      	add	r2, r3
 8007336:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800733a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800733e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007342:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800734a:	b29b      	uxth	r3, r3
 800734c:	8013      	strh	r3, [r2, #0]
 800734e:	e01d      	b.n	800738c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4413      	add	r3, r2
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	b29b      	uxth	r3, r3
 800735e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007366:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	441a      	add	r2, r3
 8007374:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800737c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007388:	b29b      	uxth	r3, r3
 800738a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007396:	b29b      	uxth	r3, r3
 8007398:	461a      	mov	r2, r3
 800739a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800739c:	4413      	add	r3, r2
 800739e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	011a      	lsls	r2, r3, #4
 80073a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	891b      	ldrh	r3, [r3, #8]
 80073b4:	085b      	lsrs	r3, r3, #1
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073be:	801a      	strh	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	657b      	str	r3, [r7, #84]	; 0x54
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	461a      	mov	r2, r3
 80073ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073d0:	4413      	add	r3, r2
 80073d2:	657b      	str	r3, [r7, #84]	; 0x54
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	011a      	lsls	r2, r3, #4
 80073da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80073e2:	653b      	str	r3, [r7, #80]	; 0x50
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	895b      	ldrh	r3, [r3, #10]
 80073e8:	085b      	lsrs	r3, r3, #1
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073f2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	785b      	ldrb	r3, [r3, #1]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f040 8093 	bne.w	8007524 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800740e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d01b      	beq.n	8007452 <USB_ActivateEndpoint+0x526>
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800742c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007430:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	441a      	add	r2, r3
 800743c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800743e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007446:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800744a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800744e:	b29b      	uxth	r3, r3
 8007450:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007460:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007466:	2b00      	cmp	r3, #0
 8007468:	d01b      	beq.n	80074a2 <USB_ActivateEndpoint+0x576>
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	b29b      	uxth	r3, r3
 8007478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800747c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007480:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	441a      	add	r2, r3
 800748c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800748e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800749a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800749e:	b29b      	uxth	r3, r3
 80074a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b8:	873b      	strh	r3, [r7, #56]	; 0x38
 80074ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80074bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074c0:	873b      	strh	r3, [r7, #56]	; 0x38
 80074c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80074c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074c8:	873b      	strh	r3, [r7, #56]	; 0x38
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	441a      	add	r2, r3
 80074d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80074d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007500:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	441a      	add	r2, r3
 800750c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800750e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800751a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800751e:	b29b      	uxth	r3, r3
 8007520:	8013      	strh	r3, [r2, #0]
 8007522:	e0bc      	b.n	800769e <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	881b      	ldrh	r3, [r3, #0]
 8007530:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007534:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d01d      	beq.n	800757c <USB_ActivateEndpoint+0x650>
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	b29b      	uxth	r3, r3
 800754e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007556:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	441a      	add	r2, r3
 8007564:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800756c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007570:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007578:	b29b      	uxth	r3, r3
 800757a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800758c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007594:	2b00      	cmp	r3, #0
 8007596:	d01d      	beq.n	80075d4 <USB_ActivateEndpoint+0x6a8>
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	441a      	add	r2, r3
 80075bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80075c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	78db      	ldrb	r3, [r3, #3]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d024      	beq.n	8007626 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80075f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80075fa:	f083 0320 	eor.w	r3, r3, #32
 80075fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	441a      	add	r2, r3
 800760c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800761c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007620:	b29b      	uxth	r3, r3
 8007622:	8013      	strh	r3, [r2, #0]
 8007624:	e01d      	b.n	8007662 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	b29b      	uxth	r3, r3
 8007634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800763c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	441a      	add	r2, r3
 800764a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800764e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800765a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800765e:	b29b      	uxth	r3, r3
 8007660:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007678:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	441a      	add	r2, r3
 8007686:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800768a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800768e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800769a:	b29b      	uxth	r3, r3
 800769c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800769e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3774      	adds	r7, #116	; 0x74
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bc80      	pop	{r7}
 80076aa:	4770      	bx	lr

080076ac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b08d      	sub	sp, #52	; 0x34
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	7b1b      	ldrb	r3, [r3, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f040 808e 	bne.w	80077dc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	785b      	ldrb	r3, [r3, #1]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d044      	beq.n	8007752 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	81bb      	strh	r3, [r7, #12]
 80076d6:	89bb      	ldrh	r3, [r7, #12]
 80076d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d01b      	beq.n	8007718 <USB_DeactivateEndpoint+0x6c>
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f6:	817b      	strh	r3, [r7, #10]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	441a      	add	r2, r3
 8007702:	897b      	ldrh	r3, [r7, #10]
 8007704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800770c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007710:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007714:	b29b      	uxth	r3, r3
 8007716:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	b29b      	uxth	r3, r3
 8007726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800772a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800772e:	813b      	strh	r3, [r7, #8]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	441a      	add	r2, r3
 800773a:	893b      	ldrh	r3, [r7, #8]
 800773c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800774c:	b29b      	uxth	r3, r3
 800774e:	8013      	strh	r3, [r2, #0]
 8007750:	e192      	b.n	8007a78 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	827b      	strh	r3, [r7, #18]
 8007760:	8a7b      	ldrh	r3, [r7, #18]
 8007762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d01b      	beq.n	80077a2 <USB_DeactivateEndpoint+0xf6>
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007780:	823b      	strh	r3, [r7, #16]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	441a      	add	r2, r3
 800778c:	8a3b      	ldrh	r3, [r7, #16]
 800778e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007796:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800779a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800779e:	b29b      	uxth	r3, r3
 80077a0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b8:	81fb      	strh	r3, [r7, #14]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	441a      	add	r2, r3
 80077c4:	89fb      	ldrh	r3, [r7, #14]
 80077c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	8013      	strh	r3, [r2, #0]
 80077da:	e14d      	b.n	8007a78 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	785b      	ldrb	r3, [r3, #1]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f040 80a5 	bne.w	8007930 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	843b      	strh	r3, [r7, #32]
 80077f4:	8c3b      	ldrh	r3, [r7, #32]
 80077f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d01b      	beq.n	8007836 <USB_DeactivateEndpoint+0x18a>
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	b29b      	uxth	r3, r3
 800780c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007814:	83fb      	strh	r3, [r7, #30]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	441a      	add	r2, r3
 8007820:	8bfb      	ldrh	r3, [r7, #30]
 8007822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800782a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800782e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007832:	b29b      	uxth	r3, r3
 8007834:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	83bb      	strh	r3, [r7, #28]
 8007844:	8bbb      	ldrh	r3, [r7, #28]
 8007846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784a:	2b00      	cmp	r3, #0
 800784c:	d01b      	beq.n	8007886 <USB_DeactivateEndpoint+0x1da>
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	881b      	ldrh	r3, [r3, #0]
 800785a:	b29b      	uxth	r3, r3
 800785c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007864:	837b      	strh	r3, [r7, #26]
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	441a      	add	r2, r3
 8007870:	8b7b      	ldrh	r3, [r7, #26]
 8007872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800787a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800787e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007882:	b29b      	uxth	r3, r3
 8007884:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	b29b      	uxth	r3, r3
 8007894:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800789c:	833b      	strh	r3, [r7, #24]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	441a      	add	r2, r3
 80078a8:	8b3b      	ldrh	r3, [r7, #24]
 80078aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d4:	82fb      	strh	r3, [r7, #22]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	441a      	add	r2, r3
 80078e0:	8afb      	ldrh	r3, [r7, #22]
 80078e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b29b      	uxth	r3, r3
 8007904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800790c:	82bb      	strh	r3, [r7, #20]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	441a      	add	r2, r3
 8007918:	8abb      	ldrh	r3, [r7, #20]
 800791a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800791e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800792a:	b29b      	uxth	r3, r3
 800792c:	8013      	strh	r3, [r2, #0]
 800792e:	e0a3      	b.n	8007a78 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	881b      	ldrh	r3, [r3, #0]
 800793c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800793e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d01b      	beq.n	8007980 <USB_DeactivateEndpoint+0x2d4>
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	b29b      	uxth	r3, r3
 8007956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800795a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800795e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	441a      	add	r2, r3
 800796a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800796c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800797c:	b29b      	uxth	r3, r3
 800797e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800798e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007994:	2b00      	cmp	r3, #0
 8007996:	d01b      	beq.n	80079d0 <USB_DeactivateEndpoint+0x324>
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ae:	853b      	strh	r3, [r7, #40]	; 0x28
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	441a      	add	r2, r3
 80079ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80079bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4413      	add	r3, r2
 80079da:	881b      	ldrh	r3, [r3, #0]
 80079dc:	b29b      	uxth	r3, r3
 80079de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	441a      	add	r2, r3
 80079f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	881b      	ldrh	r3, [r3, #0]
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a1e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	441a      	add	r2, r3
 8007a2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	881b      	ldrh	r3, [r3, #0]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a56:	847b      	strh	r3, [r7, #34]	; 0x22
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	441a      	add	r2, r3
 8007a62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3734      	adds	r7, #52	; 0x34
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bc80      	pop	{r7}
 8007a82:	4770      	bx	lr

08007a84 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b0c2      	sub	sp, #264	; 0x108
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a92:	6018      	str	r0, [r3, #0]
 8007a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a9c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	785b      	ldrb	r3, [r3, #1]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	f040 86b7 	bne.w	800881e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	699a      	ldr	r2, [r3, #24]
 8007abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d908      	bls.n	8007ade <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007adc:	e007      	b.n	8007aee <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	7b1b      	ldrb	r3, [r3, #12]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d13a      	bne.n	8007b74 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6959      	ldr	r1, [r3, #20]
 8007b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	88da      	ldrh	r2, [r3, #6]
 8007b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007b20:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007b24:	6800      	ldr	r0, [r0, #0]
 8007b26:	f001 fc9c 	bl	8009462 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	613b      	str	r3, [r7, #16]
 8007b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	461a      	mov	r2, r3
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	613b      	str	r3, [r7, #16]
 8007b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	011a      	lsls	r2, r3, #4
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	801a      	strh	r2, [r3, #0]
 8007b70:	f000 be1f 	b.w	80087b2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	78db      	ldrb	r3, [r3, #3]
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	f040 8462 	bne.w	800844a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6a1a      	ldr	r2, [r3, #32]
 8007b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	f240 83df 	bls.w	8008362 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	881b      	ldrh	r3, [r3, #0]
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	441a      	add	r2, r3
 8007be8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	6a1a      	ldr	r2, [r3, #32]
 8007c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c10:	1ad2      	subs	r2, r2, r3
 8007c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 81c7 	beq.w	8007fd4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	633b      	str	r3, [r7, #48]	; 0x30
 8007c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	785b      	ldrb	r3, [r3, #1]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d177      	bne.n	8007d52 <USB_EPStartXfer+0x2ce>
 8007c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	461a      	mov	r2, r3
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	4413      	add	r3, r2
 8007c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	011a      	lsls	r2, r3, #4
 8007c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c96:	4413      	add	r3, r2
 8007c98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	801a      	strh	r2, [r3, #0]
 8007cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cb2:	2b3e      	cmp	r3, #62	; 0x3e
 8007cb4:	d921      	bls.n	8007cfa <USB_EPStartXfer+0x276>
 8007cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cba:	095b      	lsrs	r3, r3, #5
 8007cbc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cc4:	f003 031f 	and.w	r3, r3, #31
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d104      	bne.n	8007cd6 <USB_EPStartXfer+0x252>
 8007ccc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	029b      	lsls	r3, r3, #10
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	801a      	strh	r2, [r3, #0]
 8007cf8:	e050      	b.n	8007d9c <USB_EPStartXfer+0x318>
 8007cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10a      	bne.n	8007d18 <USB_EPStartXfer+0x294>
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d14:	801a      	strh	r2, [r3, #0]
 8007d16:	e041      	b.n	8007d9c <USB_EPStartXfer+0x318>
 8007d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d1c:	085b      	lsrs	r3, r3, #1
 8007d1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d004      	beq.n	8007d38 <USB_EPStartXfer+0x2b4>
 8007d2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d32:	3301      	adds	r3, #1
 8007d34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	881b      	ldrh	r3, [r3, #0]
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	029b      	lsls	r3, r3, #10
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	801a      	strh	r2, [r3, #0]
 8007d50:	e024      	b.n	8007d9c <USB_EPStartXfer+0x318>
 8007d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	785b      	ldrb	r3, [r3, #1]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d11c      	bne.n	8007d9c <USB_EPStartXfer+0x318>
 8007d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	461a      	mov	r2, r3
 8007d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d76:	4413      	add	r3, r2
 8007d78:	633b      	str	r3, [r7, #48]	; 0x30
 8007d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	011a      	lsls	r2, r3, #4
 8007d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	895b      	ldrh	r3, [r3, #10]
 8007da8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6959      	ldr	r1, [r3, #20]
 8007db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007dc2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007dc6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007dca:	6800      	ldr	r0, [r0, #0]
 8007dcc:	f001 fb49 	bl	8009462 <USB_WritePMA>
            ep->xfer_buff += len;
 8007dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	695a      	ldr	r2, [r3, #20]
 8007ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007de0:	441a      	add	r2, r3
 8007de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007de6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6a1a      	ldr	r2, [r3, #32]
 8007dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d90f      	bls.n	8007e2a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6a1a      	ldr	r2, [r3, #32]
 8007e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e1a:	1ad2      	subs	r2, r2, r3
 8007e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	621a      	str	r2, [r3, #32]
 8007e28:	e00e      	b.n	8007e48 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2200      	movs	r2, #0
 8007e46:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	785b      	ldrb	r3, [r3, #1]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d177      	bne.n	8007f48 <USB_EPStartXfer+0x4c4>
 8007e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	61bb      	str	r3, [r7, #24]
 8007e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	461a      	mov	r2, r3
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	4413      	add	r3, r2
 8007e7a:	61bb      	str	r3, [r7, #24]
 8007e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	011a      	lsls	r2, r3, #4
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e92:	617b      	str	r3, [r7, #20]
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	801a      	strh	r2, [r3, #0]
 8007ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ea8:	2b3e      	cmp	r3, #62	; 0x3e
 8007eaa:	d921      	bls.n	8007ef0 <USB_EPStartXfer+0x46c>
 8007eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eb0:	095b      	lsrs	r3, r3, #5
 8007eb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eba:	f003 031f 	and.w	r3, r3, #31
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d104      	bne.n	8007ecc <USB_EPStartXfer+0x448>
 8007ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	029b      	lsls	r3, r3, #10
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	4313      	orrs	r3, r2
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	801a      	strh	r2, [r3, #0]
 8007eee:	e056      	b.n	8007f9e <USB_EPStartXfer+0x51a>
 8007ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10a      	bne.n	8007f0e <USB_EPStartXfer+0x48a>
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	801a      	strh	r2, [r3, #0]
 8007f0c:	e047      	b.n	8007f9e <USB_EPStartXfer+0x51a>
 8007f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f12:	085b      	lsrs	r3, r3, #1
 8007f14:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d004      	beq.n	8007f2e <USB_EPStartXfer+0x4aa>
 8007f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f28:	3301      	adds	r3, #1
 8007f2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	881b      	ldrh	r3, [r3, #0]
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	029b      	lsls	r3, r3, #10
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	801a      	strh	r2, [r3, #0]
 8007f46:	e02a      	b.n	8007f9e <USB_EPStartXfer+0x51a>
 8007f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	785b      	ldrb	r3, [r3, #1]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d122      	bne.n	8007f9e <USB_EPStartXfer+0x51a>
 8007f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	623b      	str	r3, [r7, #32]
 8007f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	461a      	mov	r2, r3
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	4413      	add	r3, r2
 8007f7a:	623b      	str	r3, [r7, #32]
 8007f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	011a      	lsls	r2, r3, #4
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f92:	61fb      	str	r3, [r7, #28]
 8007f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	891b      	ldrh	r3, [r3, #8]
 8007faa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6959      	ldr	r1, [r3, #20]
 8007fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007fc4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007fc8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007fcc:	6800      	ldr	r0, [r0, #0]
 8007fce:	f001 fa48 	bl	8009462 <USB_WritePMA>
 8007fd2:	e3ee      	b.n	80087b2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	785b      	ldrb	r3, [r3, #1]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d177      	bne.n	80080d4 <USB_EPStartXfer+0x650>
 8007fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	461a      	mov	r2, r3
 8008002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008004:	4413      	add	r3, r2
 8008006:	64bb      	str	r3, [r7, #72]	; 0x48
 8008008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800800c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	011a      	lsls	r2, r3, #4
 8008016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008018:	4413      	add	r3, r2
 800801a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800801e:	647b      	str	r3, [r7, #68]	; 0x44
 8008020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008022:	881b      	ldrh	r3, [r3, #0]
 8008024:	b29b      	uxth	r3, r3
 8008026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800802a:	b29a      	uxth	r2, r3
 800802c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800802e:	801a      	strh	r2, [r3, #0]
 8008030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008034:	2b3e      	cmp	r3, #62	; 0x3e
 8008036:	d921      	bls.n	800807c <USB_EPStartXfer+0x5f8>
 8008038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800803c:	095b      	lsrs	r3, r3, #5
 800803e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008046:	f003 031f 	and.w	r3, r3, #31
 800804a:	2b00      	cmp	r3, #0
 800804c:	d104      	bne.n	8008058 <USB_EPStartXfer+0x5d4>
 800804e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008052:	3b01      	subs	r3, #1
 8008054:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b29a      	uxth	r2, r3
 800805e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008062:	b29b      	uxth	r3, r3
 8008064:	029b      	lsls	r3, r3, #10
 8008066:	b29b      	uxth	r3, r3
 8008068:	4313      	orrs	r3, r2
 800806a:	b29b      	uxth	r3, r3
 800806c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008074:	b29a      	uxth	r2, r3
 8008076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008078:	801a      	strh	r2, [r3, #0]
 800807a:	e056      	b.n	800812a <USB_EPStartXfer+0x6a6>
 800807c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10a      	bne.n	800809a <USB_EPStartXfer+0x616>
 8008084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	b29b      	uxth	r3, r3
 800808a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800808e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008092:	b29a      	uxth	r2, r3
 8008094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008096:	801a      	strh	r2, [r3, #0]
 8008098:	e047      	b.n	800812a <USB_EPStartXfer+0x6a6>
 800809a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800809e:	085b      	lsrs	r3, r3, #1
 80080a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80080a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d004      	beq.n	80080ba <USB_EPStartXfer+0x636>
 80080b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080b4:	3301      	adds	r3, #1
 80080b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80080ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	b29a      	uxth	r2, r3
 80080c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	029b      	lsls	r3, r3, #10
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	4313      	orrs	r3, r2
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080d0:	801a      	strh	r2, [r3, #0]
 80080d2:	e02a      	b.n	800812a <USB_EPStartXfer+0x6a6>
 80080d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	785b      	ldrb	r3, [r3, #1]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d122      	bne.n	800812a <USB_EPStartXfer+0x6a6>
 80080e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	653b      	str	r3, [r7, #80]	; 0x50
 80080f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080fe:	b29b      	uxth	r3, r3
 8008100:	461a      	mov	r2, r3
 8008102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008104:	4413      	add	r3, r2
 8008106:	653b      	str	r3, [r7, #80]	; 0x50
 8008108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	011a      	lsls	r2, r3, #4
 8008116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008118:	4413      	add	r3, r2
 800811a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800811e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008124:	b29a      	uxth	r2, r3
 8008126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008128:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800812a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800812e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	891b      	ldrh	r3, [r3, #8]
 8008136:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800813a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800813e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6959      	ldr	r1, [r3, #20]
 8008146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800814a:	b29b      	uxth	r3, r3
 800814c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008150:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008154:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008158:	6800      	ldr	r0, [r0, #0]
 800815a:	f001 f982 	bl	8009462 <USB_WritePMA>
            ep->xfer_buff += len;
 800815e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	695a      	ldr	r2, [r3, #20]
 800816a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800816e:	441a      	add	r2, r3
 8008170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800817c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	6a1a      	ldr	r2, [r3, #32]
 8008188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800818c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	429a      	cmp	r2, r3
 8008196:	d90f      	bls.n	80081b8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800819c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6a1a      	ldr	r2, [r3, #32]
 80081a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081a8:	1ad2      	subs	r2, r2, r3
 80081aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	621a      	str	r2, [r3, #32]
 80081b6:	e00e      	b.n	80081d6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80081b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80081c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2200      	movs	r2, #0
 80081d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80081d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	643b      	str	r3, [r7, #64]	; 0x40
 80081e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	785b      	ldrb	r3, [r3, #1]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d177      	bne.n	80082e2 <USB_EPStartXfer+0x85e>
 80081f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80081fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800820c:	b29b      	uxth	r3, r3
 800820e:	461a      	mov	r2, r3
 8008210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008212:	4413      	add	r3, r2
 8008214:	63bb      	str	r3, [r7, #56]	; 0x38
 8008216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800821a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	011a      	lsls	r2, r3, #4
 8008224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008226:	4413      	add	r3, r2
 8008228:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800822c:	637b      	str	r3, [r7, #52]	; 0x34
 800822e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	b29b      	uxth	r3, r3
 8008234:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008238:	b29a      	uxth	r2, r3
 800823a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823c:	801a      	strh	r2, [r3, #0]
 800823e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008242:	2b3e      	cmp	r3, #62	; 0x3e
 8008244:	d921      	bls.n	800828a <USB_EPStartXfer+0x806>
 8008246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800824a:	095b      	lsrs	r3, r3, #5
 800824c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008254:	f003 031f 	and.w	r3, r3, #31
 8008258:	2b00      	cmp	r3, #0
 800825a:	d104      	bne.n	8008266 <USB_EPStartXfer+0x7e2>
 800825c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008260:	3b01      	subs	r3, #1
 8008262:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	b29a      	uxth	r2, r3
 800826c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008270:	b29b      	uxth	r3, r3
 8008272:	029b      	lsls	r3, r3, #10
 8008274:	b29b      	uxth	r3, r3
 8008276:	4313      	orrs	r3, r2
 8008278:	b29b      	uxth	r3, r3
 800827a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800827e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008282:	b29a      	uxth	r2, r3
 8008284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008286:	801a      	strh	r2, [r3, #0]
 8008288:	e050      	b.n	800832c <USB_EPStartXfer+0x8a8>
 800828a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10a      	bne.n	80082a8 <USB_EPStartXfer+0x824>
 8008292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008294:	881b      	ldrh	r3, [r3, #0]
 8008296:	b29b      	uxth	r3, r3
 8008298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800829c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a4:	801a      	strh	r2, [r3, #0]
 80082a6:	e041      	b.n	800832c <USB_EPStartXfer+0x8a8>
 80082a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ac:	085b      	lsrs	r3, r3, #1
 80082ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80082b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d004      	beq.n	80082c8 <USB_EPStartXfer+0x844>
 80082be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082c2:	3301      	adds	r3, #1
 80082c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80082c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	029b      	lsls	r3, r3, #10
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	4313      	orrs	r3, r2
 80082da:	b29a      	uxth	r2, r3
 80082dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082de:	801a      	strh	r2, [r3, #0]
 80082e0:	e024      	b.n	800832c <USB_EPStartXfer+0x8a8>
 80082e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	785b      	ldrb	r3, [r3, #1]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d11c      	bne.n	800832c <USB_EPStartXfer+0x8a8>
 80082f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008300:	b29b      	uxth	r3, r3
 8008302:	461a      	mov	r2, r3
 8008304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008306:	4413      	add	r3, r2
 8008308:	643b      	str	r3, [r7, #64]	; 0x40
 800830a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800830e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	011a      	lsls	r2, r3, #4
 8008318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800831a:	4413      	add	r3, r2
 800831c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008320:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008326:	b29a      	uxth	r2, r3
 8008328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800832c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	895b      	ldrh	r3, [r3, #10]
 8008338:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800833c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	6959      	ldr	r1, [r3, #20]
 8008348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800834c:	b29b      	uxth	r3, r3
 800834e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008352:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008356:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800835a:	6800      	ldr	r0, [r0, #0]
 800835c:	f001 f881 	bl	8009462 <USB_WritePMA>
 8008360:	e227      	b.n	80087b2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4413      	add	r3, r2
 800838c:	881b      	ldrh	r3, [r3, #0]
 800838e:	b29b      	uxth	r3, r3
 8008390:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008398:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800839c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	441a      	add	r2, r3
 80083b6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80083ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80083ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	461a      	mov	r2, r3
 80083ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083ee:	4413      	add	r3, r2
 80083f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	011a      	lsls	r2, r3, #4
 8008400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008402:	4413      	add	r3, r2
 8008404:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008408:	65bb      	str	r3, [r7, #88]	; 0x58
 800840a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800840e:	b29a      	uxth	r2, r3
 8008410:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008412:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	891b      	ldrh	r3, [r3, #8]
 8008420:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	6959      	ldr	r1, [r3, #20]
 8008430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008434:	b29b      	uxth	r3, r3
 8008436:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800843a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800843e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008442:	6800      	ldr	r0, [r0, #0]
 8008444:	f001 f80d 	bl	8009462 <USB_WritePMA>
 8008448:	e1b3      	b.n	80087b2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800844a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800844e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6a1a      	ldr	r2, [r3, #32]
 8008456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800845a:	1ad2      	subs	r2, r2, r3
 800845c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800846c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	881b      	ldrh	r3, [r3, #0]
 8008484:	b29b      	uxth	r3, r3
 8008486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848a:	2b00      	cmp	r3, #0
 800848c:	f000 80c6 	beq.w	800861c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008494:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	673b      	str	r3, [r7, #112]	; 0x70
 800849c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	785b      	ldrb	r3, [r3, #1]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d177      	bne.n	800859c <USB_EPStartXfer+0xb18>
 80084ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80084b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	461a      	mov	r2, r3
 80084ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084cc:	4413      	add	r3, r2
 80084ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80084d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	011a      	lsls	r2, r3, #4
 80084de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084e0:	4413      	add	r3, r2
 80084e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084e6:	667b      	str	r3, [r7, #100]	; 0x64
 80084e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084ea:	881b      	ldrh	r3, [r3, #0]
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084f6:	801a      	strh	r2, [r3, #0]
 80084f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084fc:	2b3e      	cmp	r3, #62	; 0x3e
 80084fe:	d921      	bls.n	8008544 <USB_EPStartXfer+0xac0>
 8008500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008504:	095b      	lsrs	r3, r3, #5
 8008506:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800850a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800850e:	f003 031f 	and.w	r3, r3, #31
 8008512:	2b00      	cmp	r3, #0
 8008514:	d104      	bne.n	8008520 <USB_EPStartXfer+0xa9c>
 8008516:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800851a:	3b01      	subs	r3, #1
 800851c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	b29a      	uxth	r2, r3
 8008526:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800852a:	b29b      	uxth	r3, r3
 800852c:	029b      	lsls	r3, r3, #10
 800852e:	b29b      	uxth	r3, r3
 8008530:	4313      	orrs	r3, r2
 8008532:	b29b      	uxth	r3, r3
 8008534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800853c:	b29a      	uxth	r2, r3
 800853e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008540:	801a      	strh	r2, [r3, #0]
 8008542:	e050      	b.n	80085e6 <USB_EPStartXfer+0xb62>
 8008544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10a      	bne.n	8008562 <USB_EPStartXfer+0xade>
 800854c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	b29b      	uxth	r3, r3
 8008552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800855a:	b29a      	uxth	r2, r3
 800855c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800855e:	801a      	strh	r2, [r3, #0]
 8008560:	e041      	b.n	80085e6 <USB_EPStartXfer+0xb62>
 8008562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008566:	085b      	lsrs	r3, r3, #1
 8008568:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800856c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008570:	f003 0301 	and.w	r3, r3, #1
 8008574:	2b00      	cmp	r3, #0
 8008576:	d004      	beq.n	8008582 <USB_EPStartXfer+0xafe>
 8008578:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800857c:	3301      	adds	r3, #1
 800857e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	b29a      	uxth	r2, r3
 8008588:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800858c:	b29b      	uxth	r3, r3
 800858e:	029b      	lsls	r3, r3, #10
 8008590:	b29b      	uxth	r3, r3
 8008592:	4313      	orrs	r3, r2
 8008594:	b29a      	uxth	r2, r3
 8008596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008598:	801a      	strh	r2, [r3, #0]
 800859a:	e024      	b.n	80085e6 <USB_EPStartXfer+0xb62>
 800859c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	785b      	ldrb	r3, [r3, #1]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d11c      	bne.n	80085e6 <USB_EPStartXfer+0xb62>
 80085ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	461a      	mov	r2, r3
 80085be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085c0:	4413      	add	r3, r2
 80085c2:	673b      	str	r3, [r7, #112]	; 0x70
 80085c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	011a      	lsls	r2, r3, #4
 80085d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085d4:	4413      	add	r3, r2
 80085d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80085e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	895b      	ldrh	r3, [r3, #10]
 80085f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6959      	ldr	r1, [r3, #20]
 8008602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008606:	b29b      	uxth	r3, r3
 8008608:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800860c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008610:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008614:	6800      	ldr	r0, [r0, #0]
 8008616:	f000 ff24 	bl	8009462 <USB_WritePMA>
 800861a:	e0ca      	b.n	80087b2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800861c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	785b      	ldrb	r3, [r3, #1]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d177      	bne.n	800871c <USB_EPStartXfer+0xc98>
 800862c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800863c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008646:	b29b      	uxth	r3, r3
 8008648:	461a      	mov	r2, r3
 800864a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800864c:	4413      	add	r3, r2
 800864e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	011a      	lsls	r2, r3, #4
 800865e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008660:	4413      	add	r3, r2
 8008662:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008666:	67bb      	str	r3, [r7, #120]	; 0x78
 8008668:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	b29b      	uxth	r3, r3
 800866e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008672:	b29a      	uxth	r2, r3
 8008674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008676:	801a      	strh	r2, [r3, #0]
 8008678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800867c:	2b3e      	cmp	r3, #62	; 0x3e
 800867e:	d921      	bls.n	80086c4 <USB_EPStartXfer+0xc40>
 8008680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008684:	095b      	lsrs	r3, r3, #5
 8008686:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800868a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800868e:	f003 031f 	and.w	r3, r3, #31
 8008692:	2b00      	cmp	r3, #0
 8008694:	d104      	bne.n	80086a0 <USB_EPStartXfer+0xc1c>
 8008696:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800869a:	3b01      	subs	r3, #1
 800869c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80086a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	029b      	lsls	r3, r3, #10
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	4313      	orrs	r3, r2
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086bc:	b29a      	uxth	r2, r3
 80086be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086c0:	801a      	strh	r2, [r3, #0]
 80086c2:	e05c      	b.n	800877e <USB_EPStartXfer+0xcfa>
 80086c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10a      	bne.n	80086e2 <USB_EPStartXfer+0xc5e>
 80086cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086ce:	881b      	ldrh	r3, [r3, #0]
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086da:	b29a      	uxth	r2, r3
 80086dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086de:	801a      	strh	r2, [r3, #0]
 80086e0:	e04d      	b.n	800877e <USB_EPStartXfer+0xcfa>
 80086e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086e6:	085b      	lsrs	r3, r3, #1
 80086e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80086ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d004      	beq.n	8008702 <USB_EPStartXfer+0xc7e>
 80086f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80086fc:	3301      	adds	r3, #1
 80086fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008704:	881b      	ldrh	r3, [r3, #0]
 8008706:	b29a      	uxth	r2, r3
 8008708:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800870c:	b29b      	uxth	r3, r3
 800870e:	029b      	lsls	r3, r3, #10
 8008710:	b29b      	uxth	r3, r3
 8008712:	4313      	orrs	r3, r2
 8008714:	b29a      	uxth	r2, r3
 8008716:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008718:	801a      	strh	r2, [r3, #0]
 800871a:	e030      	b.n	800877e <USB_EPStartXfer+0xcfa>
 800871c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	785b      	ldrb	r3, [r3, #1]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d128      	bne.n	800877e <USB_EPStartXfer+0xcfa>
 800872c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800873a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800873e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008748:	b29b      	uxth	r3, r3
 800874a:	461a      	mov	r2, r3
 800874c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008750:	4413      	add	r3, r2
 8008752:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800875a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	011a      	lsls	r2, r3, #4
 8008764:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008768:	4413      	add	r3, r2
 800876a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800876e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008776:	b29a      	uxth	r2, r3
 8008778:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800877c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800877e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	891b      	ldrh	r3, [r3, #8]
 800878a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800878e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6959      	ldr	r1, [r3, #20]
 800879a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800879e:	b29b      	uxth	r3, r3
 80087a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80087a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80087a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80087ac:	6800      	ldr	r0, [r0, #0]
 80087ae:	f000 fe58 	bl	8009462 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80087b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087d8:	817b      	strh	r3, [r7, #10]
 80087da:	897b      	ldrh	r3, [r7, #10]
 80087dc:	f083 0310 	eor.w	r3, r3, #16
 80087e0:	817b      	strh	r3, [r7, #10]
 80087e2:	897b      	ldrh	r3, [r7, #10]
 80087e4:	f083 0320 	eor.w	r3, r3, #32
 80087e8:	817b      	strh	r3, [r7, #10]
 80087ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	441a      	add	r2, r3
 8008804:	897b      	ldrh	r3, [r7, #10]
 8008806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800880a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800880e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008816:	b29b      	uxth	r3, r3
 8008818:	8013      	strh	r3, [r2, #0]
 800881a:	f000 bcde 	b.w	80091da <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800881e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	7b1b      	ldrb	r3, [r3, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	f040 80bb 	bne.w	80089a6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	699a      	ldr	r2, [r3, #24]
 800883c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	429a      	cmp	r2, r3
 800884a:	d917      	bls.n	800887c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800884c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800885c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	699a      	ldr	r2, [r3, #24]
 8008868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800886c:	1ad2      	subs	r2, r2, r3
 800886e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	619a      	str	r2, [r3, #24]
 800887a:	e00e      	b.n	800889a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800887c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800888c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2200      	movs	r2, #0
 8008898:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800889a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800889e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80088a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	461a      	mov	r2, r3
 80088ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088be:	4413      	add	r3, r2
 80088c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80088c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	011a      	lsls	r2, r3, #4
 80088d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088d6:	4413      	add	r3, r2
 80088d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80088e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088f2:	801a      	strh	r2, [r3, #0]
 80088f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088f8:	2b3e      	cmp	r3, #62	; 0x3e
 80088fa:	d924      	bls.n	8008946 <USB_EPStartXfer+0xec2>
 80088fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008900:	095b      	lsrs	r3, r3, #5
 8008902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800890a:	f003 031f 	and.w	r3, r3, #31
 800890e:	2b00      	cmp	r3, #0
 8008910:	d104      	bne.n	800891c <USB_EPStartXfer+0xe98>
 8008912:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008916:	3b01      	subs	r3, #1
 8008918:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800891c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	b29a      	uxth	r2, r3
 8008924:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008928:	b29b      	uxth	r3, r3
 800892a:	029b      	lsls	r3, r3, #10
 800892c:	b29b      	uxth	r3, r3
 800892e:	4313      	orrs	r3, r2
 8008930:	b29b      	uxth	r3, r3
 8008932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800893a:	b29a      	uxth	r2, r3
 800893c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008940:	801a      	strh	r2, [r3, #0]
 8008942:	f000 bc10 	b.w	8009166 <USB_EPStartXfer+0x16e2>
 8008946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10c      	bne.n	8008968 <USB_EPStartXfer+0xee4>
 800894e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	b29b      	uxth	r3, r3
 8008956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800895a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800895e:	b29a      	uxth	r2, r3
 8008960:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008964:	801a      	strh	r2, [r3, #0]
 8008966:	e3fe      	b.n	8009166 <USB_EPStartXfer+0x16e2>
 8008968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800896c:	085b      	lsrs	r3, r3, #1
 800896e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	d004      	beq.n	8008988 <USB_EPStartXfer+0xf04>
 800897e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008982:	3301      	adds	r3, #1
 8008984:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008988:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	b29a      	uxth	r2, r3
 8008990:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008994:	b29b      	uxth	r3, r3
 8008996:	029b      	lsls	r3, r3, #10
 8008998:	b29b      	uxth	r3, r3
 800899a:	4313      	orrs	r3, r2
 800899c:	b29a      	uxth	r2, r3
 800899e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089a2:	801a      	strh	r2, [r3, #0]
 80089a4:	e3df      	b.n	8009166 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80089a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	78db      	ldrb	r3, [r3, #3]
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	f040 8218 	bne.w	8008de8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80089b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	785b      	ldrb	r3, [r3, #1]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f040 809d 	bne.w	8008b04 <USB_EPStartXfer+0x1080>
 80089ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	461a      	mov	r2, r3
 80089ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089ee:	4413      	add	r3, r2
 80089f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	011a      	lsls	r2, r3, #4
 8008a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a06:	4413      	add	r3, r2
 8008a08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008a10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a14:	881b      	ldrh	r3, [r3, #0]
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a22:	801a      	strh	r2, [r3, #0]
 8008a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	2b3e      	cmp	r3, #62	; 0x3e
 8008a32:	d92b      	bls.n	8008a8c <USB_EPStartXfer+0x1008>
 8008a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	095b      	lsrs	r3, r3, #5
 8008a42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	f003 031f 	and.w	r3, r3, #31
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d104      	bne.n	8008a64 <USB_EPStartXfer+0xfe0>
 8008a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	029b      	lsls	r3, r3, #10
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	4313      	orrs	r3, r2
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a88:	801a      	strh	r2, [r3, #0]
 8008a8a:	e070      	b.n	8008b6e <USB_EPStartXfer+0x10ea>
 8008a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d10c      	bne.n	8008ab6 <USB_EPStartXfer+0x1032>
 8008a9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ab2:	801a      	strh	r2, [r3, #0]
 8008ab4:	e05b      	b.n	8008b6e <USB_EPStartXfer+0x10ea>
 8008ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	085b      	lsrs	r3, r3, #1
 8008ac4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d004      	beq.n	8008ae6 <USB_EPStartXfer+0x1062>
 8008adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	029b      	lsls	r3, r3, #10
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	4313      	orrs	r3, r2
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b00:	801a      	strh	r2, [r3, #0]
 8008b02:	e034      	b.n	8008b6e <USB_EPStartXfer+0x10ea>
 8008b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	785b      	ldrb	r3, [r3, #1]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d12c      	bne.n	8008b6e <USB_EPStartXfer+0x10ea>
 8008b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	461a      	mov	r2, r3
 8008b34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b38:	4413      	add	r3, r2
 8008b3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	011a      	lsls	r2, r3, #4
 8008b4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b50:	4413      	add	r3, r2
 8008b52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008b6c:	801a      	strh	r2, [r3, #0]
 8008b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	785b      	ldrb	r3, [r3, #1]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f040 809d 	bne.w	8008cc8 <USB_EPStartXfer+0x1244>
 8008b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	461a      	mov	r2, r3
 8008bae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	011a      	lsls	r2, r3, #4
 8008bc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bca:	4413      	add	r3, r2
 8008bcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bd8:	881b      	ldrh	r3, [r3, #0]
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008be6:	801a      	strh	r2, [r3, #0]
 8008be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	2b3e      	cmp	r3, #62	; 0x3e
 8008bf6:	d92b      	bls.n	8008c50 <USB_EPStartXfer+0x11cc>
 8008bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	095b      	lsrs	r3, r3, #5
 8008c06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	f003 031f 	and.w	r3, r3, #31
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d104      	bne.n	8008c28 <USB_EPStartXfer+0x11a4>
 8008c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c22:	3b01      	subs	r3, #1
 8008c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	029b      	lsls	r3, r3, #10
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c4c:	801a      	strh	r2, [r3, #0]
 8008c4e:	e069      	b.n	8008d24 <USB_EPStartXfer+0x12a0>
 8008c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10c      	bne.n	8008c7a <USB_EPStartXfer+0x11f6>
 8008c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c76:	801a      	strh	r2, [r3, #0]
 8008c78:	e054      	b.n	8008d24 <USB_EPStartXfer+0x12a0>
 8008c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	085b      	lsrs	r3, r3, #1
 8008c88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d004      	beq.n	8008caa <USB_EPStartXfer+0x1226>
 8008ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008caa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	029b      	lsls	r3, r3, #10
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008cc4:	801a      	strh	r2, [r3, #0]
 8008cc6:	e02d      	b.n	8008d24 <USB_EPStartXfer+0x12a0>
 8008cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	785b      	ldrb	r3, [r3, #1]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d125      	bne.n	8008d24 <USB_EPStartXfer+0x12a0>
 8008cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	461a      	mov	r2, r3
 8008cea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008cee:	4413      	add	r3, r2
 8008cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	011a      	lsls	r2, r3, #4
 8008d02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008d06:	4413      	add	r3, r2
 8008d08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d22:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	69db      	ldr	r3, [r3, #28]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f000 8218 	beq.w	8009166 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	881b      	ldrh	r3, [r3, #0]
 8008d52:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008d56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d005      	beq.n	8008d6e <USB_EPStartXfer+0x12ea>
 8008d62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10d      	bne.n	8008d8a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008d6e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f040 81f5 	bne.w	8009166 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008d7c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f040 81ee 	bne.w	8009166 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008db0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008db8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	441a      	add	r2, r3
 8008dce:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	8013      	strh	r3, [r2, #0]
 8008de6:	e1be      	b.n	8009166 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	78db      	ldrb	r3, [r3, #3]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	f040 81b4 	bne.w	8009162 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	699a      	ldr	r2, [r3, #24]
 8008e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d917      	bls.n	8008e46 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	699a      	ldr	r2, [r3, #24]
 8008e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e36:	1ad2      	subs	r2, r2, r3
 8008e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	619a      	str	r2, [r3, #24]
 8008e44:	e00e      	b.n	8008e64 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2200      	movs	r2, #0
 8008e62:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	785b      	ldrb	r3, [r3, #1]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f040 8085 	bne.w	8008f80 <USB_EPStartXfer+0x14fc>
 8008e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	461a      	mov	r2, r3
 8008e96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	011a      	lsls	r2, r3, #4
 8008eae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ebc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ece:	801a      	strh	r2, [r3, #0]
 8008ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ed4:	2b3e      	cmp	r3, #62	; 0x3e
 8008ed6:	d923      	bls.n	8008f20 <USB_EPStartXfer+0x149c>
 8008ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008edc:	095b      	lsrs	r3, r3, #5
 8008ede:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ee6:	f003 031f 	and.w	r3, r3, #31
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d104      	bne.n	8008ef8 <USB_EPStartXfer+0x1474>
 8008eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ef8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	029b      	lsls	r3, r3, #10
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f1c:	801a      	strh	r2, [r3, #0]
 8008f1e:	e060      	b.n	8008fe2 <USB_EPStartXfer+0x155e>
 8008f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d10c      	bne.n	8008f42 <USB_EPStartXfer+0x14be>
 8008f28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f3e:	801a      	strh	r2, [r3, #0]
 8008f40:	e04f      	b.n	8008fe2 <USB_EPStartXfer+0x155e>
 8008f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f46:	085b      	lsrs	r3, r3, #1
 8008f48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f50:	f003 0301 	and.w	r3, r3, #1
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d004      	beq.n	8008f62 <USB_EPStartXfer+0x14de>
 8008f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008f62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f66:	881b      	ldrh	r3, [r3, #0]
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	029b      	lsls	r3, r3, #10
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	4313      	orrs	r3, r2
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f7c:	801a      	strh	r2, [r3, #0]
 8008f7e:	e030      	b.n	8008fe2 <USB_EPStartXfer+0x155e>
 8008f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	785b      	ldrb	r3, [r3, #1]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d128      	bne.n	8008fe2 <USB_EPStartXfer+0x155e>
 8008f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	461a      	mov	r2, r3
 8008fb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008fb4:	4413      	add	r3, r2
 8008fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	011a      	lsls	r2, r3, #4
 8008fc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008fcc:	4413      	add	r3, r2
 8008fce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008fd2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008fe0:	801a      	strh	r2, [r3, #0]
 8008fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	785b      	ldrb	r3, [r3, #1]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f040 8085 	bne.w	800910c <USB_EPStartXfer+0x1688>
 8009002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009014:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800901e:	b29b      	uxth	r3, r3
 8009020:	461a      	mov	r2, r3
 8009022:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009026:	4413      	add	r3, r2
 8009028:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800902c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	011a      	lsls	r2, r3, #4
 800903a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800903e:	4413      	add	r3, r2
 8009040:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009044:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009048:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800904c:	881b      	ldrh	r3, [r3, #0]
 800904e:	b29b      	uxth	r3, r3
 8009050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009054:	b29a      	uxth	r2, r3
 8009056:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800905a:	801a      	strh	r2, [r3, #0]
 800905c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009060:	2b3e      	cmp	r3, #62	; 0x3e
 8009062:	d923      	bls.n	80090ac <USB_EPStartXfer+0x1628>
 8009064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009068:	095b      	lsrs	r3, r3, #5
 800906a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800906e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009072:	f003 031f 	and.w	r3, r3, #31
 8009076:	2b00      	cmp	r3, #0
 8009078:	d104      	bne.n	8009084 <USB_EPStartXfer+0x1600>
 800907a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800907e:	3b01      	subs	r3, #1
 8009080:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009084:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	b29a      	uxth	r2, r3
 800908c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009090:	b29b      	uxth	r3, r3
 8009092:	029b      	lsls	r3, r3, #10
 8009094:	b29b      	uxth	r3, r3
 8009096:	4313      	orrs	r3, r2
 8009098:	b29b      	uxth	r3, r3
 800909a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800909e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090a8:	801a      	strh	r2, [r3, #0]
 80090aa:	e05c      	b.n	8009166 <USB_EPStartXfer+0x16e2>
 80090ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10c      	bne.n	80090ce <USB_EPStartXfer+0x164a>
 80090b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090b8:	881b      	ldrh	r3, [r3, #0]
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090c4:	b29a      	uxth	r2, r3
 80090c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090ca:	801a      	strh	r2, [r3, #0]
 80090cc:	e04b      	b.n	8009166 <USB_EPStartXfer+0x16e2>
 80090ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090d2:	085b      	lsrs	r3, r3, #1
 80090d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80090d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090dc:	f003 0301 	and.w	r3, r3, #1
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d004      	beq.n	80090ee <USB_EPStartXfer+0x166a>
 80090e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090e8:	3301      	adds	r3, #1
 80090ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80090ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090f2:	881b      	ldrh	r3, [r3, #0]
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	029b      	lsls	r3, r3, #10
 80090fe:	b29b      	uxth	r3, r3
 8009100:	4313      	orrs	r3, r2
 8009102:	b29a      	uxth	r2, r3
 8009104:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009108:	801a      	strh	r2, [r3, #0]
 800910a:	e02c      	b.n	8009166 <USB_EPStartXfer+0x16e2>
 800910c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	785b      	ldrb	r3, [r3, #1]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d124      	bne.n	8009166 <USB_EPStartXfer+0x16e2>
 800911c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009120:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800912a:	b29b      	uxth	r3, r3
 800912c:	461a      	mov	r2, r3
 800912e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009132:	4413      	add	r3, r2
 8009134:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800913c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	011a      	lsls	r2, r3, #4
 8009146:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800914a:	4413      	add	r3, r2
 800914c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009150:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009158:	b29a      	uxth	r2, r3
 800915a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800915e:	801a      	strh	r2, [r3, #0]
 8009160:	e001      	b.n	8009166 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e03a      	b.n	80091dc <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800916a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	4413      	add	r3, r2
 8009180:	881b      	ldrh	r3, [r3, #0]
 8009182:	b29b      	uxth	r3, r3
 8009184:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800918c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009190:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009194:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009198:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800919c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80091a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80091a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80091a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	441a      	add	r2, r3
 80091c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80091c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b085      	sub	sp, #20
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	785b      	ldrb	r3, [r3, #1]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d020      	beq.n	800923a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	881b      	ldrh	r3, [r3, #0]
 8009204:	b29b      	uxth	r3, r3
 8009206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800920a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800920e:	81bb      	strh	r3, [r7, #12]
 8009210:	89bb      	ldrh	r3, [r7, #12]
 8009212:	f083 0310 	eor.w	r3, r3, #16
 8009216:	81bb      	strh	r3, [r7, #12]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	441a      	add	r2, r3
 8009222:	89bb      	ldrh	r3, [r7, #12]
 8009224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800922c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009234:	b29b      	uxth	r3, r3
 8009236:	8013      	strh	r3, [r2, #0]
 8009238:	e01f      	b.n	800927a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	b29b      	uxth	r3, r3
 8009248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800924c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009250:	81fb      	strh	r3, [r7, #14]
 8009252:	89fb      	ldrh	r3, [r7, #14]
 8009254:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009258:	81fb      	strh	r3, [r7, #14]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	441a      	add	r2, r3
 8009264:	89fb      	ldrh	r3, [r7, #14]
 8009266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800926a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800926e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009276:	b29b      	uxth	r3, r3
 8009278:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	bc80      	pop	{r7}
 8009284:	4770      	bx	lr

08009286 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009286:	b480      	push	{r7}
 8009288:	b087      	sub	sp, #28
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	7b1b      	ldrb	r3, [r3, #12]
 8009294:	2b00      	cmp	r3, #0
 8009296:	f040 809d 	bne.w	80093d4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	785b      	ldrb	r3, [r3, #1]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d04c      	beq.n	800933c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4413      	add	r3, r2
 80092ac:	881b      	ldrh	r3, [r3, #0]
 80092ae:	823b      	strh	r3, [r7, #16]
 80092b0:	8a3b      	ldrh	r3, [r7, #16]
 80092b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d01b      	beq.n	80092f2 <USB_EPClearStall+0x6c>
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	4413      	add	r3, r2
 80092c4:	881b      	ldrh	r3, [r3, #0]
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092d0:	81fb      	strh	r3, [r7, #14]
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	441a      	add	r2, r3
 80092dc:	89fb      	ldrh	r3, [r7, #14]
 80092de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	78db      	ldrb	r3, [r3, #3]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d06c      	beq.n	80093d4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4413      	add	r3, r2
 8009304:	881b      	ldrh	r3, [r3, #0]
 8009306:	b29b      	uxth	r3, r3
 8009308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800930c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009310:	81bb      	strh	r3, [r7, #12]
 8009312:	89bb      	ldrh	r3, [r7, #12]
 8009314:	f083 0320 	eor.w	r3, r3, #32
 8009318:	81bb      	strh	r3, [r7, #12]
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	441a      	add	r2, r3
 8009324:	89bb      	ldrh	r3, [r7, #12]
 8009326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800932a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800932e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009336:	b29b      	uxth	r3, r3
 8009338:	8013      	strh	r3, [r2, #0]
 800933a:	e04b      	b.n	80093d4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	881b      	ldrh	r3, [r3, #0]
 8009348:	82fb      	strh	r3, [r7, #22]
 800934a:	8afb      	ldrh	r3, [r7, #22]
 800934c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009350:	2b00      	cmp	r3, #0
 8009352:	d01b      	beq.n	800938c <USB_EPClearStall+0x106>
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	b29b      	uxth	r3, r3
 8009362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800936a:	82bb      	strh	r3, [r7, #20]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	441a      	add	r2, r3
 8009376:	8abb      	ldrh	r3, [r7, #20]
 8009378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800937c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009380:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009388:	b29b      	uxth	r3, r3
 800938a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	881b      	ldrh	r3, [r3, #0]
 8009398:	b29b      	uxth	r3, r3
 800939a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800939e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093a2:	827b      	strh	r3, [r7, #18]
 80093a4:	8a7b      	ldrh	r3, [r7, #18]
 80093a6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80093aa:	827b      	strh	r3, [r7, #18]
 80093ac:	8a7b      	ldrh	r3, [r7, #18]
 80093ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80093b2:	827b      	strh	r3, [r7, #18]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	441a      	add	r2, r3
 80093be:	8a7b      	ldrh	r3, [r7, #18]
 80093c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	371c      	adds	r7, #28
 80093da:	46bd      	mov	sp, r7
 80093dc:	bc80      	pop	{r7}
 80093de:	4770      	bx	lr

080093e0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	460b      	mov	r3, r1
 80093ea:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80093ec:	78fb      	ldrb	r3, [r7, #3]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d103      	bne.n	80093fa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2280      	movs	r2, #128	; 0x80
 80093f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	bc80      	pop	{r7}
 8009404:	4770      	bx	lr

08009406 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009406:	b480      	push	{r7}
 8009408:	b083      	sub	sp, #12
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	bc80      	pop	{r7}
 8009418:	4770      	bx	lr

0800941a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800941a:	b480      	push	{r7}
 800941c:	b083      	sub	sp, #12
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	bc80      	pop	{r7}
 800942c:	4770      	bx	lr

0800942e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800942e:	b480      	push	{r7}
 8009430:	b085      	sub	sp, #20
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800943c:	b29b      	uxth	r3, r3
 800943e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009440:	68fb      	ldr	r3, [r7, #12]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	bc80      	pop	{r7}
 800944a:	4770      	bx	lr

0800944c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	bc80      	pop	{r7}
 8009460:	4770      	bx	lr

08009462 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009462:	b480      	push	{r7}
 8009464:	b08b      	sub	sp, #44	; 0x2c
 8009466:	af00      	add	r7, sp, #0
 8009468:	60f8      	str	r0, [r7, #12]
 800946a:	60b9      	str	r1, [r7, #8]
 800946c:	4611      	mov	r1, r2
 800946e:	461a      	mov	r2, r3
 8009470:	460b      	mov	r3, r1
 8009472:	80fb      	strh	r3, [r7, #6]
 8009474:	4613      	mov	r3, r2
 8009476:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009478:	88bb      	ldrh	r3, [r7, #4]
 800947a:	3301      	adds	r3, #1
 800947c:	085b      	lsrs	r3, r3, #1
 800947e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009488:	88fb      	ldrh	r3, [r7, #6]
 800948a:	005a      	lsls	r2, r3, #1
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	4413      	add	r3, r2
 8009490:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009494:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	627b      	str	r3, [r7, #36]	; 0x24
 800949a:	e01e      	b.n	80094da <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	3301      	adds	r3, #1
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	021b      	lsls	r3, r3, #8
 80094aa:	b21a      	sxth	r2, r3
 80094ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	b21b      	sxth	r3, r3
 80094b4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80094b6:	6a3b      	ldr	r3, [r7, #32]
 80094b8:	8a7a      	ldrh	r2, [r7, #18]
 80094ba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80094bc:	6a3b      	ldr	r3, [r7, #32]
 80094be:	3302      	adds	r3, #2
 80094c0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80094c2:	6a3b      	ldr	r3, [r7, #32]
 80094c4:	3302      	adds	r3, #2
 80094c6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	3301      	adds	r3, #1
 80094cc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	3301      	adds	r3, #1
 80094d2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80094d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d6:	3b01      	subs	r3, #1
 80094d8:	627b      	str	r3, [r7, #36]	; 0x24
 80094da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1dd      	bne.n	800949c <USB_WritePMA+0x3a>
  }
}
 80094e0:	bf00      	nop
 80094e2:	bf00      	nop
 80094e4:	372c      	adds	r7, #44	; 0x2c
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bc80      	pop	{r7}
 80094ea:	4770      	bx	lr

080094ec <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b08b      	sub	sp, #44	; 0x2c
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	4611      	mov	r1, r2
 80094f8:	461a      	mov	r2, r3
 80094fa:	460b      	mov	r3, r1
 80094fc:	80fb      	strh	r3, [r7, #6]
 80094fe:	4613      	mov	r3, r2
 8009500:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009502:	88bb      	ldrh	r3, [r7, #4]
 8009504:	085b      	lsrs	r3, r3, #1
 8009506:	b29b      	uxth	r3, r3
 8009508:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009512:	88fb      	ldrh	r3, [r7, #6]
 8009514:	005a      	lsls	r2, r3, #1
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	4413      	add	r3, r2
 800951a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800951e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	627b      	str	r3, [r7, #36]	; 0x24
 8009524:	e01b      	b.n	800955e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	881b      	ldrh	r3, [r3, #0]
 800952a:	b29b      	uxth	r3, r3
 800952c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800952e:	6a3b      	ldr	r3, [r7, #32]
 8009530:	3302      	adds	r3, #2
 8009532:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	b2da      	uxtb	r2, r3
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	3301      	adds	r3, #1
 8009540:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	0a1b      	lsrs	r3, r3, #8
 8009546:	b2da      	uxtb	r2, r3
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	3301      	adds	r3, #1
 8009550:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	3302      	adds	r3, #2
 8009556:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955a:	3b01      	subs	r3, #1
 800955c:	627b      	str	r3, [r7, #36]	; 0x24
 800955e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1e0      	bne.n	8009526 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009564:	88bb      	ldrh	r3, [r7, #4]
 8009566:	f003 0301 	and.w	r3, r3, #1
 800956a:	b29b      	uxth	r3, r3
 800956c:	2b00      	cmp	r3, #0
 800956e:	d007      	beq.n	8009580 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009570:	6a3b      	ldr	r3, [r7, #32]
 8009572:	881b      	ldrh	r3, [r3, #0]
 8009574:	b29b      	uxth	r3, r3
 8009576:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	b2da      	uxtb	r2, r3
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	701a      	strb	r2, [r3, #0]
  }
}
 8009580:	bf00      	nop
 8009582:	372c      	adds	r7, #44	; 0x2c
 8009584:	46bd      	mov	sp, r7
 8009586:	bc80      	pop	{r7}
 8009588:	4770      	bx	lr
	...

0800958c <USBD_HID_Init>:
  */
/* for Nintendo Switch */
extern USB_JoystickReport_Output joystick_output;
static uint8_t  USBD_HID_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	73fb      	strb	r3, [r7, #15]

  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 800959c:	2340      	movs	r3, #64	; 0x40
 800959e:	2203      	movs	r2, #3
 80095a0:	2181      	movs	r1, #129	; 0x81
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f001 fc21 	bl	800adea <USBD_LL_OpenEP>
                 HID_EPIN_ADDR,
                 USBD_EP_TYPE_INTR,
                 HID_EPIN_SIZE);

  /* Open EP OUT */
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 80095a8:	2010      	movs	r0, #16
 80095aa:	f001 fd33 	bl	800b014 <USBD_static_malloc>
 80095ae:	4602      	mov	r2, r0
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, (uint8_t*)&joystick_output, sizeof(USB_JoystickReport_Output));
 80095b6:	2308      	movs	r3, #8
 80095b8:	4a0b      	ldr	r2, [pc, #44]	; (80095e8 <USBD_HID_Init+0x5c>)
 80095ba:	2102      	movs	r1, #2
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f001 fd05 	bl	800afcc <USBD_LL_PrepareReceive>
  if(pdev->pClassData == NULL)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d102      	bne.n	80095d2 <USBD_HID_Init+0x46>
  {
    ret = 1;
 80095cc:	2301      	movs	r3, #1
 80095ce:	73fb      	strb	r3, [r7, #15]
 80095d0:	e004      	b.n	80095dc <USBD_HID_Init+0x50>
  }
  else
  {
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095d8:	2200      	movs	r2, #0
 80095da:	731a      	strb	r2, [r3, #12]
  }
  return ret;
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	2000058c 	.word	0x2000058c

080095ec <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	460b      	mov	r3, r1
 80095f6:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev,
 80095f8:	2181      	movs	r1, #129	; 0x81
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f001 fc1b 	bl	800ae36 <USBD_LL_CloseEP>
                  HID_EPIN_ADDR);

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009606:	2b00      	cmp	r3, #0
 8009608:	d009      	beq.n	800961e <USBD_HID_DeInit+0x32>
  {
    USBD_free(pdev->pClassData);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009610:	4618      	mov	r0, r3
 8009612:	f001 fd0b 	bl	800b02c <USBD_static_free>
    pdev->pClassData = NULL;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b086      	sub	sp, #24
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  uint16_t len = 0;
 8009632:	2300      	movs	r3, #0
 8009634:	82fb      	strh	r3, [r7, #22]
  uint8_t  *pbuf = NULL;
 8009636:	2300      	movs	r3, #0
 8009638:	613b      	str	r3, [r7, #16]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009640:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800964a:	2b00      	cmp	r3, #0
 800964c:	d044      	beq.n	80096d8 <USBD_HID_Setup+0xb0>
 800964e:	2b20      	cmp	r3, #32
 8009650:	f040 8080 	bne.w	8009754 <USBD_HID_Setup+0x12c>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	785b      	ldrb	r3, [r3, #1]
 8009658:	3b02      	subs	r3, #2
 800965a:	2b09      	cmp	r3, #9
 800965c:	d835      	bhi.n	80096ca <USBD_HID_Setup+0xa2>
 800965e:	a201      	add	r2, pc, #4	; (adr r2, 8009664 <USBD_HID_Setup+0x3c>)
 8009660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009664:	080096bb 	.word	0x080096bb
 8009668:	0800969b 	.word	0x0800969b
 800966c:	080096cb 	.word	0x080096cb
 8009670:	080096cb 	.word	0x080096cb
 8009674:	080096cb 	.word	0x080096cb
 8009678:	080096cb 	.word	0x080096cb
 800967c:	080096cb 	.word	0x080096cb
 8009680:	080096cb 	.word	0x080096cb
 8009684:	080096a9 	.word	0x080096a9
 8009688:	0800968d 	.word	0x0800968d
    {


    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	885b      	ldrh	r3, [r3, #2]
 8009690:	b2db      	uxtb	r3, r3
 8009692:	461a      	mov	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	601a      	str	r2, [r3, #0]
      break;
 8009698:	e01d      	b.n	80096d6 <USBD_HID_Setup+0xae>

    case HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev,
                        (uint8_t *)&hhid->Protocol,
 800969a:	68fb      	ldr	r3, [r7, #12]
      USBD_CtlSendData (pdev,
 800969c:	2201      	movs	r2, #1
 800969e:	4619      	mov	r1, r3
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f001 f8e2 	bl	800a86a <USBD_CtlSendData>
                        1);
      break;
 80096a6:	e016      	b.n	80096d6 <USBD_HID_Setup+0xae>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	885b      	ldrh	r3, [r3, #2]
 80096ac:	0a1b      	lsrs	r3, r3, #8
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	461a      	mov	r2, r3
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	605a      	str	r2, [r3, #4]
      break;
 80096b8:	e00d      	b.n	80096d6 <USBD_HID_Setup+0xae>

    case HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev,
                        (uint8_t *)&hhid->IdleState,
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev,
 80096be:	2201      	movs	r2, #1
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f001 f8d1 	bl	800a86a <USBD_CtlSendData>
                        1);
      break;
 80096c8:	e005      	b.n	80096d6 <USBD_HID_Setup+0xae>

    default:
      USBD_CtlError (pdev, req);
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f001 f862 	bl	800a796 <USBD_CtlError>
      return USBD_FAIL;
 80096d2:	2302      	movs	r3, #2
 80096d4:	e03f      	b.n	8009756 <USBD_HID_Setup+0x12e>
    }
    break;
 80096d6:	e03d      	b.n	8009754 <USBD_HID_Setup+0x12c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	785b      	ldrb	r3, [r3, #1]
 80096dc:	2b0b      	cmp	r3, #11
 80096de:	d032      	beq.n	8009746 <USBD_HID_Setup+0x11e>
 80096e0:	2b0b      	cmp	r3, #11
 80096e2:	dc37      	bgt.n	8009754 <USBD_HID_Setup+0x12c>
 80096e4:	2b06      	cmp	r3, #6
 80096e6:	d002      	beq.n	80096ee <USBD_HID_Setup+0xc6>
 80096e8:	2b0a      	cmp	r3, #10
 80096ea:	d024      	beq.n	8009736 <USBD_HID_Setup+0x10e>
 80096ec:	e032      	b.n	8009754 <USBD_HID_Setup+0x12c>
    {
    case USB_REQ_GET_DESCRIPTOR:
      if( req->wValue >> 8 == HID_REPORT_DESC)
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	885b      	ldrh	r3, [r3, #2]
 80096f2:	0a1b      	lsrs	r3, r3, #8
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	2b22      	cmp	r3, #34	; 0x22
 80096f8:	d108      	bne.n	800970c <USBD_HID_Setup+0xe4>
      {
        len = MIN(HID_CUSTOM_REPORT_DESC_SIZE , req->wLength);
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	88db      	ldrh	r3, [r3, #6]
 80096fe:	2b56      	cmp	r3, #86	; 0x56
 8009700:	bf28      	it	cs
 8009702:	2356      	movcs	r3, #86	; 0x56
 8009704:	82fb      	strh	r3, [r7, #22]
        pbuf = HID_CUSTOM_ReportDesc;
 8009706:	4b16      	ldr	r3, [pc, #88]	; (8009760 <USBD_HID_Setup+0x138>)
 8009708:	613b      	str	r3, [r7, #16]
 800970a:	e00d      	b.n	8009728 <USBD_HID_Setup+0x100>
      }
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	885b      	ldrh	r3, [r3, #2]
 8009710:	0a1b      	lsrs	r3, r3, #8
 8009712:	b29b      	uxth	r3, r3
 8009714:	2b21      	cmp	r3, #33	; 0x21
 8009716:	d107      	bne.n	8009728 <USBD_HID_Setup+0x100>
      {
        pbuf = USBD_HID_Desc;
 8009718:	4b12      	ldr	r3, [pc, #72]	; (8009764 <USBD_HID_Setup+0x13c>)
 800971a:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	88db      	ldrh	r3, [r3, #6]
 8009720:	2b09      	cmp	r3, #9
 8009722:	bf28      	it	cs
 8009724:	2309      	movcs	r3, #9
 8009726:	82fb      	strh	r3, [r7, #22]
      }

      USBD_CtlSendData (pdev,
 8009728:	8afb      	ldrh	r3, [r7, #22]
 800972a:	461a      	mov	r2, r3
 800972c:	6939      	ldr	r1, [r7, #16]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f001 f89b 	bl	800a86a <USBD_CtlSendData>
                        pbuf,
                        len);

      break;
 8009734:	e00e      	b.n	8009754 <USBD_HID_Setup+0x12c>

    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
                        (uint8_t *)&hhid->AltSetting,
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev,
 800973a:	2201      	movs	r2, #1
 800973c:	4619      	mov	r1, r3
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f001 f893 	bl	800a86a <USBD_CtlSendData>
                        1);
      break;
 8009744:	e006      	b.n	8009754 <USBD_HID_Setup+0x12c>

    case USB_REQ_SET_INTERFACE :
      hhid->AltSetting = (uint8_t)(req->wValue);
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	885b      	ldrh	r3, [r3, #2]
 800974a:	b2db      	uxtb	r3, r3
 800974c:	461a      	mov	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	609a      	str	r2, [r3, #8]
      break;
 8009752:	bf00      	nop
    }
  }
  return USBD_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3718      	adds	r7, #24
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	20000098 	.word	0x20000098
 8009764:	20000080 	.word	0x20000080

08009768 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport     (USBD_HandleTypeDef  *pdev,
                                 uint8_t *report,
                                 uint16_t len)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	4613      	mov	r3, r2
 8009774:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800977c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009784:	2b03      	cmp	r3, #3
 8009786:	d10c      	bne.n	80097a2 <USBD_HID_SendReport+0x3a>
  {
    if(hhid->state == HID_IDLE)
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	7b1b      	ldrb	r3, [r3, #12]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d108      	bne.n	80097a2 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	2201      	movs	r2, #1
 8009794:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit (pdev,
 8009796:	88fb      	ldrh	r3, [r7, #6]
 8009798:	68ba      	ldr	r2, [r7, #8]
 800979a:	2181      	movs	r1, #129	; 0x81
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f001 fbf2 	bl	800af86 <USBD_LL_Transmit>
                        HID_EPIN_ADDR,
                        report,
                        len);
    }
  }
  return USBD_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <USBD_HID_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetCfgDesc (uint16_t *length)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_CfgDesc);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2229      	movs	r2, #41	; 0x29
 80097b8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80097ba:	4b03      	ldr	r3, [pc, #12]	; (80097c8 <USBD_HID_GetCfgDesc+0x1c>)
}
 80097bc:	4618      	mov	r0, r3
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bc80      	pop	{r7}
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	20000054 	.word	0x20000054

080097cc <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097de:	2200      	movs	r2, #0
 80097e0:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bc80      	pop	{r7}
 80097ec:	4770      	bx	lr
	...

080097f0 <USBD_HID_DataOut>:
  * @retval status
  */
/* for Nintendo Switch */
static uint8_t  USBD_HID_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	460b      	mov	r3, r1
 80097fa:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Receive(hUsbDeviceFS.pData, HID_EPOUT_ADDR, (uint8_t*)&joystick_output, sizeof(USB_JoystickReport_Output));
 80097fc:	4b06      	ldr	r3, [pc, #24]	; (8009818 <USBD_HID_DataOut+0x28>)
 80097fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009802:	2308      	movs	r3, #8
 8009804:	4a05      	ldr	r2, [pc, #20]	; (800981c <USBD_HID_DataOut+0x2c>)
 8009806:	2102      	movs	r1, #2
 8009808:	f7fa fdb8 	bl	800437c <HAL_PCD_EP_Receive>
  // ignore
  return USBD_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3708      	adds	r7, #8
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	200005a0 	.word	0x200005a0
 800981c:	2000058c 	.word	0x2000058c

08009820 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	220a      	movs	r2, #10
 800982c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800982e:	4b03      	ldr	r3, [pc, #12]	; (800983c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009830:	4618      	mov	r0, r3
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	bc80      	pop	{r7}
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	2000008c 	.word	0x2000008c

08009840 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	4613      	mov	r3, r2
 800984c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d101      	bne.n	8009858 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009854:	2302      	movs	r3, #2
 8009856:	e01a      	b.n	800988e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800985e:	2b00      	cmp	r3, #0
 8009860:	d003      	beq.n	800986a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2200      	movs	r2, #0
 8009866:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d003      	beq.n	8009878 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	79fa      	ldrb	r2, [r7, #7]
 8009884:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f001 fa4c 	bl	800ad24 <USBD_LL_Init>

  return USBD_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009896:	b480      	push	{r7}
 8009898:	b085      	sub	sp, #20
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d006      	beq.n	80098b8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	683a      	ldr	r2, [r7, #0]
 80098ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	73fb      	strb	r3, [r7, #15]
 80098b6:	e001      	b.n	80098bc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80098b8:	2302      	movs	r3, #2
 80098ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bc80      	pop	{r7}
 80098c6:	4770      	bx	lr

080098c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f001 fa6f 	bl	800adb4 <USBD_LL_Start>

  return USBD_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	370c      	adds	r7, #12
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bc80      	pop	{r7}
 80098f2:	4770      	bx	lr

080098f4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	460b      	mov	r3, r1
 80098fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009900:	2302      	movs	r3, #2
 8009902:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00c      	beq.n	8009928 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	78fa      	ldrb	r2, [r7, #3]
 8009918:	4611      	mov	r1, r2
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	4798      	blx	r3
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d101      	bne.n	8009928 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009924:	2300      	movs	r3, #0
 8009926:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009928:	7bfb      	ldrb	r3, [r7, #15]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b082      	sub	sp, #8
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	460b      	mov	r3, r1
 800993c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	78fa      	ldrb	r2, [r7, #3]
 8009948:	4611      	mov	r1, r2
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	4798      	blx	r3

  return USBD_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	4618      	mov	r0, r3
 800996c:	f000 fed7 	bl	800a71e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800997e:	461a      	mov	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800998c:	f003 031f 	and.w	r3, r3, #31
 8009990:	2b02      	cmp	r3, #2
 8009992:	d016      	beq.n	80099c2 <USBD_LL_SetupStage+0x6a>
 8009994:	2b02      	cmp	r3, #2
 8009996:	d81c      	bhi.n	80099d2 <USBD_LL_SetupStage+0x7a>
 8009998:	2b00      	cmp	r3, #0
 800999a:	d002      	beq.n	80099a2 <USBD_LL_SetupStage+0x4a>
 800999c:	2b01      	cmp	r3, #1
 800999e:	d008      	beq.n	80099b2 <USBD_LL_SetupStage+0x5a>
 80099a0:	e017      	b.n	80099d2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80099a8:	4619      	mov	r1, r3
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f9ca 	bl	8009d44 <USBD_StdDevReq>
      break;
 80099b0:	e01a      	b.n	80099e8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80099b8:	4619      	mov	r1, r3
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 fa2c 	bl	8009e18 <USBD_StdItfReq>
      break;
 80099c0:	e012      	b.n	80099e8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fa6c 	bl	8009ea8 <USBD_StdEPReq>
      break;
 80099d0:	e00a      	b.n	80099e8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80099d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	4619      	mov	r1, r3
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f001 fa47 	bl	800ae74 <USBD_LL_StallEP>
      break;
 80099e6:	bf00      	nop
  }

  return USBD_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b086      	sub	sp, #24
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	60f8      	str	r0, [r7, #12]
 80099fa:	460b      	mov	r3, r1
 80099fc:	607a      	str	r2, [r7, #4]
 80099fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009a00:	7afb      	ldrb	r3, [r7, #11]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d14b      	bne.n	8009a9e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009a0c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a14:	2b03      	cmp	r3, #3
 8009a16:	d134      	bne.n	8009a82 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	68da      	ldr	r2, [r3, #12]
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d919      	bls.n	8009a58 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	68da      	ldr	r2, [r3, #12]
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	1ad2      	subs	r2, r2, r3
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	68da      	ldr	r2, [r3, #12]
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d203      	bcs.n	8009a46 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	e002      	b.n	8009a4c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f000 ff38 	bl	800a8c6 <USBD_CtlContinueRx>
 8009a56:	e038      	b.n	8009aca <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00a      	beq.n	8009a7a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a6a:	2b03      	cmp	r3, #3
 8009a6c:	d105      	bne.n	8009a7a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a74:	691b      	ldr	r3, [r3, #16]
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009a7a:	68f8      	ldr	r0, [r7, #12]
 8009a7c:	f000 ff35 	bl	800a8ea <USBD_CtlSendStatus>
 8009a80:	e023      	b.n	8009aca <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a88:	2b05      	cmp	r3, #5
 8009a8a:	d11e      	bne.n	8009aca <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009a94:	2100      	movs	r1, #0
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f001 f9ec 	bl	800ae74 <USBD_LL_StallEP>
 8009a9c:	e015      	b.n	8009aca <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00d      	beq.n	8009ac6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009ab0:	2b03      	cmp	r3, #3
 8009ab2:	d108      	bne.n	8009ac6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	7afa      	ldrb	r2, [r7, #11]
 8009abe:	4611      	mov	r1, r2
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	4798      	blx	r3
 8009ac4:	e001      	b.n	8009aca <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	e000      	b.n	8009acc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3718      	adds	r7, #24
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	460b      	mov	r3, r1
 8009ade:	607a      	str	r2, [r7, #4]
 8009ae0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009ae2:	7afb      	ldrb	r3, [r7, #11]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d17f      	bne.n	8009be8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	3314      	adds	r3, #20
 8009aec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	d15c      	bne.n	8009bb2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	68da      	ldr	r2, [r3, #12]
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d915      	bls.n	8009b30 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	68da      	ldr	r2, [r3, #12]
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	1ad2      	subs	r2, r2, r3
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	461a      	mov	r2, r3
 8009b1a:	6879      	ldr	r1, [r7, #4]
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f000 fec0 	bl	800a8a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b22:	2300      	movs	r3, #0
 8009b24:	2200      	movs	r2, #0
 8009b26:	2100      	movs	r1, #0
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f001 fa4f 	bl	800afcc <USBD_LL_PrepareReceive>
 8009b2e:	e04e      	b.n	8009bce <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	697a      	ldr	r2, [r7, #20]
 8009b36:	6912      	ldr	r2, [r2, #16]
 8009b38:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b3c:	fb01 f202 	mul.w	r2, r1, r2
 8009b40:	1a9b      	subs	r3, r3, r2
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d11c      	bne.n	8009b80 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	689a      	ldr	r2, [r3, #8]
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d316      	bcc.n	8009b80 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	689a      	ldr	r2, [r3, #8]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d20f      	bcs.n	8009b80 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009b60:	2200      	movs	r2, #0
 8009b62:	2100      	movs	r1, #0
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 fe9c 	bl	800a8a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b72:	2300      	movs	r3, #0
 8009b74:	2200      	movs	r2, #0
 8009b76:	2100      	movs	r1, #0
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f001 fa27 	bl	800afcc <USBD_LL_PrepareReceive>
 8009b7e:	e026      	b.n	8009bce <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00a      	beq.n	8009ba2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	d105      	bne.n	8009ba2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009ba2:	2180      	movs	r1, #128	; 0x80
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f001 f965 	bl	800ae74 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f000 feb0 	bl	800a910 <USBD_CtlReceiveStatus>
 8009bb0:	e00d      	b.n	8009bce <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009bb8:	2b04      	cmp	r3, #4
 8009bba:	d004      	beq.n	8009bc6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d103      	bne.n	8009bce <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009bc6:	2180      	movs	r1, #128	; 0x80
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f001 f953 	bl	800ae74 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d11d      	bne.n	8009c14 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f7ff fe81 	bl	80098e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009be6:	e015      	b.n	8009c14 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00d      	beq.n	8009c10 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009bfa:	2b03      	cmp	r3, #3
 8009bfc:	d108      	bne.n	8009c10 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	7afa      	ldrb	r2, [r7, #11]
 8009c08:	4611      	mov	r1, r2
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	4798      	blx	r3
 8009c0e:	e001      	b.n	8009c14 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009c10:	2302      	movs	r3, #2
 8009c12:	e000      	b.n	8009c16 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3718      	adds	r7, #24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b082      	sub	sp, #8
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c26:	2340      	movs	r3, #64	; 0x40
 8009c28:	2200      	movs	r2, #0
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f001 f8dc 	bl	800adea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2240      	movs	r2, #64	; 0x40
 8009c3e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c42:	2340      	movs	r3, #64	; 0x40
 8009c44:	2200      	movs	r2, #0
 8009c46:	2180      	movs	r1, #128	; 0x80
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f001 f8ce 	bl	800adea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2201      	movs	r2, #1
 8009c52:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2240      	movs	r2, #64	; 0x40
 8009c58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d009      	beq.n	8009c96 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	6852      	ldr	r2, [r2, #4]
 8009c8e:	b2d2      	uxtb	r2, r2
 8009c90:	4611      	mov	r1, r2
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	4798      	blx	r3
  }

  return USBD_OK;
 8009c96:	2300      	movs	r3, #0
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	78fa      	ldrb	r2, [r7, #3]
 8009cb0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bc80      	pop	{r7}
 8009cbc:	4770      	bx	lr

08009cbe <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b083      	sub	sp, #12
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2204      	movs	r2, #4
 8009cd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bc80      	pop	{r7}
 8009ce4:	4770      	bx	lr

08009ce6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	b083      	sub	sp, #12
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	d105      	bne.n	8009d04 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	370c      	adds	r7, #12
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bc80      	pop	{r7}
 8009d0e:	4770      	bx	lr

08009d10 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d1e:	2b03      	cmp	r3, #3
 8009d20:	d10b      	bne.n	8009d3a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d28:	69db      	ldr	r3, [r3, #28]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d005      	beq.n	8009d3a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d34:	69db      	ldr	r3, [r3, #28]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d5a:	2b40      	cmp	r3, #64	; 0x40
 8009d5c:	d005      	beq.n	8009d6a <USBD_StdDevReq+0x26>
 8009d5e:	2b40      	cmp	r3, #64	; 0x40
 8009d60:	d84f      	bhi.n	8009e02 <USBD_StdDevReq+0xbe>
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d009      	beq.n	8009d7a <USBD_StdDevReq+0x36>
 8009d66:	2b20      	cmp	r3, #32
 8009d68:	d14b      	bne.n	8009e02 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	6839      	ldr	r1, [r7, #0]
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	4798      	blx	r3
      break;
 8009d78:	e048      	b.n	8009e0c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	785b      	ldrb	r3, [r3, #1]
 8009d7e:	2b09      	cmp	r3, #9
 8009d80:	d839      	bhi.n	8009df6 <USBD_StdDevReq+0xb2>
 8009d82:	a201      	add	r2, pc, #4	; (adr r2, 8009d88 <USBD_StdDevReq+0x44>)
 8009d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d88:	08009dd9 	.word	0x08009dd9
 8009d8c:	08009ded 	.word	0x08009ded
 8009d90:	08009df7 	.word	0x08009df7
 8009d94:	08009de3 	.word	0x08009de3
 8009d98:	08009df7 	.word	0x08009df7
 8009d9c:	08009dbb 	.word	0x08009dbb
 8009da0:	08009db1 	.word	0x08009db1
 8009da4:	08009df7 	.word	0x08009df7
 8009da8:	08009dcf 	.word	0x08009dcf
 8009dac:	08009dc5 	.word	0x08009dc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009db0:	6839      	ldr	r1, [r7, #0]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f9dc 	bl	800a170 <USBD_GetDescriptor>
          break;
 8009db8:	e022      	b.n	8009e00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 fb3f 	bl	800a440 <USBD_SetAddress>
          break;
 8009dc2:	e01d      	b.n	8009e00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009dc4:	6839      	ldr	r1, [r7, #0]
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fb7e 	bl	800a4c8 <USBD_SetConfig>
          break;
 8009dcc:	e018      	b.n	8009e00 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009dce:	6839      	ldr	r1, [r7, #0]
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 fc07 	bl	800a5e4 <USBD_GetConfig>
          break;
 8009dd6:	e013      	b.n	8009e00 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fc37 	bl	800a64e <USBD_GetStatus>
          break;
 8009de0:	e00e      	b.n	8009e00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fc65 	bl	800a6b4 <USBD_SetFeature>
          break;
 8009dea:	e009      	b.n	8009e00 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009dec:	6839      	ldr	r1, [r7, #0]
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fc74 	bl	800a6dc <USBD_ClrFeature>
          break;
 8009df4:	e004      	b.n	8009e00 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009df6:	6839      	ldr	r1, [r7, #0]
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fccc 	bl	800a796 <USBD_CtlError>
          break;
 8009dfe:	bf00      	nop
      }
      break;
 8009e00:	e004      	b.n	8009e0c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009e02:	6839      	ldr	r1, [r7, #0]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fcc6 	bl	800a796 <USBD_CtlError>
      break;
 8009e0a:	bf00      	nop
  }

  return ret;
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop

08009e18 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e22:	2300      	movs	r3, #0
 8009e24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e2e:	2b40      	cmp	r3, #64	; 0x40
 8009e30:	d005      	beq.n	8009e3e <USBD_StdItfReq+0x26>
 8009e32:	2b40      	cmp	r3, #64	; 0x40
 8009e34:	d82e      	bhi.n	8009e94 <USBD_StdItfReq+0x7c>
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <USBD_StdItfReq+0x26>
 8009e3a:	2b20      	cmp	r3, #32
 8009e3c:	d12a      	bne.n	8009e94 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e44:	3b01      	subs	r3, #1
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d81d      	bhi.n	8009e86 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	889b      	ldrh	r3, [r3, #4]
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d813      	bhi.n	8009e7c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	4798      	blx	r3
 8009e62:	4603      	mov	r3, r0
 8009e64:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	88db      	ldrh	r3, [r3, #6]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d110      	bne.n	8009e90 <USBD_StdItfReq+0x78>
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10d      	bne.n	8009e90 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 fd38 	bl	800a8ea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009e7a:	e009      	b.n	8009e90 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009e7c:	6839      	ldr	r1, [r7, #0]
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 fc89 	bl	800a796 <USBD_CtlError>
          break;
 8009e84:	e004      	b.n	8009e90 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009e86:	6839      	ldr	r1, [r7, #0]
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fc84 	bl	800a796 <USBD_CtlError>
          break;
 8009e8e:	e000      	b.n	8009e92 <USBD_StdItfReq+0x7a>
          break;
 8009e90:	bf00      	nop
      }
      break;
 8009e92:	e004      	b.n	8009e9e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009e94:	6839      	ldr	r1, [r7, #0]
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fc7d 	bl	800a796 <USBD_CtlError>
      break;
 8009e9c:	bf00      	nop
  }

  return USBD_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	889b      	ldrh	r3, [r3, #4]
 8009eba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ec4:	2b40      	cmp	r3, #64	; 0x40
 8009ec6:	d007      	beq.n	8009ed8 <USBD_StdEPReq+0x30>
 8009ec8:	2b40      	cmp	r3, #64	; 0x40
 8009eca:	f200 8146 	bhi.w	800a15a <USBD_StdEPReq+0x2b2>
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00a      	beq.n	8009ee8 <USBD_StdEPReq+0x40>
 8009ed2:	2b20      	cmp	r3, #32
 8009ed4:	f040 8141 	bne.w	800a15a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	4798      	blx	r3
      break;
 8009ee6:	e13d      	b.n	800a164 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ef0:	2b20      	cmp	r3, #32
 8009ef2:	d10a      	bne.n	8009f0a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	4798      	blx	r3
 8009f02:	4603      	mov	r3, r0
 8009f04:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
 8009f08:	e12d      	b.n	800a166 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	785b      	ldrb	r3, [r3, #1]
 8009f0e:	2b03      	cmp	r3, #3
 8009f10:	d007      	beq.n	8009f22 <USBD_StdEPReq+0x7a>
 8009f12:	2b03      	cmp	r3, #3
 8009f14:	f300 811b 	bgt.w	800a14e <USBD_StdEPReq+0x2a6>
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d072      	beq.n	800a002 <USBD_StdEPReq+0x15a>
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d03a      	beq.n	8009f96 <USBD_StdEPReq+0xee>
 8009f20:	e115      	b.n	800a14e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d002      	beq.n	8009f32 <USBD_StdEPReq+0x8a>
 8009f2c:	2b03      	cmp	r3, #3
 8009f2e:	d015      	beq.n	8009f5c <USBD_StdEPReq+0xb4>
 8009f30:	e02b      	b.n	8009f8a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f32:	7bbb      	ldrb	r3, [r7, #14]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00c      	beq.n	8009f52 <USBD_StdEPReq+0xaa>
 8009f38:	7bbb      	ldrb	r3, [r7, #14]
 8009f3a:	2b80      	cmp	r3, #128	; 0x80
 8009f3c:	d009      	beq.n	8009f52 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009f3e:	7bbb      	ldrb	r3, [r7, #14]
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 ff96 	bl	800ae74 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009f48:	2180      	movs	r1, #128	; 0x80
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 ff92 	bl	800ae74 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f50:	e020      	b.n	8009f94 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fc1e 	bl	800a796 <USBD_CtlError>
              break;
 8009f5a:	e01b      	b.n	8009f94 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	885b      	ldrh	r3, [r3, #2]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10e      	bne.n	8009f82 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009f64:	7bbb      	ldrb	r3, [r7, #14]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00b      	beq.n	8009f82 <USBD_StdEPReq+0xda>
 8009f6a:	7bbb      	ldrb	r3, [r7, #14]
 8009f6c:	2b80      	cmp	r3, #128	; 0x80
 8009f6e:	d008      	beq.n	8009f82 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	88db      	ldrh	r3, [r3, #6]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d104      	bne.n	8009f82 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009f78:	7bbb      	ldrb	r3, [r7, #14]
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 ff79 	bl	800ae74 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 fcb1 	bl	800a8ea <USBD_CtlSendStatus>

              break;
 8009f88:	e004      	b.n	8009f94 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009f8a:	6839      	ldr	r1, [r7, #0]
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fc02 	bl	800a796 <USBD_CtlError>
              break;
 8009f92:	bf00      	nop
          }
          break;
 8009f94:	e0e0      	b.n	800a158 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d002      	beq.n	8009fa6 <USBD_StdEPReq+0xfe>
 8009fa0:	2b03      	cmp	r3, #3
 8009fa2:	d015      	beq.n	8009fd0 <USBD_StdEPReq+0x128>
 8009fa4:	e026      	b.n	8009ff4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fa6:	7bbb      	ldrb	r3, [r7, #14]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00c      	beq.n	8009fc6 <USBD_StdEPReq+0x11e>
 8009fac:	7bbb      	ldrb	r3, [r7, #14]
 8009fae:	2b80      	cmp	r3, #128	; 0x80
 8009fb0:	d009      	beq.n	8009fc6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009fb2:	7bbb      	ldrb	r3, [r7, #14]
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 ff5c 	bl	800ae74 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009fbc:	2180      	movs	r1, #128	; 0x80
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 ff58 	bl	800ae74 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009fc4:	e01c      	b.n	800a000 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009fc6:	6839      	ldr	r1, [r7, #0]
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 fbe4 	bl	800a796 <USBD_CtlError>
              break;
 8009fce:	e017      	b.n	800a000 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	885b      	ldrh	r3, [r3, #2]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d112      	bne.n	8009ffe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009fd8:	7bbb      	ldrb	r3, [r7, #14]
 8009fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d004      	beq.n	8009fec <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009fe2:	7bbb      	ldrb	r3, [r7, #14]
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 ff63 	bl	800aeb2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fc7c 	bl	800a8ea <USBD_CtlSendStatus>
              }
              break;
 8009ff2:	e004      	b.n	8009ffe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009ff4:	6839      	ldr	r1, [r7, #0]
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fbcd 	bl	800a796 <USBD_CtlError>
              break;
 8009ffc:	e000      	b.n	800a000 <USBD_StdEPReq+0x158>
              break;
 8009ffe:	bf00      	nop
          }
          break;
 800a000:	e0aa      	b.n	800a158 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d002      	beq.n	800a012 <USBD_StdEPReq+0x16a>
 800a00c:	2b03      	cmp	r3, #3
 800a00e:	d032      	beq.n	800a076 <USBD_StdEPReq+0x1ce>
 800a010:	e097      	b.n	800a142 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a012:	7bbb      	ldrb	r3, [r7, #14]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d007      	beq.n	800a028 <USBD_StdEPReq+0x180>
 800a018:	7bbb      	ldrb	r3, [r7, #14]
 800a01a:	2b80      	cmp	r3, #128	; 0x80
 800a01c:	d004      	beq.n	800a028 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 fbb8 	bl	800a796 <USBD_CtlError>
                break;
 800a026:	e091      	b.n	800a14c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a028:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	da0b      	bge.n	800a048 <USBD_StdEPReq+0x1a0>
 800a030:	7bbb      	ldrb	r3, [r7, #14]
 800a032:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a036:	4613      	mov	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	4413      	add	r3, r2
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	3310      	adds	r3, #16
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	4413      	add	r3, r2
 800a044:	3304      	adds	r3, #4
 800a046:	e00b      	b.n	800a060 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a048:	7bbb      	ldrb	r3, [r7, #14]
 800a04a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a04e:	4613      	mov	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4413      	add	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	4413      	add	r3, r2
 800a05e:	3304      	adds	r3, #4
 800a060:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2200      	movs	r2, #0
 800a066:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	2202      	movs	r2, #2
 800a06c:	4619      	mov	r1, r3
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fbfb 	bl	800a86a <USBD_CtlSendData>
              break;
 800a074:	e06a      	b.n	800a14c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a076:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	da11      	bge.n	800a0a2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a07e:	7bbb      	ldrb	r3, [r7, #14]
 800a080:	f003 020f 	and.w	r2, r3, #15
 800a084:	6879      	ldr	r1, [r7, #4]
 800a086:	4613      	mov	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4413      	add	r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	440b      	add	r3, r1
 800a090:	3318      	adds	r3, #24
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d117      	bne.n	800a0c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a098:	6839      	ldr	r1, [r7, #0]
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fb7b 	bl	800a796 <USBD_CtlError>
                  break;
 800a0a0:	e054      	b.n	800a14c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a0a2:	7bbb      	ldrb	r3, [r7, #14]
 800a0a4:	f003 020f 	and.w	r2, r3, #15
 800a0a8:	6879      	ldr	r1, [r7, #4]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	440b      	add	r3, r1
 800a0b4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d104      	bne.n	800a0c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a0be:	6839      	ldr	r1, [r7, #0]
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fb68 	bl	800a796 <USBD_CtlError>
                  break;
 800a0c6:	e041      	b.n	800a14c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	da0b      	bge.n	800a0e8 <USBD_StdEPReq+0x240>
 800a0d0:	7bbb      	ldrb	r3, [r7, #14]
 800a0d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	3310      	adds	r3, #16
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	e00b      	b.n	800a100 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a0e8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	3304      	adds	r3, #4
 800a100:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a102:	7bbb      	ldrb	r3, [r7, #14]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d002      	beq.n	800a10e <USBD_StdEPReq+0x266>
 800a108:	7bbb      	ldrb	r3, [r7, #14]
 800a10a:	2b80      	cmp	r3, #128	; 0x80
 800a10c:	d103      	bne.n	800a116 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2200      	movs	r2, #0
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	e00e      	b.n	800a134 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a116:	7bbb      	ldrb	r3, [r7, #14]
 800a118:	4619      	mov	r1, r3
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 fee8 	bl	800aef0 <USBD_LL_IsStallEP>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d003      	beq.n	800a12e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	2201      	movs	r2, #1
 800a12a:	601a      	str	r2, [r3, #0]
 800a12c:	e002      	b.n	800a134 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	2200      	movs	r2, #0
 800a132:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	2202      	movs	r2, #2
 800a138:	4619      	mov	r1, r3
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 fb95 	bl	800a86a <USBD_CtlSendData>
              break;
 800a140:	e004      	b.n	800a14c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a142:	6839      	ldr	r1, [r7, #0]
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fb26 	bl	800a796 <USBD_CtlError>
              break;
 800a14a:	bf00      	nop
          }
          break;
 800a14c:	e004      	b.n	800a158 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fb20 	bl	800a796 <USBD_CtlError>
          break;
 800a156:	bf00      	nop
      }
      break;
 800a158:	e004      	b.n	800a164 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a15a:	6839      	ldr	r1, [r7, #0]
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 fb1a 	bl	800a796 <USBD_CtlError>
      break;
 800a162:	bf00      	nop
  }

  return ret;
 800a164:	7bfb      	ldrb	r3, [r7, #15]
}
 800a166:	4618      	mov	r0, r3
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
	...

0800a170 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a17a:	2300      	movs	r3, #0
 800a17c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a17e:	2300      	movs	r3, #0
 800a180:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a182:	2300      	movs	r3, #0
 800a184:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	885b      	ldrh	r3, [r3, #2]
 800a18a:	0a1b      	lsrs	r3, r3, #8
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	3b01      	subs	r3, #1
 800a190:	2b06      	cmp	r3, #6
 800a192:	f200 8128 	bhi.w	800a3e6 <USBD_GetDescriptor+0x276>
 800a196:	a201      	add	r2, pc, #4	; (adr r2, 800a19c <USBD_GetDescriptor+0x2c>)
 800a198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19c:	0800a1b9 	.word	0x0800a1b9
 800a1a0:	0800a1d1 	.word	0x0800a1d1
 800a1a4:	0800a211 	.word	0x0800a211
 800a1a8:	0800a3e7 	.word	0x0800a3e7
 800a1ac:	0800a3e7 	.word	0x0800a3e7
 800a1b0:	0800a387 	.word	0x0800a387
 800a1b4:	0800a3b3 	.word	0x0800a3b3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	7c12      	ldrb	r2, [r2, #16]
 800a1c4:	f107 0108 	add.w	r1, r7, #8
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	4798      	blx	r3
 800a1cc:	60f8      	str	r0, [r7, #12]
      break;
 800a1ce:	e112      	b.n	800a3f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	7c1b      	ldrb	r3, [r3, #16]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10d      	bne.n	800a1f4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e0:	f107 0208 	add.w	r2, r7, #8
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	4798      	blx	r3
 800a1e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a1f2:	e100      	b.n	800a3f6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1fc:	f107 0208 	add.w	r2, r7, #8
 800a200:	4610      	mov	r0, r2
 800a202:	4798      	blx	r3
 800a204:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	3301      	adds	r3, #1
 800a20a:	2202      	movs	r2, #2
 800a20c:	701a      	strb	r2, [r3, #0]
      break;
 800a20e:	e0f2      	b.n	800a3f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	885b      	ldrh	r3, [r3, #2]
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b05      	cmp	r3, #5
 800a218:	f200 80ac 	bhi.w	800a374 <USBD_GetDescriptor+0x204>
 800a21c:	a201      	add	r2, pc, #4	; (adr r2, 800a224 <USBD_GetDescriptor+0xb4>)
 800a21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a222:	bf00      	nop
 800a224:	0800a23d 	.word	0x0800a23d
 800a228:	0800a271 	.word	0x0800a271
 800a22c:	0800a2a5 	.word	0x0800a2a5
 800a230:	0800a2d9 	.word	0x0800a2d9
 800a234:	0800a30d 	.word	0x0800a30d
 800a238:	0800a341 	.word	0x0800a341
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00b      	beq.n	800a260 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	7c12      	ldrb	r2, [r2, #16]
 800a254:	f107 0108 	add.w	r1, r7, #8
 800a258:	4610      	mov	r0, r2
 800a25a:	4798      	blx	r3
 800a25c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a25e:	e091      	b.n	800a384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a260:	6839      	ldr	r1, [r7, #0]
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 fa97 	bl	800a796 <USBD_CtlError>
            err++;
 800a268:	7afb      	ldrb	r3, [r7, #11]
 800a26a:	3301      	adds	r3, #1
 800a26c:	72fb      	strb	r3, [r7, #11]
          break;
 800a26e:	e089      	b.n	800a384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00b      	beq.n	800a294 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	7c12      	ldrb	r2, [r2, #16]
 800a288:	f107 0108 	add.w	r1, r7, #8
 800a28c:	4610      	mov	r0, r2
 800a28e:	4798      	blx	r3
 800a290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a292:	e077      	b.n	800a384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 fa7d 	bl	800a796 <USBD_CtlError>
            err++;
 800a29c:	7afb      	ldrb	r3, [r7, #11]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a2a2:	e06f      	b.n	800a384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00b      	beq.n	800a2c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	7c12      	ldrb	r2, [r2, #16]
 800a2bc:	f107 0108 	add.w	r1, r7, #8
 800a2c0:	4610      	mov	r0, r2
 800a2c2:	4798      	blx	r3
 800a2c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2c6:	e05d      	b.n	800a384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fa63 	bl	800a796 <USBD_CtlError>
            err++;
 800a2d0:	7afb      	ldrb	r3, [r7, #11]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2d6:	e055      	b.n	800a384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00b      	beq.n	800a2fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	7c12      	ldrb	r2, [r2, #16]
 800a2f0:	f107 0108 	add.w	r1, r7, #8
 800a2f4:	4610      	mov	r0, r2
 800a2f6:	4798      	blx	r3
 800a2f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2fa:	e043      	b.n	800a384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2fc:	6839      	ldr	r1, [r7, #0]
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fa49 	bl	800a796 <USBD_CtlError>
            err++;
 800a304:	7afb      	ldrb	r3, [r7, #11]
 800a306:	3301      	adds	r3, #1
 800a308:	72fb      	strb	r3, [r7, #11]
          break;
 800a30a:	e03b      	b.n	800a384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a312:	695b      	ldr	r3, [r3, #20]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00b      	beq.n	800a330 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	7c12      	ldrb	r2, [r2, #16]
 800a324:	f107 0108 	add.w	r1, r7, #8
 800a328:	4610      	mov	r0, r2
 800a32a:	4798      	blx	r3
 800a32c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a32e:	e029      	b.n	800a384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fa2f 	bl	800a796 <USBD_CtlError>
            err++;
 800a338:	7afb      	ldrb	r3, [r7, #11]
 800a33a:	3301      	adds	r3, #1
 800a33c:	72fb      	strb	r3, [r7, #11]
          break;
 800a33e:	e021      	b.n	800a384 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00b      	beq.n	800a364 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	7c12      	ldrb	r2, [r2, #16]
 800a358:	f107 0108 	add.w	r1, r7, #8
 800a35c:	4610      	mov	r0, r2
 800a35e:	4798      	blx	r3
 800a360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a362:	e00f      	b.n	800a384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 fa15 	bl	800a796 <USBD_CtlError>
            err++;
 800a36c:	7afb      	ldrb	r3, [r7, #11]
 800a36e:	3301      	adds	r3, #1
 800a370:	72fb      	strb	r3, [r7, #11]
          break;
 800a372:	e007      	b.n	800a384 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a374:	6839      	ldr	r1, [r7, #0]
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fa0d 	bl	800a796 <USBD_CtlError>
          err++;
 800a37c:	7afb      	ldrb	r3, [r7, #11]
 800a37e:	3301      	adds	r3, #1
 800a380:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a382:	e038      	b.n	800a3f6 <USBD_GetDescriptor+0x286>
 800a384:	e037      	b.n	800a3f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	7c1b      	ldrb	r3, [r3, #16]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d109      	bne.n	800a3a2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a396:	f107 0208 	add.w	r2, r7, #8
 800a39a:	4610      	mov	r0, r2
 800a39c:	4798      	blx	r3
 800a39e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3a0:	e029      	b.n	800a3f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a3a2:	6839      	ldr	r1, [r7, #0]
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f9f6 	bl	800a796 <USBD_CtlError>
        err++;
 800a3aa:	7afb      	ldrb	r3, [r7, #11]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	72fb      	strb	r3, [r7, #11]
      break;
 800a3b0:	e021      	b.n	800a3f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	7c1b      	ldrb	r3, [r3, #16]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10d      	bne.n	800a3d6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c2:	f107 0208 	add.w	r2, r7, #8
 800a3c6:	4610      	mov	r0, r2
 800a3c8:	4798      	blx	r3
 800a3ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	2207      	movs	r2, #7
 800a3d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3d4:	e00f      	b.n	800a3f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a3d6:	6839      	ldr	r1, [r7, #0]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f9dc 	bl	800a796 <USBD_CtlError>
        err++;
 800a3de:	7afb      	ldrb	r3, [r7, #11]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	72fb      	strb	r3, [r7, #11]
      break;
 800a3e4:	e007      	b.n	800a3f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a3e6:	6839      	ldr	r1, [r7, #0]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f9d4 	bl	800a796 <USBD_CtlError>
      err++;
 800a3ee:	7afb      	ldrb	r3, [r7, #11]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	72fb      	strb	r3, [r7, #11]
      break;
 800a3f4:	bf00      	nop
  }

  if (err != 0U)
 800a3f6:	7afb      	ldrb	r3, [r7, #11]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d11c      	bne.n	800a436 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a3fc:	893b      	ldrh	r3, [r7, #8]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d011      	beq.n	800a426 <USBD_GetDescriptor+0x2b6>
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	88db      	ldrh	r3, [r3, #6]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00d      	beq.n	800a426 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	88da      	ldrh	r2, [r3, #6]
 800a40e:	893b      	ldrh	r3, [r7, #8]
 800a410:	4293      	cmp	r3, r2
 800a412:	bf28      	it	cs
 800a414:	4613      	movcs	r3, r2
 800a416:	b29b      	uxth	r3, r3
 800a418:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a41a:	893b      	ldrh	r3, [r7, #8]
 800a41c:	461a      	mov	r2, r3
 800a41e:	68f9      	ldr	r1, [r7, #12]
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 fa22 	bl	800a86a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	88db      	ldrh	r3, [r3, #6]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d104      	bne.n	800a438 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fa5b 	bl	800a8ea <USBD_CtlSendStatus>
 800a434:	e000      	b.n	800a438 <USBD_GetDescriptor+0x2c8>
    return;
 800a436:	bf00      	nop
    }
  }
}
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop

0800a440 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	889b      	ldrh	r3, [r3, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d130      	bne.n	800a4b4 <USBD_SetAddress+0x74>
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	88db      	ldrh	r3, [r3, #6]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d12c      	bne.n	800a4b4 <USBD_SetAddress+0x74>
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	885b      	ldrh	r3, [r3, #2]
 800a45e:	2b7f      	cmp	r3, #127	; 0x7f
 800a460:	d828      	bhi.n	800a4b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	885b      	ldrh	r3, [r3, #2]
 800a466:	b2db      	uxtb	r3, r3
 800a468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a46c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a474:	2b03      	cmp	r3, #3
 800a476:	d104      	bne.n	800a482 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f98b 	bl	800a796 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a480:	e01d      	b.n	800a4be <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	7bfa      	ldrb	r2, [r7, #15]
 800a486:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a48a:	7bfb      	ldrb	r3, [r7, #15]
 800a48c:	4619      	mov	r1, r3
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fd5a 	bl	800af48 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fa28 	bl	800a8ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a49a:	7bfb      	ldrb	r3, [r7, #15]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d004      	beq.n	800a4aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4a8:	e009      	b.n	800a4be <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4b2:	e004      	b.n	800a4be <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a4b4:	6839      	ldr	r1, [r7, #0]
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f96d 	bl	800a796 <USBD_CtlError>
  }
}
 800a4bc:	bf00      	nop
 800a4be:	bf00      	nop
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
	...

0800a4c8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	885b      	ldrh	r3, [r3, #2]
 800a4d6:	b2da      	uxtb	r2, r3
 800a4d8:	4b41      	ldr	r3, [pc, #260]	; (800a5e0 <USBD_SetConfig+0x118>)
 800a4da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a4dc:	4b40      	ldr	r3, [pc, #256]	; (800a5e0 <USBD_SetConfig+0x118>)
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d904      	bls.n	800a4ee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a4e4:	6839      	ldr	r1, [r7, #0]
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f955 	bl	800a796 <USBD_CtlError>
 800a4ec:	e075      	b.n	800a5da <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d002      	beq.n	800a4fe <USBD_SetConfig+0x36>
 800a4f8:	2b03      	cmp	r3, #3
 800a4fa:	d023      	beq.n	800a544 <USBD_SetConfig+0x7c>
 800a4fc:	e062      	b.n	800a5c4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a4fe:	4b38      	ldr	r3, [pc, #224]	; (800a5e0 <USBD_SetConfig+0x118>)
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d01a      	beq.n	800a53c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a506:	4b36      	ldr	r3, [pc, #216]	; (800a5e0 <USBD_SetConfig+0x118>)
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	461a      	mov	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2203      	movs	r2, #3
 800a514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a518:	4b31      	ldr	r3, [pc, #196]	; (800a5e0 <USBD_SetConfig+0x118>)
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	4619      	mov	r1, r3
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f7ff f9e8 	bl	80098f4 <USBD_SetClassConfig>
 800a524:	4603      	mov	r3, r0
 800a526:	2b02      	cmp	r3, #2
 800a528:	d104      	bne.n	800a534 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a52a:	6839      	ldr	r1, [r7, #0]
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 f932 	bl	800a796 <USBD_CtlError>
            return;
 800a532:	e052      	b.n	800a5da <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 f9d8 	bl	800a8ea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a53a:	e04e      	b.n	800a5da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f9d4 	bl	800a8ea <USBD_CtlSendStatus>
        break;
 800a542:	e04a      	b.n	800a5da <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a544:	4b26      	ldr	r3, [pc, #152]	; (800a5e0 <USBD_SetConfig+0x118>)
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d112      	bne.n	800a572 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2202      	movs	r2, #2
 800a550:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a554:	4b22      	ldr	r3, [pc, #136]	; (800a5e0 <USBD_SetConfig+0x118>)
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	461a      	mov	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a55e:	4b20      	ldr	r3, [pc, #128]	; (800a5e0 <USBD_SetConfig+0x118>)
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	4619      	mov	r1, r3
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f7ff f9e4 	bl	8009932 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 f9bd 	bl	800a8ea <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a570:	e033      	b.n	800a5da <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a572:	4b1b      	ldr	r3, [pc, #108]	; (800a5e0 <USBD_SetConfig+0x118>)
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	461a      	mov	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d01d      	beq.n	800a5bc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	b2db      	uxtb	r3, r3
 800a586:	4619      	mov	r1, r3
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7ff f9d2 	bl	8009932 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a58e:	4b14      	ldr	r3, [pc, #80]	; (800a5e0 <USBD_SetConfig+0x118>)
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	461a      	mov	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a598:	4b11      	ldr	r3, [pc, #68]	; (800a5e0 <USBD_SetConfig+0x118>)
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	4619      	mov	r1, r3
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7ff f9a8 	bl	80098f4 <USBD_SetClassConfig>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d104      	bne.n	800a5b4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a5aa:	6839      	ldr	r1, [r7, #0]
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 f8f2 	bl	800a796 <USBD_CtlError>
            return;
 800a5b2:	e012      	b.n	800a5da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 f998 	bl	800a8ea <USBD_CtlSendStatus>
        break;
 800a5ba:	e00e      	b.n	800a5da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 f994 	bl	800a8ea <USBD_CtlSendStatus>
        break;
 800a5c2:	e00a      	b.n	800a5da <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a5c4:	6839      	ldr	r1, [r7, #0]
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 f8e5 	bl	800a796 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a5cc:	4b04      	ldr	r3, [pc, #16]	; (800a5e0 <USBD_SetConfig+0x118>)
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f7ff f9ad 	bl	8009932 <USBD_ClrClassConfig>
        break;
 800a5d8:	bf00      	nop
    }
  }
}
 800a5da:	3708      	adds	r7, #8
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	2000059c 	.word	0x2000059c

0800a5e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	88db      	ldrh	r3, [r3, #6]
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d004      	beq.n	800a600 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a5f6:	6839      	ldr	r1, [r7, #0]
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f8cc 	bl	800a796 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a5fe:	e022      	b.n	800a646 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a606:	2b02      	cmp	r3, #2
 800a608:	dc02      	bgt.n	800a610 <USBD_GetConfig+0x2c>
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	dc03      	bgt.n	800a616 <USBD_GetConfig+0x32>
 800a60e:	e015      	b.n	800a63c <USBD_GetConfig+0x58>
 800a610:	2b03      	cmp	r3, #3
 800a612:	d00b      	beq.n	800a62c <USBD_GetConfig+0x48>
 800a614:	e012      	b.n	800a63c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	3308      	adds	r3, #8
 800a620:	2201      	movs	r2, #1
 800a622:	4619      	mov	r1, r3
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 f920 	bl	800a86a <USBD_CtlSendData>
        break;
 800a62a:	e00c      	b.n	800a646 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	3304      	adds	r3, #4
 800a630:	2201      	movs	r2, #1
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 f918 	bl	800a86a <USBD_CtlSendData>
        break;
 800a63a:	e004      	b.n	800a646 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a63c:	6839      	ldr	r1, [r7, #0]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f8a9 	bl	800a796 <USBD_CtlError>
        break;
 800a644:	bf00      	nop
}
 800a646:	bf00      	nop
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b082      	sub	sp, #8
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a65e:	3b01      	subs	r3, #1
 800a660:	2b02      	cmp	r3, #2
 800a662:	d81e      	bhi.n	800a6a2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	88db      	ldrh	r3, [r3, #6]
 800a668:	2b02      	cmp	r3, #2
 800a66a:	d004      	beq.n	800a676 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f891 	bl	800a796 <USBD_CtlError>
        break;
 800a674:	e01a      	b.n	800a6ac <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a682:	2b00      	cmp	r3, #0
 800a684:	d005      	beq.n	800a692 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	f043 0202 	orr.w	r2, r3, #2
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	330c      	adds	r3, #12
 800a696:	2202      	movs	r2, #2
 800a698:	4619      	mov	r1, r3
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f8e5 	bl	800a86a <USBD_CtlSendData>
      break;
 800a6a0:	e004      	b.n	800a6ac <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a6a2:	6839      	ldr	r1, [r7, #0]
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 f876 	bl	800a796 <USBD_CtlError>
      break;
 800a6aa:	bf00      	nop
  }
}
 800a6ac:	bf00      	nop
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	885b      	ldrh	r3, [r3, #2]
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d106      	bne.n	800a6d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 f90b 	bl	800a8ea <USBD_CtlSendStatus>
  }
}
 800a6d4:	bf00      	nop
 800a6d6:	3708      	adds	r7, #8
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ec:	3b01      	subs	r3, #1
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	d80b      	bhi.n	800a70a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	885b      	ldrh	r3, [r3, #2]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d10c      	bne.n	800a714 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f8f1 	bl	800a8ea <USBD_CtlSendStatus>
      }
      break;
 800a708:	e004      	b.n	800a714 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a70a:	6839      	ldr	r1, [r7, #0]
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f842 	bl	800a796 <USBD_CtlError>
      break;
 800a712:	e000      	b.n	800a716 <USBD_ClrFeature+0x3a>
      break;
 800a714:	bf00      	nop
  }
}
 800a716:	bf00      	nop
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a71e:	b480      	push	{r7}
 800a720:	b083      	sub	sp, #12
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	781a      	ldrb	r2, [r3, #0]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	785a      	ldrb	r2, [r3, #1]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	3302      	adds	r3, #2
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	b29a      	uxth	r2, r3
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	3303      	adds	r3, #3
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	b29b      	uxth	r3, r3
 800a748:	021b      	lsls	r3, r3, #8
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	4413      	add	r3, r2
 800a74e:	b29a      	uxth	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	3304      	adds	r3, #4
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	3305      	adds	r3, #5
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	b29b      	uxth	r3, r3
 800a764:	021b      	lsls	r3, r3, #8
 800a766:	b29b      	uxth	r3, r3
 800a768:	4413      	add	r3, r2
 800a76a:	b29a      	uxth	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	3306      	adds	r3, #6
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	b29a      	uxth	r2, r3
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	3307      	adds	r3, #7
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	b29b      	uxth	r3, r3
 800a780:	021b      	lsls	r3, r3, #8
 800a782:	b29b      	uxth	r3, r3
 800a784:	4413      	add	r3, r2
 800a786:	b29a      	uxth	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	80da      	strh	r2, [r3, #6]

}
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	bc80      	pop	{r7}
 800a794:	4770      	bx	lr

0800a796 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a796:	b580      	push	{r7, lr}
 800a798:	b082      	sub	sp, #8
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
 800a79e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a7a0:	2180      	movs	r1, #128	; 0x80
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fb66 	bl	800ae74 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 fb62 	bl	800ae74 <USBD_LL_StallEP>
}
 800a7b0:	bf00      	nop
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b086      	sub	sp, #24
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d032      	beq.n	800a834 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	f000 f834 	bl	800a83c <USBD_GetLen>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	005b      	lsls	r3, r3, #1
 800a7dc:	b29a      	uxth	r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a7e2:	7dfb      	ldrb	r3, [r7, #23]
 800a7e4:	1c5a      	adds	r2, r3, #1
 800a7e6:	75fa      	strb	r2, [r7, #23]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	7812      	ldrb	r2, [r2, #0]
 800a7f2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a7f4:	7dfb      	ldrb	r3, [r7, #23]
 800a7f6:	1c5a      	adds	r2, r3, #1
 800a7f8:	75fa      	strb	r2, [r7, #23]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	4413      	add	r3, r2
 800a800:	2203      	movs	r2, #3
 800a802:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a804:	e012      	b.n	800a82c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	1c5a      	adds	r2, r3, #1
 800a80a:	60fa      	str	r2, [r7, #12]
 800a80c:	7dfa      	ldrb	r2, [r7, #23]
 800a80e:	1c51      	adds	r1, r2, #1
 800a810:	75f9      	strb	r1, [r7, #23]
 800a812:	4611      	mov	r1, r2
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	440a      	add	r2, r1
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a81c:	7dfb      	ldrb	r3, [r7, #23]
 800a81e:	1c5a      	adds	r2, r3, #1
 800a820:	75fa      	strb	r2, [r7, #23]
 800a822:	461a      	mov	r2, r3
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	4413      	add	r3, r2
 800a828:	2200      	movs	r2, #0
 800a82a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d1e8      	bne.n	800a806 <USBD_GetString+0x4e>
    }
  }
}
 800a834:	bf00      	nop
 800a836:	3718      	adds	r7, #24
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a844:	2300      	movs	r3, #0
 800a846:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a848:	e005      	b.n	800a856 <USBD_GetLen+0x1a>
  {
    len++;
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
 800a84c:	3301      	adds	r3, #1
 800a84e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	3301      	adds	r3, #1
 800a854:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1f5      	bne.n	800a84a <USBD_GetLen+0xe>
  }

  return len;
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a860:	4618      	mov	r0, r3
 800a862:	3714      	adds	r7, #20
 800a864:	46bd      	mov	sp, r7
 800a866:	bc80      	pop	{r7}
 800a868:	4770      	bx	lr

0800a86a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b084      	sub	sp, #16
 800a86e:	af00      	add	r7, sp, #0
 800a870:	60f8      	str	r0, [r7, #12]
 800a872:	60b9      	str	r1, [r7, #8]
 800a874:	4613      	mov	r3, r2
 800a876:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2202      	movs	r2, #2
 800a87c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a880:	88fa      	ldrh	r2, [r7, #6]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a886:	88fa      	ldrh	r2, [r7, #6]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a88c:	88fb      	ldrh	r3, [r7, #6]
 800a88e:	68ba      	ldr	r2, [r7, #8]
 800a890:	2100      	movs	r1, #0
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f000 fb77 	bl	800af86 <USBD_LL_Transmit>

  return USBD_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b084      	sub	sp, #16
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	60f8      	str	r0, [r7, #12]
 800a8aa:	60b9      	str	r1, [r7, #8]
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8b0:	88fb      	ldrh	r3, [r7, #6]
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f000 fb65 	bl	800af86 <USBD_LL_Transmit>

  return USBD_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b084      	sub	sp, #16
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	60f8      	str	r0, [r7, #12]
 800a8ce:	60b9      	str	r1, [r7, #8]
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8d4:	88fb      	ldrh	r3, [r7, #6]
 800a8d6:	68ba      	ldr	r2, [r7, #8]
 800a8d8:	2100      	movs	r1, #0
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f000 fb76 	bl	800afcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b082      	sub	sp, #8
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2204      	movs	r2, #4
 800a8f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	2100      	movs	r1, #0
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fb40 	bl	800af86 <USBD_LL_Transmit>

  return USBD_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2205      	movs	r2, #5
 800a91c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a920:	2300      	movs	r3, #0
 800a922:	2200      	movs	r2, #0
 800a924:	2100      	movs	r1, #0
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 fb50 	bl	800afcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
	...

0800a938 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a93c:	2200      	movs	r2, #0
 800a93e:	490e      	ldr	r1, [pc, #56]	; (800a978 <MX_USB_DEVICE_Init+0x40>)
 800a940:	480e      	ldr	r0, [pc, #56]	; (800a97c <MX_USB_DEVICE_Init+0x44>)
 800a942:	f7fe ff7d 	bl	8009840 <USBD_Init>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a94c:	f7f7 fd3a 	bl	80023c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800a950:	490b      	ldr	r1, [pc, #44]	; (800a980 <MX_USB_DEVICE_Init+0x48>)
 800a952:	480a      	ldr	r0, [pc, #40]	; (800a97c <MX_USB_DEVICE_Init+0x44>)
 800a954:	f7fe ff9f 	bl	8009896 <USBD_RegisterClass>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d001      	beq.n	800a962 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a95e:	f7f7 fd31 	bl	80023c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a962:	4806      	ldr	r0, [pc, #24]	; (800a97c <MX_USB_DEVICE_Init+0x44>)
 800a964:	f7fe ffb0 	bl	80098c8 <USBD_Start>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d001      	beq.n	800a972 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a96e:	f7f7 fd29 	bl	80023c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a972:	bf00      	nop
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	200000f0 	.word	0x200000f0
 800a97c:	200005a0 	.word	0x200005a0
 800a980:	2000001c 	.word	0x2000001c

0800a984 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	4603      	mov	r3, r0
 800a98c:	6039      	str	r1, [r7, #0]
 800a98e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	2212      	movs	r2, #18
 800a994:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a996:	4b03      	ldr	r3, [pc, #12]	; (800a9a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a998:	4618      	mov	r0, r3
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bc80      	pop	{r7}
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	2000010c 	.word	0x2000010c

0800a9a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	6039      	str	r1, [r7, #0]
 800a9b2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	2204      	movs	r2, #4
 800a9b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a9ba:	4b03      	ldr	r3, [pc, #12]	; (800a9c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bc80      	pop	{r7}
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	20000120 	.word	0x20000120

0800a9cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	6039      	str	r1, [r7, #0]
 800a9d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9d8:	79fb      	ldrb	r3, [r7, #7]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d105      	bne.n	800a9ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a9de:	683a      	ldr	r2, [r7, #0]
 800a9e0:	4907      	ldr	r1, [pc, #28]	; (800aa00 <USBD_FS_ProductStrDescriptor+0x34>)
 800a9e2:	4808      	ldr	r0, [pc, #32]	; (800aa04 <USBD_FS_ProductStrDescriptor+0x38>)
 800a9e4:	f7ff fee8 	bl	800a7b8 <USBD_GetString>
 800a9e8:	e004      	b.n	800a9f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	4904      	ldr	r1, [pc, #16]	; (800aa00 <USBD_FS_ProductStrDescriptor+0x34>)
 800a9ee:	4805      	ldr	r0, [pc, #20]	; (800aa04 <USBD_FS_ProductStrDescriptor+0x38>)
 800a9f0:	f7ff fee2 	bl	800a7b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9f4:	4b02      	ldr	r3, [pc, #8]	; (800aa00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3708      	adds	r7, #8
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20000864 	.word	0x20000864
 800aa04:	0800e1b4 	.word	0x0800e1b4

0800aa08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	4603      	mov	r3, r0
 800aa10:	6039      	str	r1, [r7, #0]
 800aa12:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa14:	683a      	ldr	r2, [r7, #0]
 800aa16:	4904      	ldr	r1, [pc, #16]	; (800aa28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa18:	4804      	ldr	r0, [pc, #16]	; (800aa2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa1a:	f7ff fecd 	bl	800a7b8 <USBD_GetString>
  return USBD_StrDesc;
 800aa1e:	4b02      	ldr	r3, [pc, #8]	; (800aa28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	20000864 	.word	0x20000864
 800aa2c:	0800e1c8 	.word	0x0800e1c8

0800aa30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	4603      	mov	r3, r0
 800aa38:	6039      	str	r1, [r7, #0]
 800aa3a:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	221a      	movs	r2, #26
 800aa40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa42:	f000 f843 	bl	800aacc <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800aa46:	4b02      	ldr	r3, [pc, #8]	; (800aa50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	20000124 	.word	0x20000124

0800aa54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	6039      	str	r1, [r7, #0]
 800aa5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aa60:	79fb      	ldrb	r3, [r7, #7]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d105      	bne.n	800aa72 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	4907      	ldr	r1, [pc, #28]	; (800aa88 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa6a:	4808      	ldr	r0, [pc, #32]	; (800aa8c <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa6c:	f7ff fea4 	bl	800a7b8 <USBD_GetString>
 800aa70:	e004      	b.n	800aa7c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa72:	683a      	ldr	r2, [r7, #0]
 800aa74:	4904      	ldr	r1, [pc, #16]	; (800aa88 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa76:	4805      	ldr	r0, [pc, #20]	; (800aa8c <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa78:	f7ff fe9e 	bl	800a7b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa7c:	4b02      	ldr	r3, [pc, #8]	; (800aa88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20000864 	.word	0x20000864
 800aa8c:	0800e1d8 	.word	0x0800e1d8

0800aa90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	4603      	mov	r3, r0
 800aa98:	6039      	str	r1, [r7, #0]
 800aa9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa9c:	79fb      	ldrb	r3, [r7, #7]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d105      	bne.n	800aaae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aaa2:	683a      	ldr	r2, [r7, #0]
 800aaa4:	4907      	ldr	r1, [pc, #28]	; (800aac4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aaa6:	4808      	ldr	r0, [pc, #32]	; (800aac8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aaa8:	f7ff fe86 	bl	800a7b8 <USBD_GetString>
 800aaac:	e004      	b.n	800aab8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aaae:	683a      	ldr	r2, [r7, #0]
 800aab0:	4904      	ldr	r1, [pc, #16]	; (800aac4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aab2:	4805      	ldr	r0, [pc, #20]	; (800aac8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aab4:	f7ff fe80 	bl	800a7b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aab8:	4b02      	ldr	r3, [pc, #8]	; (800aac4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3708      	adds	r7, #8
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	20000864 	.word	0x20000864
 800aac8:	0800e1e4 	.word	0x0800e1e4

0800aacc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aad2:	4b0f      	ldr	r3, [pc, #60]	; (800ab10 <Get_SerialNum+0x44>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aad8:	4b0e      	ldr	r3, [pc, #56]	; (800ab14 <Get_SerialNum+0x48>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aade:	4b0e      	ldr	r3, [pc, #56]	; (800ab18 <Get_SerialNum+0x4c>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4413      	add	r3, r2
 800aaea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d009      	beq.n	800ab06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aaf2:	2208      	movs	r2, #8
 800aaf4:	4909      	ldr	r1, [pc, #36]	; (800ab1c <Get_SerialNum+0x50>)
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f000 f814 	bl	800ab24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aafc:	2204      	movs	r2, #4
 800aafe:	4908      	ldr	r1, [pc, #32]	; (800ab20 <Get_SerialNum+0x54>)
 800ab00:	68b8      	ldr	r0, [r7, #8]
 800ab02:	f000 f80f 	bl	800ab24 <IntToUnicode>
  }
}
 800ab06:	bf00      	nop
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	1ffff7e8 	.word	0x1ffff7e8
 800ab14:	1ffff7ec 	.word	0x1ffff7ec
 800ab18:	1ffff7f0 	.word	0x1ffff7f0
 800ab1c:	20000126 	.word	0x20000126
 800ab20:	20000136 	.word	0x20000136

0800ab24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b087      	sub	sp, #28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	4613      	mov	r3, r2
 800ab30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab32:	2300      	movs	r3, #0
 800ab34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab36:	2300      	movs	r3, #0
 800ab38:	75fb      	strb	r3, [r7, #23]
 800ab3a:	e027      	b.n	800ab8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	0f1b      	lsrs	r3, r3, #28
 800ab40:	2b09      	cmp	r3, #9
 800ab42:	d80b      	bhi.n	800ab5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	0f1b      	lsrs	r3, r3, #28
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	7dfb      	ldrb	r3, [r7, #23]
 800ab4c:	005b      	lsls	r3, r3, #1
 800ab4e:	4619      	mov	r1, r3
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	440b      	add	r3, r1
 800ab54:	3230      	adds	r2, #48	; 0x30
 800ab56:	b2d2      	uxtb	r2, r2
 800ab58:	701a      	strb	r2, [r3, #0]
 800ab5a:	e00a      	b.n	800ab72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	0f1b      	lsrs	r3, r3, #28
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	7dfb      	ldrb	r3, [r7, #23]
 800ab64:	005b      	lsls	r3, r3, #1
 800ab66:	4619      	mov	r1, r3
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	440b      	add	r3, r1
 800ab6c:	3237      	adds	r2, #55	; 0x37
 800ab6e:	b2d2      	uxtb	r2, r2
 800ab70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	011b      	lsls	r3, r3, #4
 800ab76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ab78:	7dfb      	ldrb	r3, [r7, #23]
 800ab7a:	005b      	lsls	r3, r3, #1
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	68ba      	ldr	r2, [r7, #8]
 800ab80:	4413      	add	r3, r2
 800ab82:	2200      	movs	r2, #0
 800ab84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ab86:	7dfb      	ldrb	r3, [r7, #23]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	75fb      	strb	r3, [r7, #23]
 800ab8c:	7dfa      	ldrb	r2, [r7, #23]
 800ab8e:	79fb      	ldrb	r3, [r7, #7]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d3d3      	bcc.n	800ab3c <IntToUnicode+0x18>
  }
}
 800ab94:	bf00      	nop
 800ab96:	bf00      	nop
 800ab98:	371c      	adds	r7, #28
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bc80      	pop	{r7}
 800ab9e:	4770      	bx	lr

0800aba0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a0d      	ldr	r2, [pc, #52]	; (800abe4 <HAL_PCD_MspInit+0x44>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d113      	bne.n	800abda <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800abb2:	4b0d      	ldr	r3, [pc, #52]	; (800abe8 <HAL_PCD_MspInit+0x48>)
 800abb4:	69db      	ldr	r3, [r3, #28]
 800abb6:	4a0c      	ldr	r2, [pc, #48]	; (800abe8 <HAL_PCD_MspInit+0x48>)
 800abb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800abbc:	61d3      	str	r3, [r2, #28]
 800abbe:	4b0a      	ldr	r3, [pc, #40]	; (800abe8 <HAL_PCD_MspInit+0x48>)
 800abc0:	69db      	ldr	r3, [r3, #28]
 800abc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abc6:	60fb      	str	r3, [r7, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800abca:	2200      	movs	r2, #0
 800abcc:	2105      	movs	r1, #5
 800abce:	2014      	movs	r0, #20
 800abd0:	f7f8 fb79 	bl	80032c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800abd4:	2014      	movs	r0, #20
 800abd6:	f7f8 fb92 	bl	80032fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800abda:	bf00      	nop
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	40005c00 	.word	0x40005c00
 800abe8:	40021000 	.word	0x40021000

0800abec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ac00:	4619      	mov	r1, r3
 800ac02:	4610      	mov	r0, r2
 800ac04:	f7fe fea8 	bl	8009958 <USBD_LL_SetupStage>
}
 800ac08:	bf00      	nop
 800ac0a:	3708      	adds	r7, #8
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	460b      	mov	r3, r1
 800ac1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800ac22:	78fa      	ldrb	r2, [r7, #3]
 800ac24:	6879      	ldr	r1, [r7, #4]
 800ac26:	4613      	mov	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	00db      	lsls	r3, r3, #3
 800ac2e:	440b      	add	r3, r1
 800ac30:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	78fb      	ldrb	r3, [r7, #3]
 800ac38:	4619      	mov	r1, r3
 800ac3a:	f7fe feda 	bl	80099f2 <USBD_LL_DataOutStage>
}
 800ac3e:	bf00      	nop
 800ac40:	3708      	adds	r7, #8
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b082      	sub	sp, #8
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	460b      	mov	r3, r1
 800ac50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800ac58:	78fa      	ldrb	r2, [r7, #3]
 800ac5a:	6879      	ldr	r1, [r7, #4]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	00db      	lsls	r3, r3, #3
 800ac64:	440b      	add	r3, r1
 800ac66:	333c      	adds	r3, #60	; 0x3c
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	78fb      	ldrb	r3, [r7, #3]
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	f7fe ff31 	bl	8009ad4 <USBD_LL_DataInStage>
}
 800ac72:	bf00      	nop
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b082      	sub	sp, #8
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7ff f841 	bl	8009d10 <USBD_LL_SOF>
}
 800ac8e:	bf00      	nop
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b084      	sub	sp, #16
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d001      	beq.n	800acae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800acaa:	f7f7 fb8b 	bl	80023c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800acb4:	7bfa      	ldrb	r2, [r7, #15]
 800acb6:	4611      	mov	r1, r2
 800acb8:	4618      	mov	r0, r3
 800acba:	f7fe fff1 	bl	8009ca0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7fe ffaa 	bl	8009c1e <USBD_LL_Reset>
}
 800acca:	bf00      	nop
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
	...

0800acd4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fe ffeb 	bl	8009cbe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	699b      	ldr	r3, [r3, #24]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d005      	beq.n	800acfc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800acf0:	4b04      	ldr	r3, [pc, #16]	; (800ad04 <HAL_PCD_SuspendCallback+0x30>)
 800acf2:	691b      	ldr	r3, [r3, #16]
 800acf4:	4a03      	ldr	r2, [pc, #12]	; (800ad04 <HAL_PCD_SuspendCallback+0x30>)
 800acf6:	f043 0306 	orr.w	r3, r3, #6
 800acfa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800acfc:	bf00      	nop
 800acfe:	3708      	adds	r7, #8
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	e000ed00 	.word	0xe000ed00

0800ad08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fe ffe5 	bl	8009ce6 <USBD_LL_Resume>
}
 800ad1c:	bf00      	nop
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ad2c:	4a1f      	ldr	r2, [pc, #124]	; (800adac <USBD_LL_Init+0x88>)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a1d      	ldr	r2, [pc, #116]	; (800adac <USBD_LL_Init+0x88>)
 800ad38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ad3c:	4b1b      	ldr	r3, [pc, #108]	; (800adac <USBD_LL_Init+0x88>)
 800ad3e:	4a1c      	ldr	r2, [pc, #112]	; (800adb0 <USBD_LL_Init+0x8c>)
 800ad40:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ad42:	4b1a      	ldr	r3, [pc, #104]	; (800adac <USBD_LL_Init+0x88>)
 800ad44:	2208      	movs	r2, #8
 800ad46:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ad48:	4b18      	ldr	r3, [pc, #96]	; (800adac <USBD_LL_Init+0x88>)
 800ad4a:	2202      	movs	r2, #2
 800ad4c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ad4e:	4b17      	ldr	r3, [pc, #92]	; (800adac <USBD_LL_Init+0x88>)
 800ad50:	2200      	movs	r2, #0
 800ad52:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ad54:	4b15      	ldr	r3, [pc, #84]	; (800adac <USBD_LL_Init+0x88>)
 800ad56:	2200      	movs	r2, #0
 800ad58:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ad5a:	4b14      	ldr	r3, [pc, #80]	; (800adac <USBD_LL_Init+0x88>)
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ad60:	4812      	ldr	r0, [pc, #72]	; (800adac <USBD_LL_Init+0x88>)
 800ad62:	f7f8 ffec 	bl	8003d3e <HAL_PCD_Init>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ad6c:	f7f7 fb2a 	bl	80023c4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad76:	2318      	movs	r3, #24
 800ad78:	2200      	movs	r2, #0
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	f7fa fcf4 	bl	8005768 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad86:	2358      	movs	r3, #88	; 0x58
 800ad88:	2200      	movs	r2, #0
 800ad8a:	2180      	movs	r1, #128	; 0x80
 800ad8c:	f7fa fcec 	bl	8005768 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad96:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	2181      	movs	r1, #129	; 0x81
 800ad9e:	f7fa fce3 	bl	8005768 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3708      	adds	r7, #8
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	20000a64 	.word	0x20000a64
 800adb0:	40005c00 	.word	0x40005c00

0800adb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adbc:	2300      	movs	r3, #0
 800adbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adc0:	2300      	movs	r3, #0
 800adc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adca:	4618      	mov	r0, r3
 800adcc:	f7f9 f8b6 	bl	8003f3c <HAL_PCD_Start>
 800add0:	4603      	mov	r3, r0
 800add2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800add4:	7bfb      	ldrb	r3, [r7, #15]
 800add6:	4618      	mov	r0, r3
 800add8:	f000 f93c 	bl	800b054 <USBD_Get_USB_Status>
 800addc:	4603      	mov	r3, r0
 800adde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ade0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b084      	sub	sp, #16
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	4608      	mov	r0, r1
 800adf4:	4611      	mov	r1, r2
 800adf6:	461a      	mov	r2, r3
 800adf8:	4603      	mov	r3, r0
 800adfa:	70fb      	strb	r3, [r7, #3]
 800adfc:	460b      	mov	r3, r1
 800adfe:	70bb      	strb	r3, [r7, #2]
 800ae00:	4613      	mov	r3, r2
 800ae02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae04:	2300      	movs	r3, #0
 800ae06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae12:	78bb      	ldrb	r3, [r7, #2]
 800ae14:	883a      	ldrh	r2, [r7, #0]
 800ae16:	78f9      	ldrb	r1, [r7, #3]
 800ae18:	f7f9 fa0b 	bl	8004232 <HAL_PCD_EP_Open>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae20:	7bfb      	ldrb	r3, [r7, #15]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f000 f916 	bl	800b054 <USBD_Get_USB_Status>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b084      	sub	sp, #16
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	460b      	mov	r3, r1
 800ae40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae42:	2300      	movs	r3, #0
 800ae44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae46:	2300      	movs	r3, #0
 800ae48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae50:	78fa      	ldrb	r2, [r7, #3]
 800ae52:	4611      	mov	r1, r2
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7f9 fa49 	bl	80042ec <HAL_PCD_EP_Close>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae5e:	7bfb      	ldrb	r3, [r7, #15]
 800ae60:	4618      	mov	r0, r3
 800ae62:	f000 f8f7 	bl	800b054 <USBD_Get_USB_Status>
 800ae66:	4603      	mov	r3, r0
 800ae68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae80:	2300      	movs	r3, #0
 800ae82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae84:	2300      	movs	r3, #0
 800ae86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae8e:	78fa      	ldrb	r2, [r7, #3]
 800ae90:	4611      	mov	r1, r2
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7f9 fada 	bl	800444c <HAL_PCD_EP_SetStall>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae9c:	7bfb      	ldrb	r3, [r7, #15]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f000 f8d8 	bl	800b054 <USBD_Get_USB_Status>
 800aea4:	4603      	mov	r3, r0
 800aea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aea8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b084      	sub	sp, #16
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	460b      	mov	r3, r1
 800aebc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aebe:	2300      	movs	r3, #0
 800aec0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aecc:	78fa      	ldrb	r2, [r7, #3]
 800aece:	4611      	mov	r1, r2
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7f9 fb1b 	bl	800450c <HAL_PCD_EP_ClrStall>
 800aed6:	4603      	mov	r3, r0
 800aed8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeda:	7bfb      	ldrb	r3, [r7, #15]
 800aedc:	4618      	mov	r0, r3
 800aede:	f000 f8b9 	bl	800b054 <USBD_Get_USB_Status>
 800aee2:	4603      	mov	r3, r0
 800aee4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aee6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3710      	adds	r7, #16
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	460b      	mov	r3, r1
 800aefa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	da0c      	bge.n	800af26 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af0c:	78fb      	ldrb	r3, [r7, #3]
 800af0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af12:	68f9      	ldr	r1, [r7, #12]
 800af14:	1c5a      	adds	r2, r3, #1
 800af16:	4613      	mov	r3, r2
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	4413      	add	r3, r2
 800af1c:	00db      	lsls	r3, r3, #3
 800af1e:	440b      	add	r3, r1
 800af20:	3302      	adds	r3, #2
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	e00b      	b.n	800af3e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800af26:	78fb      	ldrb	r3, [r7, #3]
 800af28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af2c:	68f9      	ldr	r1, [r7, #12]
 800af2e:	4613      	mov	r3, r2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	4413      	add	r3, r2
 800af34:	00db      	lsls	r3, r3, #3
 800af36:	440b      	add	r3, r1
 800af38:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800af3c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3714      	adds	r7, #20
 800af42:	46bd      	mov	sp, r7
 800af44:	bc80      	pop	{r7}
 800af46:	4770      	bx	lr

0800af48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	460b      	mov	r3, r1
 800af52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af54:	2300      	movs	r3, #0
 800af56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af58:	2300      	movs	r3, #0
 800af5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af62:	78fa      	ldrb	r2, [r7, #3]
 800af64:	4611      	mov	r1, r2
 800af66:	4618      	mov	r0, r3
 800af68:	f7f9 f93e 	bl	80041e8 <HAL_PCD_SetAddress>
 800af6c:	4603      	mov	r3, r0
 800af6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af70:	7bfb      	ldrb	r3, [r7, #15]
 800af72:	4618      	mov	r0, r3
 800af74:	f000 f86e 	bl	800b054 <USBD_Get_USB_Status>
 800af78:	4603      	mov	r3, r0
 800af7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3710      	adds	r7, #16
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b086      	sub	sp, #24
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	60f8      	str	r0, [r7, #12]
 800af8e:	607a      	str	r2, [r7, #4]
 800af90:	461a      	mov	r2, r3
 800af92:	460b      	mov	r3, r1
 800af94:	72fb      	strb	r3, [r7, #11]
 800af96:	4613      	mov	r3, r2
 800af98:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af9a:	2300      	movs	r3, #0
 800af9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af9e:	2300      	movs	r3, #0
 800afa0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800afa8:	893b      	ldrh	r3, [r7, #8]
 800afaa:	7af9      	ldrb	r1, [r7, #11]
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	f7f9 fa16 	bl	80043de <HAL_PCD_EP_Transmit>
 800afb2:	4603      	mov	r3, r0
 800afb4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afb6:	7dfb      	ldrb	r3, [r7, #23]
 800afb8:	4618      	mov	r0, r3
 800afba:	f000 f84b 	bl	800b054 <USBD_Get_USB_Status>
 800afbe:	4603      	mov	r3, r0
 800afc0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800afc2:	7dbb      	ldrb	r3, [r7, #22]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3718      	adds	r7, #24
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	607a      	str	r2, [r7, #4]
 800afd6:	461a      	mov	r2, r3
 800afd8:	460b      	mov	r3, r1
 800afda:	72fb      	strb	r3, [r7, #11]
 800afdc:	4613      	mov	r3, r2
 800afde:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afe0:	2300      	movs	r3, #0
 800afe2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afe4:	2300      	movs	r3, #0
 800afe6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800afee:	893b      	ldrh	r3, [r7, #8]
 800aff0:	7af9      	ldrb	r1, [r7, #11]
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	f7f9 f9c2 	bl	800437c <HAL_PCD_EP_Receive>
 800aff8:	4603      	mov	r3, r0
 800affa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800affc:	7dfb      	ldrb	r3, [r7, #23]
 800affe:	4618      	mov	r0, r3
 800b000:	f000 f828 	bl	800b054 <USBD_Get_USB_Status>
 800b004:	4603      	mov	r3, r0
 800b006:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b008:	7dbb      	ldrb	r3, [r7, #22]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3718      	adds	r7, #24
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
	...

0800b014 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b01c:	4b02      	ldr	r3, [pc, #8]	; (800b028 <USBD_static_malloc+0x14>)
}
 800b01e:	4618      	mov	r0, r3
 800b020:	370c      	adds	r7, #12
 800b022:	46bd      	mov	sp, r7
 800b024:	bc80      	pop	{r7}
 800b026:	4770      	bx	lr
 800b028:	20000d54 	.word	0x20000d54

0800b02c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]

}
 800b034:	bf00      	nop
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	bc80      	pop	{r7}
 800b03c:	4770      	bx	lr

0800b03e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b03e:	b480      	push	{r7}
 800b040:	b083      	sub	sp, #12
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
 800b046:	460b      	mov	r3, r1
 800b048:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b04a:	bf00      	nop
 800b04c:	370c      	adds	r7, #12
 800b04e:	46bd      	mov	sp, r7
 800b050:	bc80      	pop	{r7}
 800b052:	4770      	bx	lr

0800b054 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	4603      	mov	r3, r0
 800b05c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b05e:	2300      	movs	r3, #0
 800b060:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b062:	79fb      	ldrb	r3, [r7, #7]
 800b064:	2b03      	cmp	r3, #3
 800b066:	d817      	bhi.n	800b098 <USBD_Get_USB_Status+0x44>
 800b068:	a201      	add	r2, pc, #4	; (adr r2, 800b070 <USBD_Get_USB_Status+0x1c>)
 800b06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b06e:	bf00      	nop
 800b070:	0800b081 	.word	0x0800b081
 800b074:	0800b087 	.word	0x0800b087
 800b078:	0800b08d 	.word	0x0800b08d
 800b07c:	0800b093 	.word	0x0800b093
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b080:	2300      	movs	r3, #0
 800b082:	73fb      	strb	r3, [r7, #15]
    break;
 800b084:	e00b      	b.n	800b09e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b086:	2302      	movs	r3, #2
 800b088:	73fb      	strb	r3, [r7, #15]
    break;
 800b08a:	e008      	b.n	800b09e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b08c:	2301      	movs	r3, #1
 800b08e:	73fb      	strb	r3, [r7, #15]
    break;
 800b090:	e005      	b.n	800b09e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b092:	2302      	movs	r3, #2
 800b094:	73fb      	strb	r3, [r7, #15]
    break;
 800b096:	e002      	b.n	800b09e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b098:	2302      	movs	r3, #2
 800b09a:	73fb      	strb	r3, [r7, #15]
    break;
 800b09c:	bf00      	nop
  }
  return usb_status;
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3714      	adds	r7, #20
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bc80      	pop	{r7}
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop

0800b0ac <__errno>:
 800b0ac:	4b01      	ldr	r3, [pc, #4]	; (800b0b4 <__errno+0x8>)
 800b0ae:	6818      	ldr	r0, [r3, #0]
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	20000140 	.word	0x20000140

0800b0b8 <__libc_init_array>:
 800b0b8:	b570      	push	{r4, r5, r6, lr}
 800b0ba:	2600      	movs	r6, #0
 800b0bc:	4d0c      	ldr	r5, [pc, #48]	; (800b0f0 <__libc_init_array+0x38>)
 800b0be:	4c0d      	ldr	r4, [pc, #52]	; (800b0f4 <__libc_init_array+0x3c>)
 800b0c0:	1b64      	subs	r4, r4, r5
 800b0c2:	10a4      	asrs	r4, r4, #2
 800b0c4:	42a6      	cmp	r6, r4
 800b0c6:	d109      	bne.n	800b0dc <__libc_init_array+0x24>
 800b0c8:	f003 f834 	bl	800e134 <_init>
 800b0cc:	2600      	movs	r6, #0
 800b0ce:	4d0a      	ldr	r5, [pc, #40]	; (800b0f8 <__libc_init_array+0x40>)
 800b0d0:	4c0a      	ldr	r4, [pc, #40]	; (800b0fc <__libc_init_array+0x44>)
 800b0d2:	1b64      	subs	r4, r4, r5
 800b0d4:	10a4      	asrs	r4, r4, #2
 800b0d6:	42a6      	cmp	r6, r4
 800b0d8:	d105      	bne.n	800b0e6 <__libc_init_array+0x2e>
 800b0da:	bd70      	pop	{r4, r5, r6, pc}
 800b0dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0e0:	4798      	blx	r3
 800b0e2:	3601      	adds	r6, #1
 800b0e4:	e7ee      	b.n	800b0c4 <__libc_init_array+0xc>
 800b0e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0ea:	4798      	blx	r3
 800b0ec:	3601      	adds	r6, #1
 800b0ee:	e7f2      	b.n	800b0d6 <__libc_init_array+0x1e>
 800b0f0:	0800ebe4 	.word	0x0800ebe4
 800b0f4:	0800ebe4 	.word	0x0800ebe4
 800b0f8:	0800ebe4 	.word	0x0800ebe4
 800b0fc:	0800ebe8 	.word	0x0800ebe8

0800b100 <malloc>:
 800b100:	4b02      	ldr	r3, [pc, #8]	; (800b10c <malloc+0xc>)
 800b102:	4601      	mov	r1, r0
 800b104:	6818      	ldr	r0, [r3, #0]
 800b106:	f000 b87b 	b.w	800b200 <_malloc_r>
 800b10a:	bf00      	nop
 800b10c:	20000140 	.word	0x20000140

0800b110 <free>:
 800b110:	4b02      	ldr	r3, [pc, #8]	; (800b11c <free+0xc>)
 800b112:	4601      	mov	r1, r0
 800b114:	6818      	ldr	r0, [r3, #0]
 800b116:	f000 b80b 	b.w	800b130 <_free_r>
 800b11a:	bf00      	nop
 800b11c:	20000140 	.word	0x20000140

0800b120 <memset>:
 800b120:	4603      	mov	r3, r0
 800b122:	4402      	add	r2, r0
 800b124:	4293      	cmp	r3, r2
 800b126:	d100      	bne.n	800b12a <memset+0xa>
 800b128:	4770      	bx	lr
 800b12a:	f803 1b01 	strb.w	r1, [r3], #1
 800b12e:	e7f9      	b.n	800b124 <memset+0x4>

0800b130 <_free_r>:
 800b130:	b538      	push	{r3, r4, r5, lr}
 800b132:	4605      	mov	r5, r0
 800b134:	2900      	cmp	r1, #0
 800b136:	d040      	beq.n	800b1ba <_free_r+0x8a>
 800b138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b13c:	1f0c      	subs	r4, r1, #4
 800b13e:	2b00      	cmp	r3, #0
 800b140:	bfb8      	it	lt
 800b142:	18e4      	addlt	r4, r4, r3
 800b144:	f001 fc16 	bl	800c974 <__malloc_lock>
 800b148:	4a1c      	ldr	r2, [pc, #112]	; (800b1bc <_free_r+0x8c>)
 800b14a:	6813      	ldr	r3, [r2, #0]
 800b14c:	b933      	cbnz	r3, 800b15c <_free_r+0x2c>
 800b14e:	6063      	str	r3, [r4, #4]
 800b150:	6014      	str	r4, [r2, #0]
 800b152:	4628      	mov	r0, r5
 800b154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b158:	f001 bc12 	b.w	800c980 <__malloc_unlock>
 800b15c:	42a3      	cmp	r3, r4
 800b15e:	d908      	bls.n	800b172 <_free_r+0x42>
 800b160:	6820      	ldr	r0, [r4, #0]
 800b162:	1821      	adds	r1, r4, r0
 800b164:	428b      	cmp	r3, r1
 800b166:	bf01      	itttt	eq
 800b168:	6819      	ldreq	r1, [r3, #0]
 800b16a:	685b      	ldreq	r3, [r3, #4]
 800b16c:	1809      	addeq	r1, r1, r0
 800b16e:	6021      	streq	r1, [r4, #0]
 800b170:	e7ed      	b.n	800b14e <_free_r+0x1e>
 800b172:	461a      	mov	r2, r3
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	b10b      	cbz	r3, 800b17c <_free_r+0x4c>
 800b178:	42a3      	cmp	r3, r4
 800b17a:	d9fa      	bls.n	800b172 <_free_r+0x42>
 800b17c:	6811      	ldr	r1, [r2, #0]
 800b17e:	1850      	adds	r0, r2, r1
 800b180:	42a0      	cmp	r0, r4
 800b182:	d10b      	bne.n	800b19c <_free_r+0x6c>
 800b184:	6820      	ldr	r0, [r4, #0]
 800b186:	4401      	add	r1, r0
 800b188:	1850      	adds	r0, r2, r1
 800b18a:	4283      	cmp	r3, r0
 800b18c:	6011      	str	r1, [r2, #0]
 800b18e:	d1e0      	bne.n	800b152 <_free_r+0x22>
 800b190:	6818      	ldr	r0, [r3, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	4401      	add	r1, r0
 800b196:	6011      	str	r1, [r2, #0]
 800b198:	6053      	str	r3, [r2, #4]
 800b19a:	e7da      	b.n	800b152 <_free_r+0x22>
 800b19c:	d902      	bls.n	800b1a4 <_free_r+0x74>
 800b19e:	230c      	movs	r3, #12
 800b1a0:	602b      	str	r3, [r5, #0]
 800b1a2:	e7d6      	b.n	800b152 <_free_r+0x22>
 800b1a4:	6820      	ldr	r0, [r4, #0]
 800b1a6:	1821      	adds	r1, r4, r0
 800b1a8:	428b      	cmp	r3, r1
 800b1aa:	bf01      	itttt	eq
 800b1ac:	6819      	ldreq	r1, [r3, #0]
 800b1ae:	685b      	ldreq	r3, [r3, #4]
 800b1b0:	1809      	addeq	r1, r1, r0
 800b1b2:	6021      	streq	r1, [r4, #0]
 800b1b4:	6063      	str	r3, [r4, #4]
 800b1b6:	6054      	str	r4, [r2, #4]
 800b1b8:	e7cb      	b.n	800b152 <_free_r+0x22>
 800b1ba:	bd38      	pop	{r3, r4, r5, pc}
 800b1bc:	20000d68 	.word	0x20000d68

0800b1c0 <sbrk_aligned>:
 800b1c0:	b570      	push	{r4, r5, r6, lr}
 800b1c2:	4e0e      	ldr	r6, [pc, #56]	; (800b1fc <sbrk_aligned+0x3c>)
 800b1c4:	460c      	mov	r4, r1
 800b1c6:	6831      	ldr	r1, [r6, #0]
 800b1c8:	4605      	mov	r5, r0
 800b1ca:	b911      	cbnz	r1, 800b1d2 <sbrk_aligned+0x12>
 800b1cc:	f000 fcec 	bl	800bba8 <_sbrk_r>
 800b1d0:	6030      	str	r0, [r6, #0]
 800b1d2:	4621      	mov	r1, r4
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	f000 fce7 	bl	800bba8 <_sbrk_r>
 800b1da:	1c43      	adds	r3, r0, #1
 800b1dc:	d00a      	beq.n	800b1f4 <sbrk_aligned+0x34>
 800b1de:	1cc4      	adds	r4, r0, #3
 800b1e0:	f024 0403 	bic.w	r4, r4, #3
 800b1e4:	42a0      	cmp	r0, r4
 800b1e6:	d007      	beq.n	800b1f8 <sbrk_aligned+0x38>
 800b1e8:	1a21      	subs	r1, r4, r0
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	f000 fcdc 	bl	800bba8 <_sbrk_r>
 800b1f0:	3001      	adds	r0, #1
 800b1f2:	d101      	bne.n	800b1f8 <sbrk_aligned+0x38>
 800b1f4:	f04f 34ff 	mov.w	r4, #4294967295
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	bd70      	pop	{r4, r5, r6, pc}
 800b1fc:	20000d6c 	.word	0x20000d6c

0800b200 <_malloc_r>:
 800b200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b204:	1ccd      	adds	r5, r1, #3
 800b206:	f025 0503 	bic.w	r5, r5, #3
 800b20a:	3508      	adds	r5, #8
 800b20c:	2d0c      	cmp	r5, #12
 800b20e:	bf38      	it	cc
 800b210:	250c      	movcc	r5, #12
 800b212:	2d00      	cmp	r5, #0
 800b214:	4607      	mov	r7, r0
 800b216:	db01      	blt.n	800b21c <_malloc_r+0x1c>
 800b218:	42a9      	cmp	r1, r5
 800b21a:	d905      	bls.n	800b228 <_malloc_r+0x28>
 800b21c:	230c      	movs	r3, #12
 800b21e:	2600      	movs	r6, #0
 800b220:	603b      	str	r3, [r7, #0]
 800b222:	4630      	mov	r0, r6
 800b224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b228:	4e2e      	ldr	r6, [pc, #184]	; (800b2e4 <_malloc_r+0xe4>)
 800b22a:	f001 fba3 	bl	800c974 <__malloc_lock>
 800b22e:	6833      	ldr	r3, [r6, #0]
 800b230:	461c      	mov	r4, r3
 800b232:	bb34      	cbnz	r4, 800b282 <_malloc_r+0x82>
 800b234:	4629      	mov	r1, r5
 800b236:	4638      	mov	r0, r7
 800b238:	f7ff ffc2 	bl	800b1c0 <sbrk_aligned>
 800b23c:	1c43      	adds	r3, r0, #1
 800b23e:	4604      	mov	r4, r0
 800b240:	d14d      	bne.n	800b2de <_malloc_r+0xde>
 800b242:	6834      	ldr	r4, [r6, #0]
 800b244:	4626      	mov	r6, r4
 800b246:	2e00      	cmp	r6, #0
 800b248:	d140      	bne.n	800b2cc <_malloc_r+0xcc>
 800b24a:	6823      	ldr	r3, [r4, #0]
 800b24c:	4631      	mov	r1, r6
 800b24e:	4638      	mov	r0, r7
 800b250:	eb04 0803 	add.w	r8, r4, r3
 800b254:	f000 fca8 	bl	800bba8 <_sbrk_r>
 800b258:	4580      	cmp	r8, r0
 800b25a:	d13a      	bne.n	800b2d2 <_malloc_r+0xd2>
 800b25c:	6821      	ldr	r1, [r4, #0]
 800b25e:	3503      	adds	r5, #3
 800b260:	1a6d      	subs	r5, r5, r1
 800b262:	f025 0503 	bic.w	r5, r5, #3
 800b266:	3508      	adds	r5, #8
 800b268:	2d0c      	cmp	r5, #12
 800b26a:	bf38      	it	cc
 800b26c:	250c      	movcc	r5, #12
 800b26e:	4638      	mov	r0, r7
 800b270:	4629      	mov	r1, r5
 800b272:	f7ff ffa5 	bl	800b1c0 <sbrk_aligned>
 800b276:	3001      	adds	r0, #1
 800b278:	d02b      	beq.n	800b2d2 <_malloc_r+0xd2>
 800b27a:	6823      	ldr	r3, [r4, #0]
 800b27c:	442b      	add	r3, r5
 800b27e:	6023      	str	r3, [r4, #0]
 800b280:	e00e      	b.n	800b2a0 <_malloc_r+0xa0>
 800b282:	6822      	ldr	r2, [r4, #0]
 800b284:	1b52      	subs	r2, r2, r5
 800b286:	d41e      	bmi.n	800b2c6 <_malloc_r+0xc6>
 800b288:	2a0b      	cmp	r2, #11
 800b28a:	d916      	bls.n	800b2ba <_malloc_r+0xba>
 800b28c:	1961      	adds	r1, r4, r5
 800b28e:	42a3      	cmp	r3, r4
 800b290:	6025      	str	r5, [r4, #0]
 800b292:	bf18      	it	ne
 800b294:	6059      	strne	r1, [r3, #4]
 800b296:	6863      	ldr	r3, [r4, #4]
 800b298:	bf08      	it	eq
 800b29a:	6031      	streq	r1, [r6, #0]
 800b29c:	5162      	str	r2, [r4, r5]
 800b29e:	604b      	str	r3, [r1, #4]
 800b2a0:	4638      	mov	r0, r7
 800b2a2:	f104 060b 	add.w	r6, r4, #11
 800b2a6:	f001 fb6b 	bl	800c980 <__malloc_unlock>
 800b2aa:	f026 0607 	bic.w	r6, r6, #7
 800b2ae:	1d23      	adds	r3, r4, #4
 800b2b0:	1af2      	subs	r2, r6, r3
 800b2b2:	d0b6      	beq.n	800b222 <_malloc_r+0x22>
 800b2b4:	1b9b      	subs	r3, r3, r6
 800b2b6:	50a3      	str	r3, [r4, r2]
 800b2b8:	e7b3      	b.n	800b222 <_malloc_r+0x22>
 800b2ba:	6862      	ldr	r2, [r4, #4]
 800b2bc:	42a3      	cmp	r3, r4
 800b2be:	bf0c      	ite	eq
 800b2c0:	6032      	streq	r2, [r6, #0]
 800b2c2:	605a      	strne	r2, [r3, #4]
 800b2c4:	e7ec      	b.n	800b2a0 <_malloc_r+0xa0>
 800b2c6:	4623      	mov	r3, r4
 800b2c8:	6864      	ldr	r4, [r4, #4]
 800b2ca:	e7b2      	b.n	800b232 <_malloc_r+0x32>
 800b2cc:	4634      	mov	r4, r6
 800b2ce:	6876      	ldr	r6, [r6, #4]
 800b2d0:	e7b9      	b.n	800b246 <_malloc_r+0x46>
 800b2d2:	230c      	movs	r3, #12
 800b2d4:	4638      	mov	r0, r7
 800b2d6:	603b      	str	r3, [r7, #0]
 800b2d8:	f001 fb52 	bl	800c980 <__malloc_unlock>
 800b2dc:	e7a1      	b.n	800b222 <_malloc_r+0x22>
 800b2de:	6025      	str	r5, [r4, #0]
 800b2e0:	e7de      	b.n	800b2a0 <_malloc_r+0xa0>
 800b2e2:	bf00      	nop
 800b2e4:	20000d68 	.word	0x20000d68

0800b2e8 <__cvt>:
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2ee:	461f      	mov	r7, r3
 800b2f0:	bfbb      	ittet	lt
 800b2f2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b2f6:	461f      	movlt	r7, r3
 800b2f8:	2300      	movge	r3, #0
 800b2fa:	232d      	movlt	r3, #45	; 0x2d
 800b2fc:	b088      	sub	sp, #32
 800b2fe:	4614      	mov	r4, r2
 800b300:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b302:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b304:	7013      	strb	r3, [r2, #0]
 800b306:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b308:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b30c:	f023 0820 	bic.w	r8, r3, #32
 800b310:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b314:	d005      	beq.n	800b322 <__cvt+0x3a>
 800b316:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b31a:	d100      	bne.n	800b31e <__cvt+0x36>
 800b31c:	3501      	adds	r5, #1
 800b31e:	2302      	movs	r3, #2
 800b320:	e000      	b.n	800b324 <__cvt+0x3c>
 800b322:	2303      	movs	r3, #3
 800b324:	aa07      	add	r2, sp, #28
 800b326:	9204      	str	r2, [sp, #16]
 800b328:	aa06      	add	r2, sp, #24
 800b32a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b32e:	e9cd 3500 	strd	r3, r5, [sp]
 800b332:	4622      	mov	r2, r4
 800b334:	463b      	mov	r3, r7
 800b336:	f000 fd0f 	bl	800bd58 <_dtoa_r>
 800b33a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b33e:	4606      	mov	r6, r0
 800b340:	d102      	bne.n	800b348 <__cvt+0x60>
 800b342:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b344:	07db      	lsls	r3, r3, #31
 800b346:	d522      	bpl.n	800b38e <__cvt+0xa6>
 800b348:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b34c:	eb06 0905 	add.w	r9, r6, r5
 800b350:	d110      	bne.n	800b374 <__cvt+0x8c>
 800b352:	7833      	ldrb	r3, [r6, #0]
 800b354:	2b30      	cmp	r3, #48	; 0x30
 800b356:	d10a      	bne.n	800b36e <__cvt+0x86>
 800b358:	2200      	movs	r2, #0
 800b35a:	2300      	movs	r3, #0
 800b35c:	4620      	mov	r0, r4
 800b35e:	4639      	mov	r1, r7
 800b360:	f7f5 fb8e 	bl	8000a80 <__aeabi_dcmpeq>
 800b364:	b918      	cbnz	r0, 800b36e <__cvt+0x86>
 800b366:	f1c5 0501 	rsb	r5, r5, #1
 800b36a:	f8ca 5000 	str.w	r5, [sl]
 800b36e:	f8da 3000 	ldr.w	r3, [sl]
 800b372:	4499      	add	r9, r3
 800b374:	2200      	movs	r2, #0
 800b376:	2300      	movs	r3, #0
 800b378:	4620      	mov	r0, r4
 800b37a:	4639      	mov	r1, r7
 800b37c:	f7f5 fb80 	bl	8000a80 <__aeabi_dcmpeq>
 800b380:	b108      	cbz	r0, 800b386 <__cvt+0x9e>
 800b382:	f8cd 901c 	str.w	r9, [sp, #28]
 800b386:	2230      	movs	r2, #48	; 0x30
 800b388:	9b07      	ldr	r3, [sp, #28]
 800b38a:	454b      	cmp	r3, r9
 800b38c:	d307      	bcc.n	800b39e <__cvt+0xb6>
 800b38e:	4630      	mov	r0, r6
 800b390:	9b07      	ldr	r3, [sp, #28]
 800b392:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b394:	1b9b      	subs	r3, r3, r6
 800b396:	6013      	str	r3, [r2, #0]
 800b398:	b008      	add	sp, #32
 800b39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b39e:	1c59      	adds	r1, r3, #1
 800b3a0:	9107      	str	r1, [sp, #28]
 800b3a2:	701a      	strb	r2, [r3, #0]
 800b3a4:	e7f0      	b.n	800b388 <__cvt+0xa0>

0800b3a6 <__exponent>:
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3aa:	2900      	cmp	r1, #0
 800b3ac:	f803 2b02 	strb.w	r2, [r3], #2
 800b3b0:	bfb6      	itet	lt
 800b3b2:	222d      	movlt	r2, #45	; 0x2d
 800b3b4:	222b      	movge	r2, #43	; 0x2b
 800b3b6:	4249      	neglt	r1, r1
 800b3b8:	2909      	cmp	r1, #9
 800b3ba:	7042      	strb	r2, [r0, #1]
 800b3bc:	dd2b      	ble.n	800b416 <__exponent+0x70>
 800b3be:	f10d 0407 	add.w	r4, sp, #7
 800b3c2:	46a4      	mov	ip, r4
 800b3c4:	270a      	movs	r7, #10
 800b3c6:	fb91 f6f7 	sdiv	r6, r1, r7
 800b3ca:	460a      	mov	r2, r1
 800b3cc:	46a6      	mov	lr, r4
 800b3ce:	fb07 1516 	mls	r5, r7, r6, r1
 800b3d2:	2a63      	cmp	r2, #99	; 0x63
 800b3d4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800b3d8:	4631      	mov	r1, r6
 800b3da:	f104 34ff 	add.w	r4, r4, #4294967295
 800b3de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b3e2:	dcf0      	bgt.n	800b3c6 <__exponent+0x20>
 800b3e4:	3130      	adds	r1, #48	; 0x30
 800b3e6:	f1ae 0502 	sub.w	r5, lr, #2
 800b3ea:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	1c44      	adds	r4, r0, #1
 800b3f2:	4561      	cmp	r1, ip
 800b3f4:	d30a      	bcc.n	800b40c <__exponent+0x66>
 800b3f6:	f10d 0209 	add.w	r2, sp, #9
 800b3fa:	eba2 020e 	sub.w	r2, r2, lr
 800b3fe:	4565      	cmp	r5, ip
 800b400:	bf88      	it	hi
 800b402:	2200      	movhi	r2, #0
 800b404:	4413      	add	r3, r2
 800b406:	1a18      	subs	r0, r3, r0
 800b408:	b003      	add	sp, #12
 800b40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b40c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b410:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b414:	e7ed      	b.n	800b3f2 <__exponent+0x4c>
 800b416:	2330      	movs	r3, #48	; 0x30
 800b418:	3130      	adds	r1, #48	; 0x30
 800b41a:	7083      	strb	r3, [r0, #2]
 800b41c:	70c1      	strb	r1, [r0, #3]
 800b41e:	1d03      	adds	r3, r0, #4
 800b420:	e7f1      	b.n	800b406 <__exponent+0x60>
	...

0800b424 <_printf_float>:
 800b424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b428:	b091      	sub	sp, #68	; 0x44
 800b42a:	460c      	mov	r4, r1
 800b42c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b430:	4616      	mov	r6, r2
 800b432:	461f      	mov	r7, r3
 800b434:	4605      	mov	r5, r0
 800b436:	f001 fa7d 	bl	800c934 <_localeconv_r>
 800b43a:	6803      	ldr	r3, [r0, #0]
 800b43c:	4618      	mov	r0, r3
 800b43e:	9309      	str	r3, [sp, #36]	; 0x24
 800b440:	f7f4 fef2 	bl	8000228 <strlen>
 800b444:	2300      	movs	r3, #0
 800b446:	930e      	str	r3, [sp, #56]	; 0x38
 800b448:	f8d8 3000 	ldr.w	r3, [r8]
 800b44c:	900a      	str	r0, [sp, #40]	; 0x28
 800b44e:	3307      	adds	r3, #7
 800b450:	f023 0307 	bic.w	r3, r3, #7
 800b454:	f103 0208 	add.w	r2, r3, #8
 800b458:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b45c:	f8d4 b000 	ldr.w	fp, [r4]
 800b460:	f8c8 2000 	str.w	r2, [r8]
 800b464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b468:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b46c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800b470:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800b474:	930b      	str	r3, [sp, #44]	; 0x2c
 800b476:	f04f 32ff 	mov.w	r2, #4294967295
 800b47a:	4640      	mov	r0, r8
 800b47c:	4b9c      	ldr	r3, [pc, #624]	; (800b6f0 <_printf_float+0x2cc>)
 800b47e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b480:	f7f5 fb30 	bl	8000ae4 <__aeabi_dcmpun>
 800b484:	bb70      	cbnz	r0, 800b4e4 <_printf_float+0xc0>
 800b486:	f04f 32ff 	mov.w	r2, #4294967295
 800b48a:	4640      	mov	r0, r8
 800b48c:	4b98      	ldr	r3, [pc, #608]	; (800b6f0 <_printf_float+0x2cc>)
 800b48e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b490:	f7f5 fb0a 	bl	8000aa8 <__aeabi_dcmple>
 800b494:	bb30      	cbnz	r0, 800b4e4 <_printf_float+0xc0>
 800b496:	2200      	movs	r2, #0
 800b498:	2300      	movs	r3, #0
 800b49a:	4640      	mov	r0, r8
 800b49c:	4651      	mov	r1, sl
 800b49e:	f7f5 faf9 	bl	8000a94 <__aeabi_dcmplt>
 800b4a2:	b110      	cbz	r0, 800b4aa <_printf_float+0x86>
 800b4a4:	232d      	movs	r3, #45	; 0x2d
 800b4a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4aa:	4b92      	ldr	r3, [pc, #584]	; (800b6f4 <_printf_float+0x2d0>)
 800b4ac:	4892      	ldr	r0, [pc, #584]	; (800b6f8 <_printf_float+0x2d4>)
 800b4ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b4b2:	bf94      	ite	ls
 800b4b4:	4698      	movls	r8, r3
 800b4b6:	4680      	movhi	r8, r0
 800b4b8:	2303      	movs	r3, #3
 800b4ba:	f04f 0a00 	mov.w	sl, #0
 800b4be:	6123      	str	r3, [r4, #16]
 800b4c0:	f02b 0304 	bic.w	r3, fp, #4
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	4633      	mov	r3, r6
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	9700      	str	r7, [sp, #0]
 800b4ce:	aa0f      	add	r2, sp, #60	; 0x3c
 800b4d0:	f000 f9d4 	bl	800b87c <_printf_common>
 800b4d4:	3001      	adds	r0, #1
 800b4d6:	f040 8090 	bne.w	800b5fa <_printf_float+0x1d6>
 800b4da:	f04f 30ff 	mov.w	r0, #4294967295
 800b4de:	b011      	add	sp, #68	; 0x44
 800b4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e4:	4642      	mov	r2, r8
 800b4e6:	4653      	mov	r3, sl
 800b4e8:	4640      	mov	r0, r8
 800b4ea:	4651      	mov	r1, sl
 800b4ec:	f7f5 fafa 	bl	8000ae4 <__aeabi_dcmpun>
 800b4f0:	b148      	cbz	r0, 800b506 <_printf_float+0xe2>
 800b4f2:	f1ba 0f00 	cmp.w	sl, #0
 800b4f6:	bfb8      	it	lt
 800b4f8:	232d      	movlt	r3, #45	; 0x2d
 800b4fa:	4880      	ldr	r0, [pc, #512]	; (800b6fc <_printf_float+0x2d8>)
 800b4fc:	bfb8      	it	lt
 800b4fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b502:	4b7f      	ldr	r3, [pc, #508]	; (800b700 <_printf_float+0x2dc>)
 800b504:	e7d3      	b.n	800b4ae <_printf_float+0x8a>
 800b506:	6863      	ldr	r3, [r4, #4]
 800b508:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b50c:	1c5a      	adds	r2, r3, #1
 800b50e:	d142      	bne.n	800b596 <_printf_float+0x172>
 800b510:	2306      	movs	r3, #6
 800b512:	6063      	str	r3, [r4, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	9206      	str	r2, [sp, #24]
 800b518:	aa0e      	add	r2, sp, #56	; 0x38
 800b51a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b51e:	aa0d      	add	r2, sp, #52	; 0x34
 800b520:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b524:	9203      	str	r2, [sp, #12]
 800b526:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b52a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b52e:	6023      	str	r3, [r4, #0]
 800b530:	6863      	ldr	r3, [r4, #4]
 800b532:	4642      	mov	r2, r8
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	4628      	mov	r0, r5
 800b538:	4653      	mov	r3, sl
 800b53a:	910b      	str	r1, [sp, #44]	; 0x2c
 800b53c:	f7ff fed4 	bl	800b2e8 <__cvt>
 800b540:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b542:	4680      	mov	r8, r0
 800b544:	2947      	cmp	r1, #71	; 0x47
 800b546:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b548:	d108      	bne.n	800b55c <_printf_float+0x138>
 800b54a:	1cc8      	adds	r0, r1, #3
 800b54c:	db02      	blt.n	800b554 <_printf_float+0x130>
 800b54e:	6863      	ldr	r3, [r4, #4]
 800b550:	4299      	cmp	r1, r3
 800b552:	dd40      	ble.n	800b5d6 <_printf_float+0x1b2>
 800b554:	f1a9 0902 	sub.w	r9, r9, #2
 800b558:	fa5f f989 	uxtb.w	r9, r9
 800b55c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b560:	d81f      	bhi.n	800b5a2 <_printf_float+0x17e>
 800b562:	464a      	mov	r2, r9
 800b564:	3901      	subs	r1, #1
 800b566:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b56a:	910d      	str	r1, [sp, #52]	; 0x34
 800b56c:	f7ff ff1b 	bl	800b3a6 <__exponent>
 800b570:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b572:	4682      	mov	sl, r0
 800b574:	1813      	adds	r3, r2, r0
 800b576:	2a01      	cmp	r2, #1
 800b578:	6123      	str	r3, [r4, #16]
 800b57a:	dc02      	bgt.n	800b582 <_printf_float+0x15e>
 800b57c:	6822      	ldr	r2, [r4, #0]
 800b57e:	07d2      	lsls	r2, r2, #31
 800b580:	d501      	bpl.n	800b586 <_printf_float+0x162>
 800b582:	3301      	adds	r3, #1
 800b584:	6123      	str	r3, [r4, #16]
 800b586:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d09b      	beq.n	800b4c6 <_printf_float+0xa2>
 800b58e:	232d      	movs	r3, #45	; 0x2d
 800b590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b594:	e797      	b.n	800b4c6 <_printf_float+0xa2>
 800b596:	2947      	cmp	r1, #71	; 0x47
 800b598:	d1bc      	bne.n	800b514 <_printf_float+0xf0>
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1ba      	bne.n	800b514 <_printf_float+0xf0>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e7b7      	b.n	800b512 <_printf_float+0xee>
 800b5a2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b5a6:	d118      	bne.n	800b5da <_printf_float+0x1b6>
 800b5a8:	2900      	cmp	r1, #0
 800b5aa:	6863      	ldr	r3, [r4, #4]
 800b5ac:	dd0b      	ble.n	800b5c6 <_printf_float+0x1a2>
 800b5ae:	6121      	str	r1, [r4, #16]
 800b5b0:	b913      	cbnz	r3, 800b5b8 <_printf_float+0x194>
 800b5b2:	6822      	ldr	r2, [r4, #0]
 800b5b4:	07d0      	lsls	r0, r2, #31
 800b5b6:	d502      	bpl.n	800b5be <_printf_float+0x19a>
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	440b      	add	r3, r1
 800b5bc:	6123      	str	r3, [r4, #16]
 800b5be:	f04f 0a00 	mov.w	sl, #0
 800b5c2:	65a1      	str	r1, [r4, #88]	; 0x58
 800b5c4:	e7df      	b.n	800b586 <_printf_float+0x162>
 800b5c6:	b913      	cbnz	r3, 800b5ce <_printf_float+0x1aa>
 800b5c8:	6822      	ldr	r2, [r4, #0]
 800b5ca:	07d2      	lsls	r2, r2, #31
 800b5cc:	d501      	bpl.n	800b5d2 <_printf_float+0x1ae>
 800b5ce:	3302      	adds	r3, #2
 800b5d0:	e7f4      	b.n	800b5bc <_printf_float+0x198>
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e7f2      	b.n	800b5bc <_printf_float+0x198>
 800b5d6:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b5da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5dc:	4299      	cmp	r1, r3
 800b5de:	db05      	blt.n	800b5ec <_printf_float+0x1c8>
 800b5e0:	6823      	ldr	r3, [r4, #0]
 800b5e2:	6121      	str	r1, [r4, #16]
 800b5e4:	07d8      	lsls	r0, r3, #31
 800b5e6:	d5ea      	bpl.n	800b5be <_printf_float+0x19a>
 800b5e8:	1c4b      	adds	r3, r1, #1
 800b5ea:	e7e7      	b.n	800b5bc <_printf_float+0x198>
 800b5ec:	2900      	cmp	r1, #0
 800b5ee:	bfcc      	ite	gt
 800b5f0:	2201      	movgt	r2, #1
 800b5f2:	f1c1 0202 	rsble	r2, r1, #2
 800b5f6:	4413      	add	r3, r2
 800b5f8:	e7e0      	b.n	800b5bc <_printf_float+0x198>
 800b5fa:	6823      	ldr	r3, [r4, #0]
 800b5fc:	055a      	lsls	r2, r3, #21
 800b5fe:	d407      	bmi.n	800b610 <_printf_float+0x1ec>
 800b600:	6923      	ldr	r3, [r4, #16]
 800b602:	4642      	mov	r2, r8
 800b604:	4631      	mov	r1, r6
 800b606:	4628      	mov	r0, r5
 800b608:	47b8      	blx	r7
 800b60a:	3001      	adds	r0, #1
 800b60c:	d12b      	bne.n	800b666 <_printf_float+0x242>
 800b60e:	e764      	b.n	800b4da <_printf_float+0xb6>
 800b610:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b614:	f240 80dd 	bls.w	800b7d2 <_printf_float+0x3ae>
 800b618:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b61c:	2200      	movs	r2, #0
 800b61e:	2300      	movs	r3, #0
 800b620:	f7f5 fa2e 	bl	8000a80 <__aeabi_dcmpeq>
 800b624:	2800      	cmp	r0, #0
 800b626:	d033      	beq.n	800b690 <_printf_float+0x26c>
 800b628:	2301      	movs	r3, #1
 800b62a:	4631      	mov	r1, r6
 800b62c:	4628      	mov	r0, r5
 800b62e:	4a35      	ldr	r2, [pc, #212]	; (800b704 <_printf_float+0x2e0>)
 800b630:	47b8      	blx	r7
 800b632:	3001      	adds	r0, #1
 800b634:	f43f af51 	beq.w	800b4da <_printf_float+0xb6>
 800b638:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b63c:	429a      	cmp	r2, r3
 800b63e:	db02      	blt.n	800b646 <_printf_float+0x222>
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	07d8      	lsls	r0, r3, #31
 800b644:	d50f      	bpl.n	800b666 <_printf_float+0x242>
 800b646:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b64a:	4631      	mov	r1, r6
 800b64c:	4628      	mov	r0, r5
 800b64e:	47b8      	blx	r7
 800b650:	3001      	adds	r0, #1
 800b652:	f43f af42 	beq.w	800b4da <_printf_float+0xb6>
 800b656:	f04f 0800 	mov.w	r8, #0
 800b65a:	f104 091a 	add.w	r9, r4, #26
 800b65e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b660:	3b01      	subs	r3, #1
 800b662:	4543      	cmp	r3, r8
 800b664:	dc09      	bgt.n	800b67a <_printf_float+0x256>
 800b666:	6823      	ldr	r3, [r4, #0]
 800b668:	079b      	lsls	r3, r3, #30
 800b66a:	f100 8102 	bmi.w	800b872 <_printf_float+0x44e>
 800b66e:	68e0      	ldr	r0, [r4, #12]
 800b670:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b672:	4298      	cmp	r0, r3
 800b674:	bfb8      	it	lt
 800b676:	4618      	movlt	r0, r3
 800b678:	e731      	b.n	800b4de <_printf_float+0xba>
 800b67a:	2301      	movs	r3, #1
 800b67c:	464a      	mov	r2, r9
 800b67e:	4631      	mov	r1, r6
 800b680:	4628      	mov	r0, r5
 800b682:	47b8      	blx	r7
 800b684:	3001      	adds	r0, #1
 800b686:	f43f af28 	beq.w	800b4da <_printf_float+0xb6>
 800b68a:	f108 0801 	add.w	r8, r8, #1
 800b68e:	e7e6      	b.n	800b65e <_printf_float+0x23a>
 800b690:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b692:	2b00      	cmp	r3, #0
 800b694:	dc38      	bgt.n	800b708 <_printf_float+0x2e4>
 800b696:	2301      	movs	r3, #1
 800b698:	4631      	mov	r1, r6
 800b69a:	4628      	mov	r0, r5
 800b69c:	4a19      	ldr	r2, [pc, #100]	; (800b704 <_printf_float+0x2e0>)
 800b69e:	47b8      	blx	r7
 800b6a0:	3001      	adds	r0, #1
 800b6a2:	f43f af1a 	beq.w	800b4da <_printf_float+0xb6>
 800b6a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	d102      	bne.n	800b6b4 <_printf_float+0x290>
 800b6ae:	6823      	ldr	r3, [r4, #0]
 800b6b0:	07d9      	lsls	r1, r3, #31
 800b6b2:	d5d8      	bpl.n	800b666 <_printf_float+0x242>
 800b6b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6b8:	4631      	mov	r1, r6
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	47b8      	blx	r7
 800b6be:	3001      	adds	r0, #1
 800b6c0:	f43f af0b 	beq.w	800b4da <_printf_float+0xb6>
 800b6c4:	f04f 0900 	mov.w	r9, #0
 800b6c8:	f104 0a1a 	add.w	sl, r4, #26
 800b6cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6ce:	425b      	negs	r3, r3
 800b6d0:	454b      	cmp	r3, r9
 800b6d2:	dc01      	bgt.n	800b6d8 <_printf_float+0x2b4>
 800b6d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6d6:	e794      	b.n	800b602 <_printf_float+0x1de>
 800b6d8:	2301      	movs	r3, #1
 800b6da:	4652      	mov	r2, sl
 800b6dc:	4631      	mov	r1, r6
 800b6de:	4628      	mov	r0, r5
 800b6e0:	47b8      	blx	r7
 800b6e2:	3001      	adds	r0, #1
 800b6e4:	f43f aef9 	beq.w	800b4da <_printf_float+0xb6>
 800b6e8:	f109 0901 	add.w	r9, r9, #1
 800b6ec:	e7ee      	b.n	800b6cc <_printf_float+0x2a8>
 800b6ee:	bf00      	nop
 800b6f0:	7fefffff 	.word	0x7fefffff
 800b6f4:	0800e80c 	.word	0x0800e80c
 800b6f8:	0800e810 	.word	0x0800e810
 800b6fc:	0800e818 	.word	0x0800e818
 800b700:	0800e814 	.word	0x0800e814
 800b704:	0800e81c 	.word	0x0800e81c
 800b708:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b70a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b70c:	429a      	cmp	r2, r3
 800b70e:	bfa8      	it	ge
 800b710:	461a      	movge	r2, r3
 800b712:	2a00      	cmp	r2, #0
 800b714:	4691      	mov	r9, r2
 800b716:	dc37      	bgt.n	800b788 <_printf_float+0x364>
 800b718:	f04f 0b00 	mov.w	fp, #0
 800b71c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b720:	f104 021a 	add.w	r2, r4, #26
 800b724:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b728:	ebaa 0309 	sub.w	r3, sl, r9
 800b72c:	455b      	cmp	r3, fp
 800b72e:	dc33      	bgt.n	800b798 <_printf_float+0x374>
 800b730:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b734:	429a      	cmp	r2, r3
 800b736:	db3b      	blt.n	800b7b0 <_printf_float+0x38c>
 800b738:	6823      	ldr	r3, [r4, #0]
 800b73a:	07da      	lsls	r2, r3, #31
 800b73c:	d438      	bmi.n	800b7b0 <_printf_float+0x38c>
 800b73e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b740:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b742:	eba3 020a 	sub.w	r2, r3, sl
 800b746:	eba3 0901 	sub.w	r9, r3, r1
 800b74a:	4591      	cmp	r9, r2
 800b74c:	bfa8      	it	ge
 800b74e:	4691      	movge	r9, r2
 800b750:	f1b9 0f00 	cmp.w	r9, #0
 800b754:	dc34      	bgt.n	800b7c0 <_printf_float+0x39c>
 800b756:	f04f 0800 	mov.w	r8, #0
 800b75a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b75e:	f104 0a1a 	add.w	sl, r4, #26
 800b762:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b766:	1a9b      	subs	r3, r3, r2
 800b768:	eba3 0309 	sub.w	r3, r3, r9
 800b76c:	4543      	cmp	r3, r8
 800b76e:	f77f af7a 	ble.w	800b666 <_printf_float+0x242>
 800b772:	2301      	movs	r3, #1
 800b774:	4652      	mov	r2, sl
 800b776:	4631      	mov	r1, r6
 800b778:	4628      	mov	r0, r5
 800b77a:	47b8      	blx	r7
 800b77c:	3001      	adds	r0, #1
 800b77e:	f43f aeac 	beq.w	800b4da <_printf_float+0xb6>
 800b782:	f108 0801 	add.w	r8, r8, #1
 800b786:	e7ec      	b.n	800b762 <_printf_float+0x33e>
 800b788:	4613      	mov	r3, r2
 800b78a:	4631      	mov	r1, r6
 800b78c:	4642      	mov	r2, r8
 800b78e:	4628      	mov	r0, r5
 800b790:	47b8      	blx	r7
 800b792:	3001      	adds	r0, #1
 800b794:	d1c0      	bne.n	800b718 <_printf_float+0x2f4>
 800b796:	e6a0      	b.n	800b4da <_printf_float+0xb6>
 800b798:	2301      	movs	r3, #1
 800b79a:	4631      	mov	r1, r6
 800b79c:	4628      	mov	r0, r5
 800b79e:	920b      	str	r2, [sp, #44]	; 0x2c
 800b7a0:	47b8      	blx	r7
 800b7a2:	3001      	adds	r0, #1
 800b7a4:	f43f ae99 	beq.w	800b4da <_printf_float+0xb6>
 800b7a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b7aa:	f10b 0b01 	add.w	fp, fp, #1
 800b7ae:	e7b9      	b.n	800b724 <_printf_float+0x300>
 800b7b0:	4631      	mov	r1, r6
 800b7b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	47b8      	blx	r7
 800b7ba:	3001      	adds	r0, #1
 800b7bc:	d1bf      	bne.n	800b73e <_printf_float+0x31a>
 800b7be:	e68c      	b.n	800b4da <_printf_float+0xb6>
 800b7c0:	464b      	mov	r3, r9
 800b7c2:	4631      	mov	r1, r6
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	eb08 020a 	add.w	r2, r8, sl
 800b7ca:	47b8      	blx	r7
 800b7cc:	3001      	adds	r0, #1
 800b7ce:	d1c2      	bne.n	800b756 <_printf_float+0x332>
 800b7d0:	e683      	b.n	800b4da <_printf_float+0xb6>
 800b7d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7d4:	2a01      	cmp	r2, #1
 800b7d6:	dc01      	bgt.n	800b7dc <_printf_float+0x3b8>
 800b7d8:	07db      	lsls	r3, r3, #31
 800b7da:	d537      	bpl.n	800b84c <_printf_float+0x428>
 800b7dc:	2301      	movs	r3, #1
 800b7de:	4642      	mov	r2, r8
 800b7e0:	4631      	mov	r1, r6
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	47b8      	blx	r7
 800b7e6:	3001      	adds	r0, #1
 800b7e8:	f43f ae77 	beq.w	800b4da <_printf_float+0xb6>
 800b7ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7f0:	4631      	mov	r1, r6
 800b7f2:	4628      	mov	r0, r5
 800b7f4:	47b8      	blx	r7
 800b7f6:	3001      	adds	r0, #1
 800b7f8:	f43f ae6f 	beq.w	800b4da <_printf_float+0xb6>
 800b7fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b800:	2200      	movs	r2, #0
 800b802:	2300      	movs	r3, #0
 800b804:	f7f5 f93c 	bl	8000a80 <__aeabi_dcmpeq>
 800b808:	b9d8      	cbnz	r0, 800b842 <_printf_float+0x41e>
 800b80a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b80c:	f108 0201 	add.w	r2, r8, #1
 800b810:	3b01      	subs	r3, #1
 800b812:	4631      	mov	r1, r6
 800b814:	4628      	mov	r0, r5
 800b816:	47b8      	blx	r7
 800b818:	3001      	adds	r0, #1
 800b81a:	d10e      	bne.n	800b83a <_printf_float+0x416>
 800b81c:	e65d      	b.n	800b4da <_printf_float+0xb6>
 800b81e:	2301      	movs	r3, #1
 800b820:	464a      	mov	r2, r9
 800b822:	4631      	mov	r1, r6
 800b824:	4628      	mov	r0, r5
 800b826:	47b8      	blx	r7
 800b828:	3001      	adds	r0, #1
 800b82a:	f43f ae56 	beq.w	800b4da <_printf_float+0xb6>
 800b82e:	f108 0801 	add.w	r8, r8, #1
 800b832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b834:	3b01      	subs	r3, #1
 800b836:	4543      	cmp	r3, r8
 800b838:	dcf1      	bgt.n	800b81e <_printf_float+0x3fa>
 800b83a:	4653      	mov	r3, sl
 800b83c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b840:	e6e0      	b.n	800b604 <_printf_float+0x1e0>
 800b842:	f04f 0800 	mov.w	r8, #0
 800b846:	f104 091a 	add.w	r9, r4, #26
 800b84a:	e7f2      	b.n	800b832 <_printf_float+0x40e>
 800b84c:	2301      	movs	r3, #1
 800b84e:	4642      	mov	r2, r8
 800b850:	e7df      	b.n	800b812 <_printf_float+0x3ee>
 800b852:	2301      	movs	r3, #1
 800b854:	464a      	mov	r2, r9
 800b856:	4631      	mov	r1, r6
 800b858:	4628      	mov	r0, r5
 800b85a:	47b8      	blx	r7
 800b85c:	3001      	adds	r0, #1
 800b85e:	f43f ae3c 	beq.w	800b4da <_printf_float+0xb6>
 800b862:	f108 0801 	add.w	r8, r8, #1
 800b866:	68e3      	ldr	r3, [r4, #12]
 800b868:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b86a:	1a5b      	subs	r3, r3, r1
 800b86c:	4543      	cmp	r3, r8
 800b86e:	dcf0      	bgt.n	800b852 <_printf_float+0x42e>
 800b870:	e6fd      	b.n	800b66e <_printf_float+0x24a>
 800b872:	f04f 0800 	mov.w	r8, #0
 800b876:	f104 0919 	add.w	r9, r4, #25
 800b87a:	e7f4      	b.n	800b866 <_printf_float+0x442>

0800b87c <_printf_common>:
 800b87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b880:	4616      	mov	r6, r2
 800b882:	4699      	mov	r9, r3
 800b884:	688a      	ldr	r2, [r1, #8]
 800b886:	690b      	ldr	r3, [r1, #16]
 800b888:	4607      	mov	r7, r0
 800b88a:	4293      	cmp	r3, r2
 800b88c:	bfb8      	it	lt
 800b88e:	4613      	movlt	r3, r2
 800b890:	6033      	str	r3, [r6, #0]
 800b892:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b896:	460c      	mov	r4, r1
 800b898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b89c:	b10a      	cbz	r2, 800b8a2 <_printf_common+0x26>
 800b89e:	3301      	adds	r3, #1
 800b8a0:	6033      	str	r3, [r6, #0]
 800b8a2:	6823      	ldr	r3, [r4, #0]
 800b8a4:	0699      	lsls	r1, r3, #26
 800b8a6:	bf42      	ittt	mi
 800b8a8:	6833      	ldrmi	r3, [r6, #0]
 800b8aa:	3302      	addmi	r3, #2
 800b8ac:	6033      	strmi	r3, [r6, #0]
 800b8ae:	6825      	ldr	r5, [r4, #0]
 800b8b0:	f015 0506 	ands.w	r5, r5, #6
 800b8b4:	d106      	bne.n	800b8c4 <_printf_common+0x48>
 800b8b6:	f104 0a19 	add.w	sl, r4, #25
 800b8ba:	68e3      	ldr	r3, [r4, #12]
 800b8bc:	6832      	ldr	r2, [r6, #0]
 800b8be:	1a9b      	subs	r3, r3, r2
 800b8c0:	42ab      	cmp	r3, r5
 800b8c2:	dc28      	bgt.n	800b916 <_printf_common+0x9a>
 800b8c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8c8:	1e13      	subs	r3, r2, #0
 800b8ca:	6822      	ldr	r2, [r4, #0]
 800b8cc:	bf18      	it	ne
 800b8ce:	2301      	movne	r3, #1
 800b8d0:	0692      	lsls	r2, r2, #26
 800b8d2:	d42d      	bmi.n	800b930 <_printf_common+0xb4>
 800b8d4:	4649      	mov	r1, r9
 800b8d6:	4638      	mov	r0, r7
 800b8d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8dc:	47c0      	blx	r8
 800b8de:	3001      	adds	r0, #1
 800b8e0:	d020      	beq.n	800b924 <_printf_common+0xa8>
 800b8e2:	6823      	ldr	r3, [r4, #0]
 800b8e4:	68e5      	ldr	r5, [r4, #12]
 800b8e6:	f003 0306 	and.w	r3, r3, #6
 800b8ea:	2b04      	cmp	r3, #4
 800b8ec:	bf18      	it	ne
 800b8ee:	2500      	movne	r5, #0
 800b8f0:	6832      	ldr	r2, [r6, #0]
 800b8f2:	f04f 0600 	mov.w	r6, #0
 800b8f6:	68a3      	ldr	r3, [r4, #8]
 800b8f8:	bf08      	it	eq
 800b8fa:	1aad      	subeq	r5, r5, r2
 800b8fc:	6922      	ldr	r2, [r4, #16]
 800b8fe:	bf08      	it	eq
 800b900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b904:	4293      	cmp	r3, r2
 800b906:	bfc4      	itt	gt
 800b908:	1a9b      	subgt	r3, r3, r2
 800b90a:	18ed      	addgt	r5, r5, r3
 800b90c:	341a      	adds	r4, #26
 800b90e:	42b5      	cmp	r5, r6
 800b910:	d11a      	bne.n	800b948 <_printf_common+0xcc>
 800b912:	2000      	movs	r0, #0
 800b914:	e008      	b.n	800b928 <_printf_common+0xac>
 800b916:	2301      	movs	r3, #1
 800b918:	4652      	mov	r2, sl
 800b91a:	4649      	mov	r1, r9
 800b91c:	4638      	mov	r0, r7
 800b91e:	47c0      	blx	r8
 800b920:	3001      	adds	r0, #1
 800b922:	d103      	bne.n	800b92c <_printf_common+0xb0>
 800b924:	f04f 30ff 	mov.w	r0, #4294967295
 800b928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b92c:	3501      	adds	r5, #1
 800b92e:	e7c4      	b.n	800b8ba <_printf_common+0x3e>
 800b930:	2030      	movs	r0, #48	; 0x30
 800b932:	18e1      	adds	r1, r4, r3
 800b934:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b938:	1c5a      	adds	r2, r3, #1
 800b93a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b93e:	4422      	add	r2, r4
 800b940:	3302      	adds	r3, #2
 800b942:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b946:	e7c5      	b.n	800b8d4 <_printf_common+0x58>
 800b948:	2301      	movs	r3, #1
 800b94a:	4622      	mov	r2, r4
 800b94c:	4649      	mov	r1, r9
 800b94e:	4638      	mov	r0, r7
 800b950:	47c0      	blx	r8
 800b952:	3001      	adds	r0, #1
 800b954:	d0e6      	beq.n	800b924 <_printf_common+0xa8>
 800b956:	3601      	adds	r6, #1
 800b958:	e7d9      	b.n	800b90e <_printf_common+0x92>
	...

0800b95c <_printf_i>:
 800b95c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b960:	7e0f      	ldrb	r7, [r1, #24]
 800b962:	4691      	mov	r9, r2
 800b964:	2f78      	cmp	r7, #120	; 0x78
 800b966:	4680      	mov	r8, r0
 800b968:	460c      	mov	r4, r1
 800b96a:	469a      	mov	sl, r3
 800b96c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b96e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b972:	d807      	bhi.n	800b984 <_printf_i+0x28>
 800b974:	2f62      	cmp	r7, #98	; 0x62
 800b976:	d80a      	bhi.n	800b98e <_printf_i+0x32>
 800b978:	2f00      	cmp	r7, #0
 800b97a:	f000 80d9 	beq.w	800bb30 <_printf_i+0x1d4>
 800b97e:	2f58      	cmp	r7, #88	; 0x58
 800b980:	f000 80a4 	beq.w	800bacc <_printf_i+0x170>
 800b984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b988:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b98c:	e03a      	b.n	800ba04 <_printf_i+0xa8>
 800b98e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b992:	2b15      	cmp	r3, #21
 800b994:	d8f6      	bhi.n	800b984 <_printf_i+0x28>
 800b996:	a101      	add	r1, pc, #4	; (adr r1, 800b99c <_printf_i+0x40>)
 800b998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b99c:	0800b9f5 	.word	0x0800b9f5
 800b9a0:	0800ba09 	.word	0x0800ba09
 800b9a4:	0800b985 	.word	0x0800b985
 800b9a8:	0800b985 	.word	0x0800b985
 800b9ac:	0800b985 	.word	0x0800b985
 800b9b0:	0800b985 	.word	0x0800b985
 800b9b4:	0800ba09 	.word	0x0800ba09
 800b9b8:	0800b985 	.word	0x0800b985
 800b9bc:	0800b985 	.word	0x0800b985
 800b9c0:	0800b985 	.word	0x0800b985
 800b9c4:	0800b985 	.word	0x0800b985
 800b9c8:	0800bb17 	.word	0x0800bb17
 800b9cc:	0800ba39 	.word	0x0800ba39
 800b9d0:	0800baf9 	.word	0x0800baf9
 800b9d4:	0800b985 	.word	0x0800b985
 800b9d8:	0800b985 	.word	0x0800b985
 800b9dc:	0800bb39 	.word	0x0800bb39
 800b9e0:	0800b985 	.word	0x0800b985
 800b9e4:	0800ba39 	.word	0x0800ba39
 800b9e8:	0800b985 	.word	0x0800b985
 800b9ec:	0800b985 	.word	0x0800b985
 800b9f0:	0800bb01 	.word	0x0800bb01
 800b9f4:	682b      	ldr	r3, [r5, #0]
 800b9f6:	1d1a      	adds	r2, r3, #4
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	602a      	str	r2, [r5, #0]
 800b9fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba04:	2301      	movs	r3, #1
 800ba06:	e0a4      	b.n	800bb52 <_printf_i+0x1f6>
 800ba08:	6820      	ldr	r0, [r4, #0]
 800ba0a:	6829      	ldr	r1, [r5, #0]
 800ba0c:	0606      	lsls	r6, r0, #24
 800ba0e:	f101 0304 	add.w	r3, r1, #4
 800ba12:	d50a      	bpl.n	800ba2a <_printf_i+0xce>
 800ba14:	680e      	ldr	r6, [r1, #0]
 800ba16:	602b      	str	r3, [r5, #0]
 800ba18:	2e00      	cmp	r6, #0
 800ba1a:	da03      	bge.n	800ba24 <_printf_i+0xc8>
 800ba1c:	232d      	movs	r3, #45	; 0x2d
 800ba1e:	4276      	negs	r6, r6
 800ba20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba24:	230a      	movs	r3, #10
 800ba26:	485e      	ldr	r0, [pc, #376]	; (800bba0 <_printf_i+0x244>)
 800ba28:	e019      	b.n	800ba5e <_printf_i+0x102>
 800ba2a:	680e      	ldr	r6, [r1, #0]
 800ba2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ba30:	602b      	str	r3, [r5, #0]
 800ba32:	bf18      	it	ne
 800ba34:	b236      	sxthne	r6, r6
 800ba36:	e7ef      	b.n	800ba18 <_printf_i+0xbc>
 800ba38:	682b      	ldr	r3, [r5, #0]
 800ba3a:	6820      	ldr	r0, [r4, #0]
 800ba3c:	1d19      	adds	r1, r3, #4
 800ba3e:	6029      	str	r1, [r5, #0]
 800ba40:	0601      	lsls	r1, r0, #24
 800ba42:	d501      	bpl.n	800ba48 <_printf_i+0xec>
 800ba44:	681e      	ldr	r6, [r3, #0]
 800ba46:	e002      	b.n	800ba4e <_printf_i+0xf2>
 800ba48:	0646      	lsls	r6, r0, #25
 800ba4a:	d5fb      	bpl.n	800ba44 <_printf_i+0xe8>
 800ba4c:	881e      	ldrh	r6, [r3, #0]
 800ba4e:	2f6f      	cmp	r7, #111	; 0x6f
 800ba50:	bf0c      	ite	eq
 800ba52:	2308      	moveq	r3, #8
 800ba54:	230a      	movne	r3, #10
 800ba56:	4852      	ldr	r0, [pc, #328]	; (800bba0 <_printf_i+0x244>)
 800ba58:	2100      	movs	r1, #0
 800ba5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba5e:	6865      	ldr	r5, [r4, #4]
 800ba60:	2d00      	cmp	r5, #0
 800ba62:	bfa8      	it	ge
 800ba64:	6821      	ldrge	r1, [r4, #0]
 800ba66:	60a5      	str	r5, [r4, #8]
 800ba68:	bfa4      	itt	ge
 800ba6a:	f021 0104 	bicge.w	r1, r1, #4
 800ba6e:	6021      	strge	r1, [r4, #0]
 800ba70:	b90e      	cbnz	r6, 800ba76 <_printf_i+0x11a>
 800ba72:	2d00      	cmp	r5, #0
 800ba74:	d04d      	beq.n	800bb12 <_printf_i+0x1b6>
 800ba76:	4615      	mov	r5, r2
 800ba78:	fbb6 f1f3 	udiv	r1, r6, r3
 800ba7c:	fb03 6711 	mls	r7, r3, r1, r6
 800ba80:	5dc7      	ldrb	r7, [r0, r7]
 800ba82:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ba86:	4637      	mov	r7, r6
 800ba88:	42bb      	cmp	r3, r7
 800ba8a:	460e      	mov	r6, r1
 800ba8c:	d9f4      	bls.n	800ba78 <_printf_i+0x11c>
 800ba8e:	2b08      	cmp	r3, #8
 800ba90:	d10b      	bne.n	800baaa <_printf_i+0x14e>
 800ba92:	6823      	ldr	r3, [r4, #0]
 800ba94:	07de      	lsls	r6, r3, #31
 800ba96:	d508      	bpl.n	800baaa <_printf_i+0x14e>
 800ba98:	6923      	ldr	r3, [r4, #16]
 800ba9a:	6861      	ldr	r1, [r4, #4]
 800ba9c:	4299      	cmp	r1, r3
 800ba9e:	bfde      	ittt	le
 800baa0:	2330      	movle	r3, #48	; 0x30
 800baa2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800baa6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800baaa:	1b52      	subs	r2, r2, r5
 800baac:	6122      	str	r2, [r4, #16]
 800baae:	464b      	mov	r3, r9
 800bab0:	4621      	mov	r1, r4
 800bab2:	4640      	mov	r0, r8
 800bab4:	f8cd a000 	str.w	sl, [sp]
 800bab8:	aa03      	add	r2, sp, #12
 800baba:	f7ff fedf 	bl	800b87c <_printf_common>
 800babe:	3001      	adds	r0, #1
 800bac0:	d14c      	bne.n	800bb5c <_printf_i+0x200>
 800bac2:	f04f 30ff 	mov.w	r0, #4294967295
 800bac6:	b004      	add	sp, #16
 800bac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bacc:	4834      	ldr	r0, [pc, #208]	; (800bba0 <_printf_i+0x244>)
 800bace:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bad2:	6829      	ldr	r1, [r5, #0]
 800bad4:	6823      	ldr	r3, [r4, #0]
 800bad6:	f851 6b04 	ldr.w	r6, [r1], #4
 800bada:	6029      	str	r1, [r5, #0]
 800badc:	061d      	lsls	r5, r3, #24
 800bade:	d514      	bpl.n	800bb0a <_printf_i+0x1ae>
 800bae0:	07df      	lsls	r7, r3, #31
 800bae2:	bf44      	itt	mi
 800bae4:	f043 0320 	orrmi.w	r3, r3, #32
 800bae8:	6023      	strmi	r3, [r4, #0]
 800baea:	b91e      	cbnz	r6, 800baf4 <_printf_i+0x198>
 800baec:	6823      	ldr	r3, [r4, #0]
 800baee:	f023 0320 	bic.w	r3, r3, #32
 800baf2:	6023      	str	r3, [r4, #0]
 800baf4:	2310      	movs	r3, #16
 800baf6:	e7af      	b.n	800ba58 <_printf_i+0xfc>
 800baf8:	6823      	ldr	r3, [r4, #0]
 800bafa:	f043 0320 	orr.w	r3, r3, #32
 800bafe:	6023      	str	r3, [r4, #0]
 800bb00:	2378      	movs	r3, #120	; 0x78
 800bb02:	4828      	ldr	r0, [pc, #160]	; (800bba4 <_printf_i+0x248>)
 800bb04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb08:	e7e3      	b.n	800bad2 <_printf_i+0x176>
 800bb0a:	0659      	lsls	r1, r3, #25
 800bb0c:	bf48      	it	mi
 800bb0e:	b2b6      	uxthmi	r6, r6
 800bb10:	e7e6      	b.n	800bae0 <_printf_i+0x184>
 800bb12:	4615      	mov	r5, r2
 800bb14:	e7bb      	b.n	800ba8e <_printf_i+0x132>
 800bb16:	682b      	ldr	r3, [r5, #0]
 800bb18:	6826      	ldr	r6, [r4, #0]
 800bb1a:	1d18      	adds	r0, r3, #4
 800bb1c:	6961      	ldr	r1, [r4, #20]
 800bb1e:	6028      	str	r0, [r5, #0]
 800bb20:	0635      	lsls	r5, r6, #24
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	d501      	bpl.n	800bb2a <_printf_i+0x1ce>
 800bb26:	6019      	str	r1, [r3, #0]
 800bb28:	e002      	b.n	800bb30 <_printf_i+0x1d4>
 800bb2a:	0670      	lsls	r0, r6, #25
 800bb2c:	d5fb      	bpl.n	800bb26 <_printf_i+0x1ca>
 800bb2e:	8019      	strh	r1, [r3, #0]
 800bb30:	2300      	movs	r3, #0
 800bb32:	4615      	mov	r5, r2
 800bb34:	6123      	str	r3, [r4, #16]
 800bb36:	e7ba      	b.n	800baae <_printf_i+0x152>
 800bb38:	682b      	ldr	r3, [r5, #0]
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	1d1a      	adds	r2, r3, #4
 800bb3e:	602a      	str	r2, [r5, #0]
 800bb40:	681d      	ldr	r5, [r3, #0]
 800bb42:	6862      	ldr	r2, [r4, #4]
 800bb44:	4628      	mov	r0, r5
 800bb46:	f000 fef9 	bl	800c93c <memchr>
 800bb4a:	b108      	cbz	r0, 800bb50 <_printf_i+0x1f4>
 800bb4c:	1b40      	subs	r0, r0, r5
 800bb4e:	6060      	str	r0, [r4, #4]
 800bb50:	6863      	ldr	r3, [r4, #4]
 800bb52:	6123      	str	r3, [r4, #16]
 800bb54:	2300      	movs	r3, #0
 800bb56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb5a:	e7a8      	b.n	800baae <_printf_i+0x152>
 800bb5c:	462a      	mov	r2, r5
 800bb5e:	4649      	mov	r1, r9
 800bb60:	4640      	mov	r0, r8
 800bb62:	6923      	ldr	r3, [r4, #16]
 800bb64:	47d0      	blx	sl
 800bb66:	3001      	adds	r0, #1
 800bb68:	d0ab      	beq.n	800bac2 <_printf_i+0x166>
 800bb6a:	6823      	ldr	r3, [r4, #0]
 800bb6c:	079b      	lsls	r3, r3, #30
 800bb6e:	d413      	bmi.n	800bb98 <_printf_i+0x23c>
 800bb70:	68e0      	ldr	r0, [r4, #12]
 800bb72:	9b03      	ldr	r3, [sp, #12]
 800bb74:	4298      	cmp	r0, r3
 800bb76:	bfb8      	it	lt
 800bb78:	4618      	movlt	r0, r3
 800bb7a:	e7a4      	b.n	800bac6 <_printf_i+0x16a>
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	4632      	mov	r2, r6
 800bb80:	4649      	mov	r1, r9
 800bb82:	4640      	mov	r0, r8
 800bb84:	47d0      	blx	sl
 800bb86:	3001      	adds	r0, #1
 800bb88:	d09b      	beq.n	800bac2 <_printf_i+0x166>
 800bb8a:	3501      	adds	r5, #1
 800bb8c:	68e3      	ldr	r3, [r4, #12]
 800bb8e:	9903      	ldr	r1, [sp, #12]
 800bb90:	1a5b      	subs	r3, r3, r1
 800bb92:	42ab      	cmp	r3, r5
 800bb94:	dcf2      	bgt.n	800bb7c <_printf_i+0x220>
 800bb96:	e7eb      	b.n	800bb70 <_printf_i+0x214>
 800bb98:	2500      	movs	r5, #0
 800bb9a:	f104 0619 	add.w	r6, r4, #25
 800bb9e:	e7f5      	b.n	800bb8c <_printf_i+0x230>
 800bba0:	0800e81e 	.word	0x0800e81e
 800bba4:	0800e82f 	.word	0x0800e82f

0800bba8 <_sbrk_r>:
 800bba8:	b538      	push	{r3, r4, r5, lr}
 800bbaa:	2300      	movs	r3, #0
 800bbac:	4d05      	ldr	r5, [pc, #20]	; (800bbc4 <_sbrk_r+0x1c>)
 800bbae:	4604      	mov	r4, r0
 800bbb0:	4608      	mov	r0, r1
 800bbb2:	602b      	str	r3, [r5, #0]
 800bbb4:	f7f6 fdea 	bl	800278c <_sbrk>
 800bbb8:	1c43      	adds	r3, r0, #1
 800bbba:	d102      	bne.n	800bbc2 <_sbrk_r+0x1a>
 800bbbc:	682b      	ldr	r3, [r5, #0]
 800bbbe:	b103      	cbz	r3, 800bbc2 <_sbrk_r+0x1a>
 800bbc0:	6023      	str	r3, [r4, #0]
 800bbc2:	bd38      	pop	{r3, r4, r5, pc}
 800bbc4:	20000d70 	.word	0x20000d70

0800bbc8 <_vsniprintf_r>:
 800bbc8:	b530      	push	{r4, r5, lr}
 800bbca:	4614      	mov	r4, r2
 800bbcc:	2c00      	cmp	r4, #0
 800bbce:	4605      	mov	r5, r0
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	b09b      	sub	sp, #108	; 0x6c
 800bbd4:	da05      	bge.n	800bbe2 <_vsniprintf_r+0x1a>
 800bbd6:	238b      	movs	r3, #139	; 0x8b
 800bbd8:	6003      	str	r3, [r0, #0]
 800bbda:	f04f 30ff 	mov.w	r0, #4294967295
 800bbde:	b01b      	add	sp, #108	; 0x6c
 800bbe0:	bd30      	pop	{r4, r5, pc}
 800bbe2:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bbe6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bbea:	bf0c      	ite	eq
 800bbec:	4623      	moveq	r3, r4
 800bbee:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bbf2:	9302      	str	r3, [sp, #8]
 800bbf4:	9305      	str	r3, [sp, #20]
 800bbf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bbfa:	9100      	str	r1, [sp, #0]
 800bbfc:	9104      	str	r1, [sp, #16]
 800bbfe:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bc02:	4669      	mov	r1, sp
 800bc04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bc06:	f001 fab3 	bl	800d170 <_svfiprintf_r>
 800bc0a:	1c43      	adds	r3, r0, #1
 800bc0c:	bfbc      	itt	lt
 800bc0e:	238b      	movlt	r3, #139	; 0x8b
 800bc10:	602b      	strlt	r3, [r5, #0]
 800bc12:	2c00      	cmp	r4, #0
 800bc14:	d0e3      	beq.n	800bbde <_vsniprintf_r+0x16>
 800bc16:	2200      	movs	r2, #0
 800bc18:	9b00      	ldr	r3, [sp, #0]
 800bc1a:	701a      	strb	r2, [r3, #0]
 800bc1c:	e7df      	b.n	800bbde <_vsniprintf_r+0x16>
	...

0800bc20 <vsniprintf>:
 800bc20:	b507      	push	{r0, r1, r2, lr}
 800bc22:	9300      	str	r3, [sp, #0]
 800bc24:	4613      	mov	r3, r2
 800bc26:	460a      	mov	r2, r1
 800bc28:	4601      	mov	r1, r0
 800bc2a:	4803      	ldr	r0, [pc, #12]	; (800bc38 <vsniprintf+0x18>)
 800bc2c:	6800      	ldr	r0, [r0, #0]
 800bc2e:	f7ff ffcb 	bl	800bbc8 <_vsniprintf_r>
 800bc32:	b003      	add	sp, #12
 800bc34:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc38:	20000140 	.word	0x20000140

0800bc3c <quorem>:
 800bc3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc40:	6903      	ldr	r3, [r0, #16]
 800bc42:	690c      	ldr	r4, [r1, #16]
 800bc44:	4607      	mov	r7, r0
 800bc46:	42a3      	cmp	r3, r4
 800bc48:	f2c0 8082 	blt.w	800bd50 <quorem+0x114>
 800bc4c:	3c01      	subs	r4, #1
 800bc4e:	f100 0514 	add.w	r5, r0, #20
 800bc52:	f101 0814 	add.w	r8, r1, #20
 800bc56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc5a:	9301      	str	r3, [sp, #4]
 800bc5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc64:	3301      	adds	r3, #1
 800bc66:	429a      	cmp	r2, r3
 800bc68:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc74:	d331      	bcc.n	800bcda <quorem+0x9e>
 800bc76:	f04f 0e00 	mov.w	lr, #0
 800bc7a:	4640      	mov	r0, r8
 800bc7c:	46ac      	mov	ip, r5
 800bc7e:	46f2      	mov	sl, lr
 800bc80:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc84:	b293      	uxth	r3, r2
 800bc86:	fb06 e303 	mla	r3, r6, r3, lr
 800bc8a:	0c12      	lsrs	r2, r2, #16
 800bc8c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	fb06 e202 	mla	r2, r6, r2, lr
 800bc96:	ebaa 0303 	sub.w	r3, sl, r3
 800bc9a:	f8dc a000 	ldr.w	sl, [ip]
 800bc9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bca2:	fa1f fa8a 	uxth.w	sl, sl
 800bca6:	4453      	add	r3, sl
 800bca8:	f8dc a000 	ldr.w	sl, [ip]
 800bcac:	b292      	uxth	r2, r2
 800bcae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bcb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcbc:	4581      	cmp	r9, r0
 800bcbe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bcc2:	f84c 3b04 	str.w	r3, [ip], #4
 800bcc6:	d2db      	bcs.n	800bc80 <quorem+0x44>
 800bcc8:	f855 300b 	ldr.w	r3, [r5, fp]
 800bccc:	b92b      	cbnz	r3, 800bcda <quorem+0x9e>
 800bcce:	9b01      	ldr	r3, [sp, #4]
 800bcd0:	3b04      	subs	r3, #4
 800bcd2:	429d      	cmp	r5, r3
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	d32f      	bcc.n	800bd38 <quorem+0xfc>
 800bcd8:	613c      	str	r4, [r7, #16]
 800bcda:	4638      	mov	r0, r7
 800bcdc:	f001 f8d4 	bl	800ce88 <__mcmp>
 800bce0:	2800      	cmp	r0, #0
 800bce2:	db25      	blt.n	800bd30 <quorem+0xf4>
 800bce4:	4628      	mov	r0, r5
 800bce6:	f04f 0c00 	mov.w	ip, #0
 800bcea:	3601      	adds	r6, #1
 800bcec:	f858 1b04 	ldr.w	r1, [r8], #4
 800bcf0:	f8d0 e000 	ldr.w	lr, [r0]
 800bcf4:	b28b      	uxth	r3, r1
 800bcf6:	ebac 0303 	sub.w	r3, ip, r3
 800bcfa:	fa1f f28e 	uxth.w	r2, lr
 800bcfe:	4413      	add	r3, r2
 800bd00:	0c0a      	lsrs	r2, r1, #16
 800bd02:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bd06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd10:	45c1      	cmp	r9, r8
 800bd12:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bd16:	f840 3b04 	str.w	r3, [r0], #4
 800bd1a:	d2e7      	bcs.n	800bcec <quorem+0xb0>
 800bd1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd24:	b922      	cbnz	r2, 800bd30 <quorem+0xf4>
 800bd26:	3b04      	subs	r3, #4
 800bd28:	429d      	cmp	r5, r3
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	d30a      	bcc.n	800bd44 <quorem+0x108>
 800bd2e:	613c      	str	r4, [r7, #16]
 800bd30:	4630      	mov	r0, r6
 800bd32:	b003      	add	sp, #12
 800bd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd38:	6812      	ldr	r2, [r2, #0]
 800bd3a:	3b04      	subs	r3, #4
 800bd3c:	2a00      	cmp	r2, #0
 800bd3e:	d1cb      	bne.n	800bcd8 <quorem+0x9c>
 800bd40:	3c01      	subs	r4, #1
 800bd42:	e7c6      	b.n	800bcd2 <quorem+0x96>
 800bd44:	6812      	ldr	r2, [r2, #0]
 800bd46:	3b04      	subs	r3, #4
 800bd48:	2a00      	cmp	r2, #0
 800bd4a:	d1f0      	bne.n	800bd2e <quorem+0xf2>
 800bd4c:	3c01      	subs	r4, #1
 800bd4e:	e7eb      	b.n	800bd28 <quorem+0xec>
 800bd50:	2000      	movs	r0, #0
 800bd52:	e7ee      	b.n	800bd32 <quorem+0xf6>
 800bd54:	0000      	movs	r0, r0
	...

0800bd58 <_dtoa_r>:
 800bd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd5c:	4616      	mov	r6, r2
 800bd5e:	461f      	mov	r7, r3
 800bd60:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bd62:	b099      	sub	sp, #100	; 0x64
 800bd64:	4605      	mov	r5, r0
 800bd66:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bd6a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800bd6e:	b974      	cbnz	r4, 800bd8e <_dtoa_r+0x36>
 800bd70:	2010      	movs	r0, #16
 800bd72:	f7ff f9c5 	bl	800b100 <malloc>
 800bd76:	4602      	mov	r2, r0
 800bd78:	6268      	str	r0, [r5, #36]	; 0x24
 800bd7a:	b920      	cbnz	r0, 800bd86 <_dtoa_r+0x2e>
 800bd7c:	21ea      	movs	r1, #234	; 0xea
 800bd7e:	4ba8      	ldr	r3, [pc, #672]	; (800c020 <_dtoa_r+0x2c8>)
 800bd80:	48a8      	ldr	r0, [pc, #672]	; (800c024 <_dtoa_r+0x2cc>)
 800bd82:	f001 faf5 	bl	800d370 <__assert_func>
 800bd86:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd8a:	6004      	str	r4, [r0, #0]
 800bd8c:	60c4      	str	r4, [r0, #12]
 800bd8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bd90:	6819      	ldr	r1, [r3, #0]
 800bd92:	b151      	cbz	r1, 800bdaa <_dtoa_r+0x52>
 800bd94:	685a      	ldr	r2, [r3, #4]
 800bd96:	2301      	movs	r3, #1
 800bd98:	4093      	lsls	r3, r2
 800bd9a:	604a      	str	r2, [r1, #4]
 800bd9c:	608b      	str	r3, [r1, #8]
 800bd9e:	4628      	mov	r0, r5
 800bda0:	f000 fe34 	bl	800ca0c <_Bfree>
 800bda4:	2200      	movs	r2, #0
 800bda6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bda8:	601a      	str	r2, [r3, #0]
 800bdaa:	1e3b      	subs	r3, r7, #0
 800bdac:	bfaf      	iteee	ge
 800bdae:	2300      	movge	r3, #0
 800bdb0:	2201      	movlt	r2, #1
 800bdb2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bdb6:	9305      	strlt	r3, [sp, #20]
 800bdb8:	bfa8      	it	ge
 800bdba:	f8c8 3000 	strge.w	r3, [r8]
 800bdbe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800bdc2:	4b99      	ldr	r3, [pc, #612]	; (800c028 <_dtoa_r+0x2d0>)
 800bdc4:	bfb8      	it	lt
 800bdc6:	f8c8 2000 	strlt.w	r2, [r8]
 800bdca:	ea33 0309 	bics.w	r3, r3, r9
 800bdce:	d119      	bne.n	800be04 <_dtoa_r+0xac>
 800bdd0:	f242 730f 	movw	r3, #9999	; 0x270f
 800bdd4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bdd6:	6013      	str	r3, [r2, #0]
 800bdd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bddc:	4333      	orrs	r3, r6
 800bdde:	f000 857f 	beq.w	800c8e0 <_dtoa_r+0xb88>
 800bde2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bde4:	b953      	cbnz	r3, 800bdfc <_dtoa_r+0xa4>
 800bde6:	4b91      	ldr	r3, [pc, #580]	; (800c02c <_dtoa_r+0x2d4>)
 800bde8:	e022      	b.n	800be30 <_dtoa_r+0xd8>
 800bdea:	4b91      	ldr	r3, [pc, #580]	; (800c030 <_dtoa_r+0x2d8>)
 800bdec:	9303      	str	r3, [sp, #12]
 800bdee:	3308      	adds	r3, #8
 800bdf0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bdf2:	6013      	str	r3, [r2, #0]
 800bdf4:	9803      	ldr	r0, [sp, #12]
 800bdf6:	b019      	add	sp, #100	; 0x64
 800bdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdfc:	4b8b      	ldr	r3, [pc, #556]	; (800c02c <_dtoa_r+0x2d4>)
 800bdfe:	9303      	str	r3, [sp, #12]
 800be00:	3303      	adds	r3, #3
 800be02:	e7f5      	b.n	800bdf0 <_dtoa_r+0x98>
 800be04:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800be08:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800be0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be10:	2200      	movs	r2, #0
 800be12:	2300      	movs	r3, #0
 800be14:	f7f4 fe34 	bl	8000a80 <__aeabi_dcmpeq>
 800be18:	4680      	mov	r8, r0
 800be1a:	b158      	cbz	r0, 800be34 <_dtoa_r+0xdc>
 800be1c:	2301      	movs	r3, #1
 800be1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800be20:	6013      	str	r3, [r2, #0]
 800be22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800be24:	2b00      	cmp	r3, #0
 800be26:	f000 8558 	beq.w	800c8da <_dtoa_r+0xb82>
 800be2a:	4882      	ldr	r0, [pc, #520]	; (800c034 <_dtoa_r+0x2dc>)
 800be2c:	6018      	str	r0, [r3, #0]
 800be2e:	1e43      	subs	r3, r0, #1
 800be30:	9303      	str	r3, [sp, #12]
 800be32:	e7df      	b.n	800bdf4 <_dtoa_r+0x9c>
 800be34:	ab16      	add	r3, sp, #88	; 0x58
 800be36:	9301      	str	r3, [sp, #4]
 800be38:	ab17      	add	r3, sp, #92	; 0x5c
 800be3a:	9300      	str	r3, [sp, #0]
 800be3c:	4628      	mov	r0, r5
 800be3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800be42:	f001 f8c9 	bl	800cfd8 <__d2b>
 800be46:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800be4a:	4683      	mov	fp, r0
 800be4c:	2c00      	cmp	r4, #0
 800be4e:	d07f      	beq.n	800bf50 <_dtoa_r+0x1f8>
 800be50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be56:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800be5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be5e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800be62:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800be66:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800be6a:	2200      	movs	r2, #0
 800be6c:	4b72      	ldr	r3, [pc, #456]	; (800c038 <_dtoa_r+0x2e0>)
 800be6e:	f7f4 f9e7 	bl	8000240 <__aeabi_dsub>
 800be72:	a365      	add	r3, pc, #404	; (adr r3, 800c008 <_dtoa_r+0x2b0>)
 800be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be78:	f7f4 fb9a 	bl	80005b0 <__aeabi_dmul>
 800be7c:	a364      	add	r3, pc, #400	; (adr r3, 800c010 <_dtoa_r+0x2b8>)
 800be7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be82:	f7f4 f9df 	bl	8000244 <__adddf3>
 800be86:	4606      	mov	r6, r0
 800be88:	4620      	mov	r0, r4
 800be8a:	460f      	mov	r7, r1
 800be8c:	f7f4 fb26 	bl	80004dc <__aeabi_i2d>
 800be90:	a361      	add	r3, pc, #388	; (adr r3, 800c018 <_dtoa_r+0x2c0>)
 800be92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be96:	f7f4 fb8b 	bl	80005b0 <__aeabi_dmul>
 800be9a:	4602      	mov	r2, r0
 800be9c:	460b      	mov	r3, r1
 800be9e:	4630      	mov	r0, r6
 800bea0:	4639      	mov	r1, r7
 800bea2:	f7f4 f9cf 	bl	8000244 <__adddf3>
 800bea6:	4606      	mov	r6, r0
 800bea8:	460f      	mov	r7, r1
 800beaa:	f7f4 fe31 	bl	8000b10 <__aeabi_d2iz>
 800beae:	2200      	movs	r2, #0
 800beb0:	4682      	mov	sl, r0
 800beb2:	2300      	movs	r3, #0
 800beb4:	4630      	mov	r0, r6
 800beb6:	4639      	mov	r1, r7
 800beb8:	f7f4 fdec 	bl	8000a94 <__aeabi_dcmplt>
 800bebc:	b148      	cbz	r0, 800bed2 <_dtoa_r+0x17a>
 800bebe:	4650      	mov	r0, sl
 800bec0:	f7f4 fb0c 	bl	80004dc <__aeabi_i2d>
 800bec4:	4632      	mov	r2, r6
 800bec6:	463b      	mov	r3, r7
 800bec8:	f7f4 fdda 	bl	8000a80 <__aeabi_dcmpeq>
 800becc:	b908      	cbnz	r0, 800bed2 <_dtoa_r+0x17a>
 800bece:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bed2:	f1ba 0f16 	cmp.w	sl, #22
 800bed6:	d858      	bhi.n	800bf8a <_dtoa_r+0x232>
 800bed8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bedc:	4b57      	ldr	r3, [pc, #348]	; (800c03c <_dtoa_r+0x2e4>)
 800bede:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee6:	f7f4 fdd5 	bl	8000a94 <__aeabi_dcmplt>
 800beea:	2800      	cmp	r0, #0
 800beec:	d04f      	beq.n	800bf8e <_dtoa_r+0x236>
 800beee:	2300      	movs	r3, #0
 800bef0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bef4:	930f      	str	r3, [sp, #60]	; 0x3c
 800bef6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bef8:	1b1c      	subs	r4, r3, r4
 800befa:	1e63      	subs	r3, r4, #1
 800befc:	9309      	str	r3, [sp, #36]	; 0x24
 800befe:	bf49      	itett	mi
 800bf00:	f1c4 0301 	rsbmi	r3, r4, #1
 800bf04:	2300      	movpl	r3, #0
 800bf06:	9306      	strmi	r3, [sp, #24]
 800bf08:	2300      	movmi	r3, #0
 800bf0a:	bf54      	ite	pl
 800bf0c:	9306      	strpl	r3, [sp, #24]
 800bf0e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800bf10:	f1ba 0f00 	cmp.w	sl, #0
 800bf14:	db3d      	blt.n	800bf92 <_dtoa_r+0x23a>
 800bf16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf18:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800bf1c:	4453      	add	r3, sl
 800bf1e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf20:	2300      	movs	r3, #0
 800bf22:	930a      	str	r3, [sp, #40]	; 0x28
 800bf24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf26:	2b09      	cmp	r3, #9
 800bf28:	f200 808c 	bhi.w	800c044 <_dtoa_r+0x2ec>
 800bf2c:	2b05      	cmp	r3, #5
 800bf2e:	bfc4      	itt	gt
 800bf30:	3b04      	subgt	r3, #4
 800bf32:	9322      	strgt	r3, [sp, #136]	; 0x88
 800bf34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf36:	bfc8      	it	gt
 800bf38:	2400      	movgt	r4, #0
 800bf3a:	f1a3 0302 	sub.w	r3, r3, #2
 800bf3e:	bfd8      	it	le
 800bf40:	2401      	movle	r4, #1
 800bf42:	2b03      	cmp	r3, #3
 800bf44:	f200 808a 	bhi.w	800c05c <_dtoa_r+0x304>
 800bf48:	e8df f003 	tbb	[pc, r3]
 800bf4c:	5b4d4f2d 	.word	0x5b4d4f2d
 800bf50:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800bf54:	441c      	add	r4, r3
 800bf56:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800bf5a:	2b20      	cmp	r3, #32
 800bf5c:	bfc3      	ittte	gt
 800bf5e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf62:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800bf66:	fa09 f303 	lslgt.w	r3, r9, r3
 800bf6a:	f1c3 0320 	rsble	r3, r3, #32
 800bf6e:	bfc6      	itte	gt
 800bf70:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bf74:	4318      	orrgt	r0, r3
 800bf76:	fa06 f003 	lslle.w	r0, r6, r3
 800bf7a:	f7f4 fa9f 	bl	80004bc <__aeabi_ui2d>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800bf84:	3c01      	subs	r4, #1
 800bf86:	9313      	str	r3, [sp, #76]	; 0x4c
 800bf88:	e76f      	b.n	800be6a <_dtoa_r+0x112>
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e7b2      	b.n	800bef4 <_dtoa_r+0x19c>
 800bf8e:	900f      	str	r0, [sp, #60]	; 0x3c
 800bf90:	e7b1      	b.n	800bef6 <_dtoa_r+0x19e>
 800bf92:	9b06      	ldr	r3, [sp, #24]
 800bf94:	eba3 030a 	sub.w	r3, r3, sl
 800bf98:	9306      	str	r3, [sp, #24]
 800bf9a:	f1ca 0300 	rsb	r3, sl, #0
 800bf9e:	930a      	str	r3, [sp, #40]	; 0x28
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	930e      	str	r3, [sp, #56]	; 0x38
 800bfa4:	e7be      	b.n	800bf24 <_dtoa_r+0x1cc>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfaa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	dc58      	bgt.n	800c062 <_dtoa_r+0x30a>
 800bfb0:	f04f 0901 	mov.w	r9, #1
 800bfb4:	464b      	mov	r3, r9
 800bfb6:	f8cd 9020 	str.w	r9, [sp, #32]
 800bfba:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bfc2:	6042      	str	r2, [r0, #4]
 800bfc4:	2204      	movs	r2, #4
 800bfc6:	f102 0614 	add.w	r6, r2, #20
 800bfca:	429e      	cmp	r6, r3
 800bfcc:	6841      	ldr	r1, [r0, #4]
 800bfce:	d94e      	bls.n	800c06e <_dtoa_r+0x316>
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	f000 fcdb 	bl	800c98c <_Balloc>
 800bfd6:	9003      	str	r0, [sp, #12]
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d14c      	bne.n	800c076 <_dtoa_r+0x31e>
 800bfdc:	4602      	mov	r2, r0
 800bfde:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bfe2:	4b17      	ldr	r3, [pc, #92]	; (800c040 <_dtoa_r+0x2e8>)
 800bfe4:	e6cc      	b.n	800bd80 <_dtoa_r+0x28>
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e7de      	b.n	800bfa8 <_dtoa_r+0x250>
 800bfea:	2300      	movs	r3, #0
 800bfec:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bff0:	eb0a 0903 	add.w	r9, sl, r3
 800bff4:	f109 0301 	add.w	r3, r9, #1
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	9308      	str	r3, [sp, #32]
 800bffc:	bfb8      	it	lt
 800bffe:	2301      	movlt	r3, #1
 800c000:	e7dd      	b.n	800bfbe <_dtoa_r+0x266>
 800c002:	2301      	movs	r3, #1
 800c004:	e7f2      	b.n	800bfec <_dtoa_r+0x294>
 800c006:	bf00      	nop
 800c008:	636f4361 	.word	0x636f4361
 800c00c:	3fd287a7 	.word	0x3fd287a7
 800c010:	8b60c8b3 	.word	0x8b60c8b3
 800c014:	3fc68a28 	.word	0x3fc68a28
 800c018:	509f79fb 	.word	0x509f79fb
 800c01c:	3fd34413 	.word	0x3fd34413
 800c020:	0800e84d 	.word	0x0800e84d
 800c024:	0800e864 	.word	0x0800e864
 800c028:	7ff00000 	.word	0x7ff00000
 800c02c:	0800e849 	.word	0x0800e849
 800c030:	0800e840 	.word	0x0800e840
 800c034:	0800e81d 	.word	0x0800e81d
 800c038:	3ff80000 	.word	0x3ff80000
 800c03c:	0800e958 	.word	0x0800e958
 800c040:	0800e8bf 	.word	0x0800e8bf
 800c044:	2401      	movs	r4, #1
 800c046:	2300      	movs	r3, #0
 800c048:	940b      	str	r4, [sp, #44]	; 0x2c
 800c04a:	9322      	str	r3, [sp, #136]	; 0x88
 800c04c:	f04f 39ff 	mov.w	r9, #4294967295
 800c050:	2200      	movs	r2, #0
 800c052:	2312      	movs	r3, #18
 800c054:	f8cd 9020 	str.w	r9, [sp, #32]
 800c058:	9223      	str	r2, [sp, #140]	; 0x8c
 800c05a:	e7b0      	b.n	800bfbe <_dtoa_r+0x266>
 800c05c:	2301      	movs	r3, #1
 800c05e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c060:	e7f4      	b.n	800c04c <_dtoa_r+0x2f4>
 800c062:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800c066:	464b      	mov	r3, r9
 800c068:	f8cd 9020 	str.w	r9, [sp, #32]
 800c06c:	e7a7      	b.n	800bfbe <_dtoa_r+0x266>
 800c06e:	3101      	adds	r1, #1
 800c070:	6041      	str	r1, [r0, #4]
 800c072:	0052      	lsls	r2, r2, #1
 800c074:	e7a7      	b.n	800bfc6 <_dtoa_r+0x26e>
 800c076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c078:	9a03      	ldr	r2, [sp, #12]
 800c07a:	601a      	str	r2, [r3, #0]
 800c07c:	9b08      	ldr	r3, [sp, #32]
 800c07e:	2b0e      	cmp	r3, #14
 800c080:	f200 80a8 	bhi.w	800c1d4 <_dtoa_r+0x47c>
 800c084:	2c00      	cmp	r4, #0
 800c086:	f000 80a5 	beq.w	800c1d4 <_dtoa_r+0x47c>
 800c08a:	f1ba 0f00 	cmp.w	sl, #0
 800c08e:	dd34      	ble.n	800c0fa <_dtoa_r+0x3a2>
 800c090:	4a9a      	ldr	r2, [pc, #616]	; (800c2fc <_dtoa_r+0x5a4>)
 800c092:	f00a 030f 	and.w	r3, sl, #15
 800c096:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c09a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c09e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c0a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c0a6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800c0aa:	d016      	beq.n	800c0da <_dtoa_r+0x382>
 800c0ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c0b0:	4b93      	ldr	r3, [pc, #588]	; (800c300 <_dtoa_r+0x5a8>)
 800c0b2:	2703      	movs	r7, #3
 800c0b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c0b8:	f7f4 fba4 	bl	8000804 <__aeabi_ddiv>
 800c0bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0c0:	f004 040f 	and.w	r4, r4, #15
 800c0c4:	4e8e      	ldr	r6, [pc, #568]	; (800c300 <_dtoa_r+0x5a8>)
 800c0c6:	b954      	cbnz	r4, 800c0de <_dtoa_r+0x386>
 800c0c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c0cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0d0:	f7f4 fb98 	bl	8000804 <__aeabi_ddiv>
 800c0d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0d8:	e029      	b.n	800c12e <_dtoa_r+0x3d6>
 800c0da:	2702      	movs	r7, #2
 800c0dc:	e7f2      	b.n	800c0c4 <_dtoa_r+0x36c>
 800c0de:	07e1      	lsls	r1, r4, #31
 800c0e0:	d508      	bpl.n	800c0f4 <_dtoa_r+0x39c>
 800c0e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c0e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c0ea:	f7f4 fa61 	bl	80005b0 <__aeabi_dmul>
 800c0ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c0f2:	3701      	adds	r7, #1
 800c0f4:	1064      	asrs	r4, r4, #1
 800c0f6:	3608      	adds	r6, #8
 800c0f8:	e7e5      	b.n	800c0c6 <_dtoa_r+0x36e>
 800c0fa:	f000 80a5 	beq.w	800c248 <_dtoa_r+0x4f0>
 800c0fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c102:	f1ca 0400 	rsb	r4, sl, #0
 800c106:	4b7d      	ldr	r3, [pc, #500]	; (800c2fc <_dtoa_r+0x5a4>)
 800c108:	f004 020f 	and.w	r2, r4, #15
 800c10c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c114:	f7f4 fa4c 	bl	80005b0 <__aeabi_dmul>
 800c118:	2702      	movs	r7, #2
 800c11a:	2300      	movs	r3, #0
 800c11c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c120:	4e77      	ldr	r6, [pc, #476]	; (800c300 <_dtoa_r+0x5a8>)
 800c122:	1124      	asrs	r4, r4, #4
 800c124:	2c00      	cmp	r4, #0
 800c126:	f040 8084 	bne.w	800c232 <_dtoa_r+0x4da>
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d1d2      	bne.n	800c0d4 <_dtoa_r+0x37c>
 800c12e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c130:	2b00      	cmp	r3, #0
 800c132:	f000 808b 	beq.w	800c24c <_dtoa_r+0x4f4>
 800c136:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c13a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c13e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c142:	2200      	movs	r2, #0
 800c144:	4b6f      	ldr	r3, [pc, #444]	; (800c304 <_dtoa_r+0x5ac>)
 800c146:	f7f4 fca5 	bl	8000a94 <__aeabi_dcmplt>
 800c14a:	2800      	cmp	r0, #0
 800c14c:	d07e      	beq.n	800c24c <_dtoa_r+0x4f4>
 800c14e:	9b08      	ldr	r3, [sp, #32]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d07b      	beq.n	800c24c <_dtoa_r+0x4f4>
 800c154:	f1b9 0f00 	cmp.w	r9, #0
 800c158:	dd38      	ble.n	800c1cc <_dtoa_r+0x474>
 800c15a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c15e:	2200      	movs	r2, #0
 800c160:	4b69      	ldr	r3, [pc, #420]	; (800c308 <_dtoa_r+0x5b0>)
 800c162:	f7f4 fa25 	bl	80005b0 <__aeabi_dmul>
 800c166:	464c      	mov	r4, r9
 800c168:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c16c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800c170:	3701      	adds	r7, #1
 800c172:	4638      	mov	r0, r7
 800c174:	f7f4 f9b2 	bl	80004dc <__aeabi_i2d>
 800c178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c17c:	f7f4 fa18 	bl	80005b0 <__aeabi_dmul>
 800c180:	2200      	movs	r2, #0
 800c182:	4b62      	ldr	r3, [pc, #392]	; (800c30c <_dtoa_r+0x5b4>)
 800c184:	f7f4 f85e 	bl	8000244 <__adddf3>
 800c188:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c18c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c190:	9611      	str	r6, [sp, #68]	; 0x44
 800c192:	2c00      	cmp	r4, #0
 800c194:	d15d      	bne.n	800c252 <_dtoa_r+0x4fa>
 800c196:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c19a:	2200      	movs	r2, #0
 800c19c:	4b5c      	ldr	r3, [pc, #368]	; (800c310 <_dtoa_r+0x5b8>)
 800c19e:	f7f4 f84f 	bl	8000240 <__aeabi_dsub>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c1aa:	4633      	mov	r3, r6
 800c1ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c1ae:	f7f4 fc8f 	bl	8000ad0 <__aeabi_dcmpgt>
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	f040 829c 	bne.w	800c6f0 <_dtoa_r+0x998>
 800c1b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c1be:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c1c2:	f7f4 fc67 	bl	8000a94 <__aeabi_dcmplt>
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	f040 8290 	bne.w	800c6ec <_dtoa_r+0x994>
 800c1cc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c1d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c1d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	f2c0 8152 	blt.w	800c480 <_dtoa_r+0x728>
 800c1dc:	f1ba 0f0e 	cmp.w	sl, #14
 800c1e0:	f300 814e 	bgt.w	800c480 <_dtoa_r+0x728>
 800c1e4:	4b45      	ldr	r3, [pc, #276]	; (800c2fc <_dtoa_r+0x5a4>)
 800c1e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c1ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c1ee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c1f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f280 80db 	bge.w	800c3b0 <_dtoa_r+0x658>
 800c1fa:	9b08      	ldr	r3, [sp, #32]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	f300 80d7 	bgt.w	800c3b0 <_dtoa_r+0x658>
 800c202:	f040 8272 	bne.w	800c6ea <_dtoa_r+0x992>
 800c206:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c20a:	2200      	movs	r2, #0
 800c20c:	4b40      	ldr	r3, [pc, #256]	; (800c310 <_dtoa_r+0x5b8>)
 800c20e:	f7f4 f9cf 	bl	80005b0 <__aeabi_dmul>
 800c212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c216:	f7f4 fc51 	bl	8000abc <__aeabi_dcmpge>
 800c21a:	9c08      	ldr	r4, [sp, #32]
 800c21c:	4626      	mov	r6, r4
 800c21e:	2800      	cmp	r0, #0
 800c220:	f040 8248 	bne.w	800c6b4 <_dtoa_r+0x95c>
 800c224:	2331      	movs	r3, #49	; 0x31
 800c226:	9f03      	ldr	r7, [sp, #12]
 800c228:	f10a 0a01 	add.w	sl, sl, #1
 800c22c:	f807 3b01 	strb.w	r3, [r7], #1
 800c230:	e244      	b.n	800c6bc <_dtoa_r+0x964>
 800c232:	07e2      	lsls	r2, r4, #31
 800c234:	d505      	bpl.n	800c242 <_dtoa_r+0x4ea>
 800c236:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c23a:	f7f4 f9b9 	bl	80005b0 <__aeabi_dmul>
 800c23e:	2301      	movs	r3, #1
 800c240:	3701      	adds	r7, #1
 800c242:	1064      	asrs	r4, r4, #1
 800c244:	3608      	adds	r6, #8
 800c246:	e76d      	b.n	800c124 <_dtoa_r+0x3cc>
 800c248:	2702      	movs	r7, #2
 800c24a:	e770      	b.n	800c12e <_dtoa_r+0x3d6>
 800c24c:	46d0      	mov	r8, sl
 800c24e:	9c08      	ldr	r4, [sp, #32]
 800c250:	e78f      	b.n	800c172 <_dtoa_r+0x41a>
 800c252:	9903      	ldr	r1, [sp, #12]
 800c254:	4b29      	ldr	r3, [pc, #164]	; (800c2fc <_dtoa_r+0x5a4>)
 800c256:	4421      	add	r1, r4
 800c258:	9112      	str	r1, [sp, #72]	; 0x48
 800c25a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c25c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c260:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c264:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c268:	2900      	cmp	r1, #0
 800c26a:	d055      	beq.n	800c318 <_dtoa_r+0x5c0>
 800c26c:	2000      	movs	r0, #0
 800c26e:	4929      	ldr	r1, [pc, #164]	; (800c314 <_dtoa_r+0x5bc>)
 800c270:	f7f4 fac8 	bl	8000804 <__aeabi_ddiv>
 800c274:	463b      	mov	r3, r7
 800c276:	4632      	mov	r2, r6
 800c278:	f7f3 ffe2 	bl	8000240 <__aeabi_dsub>
 800c27c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c280:	9f03      	ldr	r7, [sp, #12]
 800c282:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c286:	f7f4 fc43 	bl	8000b10 <__aeabi_d2iz>
 800c28a:	4604      	mov	r4, r0
 800c28c:	f7f4 f926 	bl	80004dc <__aeabi_i2d>
 800c290:	4602      	mov	r2, r0
 800c292:	460b      	mov	r3, r1
 800c294:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c298:	f7f3 ffd2 	bl	8000240 <__aeabi_dsub>
 800c29c:	4602      	mov	r2, r0
 800c29e:	460b      	mov	r3, r1
 800c2a0:	3430      	adds	r4, #48	; 0x30
 800c2a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c2a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c2aa:	f807 4b01 	strb.w	r4, [r7], #1
 800c2ae:	f7f4 fbf1 	bl	8000a94 <__aeabi_dcmplt>
 800c2b2:	2800      	cmp	r0, #0
 800c2b4:	d174      	bne.n	800c3a0 <_dtoa_r+0x648>
 800c2b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2ba:	2000      	movs	r0, #0
 800c2bc:	4911      	ldr	r1, [pc, #68]	; (800c304 <_dtoa_r+0x5ac>)
 800c2be:	f7f3 ffbf 	bl	8000240 <__aeabi_dsub>
 800c2c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c2c6:	f7f4 fbe5 	bl	8000a94 <__aeabi_dcmplt>
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	f040 80b7 	bne.w	800c43e <_dtoa_r+0x6e6>
 800c2d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c2d2:	429f      	cmp	r7, r3
 800c2d4:	f43f af7a 	beq.w	800c1cc <_dtoa_r+0x474>
 800c2d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c2dc:	2200      	movs	r2, #0
 800c2de:	4b0a      	ldr	r3, [pc, #40]	; (800c308 <_dtoa_r+0x5b0>)
 800c2e0:	f7f4 f966 	bl	80005b0 <__aeabi_dmul>
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c2ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2ee:	4b06      	ldr	r3, [pc, #24]	; (800c308 <_dtoa_r+0x5b0>)
 800c2f0:	f7f4 f95e 	bl	80005b0 <__aeabi_dmul>
 800c2f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2f8:	e7c3      	b.n	800c282 <_dtoa_r+0x52a>
 800c2fa:	bf00      	nop
 800c2fc:	0800e958 	.word	0x0800e958
 800c300:	0800e930 	.word	0x0800e930
 800c304:	3ff00000 	.word	0x3ff00000
 800c308:	40240000 	.word	0x40240000
 800c30c:	401c0000 	.word	0x401c0000
 800c310:	40140000 	.word	0x40140000
 800c314:	3fe00000 	.word	0x3fe00000
 800c318:	4630      	mov	r0, r6
 800c31a:	4639      	mov	r1, r7
 800c31c:	f7f4 f948 	bl	80005b0 <__aeabi_dmul>
 800c320:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c322:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c326:	9c03      	ldr	r4, [sp, #12]
 800c328:	9314      	str	r3, [sp, #80]	; 0x50
 800c32a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c32e:	f7f4 fbef 	bl	8000b10 <__aeabi_d2iz>
 800c332:	9015      	str	r0, [sp, #84]	; 0x54
 800c334:	f7f4 f8d2 	bl	80004dc <__aeabi_i2d>
 800c338:	4602      	mov	r2, r0
 800c33a:	460b      	mov	r3, r1
 800c33c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c340:	f7f3 ff7e 	bl	8000240 <__aeabi_dsub>
 800c344:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c346:	4606      	mov	r6, r0
 800c348:	3330      	adds	r3, #48	; 0x30
 800c34a:	f804 3b01 	strb.w	r3, [r4], #1
 800c34e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c350:	460f      	mov	r7, r1
 800c352:	429c      	cmp	r4, r3
 800c354:	f04f 0200 	mov.w	r2, #0
 800c358:	d124      	bne.n	800c3a4 <_dtoa_r+0x64c>
 800c35a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c35e:	4bb0      	ldr	r3, [pc, #704]	; (800c620 <_dtoa_r+0x8c8>)
 800c360:	f7f3 ff70 	bl	8000244 <__adddf3>
 800c364:	4602      	mov	r2, r0
 800c366:	460b      	mov	r3, r1
 800c368:	4630      	mov	r0, r6
 800c36a:	4639      	mov	r1, r7
 800c36c:	f7f4 fbb0 	bl	8000ad0 <__aeabi_dcmpgt>
 800c370:	2800      	cmp	r0, #0
 800c372:	d163      	bne.n	800c43c <_dtoa_r+0x6e4>
 800c374:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c378:	2000      	movs	r0, #0
 800c37a:	49a9      	ldr	r1, [pc, #676]	; (800c620 <_dtoa_r+0x8c8>)
 800c37c:	f7f3 ff60 	bl	8000240 <__aeabi_dsub>
 800c380:	4602      	mov	r2, r0
 800c382:	460b      	mov	r3, r1
 800c384:	4630      	mov	r0, r6
 800c386:	4639      	mov	r1, r7
 800c388:	f7f4 fb84 	bl	8000a94 <__aeabi_dcmplt>
 800c38c:	2800      	cmp	r0, #0
 800c38e:	f43f af1d 	beq.w	800c1cc <_dtoa_r+0x474>
 800c392:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c394:	1e7b      	subs	r3, r7, #1
 800c396:	9314      	str	r3, [sp, #80]	; 0x50
 800c398:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c39c:	2b30      	cmp	r3, #48	; 0x30
 800c39e:	d0f8      	beq.n	800c392 <_dtoa_r+0x63a>
 800c3a0:	46c2      	mov	sl, r8
 800c3a2:	e03b      	b.n	800c41c <_dtoa_r+0x6c4>
 800c3a4:	4b9f      	ldr	r3, [pc, #636]	; (800c624 <_dtoa_r+0x8cc>)
 800c3a6:	f7f4 f903 	bl	80005b0 <__aeabi_dmul>
 800c3aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3ae:	e7bc      	b.n	800c32a <_dtoa_r+0x5d2>
 800c3b0:	9f03      	ldr	r7, [sp, #12]
 800c3b2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c3b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c3ba:	4640      	mov	r0, r8
 800c3bc:	4649      	mov	r1, r9
 800c3be:	f7f4 fa21 	bl	8000804 <__aeabi_ddiv>
 800c3c2:	f7f4 fba5 	bl	8000b10 <__aeabi_d2iz>
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	f7f4 f888 	bl	80004dc <__aeabi_i2d>
 800c3cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c3d0:	f7f4 f8ee 	bl	80005b0 <__aeabi_dmul>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	4640      	mov	r0, r8
 800c3da:	4649      	mov	r1, r9
 800c3dc:	f7f3 ff30 	bl	8000240 <__aeabi_dsub>
 800c3e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c3e4:	f807 6b01 	strb.w	r6, [r7], #1
 800c3e8:	9e03      	ldr	r6, [sp, #12]
 800c3ea:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c3ee:	1bbe      	subs	r6, r7, r6
 800c3f0:	45b4      	cmp	ip, r6
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	d136      	bne.n	800c466 <_dtoa_r+0x70e>
 800c3f8:	f7f3 ff24 	bl	8000244 <__adddf3>
 800c3fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c400:	4680      	mov	r8, r0
 800c402:	4689      	mov	r9, r1
 800c404:	f7f4 fb64 	bl	8000ad0 <__aeabi_dcmpgt>
 800c408:	bb58      	cbnz	r0, 800c462 <_dtoa_r+0x70a>
 800c40a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c40e:	4640      	mov	r0, r8
 800c410:	4649      	mov	r1, r9
 800c412:	f7f4 fb35 	bl	8000a80 <__aeabi_dcmpeq>
 800c416:	b108      	cbz	r0, 800c41c <_dtoa_r+0x6c4>
 800c418:	07e1      	lsls	r1, r4, #31
 800c41a:	d422      	bmi.n	800c462 <_dtoa_r+0x70a>
 800c41c:	4628      	mov	r0, r5
 800c41e:	4659      	mov	r1, fp
 800c420:	f000 faf4 	bl	800ca0c <_Bfree>
 800c424:	2300      	movs	r3, #0
 800c426:	703b      	strb	r3, [r7, #0]
 800c428:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c42a:	f10a 0001 	add.w	r0, sl, #1
 800c42e:	6018      	str	r0, [r3, #0]
 800c430:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c432:	2b00      	cmp	r3, #0
 800c434:	f43f acde 	beq.w	800bdf4 <_dtoa_r+0x9c>
 800c438:	601f      	str	r7, [r3, #0]
 800c43a:	e4db      	b.n	800bdf4 <_dtoa_r+0x9c>
 800c43c:	4627      	mov	r7, r4
 800c43e:	463b      	mov	r3, r7
 800c440:	461f      	mov	r7, r3
 800c442:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c446:	2a39      	cmp	r2, #57	; 0x39
 800c448:	d107      	bne.n	800c45a <_dtoa_r+0x702>
 800c44a:	9a03      	ldr	r2, [sp, #12]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d1f7      	bne.n	800c440 <_dtoa_r+0x6e8>
 800c450:	2230      	movs	r2, #48	; 0x30
 800c452:	9903      	ldr	r1, [sp, #12]
 800c454:	f108 0801 	add.w	r8, r8, #1
 800c458:	700a      	strb	r2, [r1, #0]
 800c45a:	781a      	ldrb	r2, [r3, #0]
 800c45c:	3201      	adds	r2, #1
 800c45e:	701a      	strb	r2, [r3, #0]
 800c460:	e79e      	b.n	800c3a0 <_dtoa_r+0x648>
 800c462:	46d0      	mov	r8, sl
 800c464:	e7eb      	b.n	800c43e <_dtoa_r+0x6e6>
 800c466:	2200      	movs	r2, #0
 800c468:	4b6e      	ldr	r3, [pc, #440]	; (800c624 <_dtoa_r+0x8cc>)
 800c46a:	f7f4 f8a1 	bl	80005b0 <__aeabi_dmul>
 800c46e:	2200      	movs	r2, #0
 800c470:	2300      	movs	r3, #0
 800c472:	4680      	mov	r8, r0
 800c474:	4689      	mov	r9, r1
 800c476:	f7f4 fb03 	bl	8000a80 <__aeabi_dcmpeq>
 800c47a:	2800      	cmp	r0, #0
 800c47c:	d09b      	beq.n	800c3b6 <_dtoa_r+0x65e>
 800c47e:	e7cd      	b.n	800c41c <_dtoa_r+0x6c4>
 800c480:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c482:	2a00      	cmp	r2, #0
 800c484:	f000 80d0 	beq.w	800c628 <_dtoa_r+0x8d0>
 800c488:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c48a:	2a01      	cmp	r2, #1
 800c48c:	f300 80ae 	bgt.w	800c5ec <_dtoa_r+0x894>
 800c490:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c492:	2a00      	cmp	r2, #0
 800c494:	f000 80a6 	beq.w	800c5e4 <_dtoa_r+0x88c>
 800c498:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c49c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c49e:	9f06      	ldr	r7, [sp, #24]
 800c4a0:	9a06      	ldr	r2, [sp, #24]
 800c4a2:	2101      	movs	r1, #1
 800c4a4:	441a      	add	r2, r3
 800c4a6:	9206      	str	r2, [sp, #24]
 800c4a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	441a      	add	r2, r3
 800c4ae:	9209      	str	r2, [sp, #36]	; 0x24
 800c4b0:	f000 fb62 	bl	800cb78 <__i2b>
 800c4b4:	4606      	mov	r6, r0
 800c4b6:	2f00      	cmp	r7, #0
 800c4b8:	dd0c      	ble.n	800c4d4 <_dtoa_r+0x77c>
 800c4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	dd09      	ble.n	800c4d4 <_dtoa_r+0x77c>
 800c4c0:	42bb      	cmp	r3, r7
 800c4c2:	bfa8      	it	ge
 800c4c4:	463b      	movge	r3, r7
 800c4c6:	9a06      	ldr	r2, [sp, #24]
 800c4c8:	1aff      	subs	r7, r7, r3
 800c4ca:	1ad2      	subs	r2, r2, r3
 800c4cc:	9206      	str	r2, [sp, #24]
 800c4ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4d0:	1ad3      	subs	r3, r2, r3
 800c4d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4d6:	b1f3      	cbz	r3, 800c516 <_dtoa_r+0x7be>
 800c4d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f000 80a8 	beq.w	800c630 <_dtoa_r+0x8d8>
 800c4e0:	2c00      	cmp	r4, #0
 800c4e2:	dd10      	ble.n	800c506 <_dtoa_r+0x7ae>
 800c4e4:	4631      	mov	r1, r6
 800c4e6:	4622      	mov	r2, r4
 800c4e8:	4628      	mov	r0, r5
 800c4ea:	f000 fc03 	bl	800ccf4 <__pow5mult>
 800c4ee:	465a      	mov	r2, fp
 800c4f0:	4601      	mov	r1, r0
 800c4f2:	4606      	mov	r6, r0
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	f000 fb55 	bl	800cba4 <__multiply>
 800c4fa:	4680      	mov	r8, r0
 800c4fc:	4659      	mov	r1, fp
 800c4fe:	4628      	mov	r0, r5
 800c500:	f000 fa84 	bl	800ca0c <_Bfree>
 800c504:	46c3      	mov	fp, r8
 800c506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c508:	1b1a      	subs	r2, r3, r4
 800c50a:	d004      	beq.n	800c516 <_dtoa_r+0x7be>
 800c50c:	4659      	mov	r1, fp
 800c50e:	4628      	mov	r0, r5
 800c510:	f000 fbf0 	bl	800ccf4 <__pow5mult>
 800c514:	4683      	mov	fp, r0
 800c516:	2101      	movs	r1, #1
 800c518:	4628      	mov	r0, r5
 800c51a:	f000 fb2d 	bl	800cb78 <__i2b>
 800c51e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c520:	4604      	mov	r4, r0
 800c522:	2b00      	cmp	r3, #0
 800c524:	f340 8086 	ble.w	800c634 <_dtoa_r+0x8dc>
 800c528:	461a      	mov	r2, r3
 800c52a:	4601      	mov	r1, r0
 800c52c:	4628      	mov	r0, r5
 800c52e:	f000 fbe1 	bl	800ccf4 <__pow5mult>
 800c532:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c534:	4604      	mov	r4, r0
 800c536:	2b01      	cmp	r3, #1
 800c538:	dd7f      	ble.n	800c63a <_dtoa_r+0x8e2>
 800c53a:	f04f 0800 	mov.w	r8, #0
 800c53e:	6923      	ldr	r3, [r4, #16]
 800c540:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c544:	6918      	ldr	r0, [r3, #16]
 800c546:	f000 fac9 	bl	800cadc <__hi0bits>
 800c54a:	f1c0 0020 	rsb	r0, r0, #32
 800c54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c550:	4418      	add	r0, r3
 800c552:	f010 001f 	ands.w	r0, r0, #31
 800c556:	f000 8092 	beq.w	800c67e <_dtoa_r+0x926>
 800c55a:	f1c0 0320 	rsb	r3, r0, #32
 800c55e:	2b04      	cmp	r3, #4
 800c560:	f340 808a 	ble.w	800c678 <_dtoa_r+0x920>
 800c564:	f1c0 001c 	rsb	r0, r0, #28
 800c568:	9b06      	ldr	r3, [sp, #24]
 800c56a:	4407      	add	r7, r0
 800c56c:	4403      	add	r3, r0
 800c56e:	9306      	str	r3, [sp, #24]
 800c570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c572:	4403      	add	r3, r0
 800c574:	9309      	str	r3, [sp, #36]	; 0x24
 800c576:	9b06      	ldr	r3, [sp, #24]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	dd05      	ble.n	800c588 <_dtoa_r+0x830>
 800c57c:	4659      	mov	r1, fp
 800c57e:	461a      	mov	r2, r3
 800c580:	4628      	mov	r0, r5
 800c582:	f000 fc11 	bl	800cda8 <__lshift>
 800c586:	4683      	mov	fp, r0
 800c588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	dd05      	ble.n	800c59a <_dtoa_r+0x842>
 800c58e:	4621      	mov	r1, r4
 800c590:	461a      	mov	r2, r3
 800c592:	4628      	mov	r0, r5
 800c594:	f000 fc08 	bl	800cda8 <__lshift>
 800c598:	4604      	mov	r4, r0
 800c59a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d070      	beq.n	800c682 <_dtoa_r+0x92a>
 800c5a0:	4621      	mov	r1, r4
 800c5a2:	4658      	mov	r0, fp
 800c5a4:	f000 fc70 	bl	800ce88 <__mcmp>
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	da6a      	bge.n	800c682 <_dtoa_r+0x92a>
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	4659      	mov	r1, fp
 800c5b0:	220a      	movs	r2, #10
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	f000 fa4c 	bl	800ca50 <__multadd>
 800c5b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5ba:	4683      	mov	fp, r0
 800c5bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	f000 8194 	beq.w	800c8ee <_dtoa_r+0xb96>
 800c5c6:	4631      	mov	r1, r6
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	220a      	movs	r2, #10
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	f000 fa3f 	bl	800ca50 <__multadd>
 800c5d2:	f1b9 0f00 	cmp.w	r9, #0
 800c5d6:	4606      	mov	r6, r0
 800c5d8:	f300 8093 	bgt.w	800c702 <_dtoa_r+0x9aa>
 800c5dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c5de:	2b02      	cmp	r3, #2
 800c5e0:	dc57      	bgt.n	800c692 <_dtoa_r+0x93a>
 800c5e2:	e08e      	b.n	800c702 <_dtoa_r+0x9aa>
 800c5e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c5e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c5ea:	e757      	b.n	800c49c <_dtoa_r+0x744>
 800c5ec:	9b08      	ldr	r3, [sp, #32]
 800c5ee:	1e5c      	subs	r4, r3, #1
 800c5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5f2:	42a3      	cmp	r3, r4
 800c5f4:	bfb7      	itett	lt
 800c5f6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c5f8:	1b1c      	subge	r4, r3, r4
 800c5fa:	1ae2      	sublt	r2, r4, r3
 800c5fc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c5fe:	bfbe      	ittt	lt
 800c600:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c602:	189b      	addlt	r3, r3, r2
 800c604:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c606:	9b08      	ldr	r3, [sp, #32]
 800c608:	bfb8      	it	lt
 800c60a:	2400      	movlt	r4, #0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	bfbb      	ittet	lt
 800c610:	9b06      	ldrlt	r3, [sp, #24]
 800c612:	9a08      	ldrlt	r2, [sp, #32]
 800c614:	9f06      	ldrge	r7, [sp, #24]
 800c616:	1a9f      	sublt	r7, r3, r2
 800c618:	bfac      	ite	ge
 800c61a:	9b08      	ldrge	r3, [sp, #32]
 800c61c:	2300      	movlt	r3, #0
 800c61e:	e73f      	b.n	800c4a0 <_dtoa_r+0x748>
 800c620:	3fe00000 	.word	0x3fe00000
 800c624:	40240000 	.word	0x40240000
 800c628:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c62a:	9f06      	ldr	r7, [sp, #24]
 800c62c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c62e:	e742      	b.n	800c4b6 <_dtoa_r+0x75e>
 800c630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c632:	e76b      	b.n	800c50c <_dtoa_r+0x7b4>
 800c634:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c636:	2b01      	cmp	r3, #1
 800c638:	dc19      	bgt.n	800c66e <_dtoa_r+0x916>
 800c63a:	9b04      	ldr	r3, [sp, #16]
 800c63c:	b9bb      	cbnz	r3, 800c66e <_dtoa_r+0x916>
 800c63e:	9b05      	ldr	r3, [sp, #20]
 800c640:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c644:	b99b      	cbnz	r3, 800c66e <_dtoa_r+0x916>
 800c646:	9b05      	ldr	r3, [sp, #20]
 800c648:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c64c:	0d1b      	lsrs	r3, r3, #20
 800c64e:	051b      	lsls	r3, r3, #20
 800c650:	b183      	cbz	r3, 800c674 <_dtoa_r+0x91c>
 800c652:	f04f 0801 	mov.w	r8, #1
 800c656:	9b06      	ldr	r3, [sp, #24]
 800c658:	3301      	adds	r3, #1
 800c65a:	9306      	str	r3, [sp, #24]
 800c65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c65e:	3301      	adds	r3, #1
 800c660:	9309      	str	r3, [sp, #36]	; 0x24
 800c662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c664:	2b00      	cmp	r3, #0
 800c666:	f47f af6a 	bne.w	800c53e <_dtoa_r+0x7e6>
 800c66a:	2001      	movs	r0, #1
 800c66c:	e76f      	b.n	800c54e <_dtoa_r+0x7f6>
 800c66e:	f04f 0800 	mov.w	r8, #0
 800c672:	e7f6      	b.n	800c662 <_dtoa_r+0x90a>
 800c674:	4698      	mov	r8, r3
 800c676:	e7f4      	b.n	800c662 <_dtoa_r+0x90a>
 800c678:	f43f af7d 	beq.w	800c576 <_dtoa_r+0x81e>
 800c67c:	4618      	mov	r0, r3
 800c67e:	301c      	adds	r0, #28
 800c680:	e772      	b.n	800c568 <_dtoa_r+0x810>
 800c682:	9b08      	ldr	r3, [sp, #32]
 800c684:	2b00      	cmp	r3, #0
 800c686:	dc36      	bgt.n	800c6f6 <_dtoa_r+0x99e>
 800c688:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c68a:	2b02      	cmp	r3, #2
 800c68c:	dd33      	ble.n	800c6f6 <_dtoa_r+0x99e>
 800c68e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c692:	f1b9 0f00 	cmp.w	r9, #0
 800c696:	d10d      	bne.n	800c6b4 <_dtoa_r+0x95c>
 800c698:	4621      	mov	r1, r4
 800c69a:	464b      	mov	r3, r9
 800c69c:	2205      	movs	r2, #5
 800c69e:	4628      	mov	r0, r5
 800c6a0:	f000 f9d6 	bl	800ca50 <__multadd>
 800c6a4:	4601      	mov	r1, r0
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	4658      	mov	r0, fp
 800c6aa:	f000 fbed 	bl	800ce88 <__mcmp>
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	f73f adb8 	bgt.w	800c224 <_dtoa_r+0x4cc>
 800c6b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c6b6:	9f03      	ldr	r7, [sp, #12]
 800c6b8:	ea6f 0a03 	mvn.w	sl, r3
 800c6bc:	f04f 0800 	mov.w	r8, #0
 800c6c0:	4621      	mov	r1, r4
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	f000 f9a2 	bl	800ca0c <_Bfree>
 800c6c8:	2e00      	cmp	r6, #0
 800c6ca:	f43f aea7 	beq.w	800c41c <_dtoa_r+0x6c4>
 800c6ce:	f1b8 0f00 	cmp.w	r8, #0
 800c6d2:	d005      	beq.n	800c6e0 <_dtoa_r+0x988>
 800c6d4:	45b0      	cmp	r8, r6
 800c6d6:	d003      	beq.n	800c6e0 <_dtoa_r+0x988>
 800c6d8:	4641      	mov	r1, r8
 800c6da:	4628      	mov	r0, r5
 800c6dc:	f000 f996 	bl	800ca0c <_Bfree>
 800c6e0:	4631      	mov	r1, r6
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	f000 f992 	bl	800ca0c <_Bfree>
 800c6e8:	e698      	b.n	800c41c <_dtoa_r+0x6c4>
 800c6ea:	2400      	movs	r4, #0
 800c6ec:	4626      	mov	r6, r4
 800c6ee:	e7e1      	b.n	800c6b4 <_dtoa_r+0x95c>
 800c6f0:	46c2      	mov	sl, r8
 800c6f2:	4626      	mov	r6, r4
 800c6f4:	e596      	b.n	800c224 <_dtoa_r+0x4cc>
 800c6f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	f000 80fd 	beq.w	800c8fc <_dtoa_r+0xba4>
 800c702:	2f00      	cmp	r7, #0
 800c704:	dd05      	ble.n	800c712 <_dtoa_r+0x9ba>
 800c706:	4631      	mov	r1, r6
 800c708:	463a      	mov	r2, r7
 800c70a:	4628      	mov	r0, r5
 800c70c:	f000 fb4c 	bl	800cda8 <__lshift>
 800c710:	4606      	mov	r6, r0
 800c712:	f1b8 0f00 	cmp.w	r8, #0
 800c716:	d05c      	beq.n	800c7d2 <_dtoa_r+0xa7a>
 800c718:	4628      	mov	r0, r5
 800c71a:	6871      	ldr	r1, [r6, #4]
 800c71c:	f000 f936 	bl	800c98c <_Balloc>
 800c720:	4607      	mov	r7, r0
 800c722:	b928      	cbnz	r0, 800c730 <_dtoa_r+0x9d8>
 800c724:	4602      	mov	r2, r0
 800c726:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c72a:	4b7f      	ldr	r3, [pc, #508]	; (800c928 <_dtoa_r+0xbd0>)
 800c72c:	f7ff bb28 	b.w	800bd80 <_dtoa_r+0x28>
 800c730:	6932      	ldr	r2, [r6, #16]
 800c732:	f106 010c 	add.w	r1, r6, #12
 800c736:	3202      	adds	r2, #2
 800c738:	0092      	lsls	r2, r2, #2
 800c73a:	300c      	adds	r0, #12
 800c73c:	f000 f90c 	bl	800c958 <memcpy>
 800c740:	2201      	movs	r2, #1
 800c742:	4639      	mov	r1, r7
 800c744:	4628      	mov	r0, r5
 800c746:	f000 fb2f 	bl	800cda8 <__lshift>
 800c74a:	46b0      	mov	r8, r6
 800c74c:	4606      	mov	r6, r0
 800c74e:	9b03      	ldr	r3, [sp, #12]
 800c750:	3301      	adds	r3, #1
 800c752:	9308      	str	r3, [sp, #32]
 800c754:	9b03      	ldr	r3, [sp, #12]
 800c756:	444b      	add	r3, r9
 800c758:	930a      	str	r3, [sp, #40]	; 0x28
 800c75a:	9b04      	ldr	r3, [sp, #16]
 800c75c:	f003 0301 	and.w	r3, r3, #1
 800c760:	9309      	str	r3, [sp, #36]	; 0x24
 800c762:	9b08      	ldr	r3, [sp, #32]
 800c764:	4621      	mov	r1, r4
 800c766:	3b01      	subs	r3, #1
 800c768:	4658      	mov	r0, fp
 800c76a:	9304      	str	r3, [sp, #16]
 800c76c:	f7ff fa66 	bl	800bc3c <quorem>
 800c770:	4603      	mov	r3, r0
 800c772:	4641      	mov	r1, r8
 800c774:	3330      	adds	r3, #48	; 0x30
 800c776:	9006      	str	r0, [sp, #24]
 800c778:	4658      	mov	r0, fp
 800c77a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c77c:	f000 fb84 	bl	800ce88 <__mcmp>
 800c780:	4632      	mov	r2, r6
 800c782:	4681      	mov	r9, r0
 800c784:	4621      	mov	r1, r4
 800c786:	4628      	mov	r0, r5
 800c788:	f000 fb9a 	bl	800cec0 <__mdiff>
 800c78c:	68c2      	ldr	r2, [r0, #12]
 800c78e:	4607      	mov	r7, r0
 800c790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c792:	bb02      	cbnz	r2, 800c7d6 <_dtoa_r+0xa7e>
 800c794:	4601      	mov	r1, r0
 800c796:	4658      	mov	r0, fp
 800c798:	f000 fb76 	bl	800ce88 <__mcmp>
 800c79c:	4602      	mov	r2, r0
 800c79e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7a0:	4639      	mov	r1, r7
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c7a8:	f000 f930 	bl	800ca0c <_Bfree>
 800c7ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c7ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7b0:	9f08      	ldr	r7, [sp, #32]
 800c7b2:	ea43 0102 	orr.w	r1, r3, r2
 800c7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7b8:	430b      	orrs	r3, r1
 800c7ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7bc:	d10d      	bne.n	800c7da <_dtoa_r+0xa82>
 800c7be:	2b39      	cmp	r3, #57	; 0x39
 800c7c0:	d029      	beq.n	800c816 <_dtoa_r+0xabe>
 800c7c2:	f1b9 0f00 	cmp.w	r9, #0
 800c7c6:	dd01      	ble.n	800c7cc <_dtoa_r+0xa74>
 800c7c8:	9b06      	ldr	r3, [sp, #24]
 800c7ca:	3331      	adds	r3, #49	; 0x31
 800c7cc:	9a04      	ldr	r2, [sp, #16]
 800c7ce:	7013      	strb	r3, [r2, #0]
 800c7d0:	e776      	b.n	800c6c0 <_dtoa_r+0x968>
 800c7d2:	4630      	mov	r0, r6
 800c7d4:	e7b9      	b.n	800c74a <_dtoa_r+0x9f2>
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	e7e2      	b.n	800c7a0 <_dtoa_r+0xa48>
 800c7da:	f1b9 0f00 	cmp.w	r9, #0
 800c7de:	db06      	blt.n	800c7ee <_dtoa_r+0xa96>
 800c7e0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c7e2:	ea41 0909 	orr.w	r9, r1, r9
 800c7e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7e8:	ea59 0101 	orrs.w	r1, r9, r1
 800c7ec:	d120      	bne.n	800c830 <_dtoa_r+0xad8>
 800c7ee:	2a00      	cmp	r2, #0
 800c7f0:	ddec      	ble.n	800c7cc <_dtoa_r+0xa74>
 800c7f2:	4659      	mov	r1, fp
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	4628      	mov	r0, r5
 800c7f8:	9308      	str	r3, [sp, #32]
 800c7fa:	f000 fad5 	bl	800cda8 <__lshift>
 800c7fe:	4621      	mov	r1, r4
 800c800:	4683      	mov	fp, r0
 800c802:	f000 fb41 	bl	800ce88 <__mcmp>
 800c806:	2800      	cmp	r0, #0
 800c808:	9b08      	ldr	r3, [sp, #32]
 800c80a:	dc02      	bgt.n	800c812 <_dtoa_r+0xaba>
 800c80c:	d1de      	bne.n	800c7cc <_dtoa_r+0xa74>
 800c80e:	07da      	lsls	r2, r3, #31
 800c810:	d5dc      	bpl.n	800c7cc <_dtoa_r+0xa74>
 800c812:	2b39      	cmp	r3, #57	; 0x39
 800c814:	d1d8      	bne.n	800c7c8 <_dtoa_r+0xa70>
 800c816:	2339      	movs	r3, #57	; 0x39
 800c818:	9a04      	ldr	r2, [sp, #16]
 800c81a:	7013      	strb	r3, [r2, #0]
 800c81c:	463b      	mov	r3, r7
 800c81e:	461f      	mov	r7, r3
 800c820:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c824:	3b01      	subs	r3, #1
 800c826:	2a39      	cmp	r2, #57	; 0x39
 800c828:	d050      	beq.n	800c8cc <_dtoa_r+0xb74>
 800c82a:	3201      	adds	r2, #1
 800c82c:	701a      	strb	r2, [r3, #0]
 800c82e:	e747      	b.n	800c6c0 <_dtoa_r+0x968>
 800c830:	2a00      	cmp	r2, #0
 800c832:	dd03      	ble.n	800c83c <_dtoa_r+0xae4>
 800c834:	2b39      	cmp	r3, #57	; 0x39
 800c836:	d0ee      	beq.n	800c816 <_dtoa_r+0xabe>
 800c838:	3301      	adds	r3, #1
 800c83a:	e7c7      	b.n	800c7cc <_dtoa_r+0xa74>
 800c83c:	9a08      	ldr	r2, [sp, #32]
 800c83e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c840:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c844:	428a      	cmp	r2, r1
 800c846:	d02a      	beq.n	800c89e <_dtoa_r+0xb46>
 800c848:	4659      	mov	r1, fp
 800c84a:	2300      	movs	r3, #0
 800c84c:	220a      	movs	r2, #10
 800c84e:	4628      	mov	r0, r5
 800c850:	f000 f8fe 	bl	800ca50 <__multadd>
 800c854:	45b0      	cmp	r8, r6
 800c856:	4683      	mov	fp, r0
 800c858:	f04f 0300 	mov.w	r3, #0
 800c85c:	f04f 020a 	mov.w	r2, #10
 800c860:	4641      	mov	r1, r8
 800c862:	4628      	mov	r0, r5
 800c864:	d107      	bne.n	800c876 <_dtoa_r+0xb1e>
 800c866:	f000 f8f3 	bl	800ca50 <__multadd>
 800c86a:	4680      	mov	r8, r0
 800c86c:	4606      	mov	r6, r0
 800c86e:	9b08      	ldr	r3, [sp, #32]
 800c870:	3301      	adds	r3, #1
 800c872:	9308      	str	r3, [sp, #32]
 800c874:	e775      	b.n	800c762 <_dtoa_r+0xa0a>
 800c876:	f000 f8eb 	bl	800ca50 <__multadd>
 800c87a:	4631      	mov	r1, r6
 800c87c:	4680      	mov	r8, r0
 800c87e:	2300      	movs	r3, #0
 800c880:	220a      	movs	r2, #10
 800c882:	4628      	mov	r0, r5
 800c884:	f000 f8e4 	bl	800ca50 <__multadd>
 800c888:	4606      	mov	r6, r0
 800c88a:	e7f0      	b.n	800c86e <_dtoa_r+0xb16>
 800c88c:	f1b9 0f00 	cmp.w	r9, #0
 800c890:	bfcc      	ite	gt
 800c892:	464f      	movgt	r7, r9
 800c894:	2701      	movle	r7, #1
 800c896:	f04f 0800 	mov.w	r8, #0
 800c89a:	9a03      	ldr	r2, [sp, #12]
 800c89c:	4417      	add	r7, r2
 800c89e:	4659      	mov	r1, fp
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	4628      	mov	r0, r5
 800c8a4:	9308      	str	r3, [sp, #32]
 800c8a6:	f000 fa7f 	bl	800cda8 <__lshift>
 800c8aa:	4621      	mov	r1, r4
 800c8ac:	4683      	mov	fp, r0
 800c8ae:	f000 faeb 	bl	800ce88 <__mcmp>
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	dcb2      	bgt.n	800c81c <_dtoa_r+0xac4>
 800c8b6:	d102      	bne.n	800c8be <_dtoa_r+0xb66>
 800c8b8:	9b08      	ldr	r3, [sp, #32]
 800c8ba:	07db      	lsls	r3, r3, #31
 800c8bc:	d4ae      	bmi.n	800c81c <_dtoa_r+0xac4>
 800c8be:	463b      	mov	r3, r7
 800c8c0:	461f      	mov	r7, r3
 800c8c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8c6:	2a30      	cmp	r2, #48	; 0x30
 800c8c8:	d0fa      	beq.n	800c8c0 <_dtoa_r+0xb68>
 800c8ca:	e6f9      	b.n	800c6c0 <_dtoa_r+0x968>
 800c8cc:	9a03      	ldr	r2, [sp, #12]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d1a5      	bne.n	800c81e <_dtoa_r+0xac6>
 800c8d2:	2331      	movs	r3, #49	; 0x31
 800c8d4:	f10a 0a01 	add.w	sl, sl, #1
 800c8d8:	e779      	b.n	800c7ce <_dtoa_r+0xa76>
 800c8da:	4b14      	ldr	r3, [pc, #80]	; (800c92c <_dtoa_r+0xbd4>)
 800c8dc:	f7ff baa8 	b.w	800be30 <_dtoa_r+0xd8>
 800c8e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	f47f aa81 	bne.w	800bdea <_dtoa_r+0x92>
 800c8e8:	4b11      	ldr	r3, [pc, #68]	; (800c930 <_dtoa_r+0xbd8>)
 800c8ea:	f7ff baa1 	b.w	800be30 <_dtoa_r+0xd8>
 800c8ee:	f1b9 0f00 	cmp.w	r9, #0
 800c8f2:	dc03      	bgt.n	800c8fc <_dtoa_r+0xba4>
 800c8f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c8f6:	2b02      	cmp	r3, #2
 800c8f8:	f73f aecb 	bgt.w	800c692 <_dtoa_r+0x93a>
 800c8fc:	9f03      	ldr	r7, [sp, #12]
 800c8fe:	4621      	mov	r1, r4
 800c900:	4658      	mov	r0, fp
 800c902:	f7ff f99b 	bl	800bc3c <quorem>
 800c906:	9a03      	ldr	r2, [sp, #12]
 800c908:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c90c:	f807 3b01 	strb.w	r3, [r7], #1
 800c910:	1aba      	subs	r2, r7, r2
 800c912:	4591      	cmp	r9, r2
 800c914:	ddba      	ble.n	800c88c <_dtoa_r+0xb34>
 800c916:	4659      	mov	r1, fp
 800c918:	2300      	movs	r3, #0
 800c91a:	220a      	movs	r2, #10
 800c91c:	4628      	mov	r0, r5
 800c91e:	f000 f897 	bl	800ca50 <__multadd>
 800c922:	4683      	mov	fp, r0
 800c924:	e7eb      	b.n	800c8fe <_dtoa_r+0xba6>
 800c926:	bf00      	nop
 800c928:	0800e8bf 	.word	0x0800e8bf
 800c92c:	0800e81c 	.word	0x0800e81c
 800c930:	0800e840 	.word	0x0800e840

0800c934 <_localeconv_r>:
 800c934:	4800      	ldr	r0, [pc, #0]	; (800c938 <_localeconv_r+0x4>)
 800c936:	4770      	bx	lr
 800c938:	20000294 	.word	0x20000294

0800c93c <memchr>:
 800c93c:	4603      	mov	r3, r0
 800c93e:	b510      	push	{r4, lr}
 800c940:	b2c9      	uxtb	r1, r1
 800c942:	4402      	add	r2, r0
 800c944:	4293      	cmp	r3, r2
 800c946:	4618      	mov	r0, r3
 800c948:	d101      	bne.n	800c94e <memchr+0x12>
 800c94a:	2000      	movs	r0, #0
 800c94c:	e003      	b.n	800c956 <memchr+0x1a>
 800c94e:	7804      	ldrb	r4, [r0, #0]
 800c950:	3301      	adds	r3, #1
 800c952:	428c      	cmp	r4, r1
 800c954:	d1f6      	bne.n	800c944 <memchr+0x8>
 800c956:	bd10      	pop	{r4, pc}

0800c958 <memcpy>:
 800c958:	440a      	add	r2, r1
 800c95a:	4291      	cmp	r1, r2
 800c95c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c960:	d100      	bne.n	800c964 <memcpy+0xc>
 800c962:	4770      	bx	lr
 800c964:	b510      	push	{r4, lr}
 800c966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c96a:	4291      	cmp	r1, r2
 800c96c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c970:	d1f9      	bne.n	800c966 <memcpy+0xe>
 800c972:	bd10      	pop	{r4, pc}

0800c974 <__malloc_lock>:
 800c974:	4801      	ldr	r0, [pc, #4]	; (800c97c <__malloc_lock+0x8>)
 800c976:	f000 bd2c 	b.w	800d3d2 <__retarget_lock_acquire_recursive>
 800c97a:	bf00      	nop
 800c97c:	20000d74 	.word	0x20000d74

0800c980 <__malloc_unlock>:
 800c980:	4801      	ldr	r0, [pc, #4]	; (800c988 <__malloc_unlock+0x8>)
 800c982:	f000 bd27 	b.w	800d3d4 <__retarget_lock_release_recursive>
 800c986:	bf00      	nop
 800c988:	20000d74 	.word	0x20000d74

0800c98c <_Balloc>:
 800c98c:	b570      	push	{r4, r5, r6, lr}
 800c98e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c990:	4604      	mov	r4, r0
 800c992:	460d      	mov	r5, r1
 800c994:	b976      	cbnz	r6, 800c9b4 <_Balloc+0x28>
 800c996:	2010      	movs	r0, #16
 800c998:	f7fe fbb2 	bl	800b100 <malloc>
 800c99c:	4602      	mov	r2, r0
 800c99e:	6260      	str	r0, [r4, #36]	; 0x24
 800c9a0:	b920      	cbnz	r0, 800c9ac <_Balloc+0x20>
 800c9a2:	2166      	movs	r1, #102	; 0x66
 800c9a4:	4b17      	ldr	r3, [pc, #92]	; (800ca04 <_Balloc+0x78>)
 800c9a6:	4818      	ldr	r0, [pc, #96]	; (800ca08 <_Balloc+0x7c>)
 800c9a8:	f000 fce2 	bl	800d370 <__assert_func>
 800c9ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9b0:	6006      	str	r6, [r0, #0]
 800c9b2:	60c6      	str	r6, [r0, #12]
 800c9b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c9b6:	68f3      	ldr	r3, [r6, #12]
 800c9b8:	b183      	cbz	r3, 800c9dc <_Balloc+0x50>
 800c9ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c9c2:	b9b8      	cbnz	r0, 800c9f4 <_Balloc+0x68>
 800c9c4:	2101      	movs	r1, #1
 800c9c6:	fa01 f605 	lsl.w	r6, r1, r5
 800c9ca:	1d72      	adds	r2, r6, #5
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	0092      	lsls	r2, r2, #2
 800c9d0:	f000 fb5e 	bl	800d090 <_calloc_r>
 800c9d4:	b160      	cbz	r0, 800c9f0 <_Balloc+0x64>
 800c9d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c9da:	e00e      	b.n	800c9fa <_Balloc+0x6e>
 800c9dc:	2221      	movs	r2, #33	; 0x21
 800c9de:	2104      	movs	r1, #4
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f000 fb55 	bl	800d090 <_calloc_r>
 800c9e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9e8:	60f0      	str	r0, [r6, #12]
 800c9ea:	68db      	ldr	r3, [r3, #12]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d1e4      	bne.n	800c9ba <_Balloc+0x2e>
 800c9f0:	2000      	movs	r0, #0
 800c9f2:	bd70      	pop	{r4, r5, r6, pc}
 800c9f4:	6802      	ldr	r2, [r0, #0]
 800c9f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca00:	e7f7      	b.n	800c9f2 <_Balloc+0x66>
 800ca02:	bf00      	nop
 800ca04:	0800e84d 	.word	0x0800e84d
 800ca08:	0800e8d0 	.word	0x0800e8d0

0800ca0c <_Bfree>:
 800ca0c:	b570      	push	{r4, r5, r6, lr}
 800ca0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca10:	4605      	mov	r5, r0
 800ca12:	460c      	mov	r4, r1
 800ca14:	b976      	cbnz	r6, 800ca34 <_Bfree+0x28>
 800ca16:	2010      	movs	r0, #16
 800ca18:	f7fe fb72 	bl	800b100 <malloc>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	6268      	str	r0, [r5, #36]	; 0x24
 800ca20:	b920      	cbnz	r0, 800ca2c <_Bfree+0x20>
 800ca22:	218a      	movs	r1, #138	; 0x8a
 800ca24:	4b08      	ldr	r3, [pc, #32]	; (800ca48 <_Bfree+0x3c>)
 800ca26:	4809      	ldr	r0, [pc, #36]	; (800ca4c <_Bfree+0x40>)
 800ca28:	f000 fca2 	bl	800d370 <__assert_func>
 800ca2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca30:	6006      	str	r6, [r0, #0]
 800ca32:	60c6      	str	r6, [r0, #12]
 800ca34:	b13c      	cbz	r4, 800ca46 <_Bfree+0x3a>
 800ca36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ca38:	6862      	ldr	r2, [r4, #4]
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca40:	6021      	str	r1, [r4, #0]
 800ca42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca46:	bd70      	pop	{r4, r5, r6, pc}
 800ca48:	0800e84d 	.word	0x0800e84d
 800ca4c:	0800e8d0 	.word	0x0800e8d0

0800ca50 <__multadd>:
 800ca50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca54:	4607      	mov	r7, r0
 800ca56:	460c      	mov	r4, r1
 800ca58:	461e      	mov	r6, r3
 800ca5a:	2000      	movs	r0, #0
 800ca5c:	690d      	ldr	r5, [r1, #16]
 800ca5e:	f101 0c14 	add.w	ip, r1, #20
 800ca62:	f8dc 3000 	ldr.w	r3, [ip]
 800ca66:	3001      	adds	r0, #1
 800ca68:	b299      	uxth	r1, r3
 800ca6a:	fb02 6101 	mla	r1, r2, r1, r6
 800ca6e:	0c1e      	lsrs	r6, r3, #16
 800ca70:	0c0b      	lsrs	r3, r1, #16
 800ca72:	fb02 3306 	mla	r3, r2, r6, r3
 800ca76:	b289      	uxth	r1, r1
 800ca78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ca7c:	4285      	cmp	r5, r0
 800ca7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ca82:	f84c 1b04 	str.w	r1, [ip], #4
 800ca86:	dcec      	bgt.n	800ca62 <__multadd+0x12>
 800ca88:	b30e      	cbz	r6, 800cace <__multadd+0x7e>
 800ca8a:	68a3      	ldr	r3, [r4, #8]
 800ca8c:	42ab      	cmp	r3, r5
 800ca8e:	dc19      	bgt.n	800cac4 <__multadd+0x74>
 800ca90:	6861      	ldr	r1, [r4, #4]
 800ca92:	4638      	mov	r0, r7
 800ca94:	3101      	adds	r1, #1
 800ca96:	f7ff ff79 	bl	800c98c <_Balloc>
 800ca9a:	4680      	mov	r8, r0
 800ca9c:	b928      	cbnz	r0, 800caaa <__multadd+0x5a>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	21b5      	movs	r1, #181	; 0xb5
 800caa2:	4b0c      	ldr	r3, [pc, #48]	; (800cad4 <__multadd+0x84>)
 800caa4:	480c      	ldr	r0, [pc, #48]	; (800cad8 <__multadd+0x88>)
 800caa6:	f000 fc63 	bl	800d370 <__assert_func>
 800caaa:	6922      	ldr	r2, [r4, #16]
 800caac:	f104 010c 	add.w	r1, r4, #12
 800cab0:	3202      	adds	r2, #2
 800cab2:	0092      	lsls	r2, r2, #2
 800cab4:	300c      	adds	r0, #12
 800cab6:	f7ff ff4f 	bl	800c958 <memcpy>
 800caba:	4621      	mov	r1, r4
 800cabc:	4638      	mov	r0, r7
 800cabe:	f7ff ffa5 	bl	800ca0c <_Bfree>
 800cac2:	4644      	mov	r4, r8
 800cac4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cac8:	3501      	adds	r5, #1
 800caca:	615e      	str	r6, [r3, #20]
 800cacc:	6125      	str	r5, [r4, #16]
 800cace:	4620      	mov	r0, r4
 800cad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cad4:	0800e8bf 	.word	0x0800e8bf
 800cad8:	0800e8d0 	.word	0x0800e8d0

0800cadc <__hi0bits>:
 800cadc:	0c02      	lsrs	r2, r0, #16
 800cade:	0412      	lsls	r2, r2, #16
 800cae0:	4603      	mov	r3, r0
 800cae2:	b9ca      	cbnz	r2, 800cb18 <__hi0bits+0x3c>
 800cae4:	0403      	lsls	r3, r0, #16
 800cae6:	2010      	movs	r0, #16
 800cae8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800caec:	bf04      	itt	eq
 800caee:	021b      	lsleq	r3, r3, #8
 800caf0:	3008      	addeq	r0, #8
 800caf2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800caf6:	bf04      	itt	eq
 800caf8:	011b      	lsleq	r3, r3, #4
 800cafa:	3004      	addeq	r0, #4
 800cafc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cb00:	bf04      	itt	eq
 800cb02:	009b      	lsleq	r3, r3, #2
 800cb04:	3002      	addeq	r0, #2
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	db05      	blt.n	800cb16 <__hi0bits+0x3a>
 800cb0a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cb0e:	f100 0001 	add.w	r0, r0, #1
 800cb12:	bf08      	it	eq
 800cb14:	2020      	moveq	r0, #32
 800cb16:	4770      	bx	lr
 800cb18:	2000      	movs	r0, #0
 800cb1a:	e7e5      	b.n	800cae8 <__hi0bits+0xc>

0800cb1c <__lo0bits>:
 800cb1c:	6803      	ldr	r3, [r0, #0]
 800cb1e:	4602      	mov	r2, r0
 800cb20:	f013 0007 	ands.w	r0, r3, #7
 800cb24:	d00b      	beq.n	800cb3e <__lo0bits+0x22>
 800cb26:	07d9      	lsls	r1, r3, #31
 800cb28:	d421      	bmi.n	800cb6e <__lo0bits+0x52>
 800cb2a:	0798      	lsls	r0, r3, #30
 800cb2c:	bf49      	itett	mi
 800cb2e:	085b      	lsrmi	r3, r3, #1
 800cb30:	089b      	lsrpl	r3, r3, #2
 800cb32:	2001      	movmi	r0, #1
 800cb34:	6013      	strmi	r3, [r2, #0]
 800cb36:	bf5c      	itt	pl
 800cb38:	2002      	movpl	r0, #2
 800cb3a:	6013      	strpl	r3, [r2, #0]
 800cb3c:	4770      	bx	lr
 800cb3e:	b299      	uxth	r1, r3
 800cb40:	b909      	cbnz	r1, 800cb46 <__lo0bits+0x2a>
 800cb42:	2010      	movs	r0, #16
 800cb44:	0c1b      	lsrs	r3, r3, #16
 800cb46:	b2d9      	uxtb	r1, r3
 800cb48:	b909      	cbnz	r1, 800cb4e <__lo0bits+0x32>
 800cb4a:	3008      	adds	r0, #8
 800cb4c:	0a1b      	lsrs	r3, r3, #8
 800cb4e:	0719      	lsls	r1, r3, #28
 800cb50:	bf04      	itt	eq
 800cb52:	091b      	lsreq	r3, r3, #4
 800cb54:	3004      	addeq	r0, #4
 800cb56:	0799      	lsls	r1, r3, #30
 800cb58:	bf04      	itt	eq
 800cb5a:	089b      	lsreq	r3, r3, #2
 800cb5c:	3002      	addeq	r0, #2
 800cb5e:	07d9      	lsls	r1, r3, #31
 800cb60:	d403      	bmi.n	800cb6a <__lo0bits+0x4e>
 800cb62:	085b      	lsrs	r3, r3, #1
 800cb64:	f100 0001 	add.w	r0, r0, #1
 800cb68:	d003      	beq.n	800cb72 <__lo0bits+0x56>
 800cb6a:	6013      	str	r3, [r2, #0]
 800cb6c:	4770      	bx	lr
 800cb6e:	2000      	movs	r0, #0
 800cb70:	4770      	bx	lr
 800cb72:	2020      	movs	r0, #32
 800cb74:	4770      	bx	lr
	...

0800cb78 <__i2b>:
 800cb78:	b510      	push	{r4, lr}
 800cb7a:	460c      	mov	r4, r1
 800cb7c:	2101      	movs	r1, #1
 800cb7e:	f7ff ff05 	bl	800c98c <_Balloc>
 800cb82:	4602      	mov	r2, r0
 800cb84:	b928      	cbnz	r0, 800cb92 <__i2b+0x1a>
 800cb86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cb8a:	4b04      	ldr	r3, [pc, #16]	; (800cb9c <__i2b+0x24>)
 800cb8c:	4804      	ldr	r0, [pc, #16]	; (800cba0 <__i2b+0x28>)
 800cb8e:	f000 fbef 	bl	800d370 <__assert_func>
 800cb92:	2301      	movs	r3, #1
 800cb94:	6144      	str	r4, [r0, #20]
 800cb96:	6103      	str	r3, [r0, #16]
 800cb98:	bd10      	pop	{r4, pc}
 800cb9a:	bf00      	nop
 800cb9c:	0800e8bf 	.word	0x0800e8bf
 800cba0:	0800e8d0 	.word	0x0800e8d0

0800cba4 <__multiply>:
 800cba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba8:	4691      	mov	r9, r2
 800cbaa:	690a      	ldr	r2, [r1, #16]
 800cbac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cbb0:	460c      	mov	r4, r1
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	bfbe      	ittt	lt
 800cbb6:	460b      	movlt	r3, r1
 800cbb8:	464c      	movlt	r4, r9
 800cbba:	4699      	movlt	r9, r3
 800cbbc:	6927      	ldr	r7, [r4, #16]
 800cbbe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cbc2:	68a3      	ldr	r3, [r4, #8]
 800cbc4:	6861      	ldr	r1, [r4, #4]
 800cbc6:	eb07 060a 	add.w	r6, r7, sl
 800cbca:	42b3      	cmp	r3, r6
 800cbcc:	b085      	sub	sp, #20
 800cbce:	bfb8      	it	lt
 800cbd0:	3101      	addlt	r1, #1
 800cbd2:	f7ff fedb 	bl	800c98c <_Balloc>
 800cbd6:	b930      	cbnz	r0, 800cbe6 <__multiply+0x42>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	f240 115d 	movw	r1, #349	; 0x15d
 800cbde:	4b43      	ldr	r3, [pc, #268]	; (800ccec <__multiply+0x148>)
 800cbe0:	4843      	ldr	r0, [pc, #268]	; (800ccf0 <__multiply+0x14c>)
 800cbe2:	f000 fbc5 	bl	800d370 <__assert_func>
 800cbe6:	f100 0514 	add.w	r5, r0, #20
 800cbea:	462b      	mov	r3, r5
 800cbec:	2200      	movs	r2, #0
 800cbee:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cbf2:	4543      	cmp	r3, r8
 800cbf4:	d321      	bcc.n	800cc3a <__multiply+0x96>
 800cbf6:	f104 0314 	add.w	r3, r4, #20
 800cbfa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cbfe:	f109 0314 	add.w	r3, r9, #20
 800cc02:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cc06:	9202      	str	r2, [sp, #8]
 800cc08:	1b3a      	subs	r2, r7, r4
 800cc0a:	3a15      	subs	r2, #21
 800cc0c:	f022 0203 	bic.w	r2, r2, #3
 800cc10:	3204      	adds	r2, #4
 800cc12:	f104 0115 	add.w	r1, r4, #21
 800cc16:	428f      	cmp	r7, r1
 800cc18:	bf38      	it	cc
 800cc1a:	2204      	movcc	r2, #4
 800cc1c:	9201      	str	r2, [sp, #4]
 800cc1e:	9a02      	ldr	r2, [sp, #8]
 800cc20:	9303      	str	r3, [sp, #12]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d80c      	bhi.n	800cc40 <__multiply+0x9c>
 800cc26:	2e00      	cmp	r6, #0
 800cc28:	dd03      	ble.n	800cc32 <__multiply+0x8e>
 800cc2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d059      	beq.n	800cce6 <__multiply+0x142>
 800cc32:	6106      	str	r6, [r0, #16]
 800cc34:	b005      	add	sp, #20
 800cc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc3a:	f843 2b04 	str.w	r2, [r3], #4
 800cc3e:	e7d8      	b.n	800cbf2 <__multiply+0x4e>
 800cc40:	f8b3 a000 	ldrh.w	sl, [r3]
 800cc44:	f1ba 0f00 	cmp.w	sl, #0
 800cc48:	d023      	beq.n	800cc92 <__multiply+0xee>
 800cc4a:	46a9      	mov	r9, r5
 800cc4c:	f04f 0c00 	mov.w	ip, #0
 800cc50:	f104 0e14 	add.w	lr, r4, #20
 800cc54:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cc58:	f8d9 1000 	ldr.w	r1, [r9]
 800cc5c:	fa1f fb82 	uxth.w	fp, r2
 800cc60:	b289      	uxth	r1, r1
 800cc62:	fb0a 110b 	mla	r1, sl, fp, r1
 800cc66:	4461      	add	r1, ip
 800cc68:	f8d9 c000 	ldr.w	ip, [r9]
 800cc6c:	0c12      	lsrs	r2, r2, #16
 800cc6e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cc72:	fb0a c202 	mla	r2, sl, r2, ip
 800cc76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cc7a:	b289      	uxth	r1, r1
 800cc7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cc80:	4577      	cmp	r7, lr
 800cc82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cc86:	f849 1b04 	str.w	r1, [r9], #4
 800cc8a:	d8e3      	bhi.n	800cc54 <__multiply+0xb0>
 800cc8c:	9a01      	ldr	r2, [sp, #4]
 800cc8e:	f845 c002 	str.w	ip, [r5, r2]
 800cc92:	9a03      	ldr	r2, [sp, #12]
 800cc94:	3304      	adds	r3, #4
 800cc96:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cc9a:	f1b9 0f00 	cmp.w	r9, #0
 800cc9e:	d020      	beq.n	800cce2 <__multiply+0x13e>
 800cca0:	46ae      	mov	lr, r5
 800cca2:	f04f 0a00 	mov.w	sl, #0
 800cca6:	6829      	ldr	r1, [r5, #0]
 800cca8:	f104 0c14 	add.w	ip, r4, #20
 800ccac:	f8bc b000 	ldrh.w	fp, [ip]
 800ccb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ccb4:	b289      	uxth	r1, r1
 800ccb6:	fb09 220b 	mla	r2, r9, fp, r2
 800ccba:	4492      	add	sl, r2
 800ccbc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ccc0:	f84e 1b04 	str.w	r1, [lr], #4
 800ccc4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ccc8:	f8be 1000 	ldrh.w	r1, [lr]
 800cccc:	0c12      	lsrs	r2, r2, #16
 800ccce:	fb09 1102 	mla	r1, r9, r2, r1
 800ccd2:	4567      	cmp	r7, ip
 800ccd4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ccd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ccdc:	d8e6      	bhi.n	800ccac <__multiply+0x108>
 800ccde:	9a01      	ldr	r2, [sp, #4]
 800cce0:	50a9      	str	r1, [r5, r2]
 800cce2:	3504      	adds	r5, #4
 800cce4:	e79b      	b.n	800cc1e <__multiply+0x7a>
 800cce6:	3e01      	subs	r6, #1
 800cce8:	e79d      	b.n	800cc26 <__multiply+0x82>
 800ccea:	bf00      	nop
 800ccec:	0800e8bf 	.word	0x0800e8bf
 800ccf0:	0800e8d0 	.word	0x0800e8d0

0800ccf4 <__pow5mult>:
 800ccf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccf8:	4615      	mov	r5, r2
 800ccfa:	f012 0203 	ands.w	r2, r2, #3
 800ccfe:	4606      	mov	r6, r0
 800cd00:	460f      	mov	r7, r1
 800cd02:	d007      	beq.n	800cd14 <__pow5mult+0x20>
 800cd04:	4c25      	ldr	r4, [pc, #148]	; (800cd9c <__pow5mult+0xa8>)
 800cd06:	3a01      	subs	r2, #1
 800cd08:	2300      	movs	r3, #0
 800cd0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd0e:	f7ff fe9f 	bl	800ca50 <__multadd>
 800cd12:	4607      	mov	r7, r0
 800cd14:	10ad      	asrs	r5, r5, #2
 800cd16:	d03d      	beq.n	800cd94 <__pow5mult+0xa0>
 800cd18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cd1a:	b97c      	cbnz	r4, 800cd3c <__pow5mult+0x48>
 800cd1c:	2010      	movs	r0, #16
 800cd1e:	f7fe f9ef 	bl	800b100 <malloc>
 800cd22:	4602      	mov	r2, r0
 800cd24:	6270      	str	r0, [r6, #36]	; 0x24
 800cd26:	b928      	cbnz	r0, 800cd34 <__pow5mult+0x40>
 800cd28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cd2c:	4b1c      	ldr	r3, [pc, #112]	; (800cda0 <__pow5mult+0xac>)
 800cd2e:	481d      	ldr	r0, [pc, #116]	; (800cda4 <__pow5mult+0xb0>)
 800cd30:	f000 fb1e 	bl	800d370 <__assert_func>
 800cd34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd38:	6004      	str	r4, [r0, #0]
 800cd3a:	60c4      	str	r4, [r0, #12]
 800cd3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cd40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd44:	b94c      	cbnz	r4, 800cd5a <__pow5mult+0x66>
 800cd46:	f240 2171 	movw	r1, #625	; 0x271
 800cd4a:	4630      	mov	r0, r6
 800cd4c:	f7ff ff14 	bl	800cb78 <__i2b>
 800cd50:	2300      	movs	r3, #0
 800cd52:	4604      	mov	r4, r0
 800cd54:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd58:	6003      	str	r3, [r0, #0]
 800cd5a:	f04f 0900 	mov.w	r9, #0
 800cd5e:	07eb      	lsls	r3, r5, #31
 800cd60:	d50a      	bpl.n	800cd78 <__pow5mult+0x84>
 800cd62:	4639      	mov	r1, r7
 800cd64:	4622      	mov	r2, r4
 800cd66:	4630      	mov	r0, r6
 800cd68:	f7ff ff1c 	bl	800cba4 <__multiply>
 800cd6c:	4680      	mov	r8, r0
 800cd6e:	4639      	mov	r1, r7
 800cd70:	4630      	mov	r0, r6
 800cd72:	f7ff fe4b 	bl	800ca0c <_Bfree>
 800cd76:	4647      	mov	r7, r8
 800cd78:	106d      	asrs	r5, r5, #1
 800cd7a:	d00b      	beq.n	800cd94 <__pow5mult+0xa0>
 800cd7c:	6820      	ldr	r0, [r4, #0]
 800cd7e:	b938      	cbnz	r0, 800cd90 <__pow5mult+0x9c>
 800cd80:	4622      	mov	r2, r4
 800cd82:	4621      	mov	r1, r4
 800cd84:	4630      	mov	r0, r6
 800cd86:	f7ff ff0d 	bl	800cba4 <__multiply>
 800cd8a:	6020      	str	r0, [r4, #0]
 800cd8c:	f8c0 9000 	str.w	r9, [r0]
 800cd90:	4604      	mov	r4, r0
 800cd92:	e7e4      	b.n	800cd5e <__pow5mult+0x6a>
 800cd94:	4638      	mov	r0, r7
 800cd96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd9a:	bf00      	nop
 800cd9c:	0800ea20 	.word	0x0800ea20
 800cda0:	0800e84d 	.word	0x0800e84d
 800cda4:	0800e8d0 	.word	0x0800e8d0

0800cda8 <__lshift>:
 800cda8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdac:	460c      	mov	r4, r1
 800cdae:	4607      	mov	r7, r0
 800cdb0:	4691      	mov	r9, r2
 800cdb2:	6923      	ldr	r3, [r4, #16]
 800cdb4:	6849      	ldr	r1, [r1, #4]
 800cdb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cdba:	68a3      	ldr	r3, [r4, #8]
 800cdbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cdc0:	f108 0601 	add.w	r6, r8, #1
 800cdc4:	42b3      	cmp	r3, r6
 800cdc6:	db0b      	blt.n	800cde0 <__lshift+0x38>
 800cdc8:	4638      	mov	r0, r7
 800cdca:	f7ff fddf 	bl	800c98c <_Balloc>
 800cdce:	4605      	mov	r5, r0
 800cdd0:	b948      	cbnz	r0, 800cde6 <__lshift+0x3e>
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cdd8:	4b29      	ldr	r3, [pc, #164]	; (800ce80 <__lshift+0xd8>)
 800cdda:	482a      	ldr	r0, [pc, #168]	; (800ce84 <__lshift+0xdc>)
 800cddc:	f000 fac8 	bl	800d370 <__assert_func>
 800cde0:	3101      	adds	r1, #1
 800cde2:	005b      	lsls	r3, r3, #1
 800cde4:	e7ee      	b.n	800cdc4 <__lshift+0x1c>
 800cde6:	2300      	movs	r3, #0
 800cde8:	f100 0114 	add.w	r1, r0, #20
 800cdec:	f100 0210 	add.w	r2, r0, #16
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	4553      	cmp	r3, sl
 800cdf4:	db37      	blt.n	800ce66 <__lshift+0xbe>
 800cdf6:	6920      	ldr	r0, [r4, #16]
 800cdf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cdfc:	f104 0314 	add.w	r3, r4, #20
 800ce00:	f019 091f 	ands.w	r9, r9, #31
 800ce04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ce0c:	d02f      	beq.n	800ce6e <__lshift+0xc6>
 800ce0e:	468a      	mov	sl, r1
 800ce10:	f04f 0c00 	mov.w	ip, #0
 800ce14:	f1c9 0e20 	rsb	lr, r9, #32
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	fa02 f209 	lsl.w	r2, r2, r9
 800ce1e:	ea42 020c 	orr.w	r2, r2, ip
 800ce22:	f84a 2b04 	str.w	r2, [sl], #4
 800ce26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce2a:	4298      	cmp	r0, r3
 800ce2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ce30:	d8f2      	bhi.n	800ce18 <__lshift+0x70>
 800ce32:	1b03      	subs	r3, r0, r4
 800ce34:	3b15      	subs	r3, #21
 800ce36:	f023 0303 	bic.w	r3, r3, #3
 800ce3a:	3304      	adds	r3, #4
 800ce3c:	f104 0215 	add.w	r2, r4, #21
 800ce40:	4290      	cmp	r0, r2
 800ce42:	bf38      	it	cc
 800ce44:	2304      	movcc	r3, #4
 800ce46:	f841 c003 	str.w	ip, [r1, r3]
 800ce4a:	f1bc 0f00 	cmp.w	ip, #0
 800ce4e:	d001      	beq.n	800ce54 <__lshift+0xac>
 800ce50:	f108 0602 	add.w	r6, r8, #2
 800ce54:	3e01      	subs	r6, #1
 800ce56:	4638      	mov	r0, r7
 800ce58:	4621      	mov	r1, r4
 800ce5a:	612e      	str	r6, [r5, #16]
 800ce5c:	f7ff fdd6 	bl	800ca0c <_Bfree>
 800ce60:	4628      	mov	r0, r5
 800ce62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce66:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	e7c1      	b.n	800cdf2 <__lshift+0x4a>
 800ce6e:	3904      	subs	r1, #4
 800ce70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce74:	4298      	cmp	r0, r3
 800ce76:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce7a:	d8f9      	bhi.n	800ce70 <__lshift+0xc8>
 800ce7c:	e7ea      	b.n	800ce54 <__lshift+0xac>
 800ce7e:	bf00      	nop
 800ce80:	0800e8bf 	.word	0x0800e8bf
 800ce84:	0800e8d0 	.word	0x0800e8d0

0800ce88 <__mcmp>:
 800ce88:	4603      	mov	r3, r0
 800ce8a:	690a      	ldr	r2, [r1, #16]
 800ce8c:	6900      	ldr	r0, [r0, #16]
 800ce8e:	b530      	push	{r4, r5, lr}
 800ce90:	1a80      	subs	r0, r0, r2
 800ce92:	d10d      	bne.n	800ceb0 <__mcmp+0x28>
 800ce94:	3314      	adds	r3, #20
 800ce96:	3114      	adds	r1, #20
 800ce98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ce9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cea0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cea4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cea8:	4295      	cmp	r5, r2
 800ceaa:	d002      	beq.n	800ceb2 <__mcmp+0x2a>
 800ceac:	d304      	bcc.n	800ceb8 <__mcmp+0x30>
 800ceae:	2001      	movs	r0, #1
 800ceb0:	bd30      	pop	{r4, r5, pc}
 800ceb2:	42a3      	cmp	r3, r4
 800ceb4:	d3f4      	bcc.n	800cea0 <__mcmp+0x18>
 800ceb6:	e7fb      	b.n	800ceb0 <__mcmp+0x28>
 800ceb8:	f04f 30ff 	mov.w	r0, #4294967295
 800cebc:	e7f8      	b.n	800ceb0 <__mcmp+0x28>
	...

0800cec0 <__mdiff>:
 800cec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec4:	460d      	mov	r5, r1
 800cec6:	4607      	mov	r7, r0
 800cec8:	4611      	mov	r1, r2
 800ceca:	4628      	mov	r0, r5
 800cecc:	4614      	mov	r4, r2
 800cece:	f7ff ffdb 	bl	800ce88 <__mcmp>
 800ced2:	1e06      	subs	r6, r0, #0
 800ced4:	d111      	bne.n	800cefa <__mdiff+0x3a>
 800ced6:	4631      	mov	r1, r6
 800ced8:	4638      	mov	r0, r7
 800ceda:	f7ff fd57 	bl	800c98c <_Balloc>
 800cede:	4602      	mov	r2, r0
 800cee0:	b928      	cbnz	r0, 800ceee <__mdiff+0x2e>
 800cee2:	f240 2132 	movw	r1, #562	; 0x232
 800cee6:	4b3a      	ldr	r3, [pc, #232]	; (800cfd0 <__mdiff+0x110>)
 800cee8:	483a      	ldr	r0, [pc, #232]	; (800cfd4 <__mdiff+0x114>)
 800ceea:	f000 fa41 	bl	800d370 <__assert_func>
 800ceee:	2301      	movs	r3, #1
 800cef0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cef4:	4610      	mov	r0, r2
 800cef6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cefa:	bfa4      	itt	ge
 800cefc:	4623      	movge	r3, r4
 800cefe:	462c      	movge	r4, r5
 800cf00:	4638      	mov	r0, r7
 800cf02:	6861      	ldr	r1, [r4, #4]
 800cf04:	bfa6      	itte	ge
 800cf06:	461d      	movge	r5, r3
 800cf08:	2600      	movge	r6, #0
 800cf0a:	2601      	movlt	r6, #1
 800cf0c:	f7ff fd3e 	bl	800c98c <_Balloc>
 800cf10:	4602      	mov	r2, r0
 800cf12:	b918      	cbnz	r0, 800cf1c <__mdiff+0x5c>
 800cf14:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cf18:	4b2d      	ldr	r3, [pc, #180]	; (800cfd0 <__mdiff+0x110>)
 800cf1a:	e7e5      	b.n	800cee8 <__mdiff+0x28>
 800cf1c:	f102 0814 	add.w	r8, r2, #20
 800cf20:	46c2      	mov	sl, r8
 800cf22:	f04f 0c00 	mov.w	ip, #0
 800cf26:	6927      	ldr	r7, [r4, #16]
 800cf28:	60c6      	str	r6, [r0, #12]
 800cf2a:	692e      	ldr	r6, [r5, #16]
 800cf2c:	f104 0014 	add.w	r0, r4, #20
 800cf30:	f105 0914 	add.w	r9, r5, #20
 800cf34:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800cf38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cf3c:	3410      	adds	r4, #16
 800cf3e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800cf42:	f859 3b04 	ldr.w	r3, [r9], #4
 800cf46:	fa1f f18b 	uxth.w	r1, fp
 800cf4a:	448c      	add	ip, r1
 800cf4c:	b299      	uxth	r1, r3
 800cf4e:	0c1b      	lsrs	r3, r3, #16
 800cf50:	ebac 0101 	sub.w	r1, ip, r1
 800cf54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cf58:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cf5c:	b289      	uxth	r1, r1
 800cf5e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800cf62:	454e      	cmp	r6, r9
 800cf64:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cf68:	f84a 3b04 	str.w	r3, [sl], #4
 800cf6c:	d8e7      	bhi.n	800cf3e <__mdiff+0x7e>
 800cf6e:	1b73      	subs	r3, r6, r5
 800cf70:	3b15      	subs	r3, #21
 800cf72:	f023 0303 	bic.w	r3, r3, #3
 800cf76:	3515      	adds	r5, #21
 800cf78:	3304      	adds	r3, #4
 800cf7a:	42ae      	cmp	r6, r5
 800cf7c:	bf38      	it	cc
 800cf7e:	2304      	movcc	r3, #4
 800cf80:	4418      	add	r0, r3
 800cf82:	4443      	add	r3, r8
 800cf84:	461e      	mov	r6, r3
 800cf86:	4605      	mov	r5, r0
 800cf88:	4575      	cmp	r5, lr
 800cf8a:	d30e      	bcc.n	800cfaa <__mdiff+0xea>
 800cf8c:	f10e 0103 	add.w	r1, lr, #3
 800cf90:	1a09      	subs	r1, r1, r0
 800cf92:	f021 0103 	bic.w	r1, r1, #3
 800cf96:	3803      	subs	r0, #3
 800cf98:	4586      	cmp	lr, r0
 800cf9a:	bf38      	it	cc
 800cf9c:	2100      	movcc	r1, #0
 800cf9e:	4419      	add	r1, r3
 800cfa0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800cfa4:	b18b      	cbz	r3, 800cfca <__mdiff+0x10a>
 800cfa6:	6117      	str	r7, [r2, #16]
 800cfa8:	e7a4      	b.n	800cef4 <__mdiff+0x34>
 800cfaa:	f855 8b04 	ldr.w	r8, [r5], #4
 800cfae:	fa1f f188 	uxth.w	r1, r8
 800cfb2:	4461      	add	r1, ip
 800cfb4:	140c      	asrs	r4, r1, #16
 800cfb6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cfba:	b289      	uxth	r1, r1
 800cfbc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cfc0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800cfc4:	f846 1b04 	str.w	r1, [r6], #4
 800cfc8:	e7de      	b.n	800cf88 <__mdiff+0xc8>
 800cfca:	3f01      	subs	r7, #1
 800cfcc:	e7e8      	b.n	800cfa0 <__mdiff+0xe0>
 800cfce:	bf00      	nop
 800cfd0:	0800e8bf 	.word	0x0800e8bf
 800cfd4:	0800e8d0 	.word	0x0800e8d0

0800cfd8 <__d2b>:
 800cfd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cfdc:	2101      	movs	r1, #1
 800cfde:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800cfe2:	4690      	mov	r8, r2
 800cfe4:	461d      	mov	r5, r3
 800cfe6:	f7ff fcd1 	bl	800c98c <_Balloc>
 800cfea:	4604      	mov	r4, r0
 800cfec:	b930      	cbnz	r0, 800cffc <__d2b+0x24>
 800cfee:	4602      	mov	r2, r0
 800cff0:	f240 310a 	movw	r1, #778	; 0x30a
 800cff4:	4b24      	ldr	r3, [pc, #144]	; (800d088 <__d2b+0xb0>)
 800cff6:	4825      	ldr	r0, [pc, #148]	; (800d08c <__d2b+0xb4>)
 800cff8:	f000 f9ba 	bl	800d370 <__assert_func>
 800cffc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d000:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d004:	bb2d      	cbnz	r5, 800d052 <__d2b+0x7a>
 800d006:	9301      	str	r3, [sp, #4]
 800d008:	f1b8 0300 	subs.w	r3, r8, #0
 800d00c:	d026      	beq.n	800d05c <__d2b+0x84>
 800d00e:	4668      	mov	r0, sp
 800d010:	9300      	str	r3, [sp, #0]
 800d012:	f7ff fd83 	bl	800cb1c <__lo0bits>
 800d016:	9900      	ldr	r1, [sp, #0]
 800d018:	b1f0      	cbz	r0, 800d058 <__d2b+0x80>
 800d01a:	9a01      	ldr	r2, [sp, #4]
 800d01c:	f1c0 0320 	rsb	r3, r0, #32
 800d020:	fa02 f303 	lsl.w	r3, r2, r3
 800d024:	430b      	orrs	r3, r1
 800d026:	40c2      	lsrs	r2, r0
 800d028:	6163      	str	r3, [r4, #20]
 800d02a:	9201      	str	r2, [sp, #4]
 800d02c:	9b01      	ldr	r3, [sp, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	bf14      	ite	ne
 800d032:	2102      	movne	r1, #2
 800d034:	2101      	moveq	r1, #1
 800d036:	61a3      	str	r3, [r4, #24]
 800d038:	6121      	str	r1, [r4, #16]
 800d03a:	b1c5      	cbz	r5, 800d06e <__d2b+0x96>
 800d03c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d040:	4405      	add	r5, r0
 800d042:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d046:	603d      	str	r5, [r7, #0]
 800d048:	6030      	str	r0, [r6, #0]
 800d04a:	4620      	mov	r0, r4
 800d04c:	b002      	add	sp, #8
 800d04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d052:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d056:	e7d6      	b.n	800d006 <__d2b+0x2e>
 800d058:	6161      	str	r1, [r4, #20]
 800d05a:	e7e7      	b.n	800d02c <__d2b+0x54>
 800d05c:	a801      	add	r0, sp, #4
 800d05e:	f7ff fd5d 	bl	800cb1c <__lo0bits>
 800d062:	2101      	movs	r1, #1
 800d064:	9b01      	ldr	r3, [sp, #4]
 800d066:	6121      	str	r1, [r4, #16]
 800d068:	6163      	str	r3, [r4, #20]
 800d06a:	3020      	adds	r0, #32
 800d06c:	e7e5      	b.n	800d03a <__d2b+0x62>
 800d06e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d072:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d076:	6038      	str	r0, [r7, #0]
 800d078:	6918      	ldr	r0, [r3, #16]
 800d07a:	f7ff fd2f 	bl	800cadc <__hi0bits>
 800d07e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d082:	6031      	str	r1, [r6, #0]
 800d084:	e7e1      	b.n	800d04a <__d2b+0x72>
 800d086:	bf00      	nop
 800d088:	0800e8bf 	.word	0x0800e8bf
 800d08c:	0800e8d0 	.word	0x0800e8d0

0800d090 <_calloc_r>:
 800d090:	b570      	push	{r4, r5, r6, lr}
 800d092:	fba1 5402 	umull	r5, r4, r1, r2
 800d096:	b934      	cbnz	r4, 800d0a6 <_calloc_r+0x16>
 800d098:	4629      	mov	r1, r5
 800d09a:	f7fe f8b1 	bl	800b200 <_malloc_r>
 800d09e:	4606      	mov	r6, r0
 800d0a0:	b928      	cbnz	r0, 800d0ae <_calloc_r+0x1e>
 800d0a2:	4630      	mov	r0, r6
 800d0a4:	bd70      	pop	{r4, r5, r6, pc}
 800d0a6:	220c      	movs	r2, #12
 800d0a8:	2600      	movs	r6, #0
 800d0aa:	6002      	str	r2, [r0, #0]
 800d0ac:	e7f9      	b.n	800d0a2 <_calloc_r+0x12>
 800d0ae:	462a      	mov	r2, r5
 800d0b0:	4621      	mov	r1, r4
 800d0b2:	f7fe f835 	bl	800b120 <memset>
 800d0b6:	e7f4      	b.n	800d0a2 <_calloc_r+0x12>

0800d0b8 <__ssputs_r>:
 800d0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0bc:	688e      	ldr	r6, [r1, #8]
 800d0be:	4682      	mov	sl, r0
 800d0c0:	429e      	cmp	r6, r3
 800d0c2:	460c      	mov	r4, r1
 800d0c4:	4690      	mov	r8, r2
 800d0c6:	461f      	mov	r7, r3
 800d0c8:	d838      	bhi.n	800d13c <__ssputs_r+0x84>
 800d0ca:	898a      	ldrh	r2, [r1, #12]
 800d0cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d0d0:	d032      	beq.n	800d138 <__ssputs_r+0x80>
 800d0d2:	6825      	ldr	r5, [r4, #0]
 800d0d4:	6909      	ldr	r1, [r1, #16]
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	eba5 0901 	sub.w	r9, r5, r1
 800d0dc:	6965      	ldr	r5, [r4, #20]
 800d0de:	444b      	add	r3, r9
 800d0e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d0e8:	106d      	asrs	r5, r5, #1
 800d0ea:	429d      	cmp	r5, r3
 800d0ec:	bf38      	it	cc
 800d0ee:	461d      	movcc	r5, r3
 800d0f0:	0553      	lsls	r3, r2, #21
 800d0f2:	d531      	bpl.n	800d158 <__ssputs_r+0xa0>
 800d0f4:	4629      	mov	r1, r5
 800d0f6:	f7fe f883 	bl	800b200 <_malloc_r>
 800d0fa:	4606      	mov	r6, r0
 800d0fc:	b950      	cbnz	r0, 800d114 <__ssputs_r+0x5c>
 800d0fe:	230c      	movs	r3, #12
 800d100:	f04f 30ff 	mov.w	r0, #4294967295
 800d104:	f8ca 3000 	str.w	r3, [sl]
 800d108:	89a3      	ldrh	r3, [r4, #12]
 800d10a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d10e:	81a3      	strh	r3, [r4, #12]
 800d110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d114:	464a      	mov	r2, r9
 800d116:	6921      	ldr	r1, [r4, #16]
 800d118:	f7ff fc1e 	bl	800c958 <memcpy>
 800d11c:	89a3      	ldrh	r3, [r4, #12]
 800d11e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d126:	81a3      	strh	r3, [r4, #12]
 800d128:	6126      	str	r6, [r4, #16]
 800d12a:	444e      	add	r6, r9
 800d12c:	6026      	str	r6, [r4, #0]
 800d12e:	463e      	mov	r6, r7
 800d130:	6165      	str	r5, [r4, #20]
 800d132:	eba5 0509 	sub.w	r5, r5, r9
 800d136:	60a5      	str	r5, [r4, #8]
 800d138:	42be      	cmp	r6, r7
 800d13a:	d900      	bls.n	800d13e <__ssputs_r+0x86>
 800d13c:	463e      	mov	r6, r7
 800d13e:	4632      	mov	r2, r6
 800d140:	4641      	mov	r1, r8
 800d142:	6820      	ldr	r0, [r4, #0]
 800d144:	f000 f959 	bl	800d3fa <memmove>
 800d148:	68a3      	ldr	r3, [r4, #8]
 800d14a:	2000      	movs	r0, #0
 800d14c:	1b9b      	subs	r3, r3, r6
 800d14e:	60a3      	str	r3, [r4, #8]
 800d150:	6823      	ldr	r3, [r4, #0]
 800d152:	4433      	add	r3, r6
 800d154:	6023      	str	r3, [r4, #0]
 800d156:	e7db      	b.n	800d110 <__ssputs_r+0x58>
 800d158:	462a      	mov	r2, r5
 800d15a:	f000 f968 	bl	800d42e <_realloc_r>
 800d15e:	4606      	mov	r6, r0
 800d160:	2800      	cmp	r0, #0
 800d162:	d1e1      	bne.n	800d128 <__ssputs_r+0x70>
 800d164:	4650      	mov	r0, sl
 800d166:	6921      	ldr	r1, [r4, #16]
 800d168:	f7fd ffe2 	bl	800b130 <_free_r>
 800d16c:	e7c7      	b.n	800d0fe <__ssputs_r+0x46>
	...

0800d170 <_svfiprintf_r>:
 800d170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d174:	4698      	mov	r8, r3
 800d176:	898b      	ldrh	r3, [r1, #12]
 800d178:	4607      	mov	r7, r0
 800d17a:	061b      	lsls	r3, r3, #24
 800d17c:	460d      	mov	r5, r1
 800d17e:	4614      	mov	r4, r2
 800d180:	b09d      	sub	sp, #116	; 0x74
 800d182:	d50e      	bpl.n	800d1a2 <_svfiprintf_r+0x32>
 800d184:	690b      	ldr	r3, [r1, #16]
 800d186:	b963      	cbnz	r3, 800d1a2 <_svfiprintf_r+0x32>
 800d188:	2140      	movs	r1, #64	; 0x40
 800d18a:	f7fe f839 	bl	800b200 <_malloc_r>
 800d18e:	6028      	str	r0, [r5, #0]
 800d190:	6128      	str	r0, [r5, #16]
 800d192:	b920      	cbnz	r0, 800d19e <_svfiprintf_r+0x2e>
 800d194:	230c      	movs	r3, #12
 800d196:	603b      	str	r3, [r7, #0]
 800d198:	f04f 30ff 	mov.w	r0, #4294967295
 800d19c:	e0d1      	b.n	800d342 <_svfiprintf_r+0x1d2>
 800d19e:	2340      	movs	r3, #64	; 0x40
 800d1a0:	616b      	str	r3, [r5, #20]
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d1a6:	2320      	movs	r3, #32
 800d1a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1ac:	2330      	movs	r3, #48	; 0x30
 800d1ae:	f04f 0901 	mov.w	r9, #1
 800d1b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d35c <_svfiprintf_r+0x1ec>
 800d1ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1be:	4623      	mov	r3, r4
 800d1c0:	469a      	mov	sl, r3
 800d1c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1c6:	b10a      	cbz	r2, 800d1cc <_svfiprintf_r+0x5c>
 800d1c8:	2a25      	cmp	r2, #37	; 0x25
 800d1ca:	d1f9      	bne.n	800d1c0 <_svfiprintf_r+0x50>
 800d1cc:	ebba 0b04 	subs.w	fp, sl, r4
 800d1d0:	d00b      	beq.n	800d1ea <_svfiprintf_r+0x7a>
 800d1d2:	465b      	mov	r3, fp
 800d1d4:	4622      	mov	r2, r4
 800d1d6:	4629      	mov	r1, r5
 800d1d8:	4638      	mov	r0, r7
 800d1da:	f7ff ff6d 	bl	800d0b8 <__ssputs_r>
 800d1de:	3001      	adds	r0, #1
 800d1e0:	f000 80aa 	beq.w	800d338 <_svfiprintf_r+0x1c8>
 800d1e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1e6:	445a      	add	r2, fp
 800d1e8:	9209      	str	r2, [sp, #36]	; 0x24
 800d1ea:	f89a 3000 	ldrb.w	r3, [sl]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	f000 80a2 	beq.w	800d338 <_svfiprintf_r+0x1c8>
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	f04f 32ff 	mov.w	r2, #4294967295
 800d1fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1fe:	f10a 0a01 	add.w	sl, sl, #1
 800d202:	9304      	str	r3, [sp, #16]
 800d204:	9307      	str	r3, [sp, #28]
 800d206:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d20a:	931a      	str	r3, [sp, #104]	; 0x68
 800d20c:	4654      	mov	r4, sl
 800d20e:	2205      	movs	r2, #5
 800d210:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d214:	4851      	ldr	r0, [pc, #324]	; (800d35c <_svfiprintf_r+0x1ec>)
 800d216:	f7ff fb91 	bl	800c93c <memchr>
 800d21a:	9a04      	ldr	r2, [sp, #16]
 800d21c:	b9d8      	cbnz	r0, 800d256 <_svfiprintf_r+0xe6>
 800d21e:	06d0      	lsls	r0, r2, #27
 800d220:	bf44      	itt	mi
 800d222:	2320      	movmi	r3, #32
 800d224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d228:	0711      	lsls	r1, r2, #28
 800d22a:	bf44      	itt	mi
 800d22c:	232b      	movmi	r3, #43	; 0x2b
 800d22e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d232:	f89a 3000 	ldrb.w	r3, [sl]
 800d236:	2b2a      	cmp	r3, #42	; 0x2a
 800d238:	d015      	beq.n	800d266 <_svfiprintf_r+0xf6>
 800d23a:	4654      	mov	r4, sl
 800d23c:	2000      	movs	r0, #0
 800d23e:	f04f 0c0a 	mov.w	ip, #10
 800d242:	9a07      	ldr	r2, [sp, #28]
 800d244:	4621      	mov	r1, r4
 800d246:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d24a:	3b30      	subs	r3, #48	; 0x30
 800d24c:	2b09      	cmp	r3, #9
 800d24e:	d94e      	bls.n	800d2ee <_svfiprintf_r+0x17e>
 800d250:	b1b0      	cbz	r0, 800d280 <_svfiprintf_r+0x110>
 800d252:	9207      	str	r2, [sp, #28]
 800d254:	e014      	b.n	800d280 <_svfiprintf_r+0x110>
 800d256:	eba0 0308 	sub.w	r3, r0, r8
 800d25a:	fa09 f303 	lsl.w	r3, r9, r3
 800d25e:	4313      	orrs	r3, r2
 800d260:	46a2      	mov	sl, r4
 800d262:	9304      	str	r3, [sp, #16]
 800d264:	e7d2      	b.n	800d20c <_svfiprintf_r+0x9c>
 800d266:	9b03      	ldr	r3, [sp, #12]
 800d268:	1d19      	adds	r1, r3, #4
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	9103      	str	r1, [sp, #12]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	bfbb      	ittet	lt
 800d272:	425b      	neglt	r3, r3
 800d274:	f042 0202 	orrlt.w	r2, r2, #2
 800d278:	9307      	strge	r3, [sp, #28]
 800d27a:	9307      	strlt	r3, [sp, #28]
 800d27c:	bfb8      	it	lt
 800d27e:	9204      	strlt	r2, [sp, #16]
 800d280:	7823      	ldrb	r3, [r4, #0]
 800d282:	2b2e      	cmp	r3, #46	; 0x2e
 800d284:	d10c      	bne.n	800d2a0 <_svfiprintf_r+0x130>
 800d286:	7863      	ldrb	r3, [r4, #1]
 800d288:	2b2a      	cmp	r3, #42	; 0x2a
 800d28a:	d135      	bne.n	800d2f8 <_svfiprintf_r+0x188>
 800d28c:	9b03      	ldr	r3, [sp, #12]
 800d28e:	3402      	adds	r4, #2
 800d290:	1d1a      	adds	r2, r3, #4
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	9203      	str	r2, [sp, #12]
 800d296:	2b00      	cmp	r3, #0
 800d298:	bfb8      	it	lt
 800d29a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d29e:	9305      	str	r3, [sp, #20]
 800d2a0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d360 <_svfiprintf_r+0x1f0>
 800d2a4:	2203      	movs	r2, #3
 800d2a6:	4650      	mov	r0, sl
 800d2a8:	7821      	ldrb	r1, [r4, #0]
 800d2aa:	f7ff fb47 	bl	800c93c <memchr>
 800d2ae:	b140      	cbz	r0, 800d2c2 <_svfiprintf_r+0x152>
 800d2b0:	2340      	movs	r3, #64	; 0x40
 800d2b2:	eba0 000a 	sub.w	r0, r0, sl
 800d2b6:	fa03 f000 	lsl.w	r0, r3, r0
 800d2ba:	9b04      	ldr	r3, [sp, #16]
 800d2bc:	3401      	adds	r4, #1
 800d2be:	4303      	orrs	r3, r0
 800d2c0:	9304      	str	r3, [sp, #16]
 800d2c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2c6:	2206      	movs	r2, #6
 800d2c8:	4826      	ldr	r0, [pc, #152]	; (800d364 <_svfiprintf_r+0x1f4>)
 800d2ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2ce:	f7ff fb35 	bl	800c93c <memchr>
 800d2d2:	2800      	cmp	r0, #0
 800d2d4:	d038      	beq.n	800d348 <_svfiprintf_r+0x1d8>
 800d2d6:	4b24      	ldr	r3, [pc, #144]	; (800d368 <_svfiprintf_r+0x1f8>)
 800d2d8:	bb1b      	cbnz	r3, 800d322 <_svfiprintf_r+0x1b2>
 800d2da:	9b03      	ldr	r3, [sp, #12]
 800d2dc:	3307      	adds	r3, #7
 800d2de:	f023 0307 	bic.w	r3, r3, #7
 800d2e2:	3308      	adds	r3, #8
 800d2e4:	9303      	str	r3, [sp, #12]
 800d2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2e8:	4433      	add	r3, r6
 800d2ea:	9309      	str	r3, [sp, #36]	; 0x24
 800d2ec:	e767      	b.n	800d1be <_svfiprintf_r+0x4e>
 800d2ee:	460c      	mov	r4, r1
 800d2f0:	2001      	movs	r0, #1
 800d2f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2f6:	e7a5      	b.n	800d244 <_svfiprintf_r+0xd4>
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	f04f 0c0a 	mov.w	ip, #10
 800d2fe:	4619      	mov	r1, r3
 800d300:	3401      	adds	r4, #1
 800d302:	9305      	str	r3, [sp, #20]
 800d304:	4620      	mov	r0, r4
 800d306:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d30a:	3a30      	subs	r2, #48	; 0x30
 800d30c:	2a09      	cmp	r2, #9
 800d30e:	d903      	bls.n	800d318 <_svfiprintf_r+0x1a8>
 800d310:	2b00      	cmp	r3, #0
 800d312:	d0c5      	beq.n	800d2a0 <_svfiprintf_r+0x130>
 800d314:	9105      	str	r1, [sp, #20]
 800d316:	e7c3      	b.n	800d2a0 <_svfiprintf_r+0x130>
 800d318:	4604      	mov	r4, r0
 800d31a:	2301      	movs	r3, #1
 800d31c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d320:	e7f0      	b.n	800d304 <_svfiprintf_r+0x194>
 800d322:	ab03      	add	r3, sp, #12
 800d324:	9300      	str	r3, [sp, #0]
 800d326:	462a      	mov	r2, r5
 800d328:	4638      	mov	r0, r7
 800d32a:	4b10      	ldr	r3, [pc, #64]	; (800d36c <_svfiprintf_r+0x1fc>)
 800d32c:	a904      	add	r1, sp, #16
 800d32e:	f7fe f879 	bl	800b424 <_printf_float>
 800d332:	1c42      	adds	r2, r0, #1
 800d334:	4606      	mov	r6, r0
 800d336:	d1d6      	bne.n	800d2e6 <_svfiprintf_r+0x176>
 800d338:	89ab      	ldrh	r3, [r5, #12]
 800d33a:	065b      	lsls	r3, r3, #25
 800d33c:	f53f af2c 	bmi.w	800d198 <_svfiprintf_r+0x28>
 800d340:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d342:	b01d      	add	sp, #116	; 0x74
 800d344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d348:	ab03      	add	r3, sp, #12
 800d34a:	9300      	str	r3, [sp, #0]
 800d34c:	462a      	mov	r2, r5
 800d34e:	4638      	mov	r0, r7
 800d350:	4b06      	ldr	r3, [pc, #24]	; (800d36c <_svfiprintf_r+0x1fc>)
 800d352:	a904      	add	r1, sp, #16
 800d354:	f7fe fb02 	bl	800b95c <_printf_i>
 800d358:	e7eb      	b.n	800d332 <_svfiprintf_r+0x1c2>
 800d35a:	bf00      	nop
 800d35c:	0800ea2c 	.word	0x0800ea2c
 800d360:	0800ea32 	.word	0x0800ea32
 800d364:	0800ea36 	.word	0x0800ea36
 800d368:	0800b425 	.word	0x0800b425
 800d36c:	0800d0b9 	.word	0x0800d0b9

0800d370 <__assert_func>:
 800d370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d372:	4614      	mov	r4, r2
 800d374:	461a      	mov	r2, r3
 800d376:	4b09      	ldr	r3, [pc, #36]	; (800d39c <__assert_func+0x2c>)
 800d378:	4605      	mov	r5, r0
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	68d8      	ldr	r0, [r3, #12]
 800d37e:	b14c      	cbz	r4, 800d394 <__assert_func+0x24>
 800d380:	4b07      	ldr	r3, [pc, #28]	; (800d3a0 <__assert_func+0x30>)
 800d382:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d386:	9100      	str	r1, [sp, #0]
 800d388:	462b      	mov	r3, r5
 800d38a:	4906      	ldr	r1, [pc, #24]	; (800d3a4 <__assert_func+0x34>)
 800d38c:	f000 f80e 	bl	800d3ac <fiprintf>
 800d390:	f000 faa2 	bl	800d8d8 <abort>
 800d394:	4b04      	ldr	r3, [pc, #16]	; (800d3a8 <__assert_func+0x38>)
 800d396:	461c      	mov	r4, r3
 800d398:	e7f3      	b.n	800d382 <__assert_func+0x12>
 800d39a:	bf00      	nop
 800d39c:	20000140 	.word	0x20000140
 800d3a0:	0800ea3d 	.word	0x0800ea3d
 800d3a4:	0800ea4a 	.word	0x0800ea4a
 800d3a8:	0800ea78 	.word	0x0800ea78

0800d3ac <fiprintf>:
 800d3ac:	b40e      	push	{r1, r2, r3}
 800d3ae:	b503      	push	{r0, r1, lr}
 800d3b0:	4601      	mov	r1, r0
 800d3b2:	ab03      	add	r3, sp, #12
 800d3b4:	4805      	ldr	r0, [pc, #20]	; (800d3cc <fiprintf+0x20>)
 800d3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ba:	6800      	ldr	r0, [r0, #0]
 800d3bc:	9301      	str	r3, [sp, #4]
 800d3be:	f000 f88d 	bl	800d4dc <_vfiprintf_r>
 800d3c2:	b002      	add	sp, #8
 800d3c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3c8:	b003      	add	sp, #12
 800d3ca:	4770      	bx	lr
 800d3cc:	20000140 	.word	0x20000140

0800d3d0 <__retarget_lock_init_recursive>:
 800d3d0:	4770      	bx	lr

0800d3d2 <__retarget_lock_acquire_recursive>:
 800d3d2:	4770      	bx	lr

0800d3d4 <__retarget_lock_release_recursive>:
 800d3d4:	4770      	bx	lr

0800d3d6 <__ascii_mbtowc>:
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	b901      	cbnz	r1, 800d3dc <__ascii_mbtowc+0x6>
 800d3da:	a901      	add	r1, sp, #4
 800d3dc:	b142      	cbz	r2, 800d3f0 <__ascii_mbtowc+0x1a>
 800d3de:	b14b      	cbz	r3, 800d3f4 <__ascii_mbtowc+0x1e>
 800d3e0:	7813      	ldrb	r3, [r2, #0]
 800d3e2:	600b      	str	r3, [r1, #0]
 800d3e4:	7812      	ldrb	r2, [r2, #0]
 800d3e6:	1e10      	subs	r0, r2, #0
 800d3e8:	bf18      	it	ne
 800d3ea:	2001      	movne	r0, #1
 800d3ec:	b002      	add	sp, #8
 800d3ee:	4770      	bx	lr
 800d3f0:	4610      	mov	r0, r2
 800d3f2:	e7fb      	b.n	800d3ec <__ascii_mbtowc+0x16>
 800d3f4:	f06f 0001 	mvn.w	r0, #1
 800d3f8:	e7f8      	b.n	800d3ec <__ascii_mbtowc+0x16>

0800d3fa <memmove>:
 800d3fa:	4288      	cmp	r0, r1
 800d3fc:	b510      	push	{r4, lr}
 800d3fe:	eb01 0402 	add.w	r4, r1, r2
 800d402:	d902      	bls.n	800d40a <memmove+0x10>
 800d404:	4284      	cmp	r4, r0
 800d406:	4623      	mov	r3, r4
 800d408:	d807      	bhi.n	800d41a <memmove+0x20>
 800d40a:	1e43      	subs	r3, r0, #1
 800d40c:	42a1      	cmp	r1, r4
 800d40e:	d008      	beq.n	800d422 <memmove+0x28>
 800d410:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d414:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d418:	e7f8      	b.n	800d40c <memmove+0x12>
 800d41a:	4601      	mov	r1, r0
 800d41c:	4402      	add	r2, r0
 800d41e:	428a      	cmp	r2, r1
 800d420:	d100      	bne.n	800d424 <memmove+0x2a>
 800d422:	bd10      	pop	{r4, pc}
 800d424:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d428:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d42c:	e7f7      	b.n	800d41e <memmove+0x24>

0800d42e <_realloc_r>:
 800d42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d432:	4680      	mov	r8, r0
 800d434:	4614      	mov	r4, r2
 800d436:	460e      	mov	r6, r1
 800d438:	b921      	cbnz	r1, 800d444 <_realloc_r+0x16>
 800d43a:	4611      	mov	r1, r2
 800d43c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d440:	f7fd bede 	b.w	800b200 <_malloc_r>
 800d444:	b92a      	cbnz	r2, 800d452 <_realloc_r+0x24>
 800d446:	f7fd fe73 	bl	800b130 <_free_r>
 800d44a:	4625      	mov	r5, r4
 800d44c:	4628      	mov	r0, r5
 800d44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d452:	f000 fc61 	bl	800dd18 <_malloc_usable_size_r>
 800d456:	4284      	cmp	r4, r0
 800d458:	4607      	mov	r7, r0
 800d45a:	d802      	bhi.n	800d462 <_realloc_r+0x34>
 800d45c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d460:	d812      	bhi.n	800d488 <_realloc_r+0x5a>
 800d462:	4621      	mov	r1, r4
 800d464:	4640      	mov	r0, r8
 800d466:	f7fd fecb 	bl	800b200 <_malloc_r>
 800d46a:	4605      	mov	r5, r0
 800d46c:	2800      	cmp	r0, #0
 800d46e:	d0ed      	beq.n	800d44c <_realloc_r+0x1e>
 800d470:	42bc      	cmp	r4, r7
 800d472:	4622      	mov	r2, r4
 800d474:	4631      	mov	r1, r6
 800d476:	bf28      	it	cs
 800d478:	463a      	movcs	r2, r7
 800d47a:	f7ff fa6d 	bl	800c958 <memcpy>
 800d47e:	4631      	mov	r1, r6
 800d480:	4640      	mov	r0, r8
 800d482:	f7fd fe55 	bl	800b130 <_free_r>
 800d486:	e7e1      	b.n	800d44c <_realloc_r+0x1e>
 800d488:	4635      	mov	r5, r6
 800d48a:	e7df      	b.n	800d44c <_realloc_r+0x1e>

0800d48c <__sfputc_r>:
 800d48c:	6893      	ldr	r3, [r2, #8]
 800d48e:	b410      	push	{r4}
 800d490:	3b01      	subs	r3, #1
 800d492:	2b00      	cmp	r3, #0
 800d494:	6093      	str	r3, [r2, #8]
 800d496:	da07      	bge.n	800d4a8 <__sfputc_r+0x1c>
 800d498:	6994      	ldr	r4, [r2, #24]
 800d49a:	42a3      	cmp	r3, r4
 800d49c:	db01      	blt.n	800d4a2 <__sfputc_r+0x16>
 800d49e:	290a      	cmp	r1, #10
 800d4a0:	d102      	bne.n	800d4a8 <__sfputc_r+0x1c>
 800d4a2:	bc10      	pop	{r4}
 800d4a4:	f000 b94a 	b.w	800d73c <__swbuf_r>
 800d4a8:	6813      	ldr	r3, [r2, #0]
 800d4aa:	1c58      	adds	r0, r3, #1
 800d4ac:	6010      	str	r0, [r2, #0]
 800d4ae:	7019      	strb	r1, [r3, #0]
 800d4b0:	4608      	mov	r0, r1
 800d4b2:	bc10      	pop	{r4}
 800d4b4:	4770      	bx	lr

0800d4b6 <__sfputs_r>:
 800d4b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4b8:	4606      	mov	r6, r0
 800d4ba:	460f      	mov	r7, r1
 800d4bc:	4614      	mov	r4, r2
 800d4be:	18d5      	adds	r5, r2, r3
 800d4c0:	42ac      	cmp	r4, r5
 800d4c2:	d101      	bne.n	800d4c8 <__sfputs_r+0x12>
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	e007      	b.n	800d4d8 <__sfputs_r+0x22>
 800d4c8:	463a      	mov	r2, r7
 800d4ca:	4630      	mov	r0, r6
 800d4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4d0:	f7ff ffdc 	bl	800d48c <__sfputc_r>
 800d4d4:	1c43      	adds	r3, r0, #1
 800d4d6:	d1f3      	bne.n	800d4c0 <__sfputs_r+0xa>
 800d4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d4dc <_vfiprintf_r>:
 800d4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4e0:	460d      	mov	r5, r1
 800d4e2:	4614      	mov	r4, r2
 800d4e4:	4698      	mov	r8, r3
 800d4e6:	4606      	mov	r6, r0
 800d4e8:	b09d      	sub	sp, #116	; 0x74
 800d4ea:	b118      	cbz	r0, 800d4f4 <_vfiprintf_r+0x18>
 800d4ec:	6983      	ldr	r3, [r0, #24]
 800d4ee:	b90b      	cbnz	r3, 800d4f4 <_vfiprintf_r+0x18>
 800d4f0:	f000 fb10 	bl	800db14 <__sinit>
 800d4f4:	4b89      	ldr	r3, [pc, #548]	; (800d71c <_vfiprintf_r+0x240>)
 800d4f6:	429d      	cmp	r5, r3
 800d4f8:	d11b      	bne.n	800d532 <_vfiprintf_r+0x56>
 800d4fa:	6875      	ldr	r5, [r6, #4]
 800d4fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4fe:	07d9      	lsls	r1, r3, #31
 800d500:	d405      	bmi.n	800d50e <_vfiprintf_r+0x32>
 800d502:	89ab      	ldrh	r3, [r5, #12]
 800d504:	059a      	lsls	r2, r3, #22
 800d506:	d402      	bmi.n	800d50e <_vfiprintf_r+0x32>
 800d508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d50a:	f7ff ff62 	bl	800d3d2 <__retarget_lock_acquire_recursive>
 800d50e:	89ab      	ldrh	r3, [r5, #12]
 800d510:	071b      	lsls	r3, r3, #28
 800d512:	d501      	bpl.n	800d518 <_vfiprintf_r+0x3c>
 800d514:	692b      	ldr	r3, [r5, #16]
 800d516:	b9eb      	cbnz	r3, 800d554 <_vfiprintf_r+0x78>
 800d518:	4629      	mov	r1, r5
 800d51a:	4630      	mov	r0, r6
 800d51c:	f000 f96e 	bl	800d7fc <__swsetup_r>
 800d520:	b1c0      	cbz	r0, 800d554 <_vfiprintf_r+0x78>
 800d522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d524:	07dc      	lsls	r4, r3, #31
 800d526:	d50e      	bpl.n	800d546 <_vfiprintf_r+0x6a>
 800d528:	f04f 30ff 	mov.w	r0, #4294967295
 800d52c:	b01d      	add	sp, #116	; 0x74
 800d52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d532:	4b7b      	ldr	r3, [pc, #492]	; (800d720 <_vfiprintf_r+0x244>)
 800d534:	429d      	cmp	r5, r3
 800d536:	d101      	bne.n	800d53c <_vfiprintf_r+0x60>
 800d538:	68b5      	ldr	r5, [r6, #8]
 800d53a:	e7df      	b.n	800d4fc <_vfiprintf_r+0x20>
 800d53c:	4b79      	ldr	r3, [pc, #484]	; (800d724 <_vfiprintf_r+0x248>)
 800d53e:	429d      	cmp	r5, r3
 800d540:	bf08      	it	eq
 800d542:	68f5      	ldreq	r5, [r6, #12]
 800d544:	e7da      	b.n	800d4fc <_vfiprintf_r+0x20>
 800d546:	89ab      	ldrh	r3, [r5, #12]
 800d548:	0598      	lsls	r0, r3, #22
 800d54a:	d4ed      	bmi.n	800d528 <_vfiprintf_r+0x4c>
 800d54c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d54e:	f7ff ff41 	bl	800d3d4 <__retarget_lock_release_recursive>
 800d552:	e7e9      	b.n	800d528 <_vfiprintf_r+0x4c>
 800d554:	2300      	movs	r3, #0
 800d556:	9309      	str	r3, [sp, #36]	; 0x24
 800d558:	2320      	movs	r3, #32
 800d55a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d55e:	2330      	movs	r3, #48	; 0x30
 800d560:	f04f 0901 	mov.w	r9, #1
 800d564:	f8cd 800c 	str.w	r8, [sp, #12]
 800d568:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d728 <_vfiprintf_r+0x24c>
 800d56c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d570:	4623      	mov	r3, r4
 800d572:	469a      	mov	sl, r3
 800d574:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d578:	b10a      	cbz	r2, 800d57e <_vfiprintf_r+0xa2>
 800d57a:	2a25      	cmp	r2, #37	; 0x25
 800d57c:	d1f9      	bne.n	800d572 <_vfiprintf_r+0x96>
 800d57e:	ebba 0b04 	subs.w	fp, sl, r4
 800d582:	d00b      	beq.n	800d59c <_vfiprintf_r+0xc0>
 800d584:	465b      	mov	r3, fp
 800d586:	4622      	mov	r2, r4
 800d588:	4629      	mov	r1, r5
 800d58a:	4630      	mov	r0, r6
 800d58c:	f7ff ff93 	bl	800d4b6 <__sfputs_r>
 800d590:	3001      	adds	r0, #1
 800d592:	f000 80aa 	beq.w	800d6ea <_vfiprintf_r+0x20e>
 800d596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d598:	445a      	add	r2, fp
 800d59a:	9209      	str	r2, [sp, #36]	; 0x24
 800d59c:	f89a 3000 	ldrb.w	r3, [sl]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	f000 80a2 	beq.w	800d6ea <_vfiprintf_r+0x20e>
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5b0:	f10a 0a01 	add.w	sl, sl, #1
 800d5b4:	9304      	str	r3, [sp, #16]
 800d5b6:	9307      	str	r3, [sp, #28]
 800d5b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5bc:	931a      	str	r3, [sp, #104]	; 0x68
 800d5be:	4654      	mov	r4, sl
 800d5c0:	2205      	movs	r2, #5
 800d5c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5c6:	4858      	ldr	r0, [pc, #352]	; (800d728 <_vfiprintf_r+0x24c>)
 800d5c8:	f7ff f9b8 	bl	800c93c <memchr>
 800d5cc:	9a04      	ldr	r2, [sp, #16]
 800d5ce:	b9d8      	cbnz	r0, 800d608 <_vfiprintf_r+0x12c>
 800d5d0:	06d1      	lsls	r1, r2, #27
 800d5d2:	bf44      	itt	mi
 800d5d4:	2320      	movmi	r3, #32
 800d5d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5da:	0713      	lsls	r3, r2, #28
 800d5dc:	bf44      	itt	mi
 800d5de:	232b      	movmi	r3, #43	; 0x2b
 800d5e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d5e8:	2b2a      	cmp	r3, #42	; 0x2a
 800d5ea:	d015      	beq.n	800d618 <_vfiprintf_r+0x13c>
 800d5ec:	4654      	mov	r4, sl
 800d5ee:	2000      	movs	r0, #0
 800d5f0:	f04f 0c0a 	mov.w	ip, #10
 800d5f4:	9a07      	ldr	r2, [sp, #28]
 800d5f6:	4621      	mov	r1, r4
 800d5f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5fc:	3b30      	subs	r3, #48	; 0x30
 800d5fe:	2b09      	cmp	r3, #9
 800d600:	d94e      	bls.n	800d6a0 <_vfiprintf_r+0x1c4>
 800d602:	b1b0      	cbz	r0, 800d632 <_vfiprintf_r+0x156>
 800d604:	9207      	str	r2, [sp, #28]
 800d606:	e014      	b.n	800d632 <_vfiprintf_r+0x156>
 800d608:	eba0 0308 	sub.w	r3, r0, r8
 800d60c:	fa09 f303 	lsl.w	r3, r9, r3
 800d610:	4313      	orrs	r3, r2
 800d612:	46a2      	mov	sl, r4
 800d614:	9304      	str	r3, [sp, #16]
 800d616:	e7d2      	b.n	800d5be <_vfiprintf_r+0xe2>
 800d618:	9b03      	ldr	r3, [sp, #12]
 800d61a:	1d19      	adds	r1, r3, #4
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	9103      	str	r1, [sp, #12]
 800d620:	2b00      	cmp	r3, #0
 800d622:	bfbb      	ittet	lt
 800d624:	425b      	neglt	r3, r3
 800d626:	f042 0202 	orrlt.w	r2, r2, #2
 800d62a:	9307      	strge	r3, [sp, #28]
 800d62c:	9307      	strlt	r3, [sp, #28]
 800d62e:	bfb8      	it	lt
 800d630:	9204      	strlt	r2, [sp, #16]
 800d632:	7823      	ldrb	r3, [r4, #0]
 800d634:	2b2e      	cmp	r3, #46	; 0x2e
 800d636:	d10c      	bne.n	800d652 <_vfiprintf_r+0x176>
 800d638:	7863      	ldrb	r3, [r4, #1]
 800d63a:	2b2a      	cmp	r3, #42	; 0x2a
 800d63c:	d135      	bne.n	800d6aa <_vfiprintf_r+0x1ce>
 800d63e:	9b03      	ldr	r3, [sp, #12]
 800d640:	3402      	adds	r4, #2
 800d642:	1d1a      	adds	r2, r3, #4
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	9203      	str	r2, [sp, #12]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	bfb8      	it	lt
 800d64c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d650:	9305      	str	r3, [sp, #20]
 800d652:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d72c <_vfiprintf_r+0x250>
 800d656:	2203      	movs	r2, #3
 800d658:	4650      	mov	r0, sl
 800d65a:	7821      	ldrb	r1, [r4, #0]
 800d65c:	f7ff f96e 	bl	800c93c <memchr>
 800d660:	b140      	cbz	r0, 800d674 <_vfiprintf_r+0x198>
 800d662:	2340      	movs	r3, #64	; 0x40
 800d664:	eba0 000a 	sub.w	r0, r0, sl
 800d668:	fa03 f000 	lsl.w	r0, r3, r0
 800d66c:	9b04      	ldr	r3, [sp, #16]
 800d66e:	3401      	adds	r4, #1
 800d670:	4303      	orrs	r3, r0
 800d672:	9304      	str	r3, [sp, #16]
 800d674:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d678:	2206      	movs	r2, #6
 800d67a:	482d      	ldr	r0, [pc, #180]	; (800d730 <_vfiprintf_r+0x254>)
 800d67c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d680:	f7ff f95c 	bl	800c93c <memchr>
 800d684:	2800      	cmp	r0, #0
 800d686:	d03f      	beq.n	800d708 <_vfiprintf_r+0x22c>
 800d688:	4b2a      	ldr	r3, [pc, #168]	; (800d734 <_vfiprintf_r+0x258>)
 800d68a:	bb1b      	cbnz	r3, 800d6d4 <_vfiprintf_r+0x1f8>
 800d68c:	9b03      	ldr	r3, [sp, #12]
 800d68e:	3307      	adds	r3, #7
 800d690:	f023 0307 	bic.w	r3, r3, #7
 800d694:	3308      	adds	r3, #8
 800d696:	9303      	str	r3, [sp, #12]
 800d698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d69a:	443b      	add	r3, r7
 800d69c:	9309      	str	r3, [sp, #36]	; 0x24
 800d69e:	e767      	b.n	800d570 <_vfiprintf_r+0x94>
 800d6a0:	460c      	mov	r4, r1
 800d6a2:	2001      	movs	r0, #1
 800d6a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6a8:	e7a5      	b.n	800d5f6 <_vfiprintf_r+0x11a>
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	f04f 0c0a 	mov.w	ip, #10
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	3401      	adds	r4, #1
 800d6b4:	9305      	str	r3, [sp, #20]
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6bc:	3a30      	subs	r2, #48	; 0x30
 800d6be:	2a09      	cmp	r2, #9
 800d6c0:	d903      	bls.n	800d6ca <_vfiprintf_r+0x1ee>
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d0c5      	beq.n	800d652 <_vfiprintf_r+0x176>
 800d6c6:	9105      	str	r1, [sp, #20]
 800d6c8:	e7c3      	b.n	800d652 <_vfiprintf_r+0x176>
 800d6ca:	4604      	mov	r4, r0
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6d2:	e7f0      	b.n	800d6b6 <_vfiprintf_r+0x1da>
 800d6d4:	ab03      	add	r3, sp, #12
 800d6d6:	9300      	str	r3, [sp, #0]
 800d6d8:	462a      	mov	r2, r5
 800d6da:	4630      	mov	r0, r6
 800d6dc:	4b16      	ldr	r3, [pc, #88]	; (800d738 <_vfiprintf_r+0x25c>)
 800d6de:	a904      	add	r1, sp, #16
 800d6e0:	f7fd fea0 	bl	800b424 <_printf_float>
 800d6e4:	4607      	mov	r7, r0
 800d6e6:	1c78      	adds	r0, r7, #1
 800d6e8:	d1d6      	bne.n	800d698 <_vfiprintf_r+0x1bc>
 800d6ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6ec:	07d9      	lsls	r1, r3, #31
 800d6ee:	d405      	bmi.n	800d6fc <_vfiprintf_r+0x220>
 800d6f0:	89ab      	ldrh	r3, [r5, #12]
 800d6f2:	059a      	lsls	r2, r3, #22
 800d6f4:	d402      	bmi.n	800d6fc <_vfiprintf_r+0x220>
 800d6f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6f8:	f7ff fe6c 	bl	800d3d4 <__retarget_lock_release_recursive>
 800d6fc:	89ab      	ldrh	r3, [r5, #12]
 800d6fe:	065b      	lsls	r3, r3, #25
 800d700:	f53f af12 	bmi.w	800d528 <_vfiprintf_r+0x4c>
 800d704:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d706:	e711      	b.n	800d52c <_vfiprintf_r+0x50>
 800d708:	ab03      	add	r3, sp, #12
 800d70a:	9300      	str	r3, [sp, #0]
 800d70c:	462a      	mov	r2, r5
 800d70e:	4630      	mov	r0, r6
 800d710:	4b09      	ldr	r3, [pc, #36]	; (800d738 <_vfiprintf_r+0x25c>)
 800d712:	a904      	add	r1, sp, #16
 800d714:	f7fe f922 	bl	800b95c <_printf_i>
 800d718:	e7e4      	b.n	800d6e4 <_vfiprintf_r+0x208>
 800d71a:	bf00      	nop
 800d71c:	0800eba4 	.word	0x0800eba4
 800d720:	0800ebc4 	.word	0x0800ebc4
 800d724:	0800eb84 	.word	0x0800eb84
 800d728:	0800ea2c 	.word	0x0800ea2c
 800d72c:	0800ea32 	.word	0x0800ea32
 800d730:	0800ea36 	.word	0x0800ea36
 800d734:	0800b425 	.word	0x0800b425
 800d738:	0800d4b7 	.word	0x0800d4b7

0800d73c <__swbuf_r>:
 800d73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d73e:	460e      	mov	r6, r1
 800d740:	4614      	mov	r4, r2
 800d742:	4605      	mov	r5, r0
 800d744:	b118      	cbz	r0, 800d74e <__swbuf_r+0x12>
 800d746:	6983      	ldr	r3, [r0, #24]
 800d748:	b90b      	cbnz	r3, 800d74e <__swbuf_r+0x12>
 800d74a:	f000 f9e3 	bl	800db14 <__sinit>
 800d74e:	4b21      	ldr	r3, [pc, #132]	; (800d7d4 <__swbuf_r+0x98>)
 800d750:	429c      	cmp	r4, r3
 800d752:	d12b      	bne.n	800d7ac <__swbuf_r+0x70>
 800d754:	686c      	ldr	r4, [r5, #4]
 800d756:	69a3      	ldr	r3, [r4, #24]
 800d758:	60a3      	str	r3, [r4, #8]
 800d75a:	89a3      	ldrh	r3, [r4, #12]
 800d75c:	071a      	lsls	r2, r3, #28
 800d75e:	d52f      	bpl.n	800d7c0 <__swbuf_r+0x84>
 800d760:	6923      	ldr	r3, [r4, #16]
 800d762:	b36b      	cbz	r3, 800d7c0 <__swbuf_r+0x84>
 800d764:	6923      	ldr	r3, [r4, #16]
 800d766:	6820      	ldr	r0, [r4, #0]
 800d768:	b2f6      	uxtb	r6, r6
 800d76a:	1ac0      	subs	r0, r0, r3
 800d76c:	6963      	ldr	r3, [r4, #20]
 800d76e:	4637      	mov	r7, r6
 800d770:	4283      	cmp	r3, r0
 800d772:	dc04      	bgt.n	800d77e <__swbuf_r+0x42>
 800d774:	4621      	mov	r1, r4
 800d776:	4628      	mov	r0, r5
 800d778:	f000 f938 	bl	800d9ec <_fflush_r>
 800d77c:	bb30      	cbnz	r0, 800d7cc <__swbuf_r+0x90>
 800d77e:	68a3      	ldr	r3, [r4, #8]
 800d780:	3001      	adds	r0, #1
 800d782:	3b01      	subs	r3, #1
 800d784:	60a3      	str	r3, [r4, #8]
 800d786:	6823      	ldr	r3, [r4, #0]
 800d788:	1c5a      	adds	r2, r3, #1
 800d78a:	6022      	str	r2, [r4, #0]
 800d78c:	701e      	strb	r6, [r3, #0]
 800d78e:	6963      	ldr	r3, [r4, #20]
 800d790:	4283      	cmp	r3, r0
 800d792:	d004      	beq.n	800d79e <__swbuf_r+0x62>
 800d794:	89a3      	ldrh	r3, [r4, #12]
 800d796:	07db      	lsls	r3, r3, #31
 800d798:	d506      	bpl.n	800d7a8 <__swbuf_r+0x6c>
 800d79a:	2e0a      	cmp	r6, #10
 800d79c:	d104      	bne.n	800d7a8 <__swbuf_r+0x6c>
 800d79e:	4621      	mov	r1, r4
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	f000 f923 	bl	800d9ec <_fflush_r>
 800d7a6:	b988      	cbnz	r0, 800d7cc <__swbuf_r+0x90>
 800d7a8:	4638      	mov	r0, r7
 800d7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7ac:	4b0a      	ldr	r3, [pc, #40]	; (800d7d8 <__swbuf_r+0x9c>)
 800d7ae:	429c      	cmp	r4, r3
 800d7b0:	d101      	bne.n	800d7b6 <__swbuf_r+0x7a>
 800d7b2:	68ac      	ldr	r4, [r5, #8]
 800d7b4:	e7cf      	b.n	800d756 <__swbuf_r+0x1a>
 800d7b6:	4b09      	ldr	r3, [pc, #36]	; (800d7dc <__swbuf_r+0xa0>)
 800d7b8:	429c      	cmp	r4, r3
 800d7ba:	bf08      	it	eq
 800d7bc:	68ec      	ldreq	r4, [r5, #12]
 800d7be:	e7ca      	b.n	800d756 <__swbuf_r+0x1a>
 800d7c0:	4621      	mov	r1, r4
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	f000 f81a 	bl	800d7fc <__swsetup_r>
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	d0cb      	beq.n	800d764 <__swbuf_r+0x28>
 800d7cc:	f04f 37ff 	mov.w	r7, #4294967295
 800d7d0:	e7ea      	b.n	800d7a8 <__swbuf_r+0x6c>
 800d7d2:	bf00      	nop
 800d7d4:	0800eba4 	.word	0x0800eba4
 800d7d8:	0800ebc4 	.word	0x0800ebc4
 800d7dc:	0800eb84 	.word	0x0800eb84

0800d7e0 <__ascii_wctomb>:
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	4608      	mov	r0, r1
 800d7e4:	b141      	cbz	r1, 800d7f8 <__ascii_wctomb+0x18>
 800d7e6:	2aff      	cmp	r2, #255	; 0xff
 800d7e8:	d904      	bls.n	800d7f4 <__ascii_wctomb+0x14>
 800d7ea:	228a      	movs	r2, #138	; 0x8a
 800d7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f0:	601a      	str	r2, [r3, #0]
 800d7f2:	4770      	bx	lr
 800d7f4:	2001      	movs	r0, #1
 800d7f6:	700a      	strb	r2, [r1, #0]
 800d7f8:	4770      	bx	lr
	...

0800d7fc <__swsetup_r>:
 800d7fc:	4b32      	ldr	r3, [pc, #200]	; (800d8c8 <__swsetup_r+0xcc>)
 800d7fe:	b570      	push	{r4, r5, r6, lr}
 800d800:	681d      	ldr	r5, [r3, #0]
 800d802:	4606      	mov	r6, r0
 800d804:	460c      	mov	r4, r1
 800d806:	b125      	cbz	r5, 800d812 <__swsetup_r+0x16>
 800d808:	69ab      	ldr	r3, [r5, #24]
 800d80a:	b913      	cbnz	r3, 800d812 <__swsetup_r+0x16>
 800d80c:	4628      	mov	r0, r5
 800d80e:	f000 f981 	bl	800db14 <__sinit>
 800d812:	4b2e      	ldr	r3, [pc, #184]	; (800d8cc <__swsetup_r+0xd0>)
 800d814:	429c      	cmp	r4, r3
 800d816:	d10f      	bne.n	800d838 <__swsetup_r+0x3c>
 800d818:	686c      	ldr	r4, [r5, #4]
 800d81a:	89a3      	ldrh	r3, [r4, #12]
 800d81c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d820:	0719      	lsls	r1, r3, #28
 800d822:	d42c      	bmi.n	800d87e <__swsetup_r+0x82>
 800d824:	06dd      	lsls	r5, r3, #27
 800d826:	d411      	bmi.n	800d84c <__swsetup_r+0x50>
 800d828:	2309      	movs	r3, #9
 800d82a:	6033      	str	r3, [r6, #0]
 800d82c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d830:	f04f 30ff 	mov.w	r0, #4294967295
 800d834:	81a3      	strh	r3, [r4, #12]
 800d836:	e03e      	b.n	800d8b6 <__swsetup_r+0xba>
 800d838:	4b25      	ldr	r3, [pc, #148]	; (800d8d0 <__swsetup_r+0xd4>)
 800d83a:	429c      	cmp	r4, r3
 800d83c:	d101      	bne.n	800d842 <__swsetup_r+0x46>
 800d83e:	68ac      	ldr	r4, [r5, #8]
 800d840:	e7eb      	b.n	800d81a <__swsetup_r+0x1e>
 800d842:	4b24      	ldr	r3, [pc, #144]	; (800d8d4 <__swsetup_r+0xd8>)
 800d844:	429c      	cmp	r4, r3
 800d846:	bf08      	it	eq
 800d848:	68ec      	ldreq	r4, [r5, #12]
 800d84a:	e7e6      	b.n	800d81a <__swsetup_r+0x1e>
 800d84c:	0758      	lsls	r0, r3, #29
 800d84e:	d512      	bpl.n	800d876 <__swsetup_r+0x7a>
 800d850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d852:	b141      	cbz	r1, 800d866 <__swsetup_r+0x6a>
 800d854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d858:	4299      	cmp	r1, r3
 800d85a:	d002      	beq.n	800d862 <__swsetup_r+0x66>
 800d85c:	4630      	mov	r0, r6
 800d85e:	f7fd fc67 	bl	800b130 <_free_r>
 800d862:	2300      	movs	r3, #0
 800d864:	6363      	str	r3, [r4, #52]	; 0x34
 800d866:	89a3      	ldrh	r3, [r4, #12]
 800d868:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d86c:	81a3      	strh	r3, [r4, #12]
 800d86e:	2300      	movs	r3, #0
 800d870:	6063      	str	r3, [r4, #4]
 800d872:	6923      	ldr	r3, [r4, #16]
 800d874:	6023      	str	r3, [r4, #0]
 800d876:	89a3      	ldrh	r3, [r4, #12]
 800d878:	f043 0308 	orr.w	r3, r3, #8
 800d87c:	81a3      	strh	r3, [r4, #12]
 800d87e:	6923      	ldr	r3, [r4, #16]
 800d880:	b94b      	cbnz	r3, 800d896 <__swsetup_r+0x9a>
 800d882:	89a3      	ldrh	r3, [r4, #12]
 800d884:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d88c:	d003      	beq.n	800d896 <__swsetup_r+0x9a>
 800d88e:	4621      	mov	r1, r4
 800d890:	4630      	mov	r0, r6
 800d892:	f000 fa01 	bl	800dc98 <__smakebuf_r>
 800d896:	89a0      	ldrh	r0, [r4, #12]
 800d898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d89c:	f010 0301 	ands.w	r3, r0, #1
 800d8a0:	d00a      	beq.n	800d8b8 <__swsetup_r+0xbc>
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	60a3      	str	r3, [r4, #8]
 800d8a6:	6963      	ldr	r3, [r4, #20]
 800d8a8:	425b      	negs	r3, r3
 800d8aa:	61a3      	str	r3, [r4, #24]
 800d8ac:	6923      	ldr	r3, [r4, #16]
 800d8ae:	b943      	cbnz	r3, 800d8c2 <__swsetup_r+0xc6>
 800d8b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d8b4:	d1ba      	bne.n	800d82c <__swsetup_r+0x30>
 800d8b6:	bd70      	pop	{r4, r5, r6, pc}
 800d8b8:	0781      	lsls	r1, r0, #30
 800d8ba:	bf58      	it	pl
 800d8bc:	6963      	ldrpl	r3, [r4, #20]
 800d8be:	60a3      	str	r3, [r4, #8]
 800d8c0:	e7f4      	b.n	800d8ac <__swsetup_r+0xb0>
 800d8c2:	2000      	movs	r0, #0
 800d8c4:	e7f7      	b.n	800d8b6 <__swsetup_r+0xba>
 800d8c6:	bf00      	nop
 800d8c8:	20000140 	.word	0x20000140
 800d8cc:	0800eba4 	.word	0x0800eba4
 800d8d0:	0800ebc4 	.word	0x0800ebc4
 800d8d4:	0800eb84 	.word	0x0800eb84

0800d8d8 <abort>:
 800d8d8:	2006      	movs	r0, #6
 800d8da:	b508      	push	{r3, lr}
 800d8dc:	f000 fa4c 	bl	800dd78 <raise>
 800d8e0:	2001      	movs	r0, #1
 800d8e2:	f7f4 fee0 	bl	80026a6 <_exit>
	...

0800d8e8 <__sflush_r>:
 800d8e8:	898a      	ldrh	r2, [r1, #12]
 800d8ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ec:	4605      	mov	r5, r0
 800d8ee:	0710      	lsls	r0, r2, #28
 800d8f0:	460c      	mov	r4, r1
 800d8f2:	d457      	bmi.n	800d9a4 <__sflush_r+0xbc>
 800d8f4:	684b      	ldr	r3, [r1, #4]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	dc04      	bgt.n	800d904 <__sflush_r+0x1c>
 800d8fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	dc01      	bgt.n	800d904 <__sflush_r+0x1c>
 800d900:	2000      	movs	r0, #0
 800d902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d906:	2e00      	cmp	r6, #0
 800d908:	d0fa      	beq.n	800d900 <__sflush_r+0x18>
 800d90a:	2300      	movs	r3, #0
 800d90c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d910:	682f      	ldr	r7, [r5, #0]
 800d912:	602b      	str	r3, [r5, #0]
 800d914:	d032      	beq.n	800d97c <__sflush_r+0x94>
 800d916:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d918:	89a3      	ldrh	r3, [r4, #12]
 800d91a:	075a      	lsls	r2, r3, #29
 800d91c:	d505      	bpl.n	800d92a <__sflush_r+0x42>
 800d91e:	6863      	ldr	r3, [r4, #4]
 800d920:	1ac0      	subs	r0, r0, r3
 800d922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d924:	b10b      	cbz	r3, 800d92a <__sflush_r+0x42>
 800d926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d928:	1ac0      	subs	r0, r0, r3
 800d92a:	2300      	movs	r3, #0
 800d92c:	4602      	mov	r2, r0
 800d92e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d930:	4628      	mov	r0, r5
 800d932:	6a21      	ldr	r1, [r4, #32]
 800d934:	47b0      	blx	r6
 800d936:	1c43      	adds	r3, r0, #1
 800d938:	89a3      	ldrh	r3, [r4, #12]
 800d93a:	d106      	bne.n	800d94a <__sflush_r+0x62>
 800d93c:	6829      	ldr	r1, [r5, #0]
 800d93e:	291d      	cmp	r1, #29
 800d940:	d82c      	bhi.n	800d99c <__sflush_r+0xb4>
 800d942:	4a29      	ldr	r2, [pc, #164]	; (800d9e8 <__sflush_r+0x100>)
 800d944:	40ca      	lsrs	r2, r1
 800d946:	07d6      	lsls	r6, r2, #31
 800d948:	d528      	bpl.n	800d99c <__sflush_r+0xb4>
 800d94a:	2200      	movs	r2, #0
 800d94c:	6062      	str	r2, [r4, #4]
 800d94e:	6922      	ldr	r2, [r4, #16]
 800d950:	04d9      	lsls	r1, r3, #19
 800d952:	6022      	str	r2, [r4, #0]
 800d954:	d504      	bpl.n	800d960 <__sflush_r+0x78>
 800d956:	1c42      	adds	r2, r0, #1
 800d958:	d101      	bne.n	800d95e <__sflush_r+0x76>
 800d95a:	682b      	ldr	r3, [r5, #0]
 800d95c:	b903      	cbnz	r3, 800d960 <__sflush_r+0x78>
 800d95e:	6560      	str	r0, [r4, #84]	; 0x54
 800d960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d962:	602f      	str	r7, [r5, #0]
 800d964:	2900      	cmp	r1, #0
 800d966:	d0cb      	beq.n	800d900 <__sflush_r+0x18>
 800d968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d96c:	4299      	cmp	r1, r3
 800d96e:	d002      	beq.n	800d976 <__sflush_r+0x8e>
 800d970:	4628      	mov	r0, r5
 800d972:	f7fd fbdd 	bl	800b130 <_free_r>
 800d976:	2000      	movs	r0, #0
 800d978:	6360      	str	r0, [r4, #52]	; 0x34
 800d97a:	e7c2      	b.n	800d902 <__sflush_r+0x1a>
 800d97c:	6a21      	ldr	r1, [r4, #32]
 800d97e:	2301      	movs	r3, #1
 800d980:	4628      	mov	r0, r5
 800d982:	47b0      	blx	r6
 800d984:	1c41      	adds	r1, r0, #1
 800d986:	d1c7      	bne.n	800d918 <__sflush_r+0x30>
 800d988:	682b      	ldr	r3, [r5, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d0c4      	beq.n	800d918 <__sflush_r+0x30>
 800d98e:	2b1d      	cmp	r3, #29
 800d990:	d001      	beq.n	800d996 <__sflush_r+0xae>
 800d992:	2b16      	cmp	r3, #22
 800d994:	d101      	bne.n	800d99a <__sflush_r+0xb2>
 800d996:	602f      	str	r7, [r5, #0]
 800d998:	e7b2      	b.n	800d900 <__sflush_r+0x18>
 800d99a:	89a3      	ldrh	r3, [r4, #12]
 800d99c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9a0:	81a3      	strh	r3, [r4, #12]
 800d9a2:	e7ae      	b.n	800d902 <__sflush_r+0x1a>
 800d9a4:	690f      	ldr	r7, [r1, #16]
 800d9a6:	2f00      	cmp	r7, #0
 800d9a8:	d0aa      	beq.n	800d900 <__sflush_r+0x18>
 800d9aa:	0793      	lsls	r3, r2, #30
 800d9ac:	bf18      	it	ne
 800d9ae:	2300      	movne	r3, #0
 800d9b0:	680e      	ldr	r6, [r1, #0]
 800d9b2:	bf08      	it	eq
 800d9b4:	694b      	ldreq	r3, [r1, #20]
 800d9b6:	1bf6      	subs	r6, r6, r7
 800d9b8:	600f      	str	r7, [r1, #0]
 800d9ba:	608b      	str	r3, [r1, #8]
 800d9bc:	2e00      	cmp	r6, #0
 800d9be:	dd9f      	ble.n	800d900 <__sflush_r+0x18>
 800d9c0:	4633      	mov	r3, r6
 800d9c2:	463a      	mov	r2, r7
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	6a21      	ldr	r1, [r4, #32]
 800d9c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d9cc:	47e0      	blx	ip
 800d9ce:	2800      	cmp	r0, #0
 800d9d0:	dc06      	bgt.n	800d9e0 <__sflush_r+0xf8>
 800d9d2:	89a3      	ldrh	r3, [r4, #12]
 800d9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9dc:	81a3      	strh	r3, [r4, #12]
 800d9de:	e790      	b.n	800d902 <__sflush_r+0x1a>
 800d9e0:	4407      	add	r7, r0
 800d9e2:	1a36      	subs	r6, r6, r0
 800d9e4:	e7ea      	b.n	800d9bc <__sflush_r+0xd4>
 800d9e6:	bf00      	nop
 800d9e8:	20400001 	.word	0x20400001

0800d9ec <_fflush_r>:
 800d9ec:	b538      	push	{r3, r4, r5, lr}
 800d9ee:	690b      	ldr	r3, [r1, #16]
 800d9f0:	4605      	mov	r5, r0
 800d9f2:	460c      	mov	r4, r1
 800d9f4:	b913      	cbnz	r3, 800d9fc <_fflush_r+0x10>
 800d9f6:	2500      	movs	r5, #0
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	bd38      	pop	{r3, r4, r5, pc}
 800d9fc:	b118      	cbz	r0, 800da06 <_fflush_r+0x1a>
 800d9fe:	6983      	ldr	r3, [r0, #24]
 800da00:	b90b      	cbnz	r3, 800da06 <_fflush_r+0x1a>
 800da02:	f000 f887 	bl	800db14 <__sinit>
 800da06:	4b14      	ldr	r3, [pc, #80]	; (800da58 <_fflush_r+0x6c>)
 800da08:	429c      	cmp	r4, r3
 800da0a:	d11b      	bne.n	800da44 <_fflush_r+0x58>
 800da0c:	686c      	ldr	r4, [r5, #4]
 800da0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d0ef      	beq.n	800d9f6 <_fflush_r+0xa>
 800da16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da18:	07d0      	lsls	r0, r2, #31
 800da1a:	d404      	bmi.n	800da26 <_fflush_r+0x3a>
 800da1c:	0599      	lsls	r1, r3, #22
 800da1e:	d402      	bmi.n	800da26 <_fflush_r+0x3a>
 800da20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da22:	f7ff fcd6 	bl	800d3d2 <__retarget_lock_acquire_recursive>
 800da26:	4628      	mov	r0, r5
 800da28:	4621      	mov	r1, r4
 800da2a:	f7ff ff5d 	bl	800d8e8 <__sflush_r>
 800da2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da30:	4605      	mov	r5, r0
 800da32:	07da      	lsls	r2, r3, #31
 800da34:	d4e0      	bmi.n	800d9f8 <_fflush_r+0xc>
 800da36:	89a3      	ldrh	r3, [r4, #12]
 800da38:	059b      	lsls	r3, r3, #22
 800da3a:	d4dd      	bmi.n	800d9f8 <_fflush_r+0xc>
 800da3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da3e:	f7ff fcc9 	bl	800d3d4 <__retarget_lock_release_recursive>
 800da42:	e7d9      	b.n	800d9f8 <_fflush_r+0xc>
 800da44:	4b05      	ldr	r3, [pc, #20]	; (800da5c <_fflush_r+0x70>)
 800da46:	429c      	cmp	r4, r3
 800da48:	d101      	bne.n	800da4e <_fflush_r+0x62>
 800da4a:	68ac      	ldr	r4, [r5, #8]
 800da4c:	e7df      	b.n	800da0e <_fflush_r+0x22>
 800da4e:	4b04      	ldr	r3, [pc, #16]	; (800da60 <_fflush_r+0x74>)
 800da50:	429c      	cmp	r4, r3
 800da52:	bf08      	it	eq
 800da54:	68ec      	ldreq	r4, [r5, #12]
 800da56:	e7da      	b.n	800da0e <_fflush_r+0x22>
 800da58:	0800eba4 	.word	0x0800eba4
 800da5c:	0800ebc4 	.word	0x0800ebc4
 800da60:	0800eb84 	.word	0x0800eb84

0800da64 <std>:
 800da64:	2300      	movs	r3, #0
 800da66:	b510      	push	{r4, lr}
 800da68:	4604      	mov	r4, r0
 800da6a:	e9c0 3300 	strd	r3, r3, [r0]
 800da6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da72:	6083      	str	r3, [r0, #8]
 800da74:	8181      	strh	r1, [r0, #12]
 800da76:	6643      	str	r3, [r0, #100]	; 0x64
 800da78:	81c2      	strh	r2, [r0, #14]
 800da7a:	6183      	str	r3, [r0, #24]
 800da7c:	4619      	mov	r1, r3
 800da7e:	2208      	movs	r2, #8
 800da80:	305c      	adds	r0, #92	; 0x5c
 800da82:	f7fd fb4d 	bl	800b120 <memset>
 800da86:	4b05      	ldr	r3, [pc, #20]	; (800da9c <std+0x38>)
 800da88:	6224      	str	r4, [r4, #32]
 800da8a:	6263      	str	r3, [r4, #36]	; 0x24
 800da8c:	4b04      	ldr	r3, [pc, #16]	; (800daa0 <std+0x3c>)
 800da8e:	62a3      	str	r3, [r4, #40]	; 0x28
 800da90:	4b04      	ldr	r3, [pc, #16]	; (800daa4 <std+0x40>)
 800da92:	62e3      	str	r3, [r4, #44]	; 0x2c
 800da94:	4b04      	ldr	r3, [pc, #16]	; (800daa8 <std+0x44>)
 800da96:	6323      	str	r3, [r4, #48]	; 0x30
 800da98:	bd10      	pop	{r4, pc}
 800da9a:	bf00      	nop
 800da9c:	0800ddb1 	.word	0x0800ddb1
 800daa0:	0800ddd3 	.word	0x0800ddd3
 800daa4:	0800de0b 	.word	0x0800de0b
 800daa8:	0800de2f 	.word	0x0800de2f

0800daac <_cleanup_r>:
 800daac:	4901      	ldr	r1, [pc, #4]	; (800dab4 <_cleanup_r+0x8>)
 800daae:	f000 b8af 	b.w	800dc10 <_fwalk_reent>
 800dab2:	bf00      	nop
 800dab4:	0800d9ed 	.word	0x0800d9ed

0800dab8 <__sfmoreglue>:
 800dab8:	2268      	movs	r2, #104	; 0x68
 800daba:	b570      	push	{r4, r5, r6, lr}
 800dabc:	1e4d      	subs	r5, r1, #1
 800dabe:	4355      	muls	r5, r2
 800dac0:	460e      	mov	r6, r1
 800dac2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dac6:	f7fd fb9b 	bl	800b200 <_malloc_r>
 800daca:	4604      	mov	r4, r0
 800dacc:	b140      	cbz	r0, 800dae0 <__sfmoreglue+0x28>
 800dace:	2100      	movs	r1, #0
 800dad0:	e9c0 1600 	strd	r1, r6, [r0]
 800dad4:	300c      	adds	r0, #12
 800dad6:	60a0      	str	r0, [r4, #8]
 800dad8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dadc:	f7fd fb20 	bl	800b120 <memset>
 800dae0:	4620      	mov	r0, r4
 800dae2:	bd70      	pop	{r4, r5, r6, pc}

0800dae4 <__sfp_lock_acquire>:
 800dae4:	4801      	ldr	r0, [pc, #4]	; (800daec <__sfp_lock_acquire+0x8>)
 800dae6:	f7ff bc74 	b.w	800d3d2 <__retarget_lock_acquire_recursive>
 800daea:	bf00      	nop
 800daec:	20000d75 	.word	0x20000d75

0800daf0 <__sfp_lock_release>:
 800daf0:	4801      	ldr	r0, [pc, #4]	; (800daf8 <__sfp_lock_release+0x8>)
 800daf2:	f7ff bc6f 	b.w	800d3d4 <__retarget_lock_release_recursive>
 800daf6:	bf00      	nop
 800daf8:	20000d75 	.word	0x20000d75

0800dafc <__sinit_lock_acquire>:
 800dafc:	4801      	ldr	r0, [pc, #4]	; (800db04 <__sinit_lock_acquire+0x8>)
 800dafe:	f7ff bc68 	b.w	800d3d2 <__retarget_lock_acquire_recursive>
 800db02:	bf00      	nop
 800db04:	20000d76 	.word	0x20000d76

0800db08 <__sinit_lock_release>:
 800db08:	4801      	ldr	r0, [pc, #4]	; (800db10 <__sinit_lock_release+0x8>)
 800db0a:	f7ff bc63 	b.w	800d3d4 <__retarget_lock_release_recursive>
 800db0e:	bf00      	nop
 800db10:	20000d76 	.word	0x20000d76

0800db14 <__sinit>:
 800db14:	b510      	push	{r4, lr}
 800db16:	4604      	mov	r4, r0
 800db18:	f7ff fff0 	bl	800dafc <__sinit_lock_acquire>
 800db1c:	69a3      	ldr	r3, [r4, #24]
 800db1e:	b11b      	cbz	r3, 800db28 <__sinit+0x14>
 800db20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db24:	f7ff bff0 	b.w	800db08 <__sinit_lock_release>
 800db28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800db2c:	6523      	str	r3, [r4, #80]	; 0x50
 800db2e:	4b13      	ldr	r3, [pc, #76]	; (800db7c <__sinit+0x68>)
 800db30:	4a13      	ldr	r2, [pc, #76]	; (800db80 <__sinit+0x6c>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	62a2      	str	r2, [r4, #40]	; 0x28
 800db36:	42a3      	cmp	r3, r4
 800db38:	bf08      	it	eq
 800db3a:	2301      	moveq	r3, #1
 800db3c:	4620      	mov	r0, r4
 800db3e:	bf08      	it	eq
 800db40:	61a3      	streq	r3, [r4, #24]
 800db42:	f000 f81f 	bl	800db84 <__sfp>
 800db46:	6060      	str	r0, [r4, #4]
 800db48:	4620      	mov	r0, r4
 800db4a:	f000 f81b 	bl	800db84 <__sfp>
 800db4e:	60a0      	str	r0, [r4, #8]
 800db50:	4620      	mov	r0, r4
 800db52:	f000 f817 	bl	800db84 <__sfp>
 800db56:	2200      	movs	r2, #0
 800db58:	2104      	movs	r1, #4
 800db5a:	60e0      	str	r0, [r4, #12]
 800db5c:	6860      	ldr	r0, [r4, #4]
 800db5e:	f7ff ff81 	bl	800da64 <std>
 800db62:	2201      	movs	r2, #1
 800db64:	2109      	movs	r1, #9
 800db66:	68a0      	ldr	r0, [r4, #8]
 800db68:	f7ff ff7c 	bl	800da64 <std>
 800db6c:	2202      	movs	r2, #2
 800db6e:	2112      	movs	r1, #18
 800db70:	68e0      	ldr	r0, [r4, #12]
 800db72:	f7ff ff77 	bl	800da64 <std>
 800db76:	2301      	movs	r3, #1
 800db78:	61a3      	str	r3, [r4, #24]
 800db7a:	e7d1      	b.n	800db20 <__sinit+0xc>
 800db7c:	0800e808 	.word	0x0800e808
 800db80:	0800daad 	.word	0x0800daad

0800db84 <__sfp>:
 800db84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db86:	4607      	mov	r7, r0
 800db88:	f7ff ffac 	bl	800dae4 <__sfp_lock_acquire>
 800db8c:	4b1e      	ldr	r3, [pc, #120]	; (800dc08 <__sfp+0x84>)
 800db8e:	681e      	ldr	r6, [r3, #0]
 800db90:	69b3      	ldr	r3, [r6, #24]
 800db92:	b913      	cbnz	r3, 800db9a <__sfp+0x16>
 800db94:	4630      	mov	r0, r6
 800db96:	f7ff ffbd 	bl	800db14 <__sinit>
 800db9a:	3648      	adds	r6, #72	; 0x48
 800db9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dba0:	3b01      	subs	r3, #1
 800dba2:	d503      	bpl.n	800dbac <__sfp+0x28>
 800dba4:	6833      	ldr	r3, [r6, #0]
 800dba6:	b30b      	cbz	r3, 800dbec <__sfp+0x68>
 800dba8:	6836      	ldr	r6, [r6, #0]
 800dbaa:	e7f7      	b.n	800db9c <__sfp+0x18>
 800dbac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dbb0:	b9d5      	cbnz	r5, 800dbe8 <__sfp+0x64>
 800dbb2:	4b16      	ldr	r3, [pc, #88]	; (800dc0c <__sfp+0x88>)
 800dbb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dbb8:	60e3      	str	r3, [r4, #12]
 800dbba:	6665      	str	r5, [r4, #100]	; 0x64
 800dbbc:	f7ff fc08 	bl	800d3d0 <__retarget_lock_init_recursive>
 800dbc0:	f7ff ff96 	bl	800daf0 <__sfp_lock_release>
 800dbc4:	2208      	movs	r2, #8
 800dbc6:	4629      	mov	r1, r5
 800dbc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dbcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dbd0:	6025      	str	r5, [r4, #0]
 800dbd2:	61a5      	str	r5, [r4, #24]
 800dbd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dbd8:	f7fd faa2 	bl	800b120 <memset>
 800dbdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dbe0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbe8:	3468      	adds	r4, #104	; 0x68
 800dbea:	e7d9      	b.n	800dba0 <__sfp+0x1c>
 800dbec:	2104      	movs	r1, #4
 800dbee:	4638      	mov	r0, r7
 800dbf0:	f7ff ff62 	bl	800dab8 <__sfmoreglue>
 800dbf4:	4604      	mov	r4, r0
 800dbf6:	6030      	str	r0, [r6, #0]
 800dbf8:	2800      	cmp	r0, #0
 800dbfa:	d1d5      	bne.n	800dba8 <__sfp+0x24>
 800dbfc:	f7ff ff78 	bl	800daf0 <__sfp_lock_release>
 800dc00:	230c      	movs	r3, #12
 800dc02:	603b      	str	r3, [r7, #0]
 800dc04:	e7ee      	b.n	800dbe4 <__sfp+0x60>
 800dc06:	bf00      	nop
 800dc08:	0800e808 	.word	0x0800e808
 800dc0c:	ffff0001 	.word	0xffff0001

0800dc10 <_fwalk_reent>:
 800dc10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc14:	4606      	mov	r6, r0
 800dc16:	4688      	mov	r8, r1
 800dc18:	2700      	movs	r7, #0
 800dc1a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dc1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc22:	f1b9 0901 	subs.w	r9, r9, #1
 800dc26:	d505      	bpl.n	800dc34 <_fwalk_reent+0x24>
 800dc28:	6824      	ldr	r4, [r4, #0]
 800dc2a:	2c00      	cmp	r4, #0
 800dc2c:	d1f7      	bne.n	800dc1e <_fwalk_reent+0xe>
 800dc2e:	4638      	mov	r0, r7
 800dc30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc34:	89ab      	ldrh	r3, [r5, #12]
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d907      	bls.n	800dc4a <_fwalk_reent+0x3a>
 800dc3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc3e:	3301      	adds	r3, #1
 800dc40:	d003      	beq.n	800dc4a <_fwalk_reent+0x3a>
 800dc42:	4629      	mov	r1, r5
 800dc44:	4630      	mov	r0, r6
 800dc46:	47c0      	blx	r8
 800dc48:	4307      	orrs	r7, r0
 800dc4a:	3568      	adds	r5, #104	; 0x68
 800dc4c:	e7e9      	b.n	800dc22 <_fwalk_reent+0x12>

0800dc4e <__swhatbuf_r>:
 800dc4e:	b570      	push	{r4, r5, r6, lr}
 800dc50:	460e      	mov	r6, r1
 800dc52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc56:	4614      	mov	r4, r2
 800dc58:	2900      	cmp	r1, #0
 800dc5a:	461d      	mov	r5, r3
 800dc5c:	b096      	sub	sp, #88	; 0x58
 800dc5e:	da08      	bge.n	800dc72 <__swhatbuf_r+0x24>
 800dc60:	2200      	movs	r2, #0
 800dc62:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dc66:	602a      	str	r2, [r5, #0]
 800dc68:	061a      	lsls	r2, r3, #24
 800dc6a:	d410      	bmi.n	800dc8e <__swhatbuf_r+0x40>
 800dc6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc70:	e00e      	b.n	800dc90 <__swhatbuf_r+0x42>
 800dc72:	466a      	mov	r2, sp
 800dc74:	f000 f902 	bl	800de7c <_fstat_r>
 800dc78:	2800      	cmp	r0, #0
 800dc7a:	dbf1      	blt.n	800dc60 <__swhatbuf_r+0x12>
 800dc7c:	9a01      	ldr	r2, [sp, #4]
 800dc7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dc82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dc86:	425a      	negs	r2, r3
 800dc88:	415a      	adcs	r2, r3
 800dc8a:	602a      	str	r2, [r5, #0]
 800dc8c:	e7ee      	b.n	800dc6c <__swhatbuf_r+0x1e>
 800dc8e:	2340      	movs	r3, #64	; 0x40
 800dc90:	2000      	movs	r0, #0
 800dc92:	6023      	str	r3, [r4, #0]
 800dc94:	b016      	add	sp, #88	; 0x58
 800dc96:	bd70      	pop	{r4, r5, r6, pc}

0800dc98 <__smakebuf_r>:
 800dc98:	898b      	ldrh	r3, [r1, #12]
 800dc9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc9c:	079d      	lsls	r5, r3, #30
 800dc9e:	4606      	mov	r6, r0
 800dca0:	460c      	mov	r4, r1
 800dca2:	d507      	bpl.n	800dcb4 <__smakebuf_r+0x1c>
 800dca4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dca8:	6023      	str	r3, [r4, #0]
 800dcaa:	6123      	str	r3, [r4, #16]
 800dcac:	2301      	movs	r3, #1
 800dcae:	6163      	str	r3, [r4, #20]
 800dcb0:	b002      	add	sp, #8
 800dcb2:	bd70      	pop	{r4, r5, r6, pc}
 800dcb4:	466a      	mov	r2, sp
 800dcb6:	ab01      	add	r3, sp, #4
 800dcb8:	f7ff ffc9 	bl	800dc4e <__swhatbuf_r>
 800dcbc:	9900      	ldr	r1, [sp, #0]
 800dcbe:	4605      	mov	r5, r0
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	f7fd fa9d 	bl	800b200 <_malloc_r>
 800dcc6:	b948      	cbnz	r0, 800dcdc <__smakebuf_r+0x44>
 800dcc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dccc:	059a      	lsls	r2, r3, #22
 800dcce:	d4ef      	bmi.n	800dcb0 <__smakebuf_r+0x18>
 800dcd0:	f023 0303 	bic.w	r3, r3, #3
 800dcd4:	f043 0302 	orr.w	r3, r3, #2
 800dcd8:	81a3      	strh	r3, [r4, #12]
 800dcda:	e7e3      	b.n	800dca4 <__smakebuf_r+0xc>
 800dcdc:	4b0d      	ldr	r3, [pc, #52]	; (800dd14 <__smakebuf_r+0x7c>)
 800dcde:	62b3      	str	r3, [r6, #40]	; 0x28
 800dce0:	89a3      	ldrh	r3, [r4, #12]
 800dce2:	6020      	str	r0, [r4, #0]
 800dce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dce8:	81a3      	strh	r3, [r4, #12]
 800dcea:	9b00      	ldr	r3, [sp, #0]
 800dcec:	6120      	str	r0, [r4, #16]
 800dcee:	6163      	str	r3, [r4, #20]
 800dcf0:	9b01      	ldr	r3, [sp, #4]
 800dcf2:	b15b      	cbz	r3, 800dd0c <__smakebuf_r+0x74>
 800dcf4:	4630      	mov	r0, r6
 800dcf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcfa:	f000 f8d1 	bl	800dea0 <_isatty_r>
 800dcfe:	b128      	cbz	r0, 800dd0c <__smakebuf_r+0x74>
 800dd00:	89a3      	ldrh	r3, [r4, #12]
 800dd02:	f023 0303 	bic.w	r3, r3, #3
 800dd06:	f043 0301 	orr.w	r3, r3, #1
 800dd0a:	81a3      	strh	r3, [r4, #12]
 800dd0c:	89a0      	ldrh	r0, [r4, #12]
 800dd0e:	4305      	orrs	r5, r0
 800dd10:	81a5      	strh	r5, [r4, #12]
 800dd12:	e7cd      	b.n	800dcb0 <__smakebuf_r+0x18>
 800dd14:	0800daad 	.word	0x0800daad

0800dd18 <_malloc_usable_size_r>:
 800dd18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd1c:	1f18      	subs	r0, r3, #4
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	bfbc      	itt	lt
 800dd22:	580b      	ldrlt	r3, [r1, r0]
 800dd24:	18c0      	addlt	r0, r0, r3
 800dd26:	4770      	bx	lr

0800dd28 <_raise_r>:
 800dd28:	291f      	cmp	r1, #31
 800dd2a:	b538      	push	{r3, r4, r5, lr}
 800dd2c:	4604      	mov	r4, r0
 800dd2e:	460d      	mov	r5, r1
 800dd30:	d904      	bls.n	800dd3c <_raise_r+0x14>
 800dd32:	2316      	movs	r3, #22
 800dd34:	6003      	str	r3, [r0, #0]
 800dd36:	f04f 30ff 	mov.w	r0, #4294967295
 800dd3a:	bd38      	pop	{r3, r4, r5, pc}
 800dd3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dd3e:	b112      	cbz	r2, 800dd46 <_raise_r+0x1e>
 800dd40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd44:	b94b      	cbnz	r3, 800dd5a <_raise_r+0x32>
 800dd46:	4620      	mov	r0, r4
 800dd48:	f000 f830 	bl	800ddac <_getpid_r>
 800dd4c:	462a      	mov	r2, r5
 800dd4e:	4601      	mov	r1, r0
 800dd50:	4620      	mov	r0, r4
 800dd52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd56:	f000 b817 	b.w	800dd88 <_kill_r>
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d00a      	beq.n	800dd74 <_raise_r+0x4c>
 800dd5e:	1c59      	adds	r1, r3, #1
 800dd60:	d103      	bne.n	800dd6a <_raise_r+0x42>
 800dd62:	2316      	movs	r3, #22
 800dd64:	6003      	str	r3, [r0, #0]
 800dd66:	2001      	movs	r0, #1
 800dd68:	e7e7      	b.n	800dd3a <_raise_r+0x12>
 800dd6a:	2400      	movs	r4, #0
 800dd6c:	4628      	mov	r0, r5
 800dd6e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dd72:	4798      	blx	r3
 800dd74:	2000      	movs	r0, #0
 800dd76:	e7e0      	b.n	800dd3a <_raise_r+0x12>

0800dd78 <raise>:
 800dd78:	4b02      	ldr	r3, [pc, #8]	; (800dd84 <raise+0xc>)
 800dd7a:	4601      	mov	r1, r0
 800dd7c:	6818      	ldr	r0, [r3, #0]
 800dd7e:	f7ff bfd3 	b.w	800dd28 <_raise_r>
 800dd82:	bf00      	nop
 800dd84:	20000140 	.word	0x20000140

0800dd88 <_kill_r>:
 800dd88:	b538      	push	{r3, r4, r5, lr}
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	4d06      	ldr	r5, [pc, #24]	; (800dda8 <_kill_r+0x20>)
 800dd8e:	4604      	mov	r4, r0
 800dd90:	4608      	mov	r0, r1
 800dd92:	4611      	mov	r1, r2
 800dd94:	602b      	str	r3, [r5, #0]
 800dd96:	f7f4 fc76 	bl	8002686 <_kill>
 800dd9a:	1c43      	adds	r3, r0, #1
 800dd9c:	d102      	bne.n	800dda4 <_kill_r+0x1c>
 800dd9e:	682b      	ldr	r3, [r5, #0]
 800dda0:	b103      	cbz	r3, 800dda4 <_kill_r+0x1c>
 800dda2:	6023      	str	r3, [r4, #0]
 800dda4:	bd38      	pop	{r3, r4, r5, pc}
 800dda6:	bf00      	nop
 800dda8:	20000d70 	.word	0x20000d70

0800ddac <_getpid_r>:
 800ddac:	f7f4 bc64 	b.w	8002678 <_getpid>

0800ddb0 <__sread>:
 800ddb0:	b510      	push	{r4, lr}
 800ddb2:	460c      	mov	r4, r1
 800ddb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddb8:	f000 f894 	bl	800dee4 <_read_r>
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	bfab      	itete	ge
 800ddc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ddc2:	89a3      	ldrhlt	r3, [r4, #12]
 800ddc4:	181b      	addge	r3, r3, r0
 800ddc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ddca:	bfac      	ite	ge
 800ddcc:	6563      	strge	r3, [r4, #84]	; 0x54
 800ddce:	81a3      	strhlt	r3, [r4, #12]
 800ddd0:	bd10      	pop	{r4, pc}

0800ddd2 <__swrite>:
 800ddd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddd6:	461f      	mov	r7, r3
 800ddd8:	898b      	ldrh	r3, [r1, #12]
 800ddda:	4605      	mov	r5, r0
 800dddc:	05db      	lsls	r3, r3, #23
 800ddde:	460c      	mov	r4, r1
 800dde0:	4616      	mov	r6, r2
 800dde2:	d505      	bpl.n	800ddf0 <__swrite+0x1e>
 800dde4:	2302      	movs	r3, #2
 800dde6:	2200      	movs	r2, #0
 800dde8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddec:	f000 f868 	bl	800dec0 <_lseek_r>
 800ddf0:	89a3      	ldrh	r3, [r4, #12]
 800ddf2:	4632      	mov	r2, r6
 800ddf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ddf8:	81a3      	strh	r3, [r4, #12]
 800ddfa:	4628      	mov	r0, r5
 800ddfc:	463b      	mov	r3, r7
 800ddfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de06:	f000 b817 	b.w	800de38 <_write_r>

0800de0a <__sseek>:
 800de0a:	b510      	push	{r4, lr}
 800de0c:	460c      	mov	r4, r1
 800de0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de12:	f000 f855 	bl	800dec0 <_lseek_r>
 800de16:	1c43      	adds	r3, r0, #1
 800de18:	89a3      	ldrh	r3, [r4, #12]
 800de1a:	bf15      	itete	ne
 800de1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800de1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800de22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800de26:	81a3      	strheq	r3, [r4, #12]
 800de28:	bf18      	it	ne
 800de2a:	81a3      	strhne	r3, [r4, #12]
 800de2c:	bd10      	pop	{r4, pc}

0800de2e <__sclose>:
 800de2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de32:	f000 b813 	b.w	800de5c <_close_r>
	...

0800de38 <_write_r>:
 800de38:	b538      	push	{r3, r4, r5, lr}
 800de3a:	4604      	mov	r4, r0
 800de3c:	4608      	mov	r0, r1
 800de3e:	4611      	mov	r1, r2
 800de40:	2200      	movs	r2, #0
 800de42:	4d05      	ldr	r5, [pc, #20]	; (800de58 <_write_r+0x20>)
 800de44:	602a      	str	r2, [r5, #0]
 800de46:	461a      	mov	r2, r3
 800de48:	f7f4 fc54 	bl	80026f4 <_write>
 800de4c:	1c43      	adds	r3, r0, #1
 800de4e:	d102      	bne.n	800de56 <_write_r+0x1e>
 800de50:	682b      	ldr	r3, [r5, #0]
 800de52:	b103      	cbz	r3, 800de56 <_write_r+0x1e>
 800de54:	6023      	str	r3, [r4, #0]
 800de56:	bd38      	pop	{r3, r4, r5, pc}
 800de58:	20000d70 	.word	0x20000d70

0800de5c <_close_r>:
 800de5c:	b538      	push	{r3, r4, r5, lr}
 800de5e:	2300      	movs	r3, #0
 800de60:	4d05      	ldr	r5, [pc, #20]	; (800de78 <_close_r+0x1c>)
 800de62:	4604      	mov	r4, r0
 800de64:	4608      	mov	r0, r1
 800de66:	602b      	str	r3, [r5, #0]
 800de68:	f7f4 fc60 	bl	800272c <_close>
 800de6c:	1c43      	adds	r3, r0, #1
 800de6e:	d102      	bne.n	800de76 <_close_r+0x1a>
 800de70:	682b      	ldr	r3, [r5, #0]
 800de72:	b103      	cbz	r3, 800de76 <_close_r+0x1a>
 800de74:	6023      	str	r3, [r4, #0]
 800de76:	bd38      	pop	{r3, r4, r5, pc}
 800de78:	20000d70 	.word	0x20000d70

0800de7c <_fstat_r>:
 800de7c:	b538      	push	{r3, r4, r5, lr}
 800de7e:	2300      	movs	r3, #0
 800de80:	4d06      	ldr	r5, [pc, #24]	; (800de9c <_fstat_r+0x20>)
 800de82:	4604      	mov	r4, r0
 800de84:	4608      	mov	r0, r1
 800de86:	4611      	mov	r1, r2
 800de88:	602b      	str	r3, [r5, #0]
 800de8a:	f7f4 fc5a 	bl	8002742 <_fstat>
 800de8e:	1c43      	adds	r3, r0, #1
 800de90:	d102      	bne.n	800de98 <_fstat_r+0x1c>
 800de92:	682b      	ldr	r3, [r5, #0]
 800de94:	b103      	cbz	r3, 800de98 <_fstat_r+0x1c>
 800de96:	6023      	str	r3, [r4, #0]
 800de98:	bd38      	pop	{r3, r4, r5, pc}
 800de9a:	bf00      	nop
 800de9c:	20000d70 	.word	0x20000d70

0800dea0 <_isatty_r>:
 800dea0:	b538      	push	{r3, r4, r5, lr}
 800dea2:	2300      	movs	r3, #0
 800dea4:	4d05      	ldr	r5, [pc, #20]	; (800debc <_isatty_r+0x1c>)
 800dea6:	4604      	mov	r4, r0
 800dea8:	4608      	mov	r0, r1
 800deaa:	602b      	str	r3, [r5, #0]
 800deac:	f7f4 fc58 	bl	8002760 <_isatty>
 800deb0:	1c43      	adds	r3, r0, #1
 800deb2:	d102      	bne.n	800deba <_isatty_r+0x1a>
 800deb4:	682b      	ldr	r3, [r5, #0]
 800deb6:	b103      	cbz	r3, 800deba <_isatty_r+0x1a>
 800deb8:	6023      	str	r3, [r4, #0]
 800deba:	bd38      	pop	{r3, r4, r5, pc}
 800debc:	20000d70 	.word	0x20000d70

0800dec0 <_lseek_r>:
 800dec0:	b538      	push	{r3, r4, r5, lr}
 800dec2:	4604      	mov	r4, r0
 800dec4:	4608      	mov	r0, r1
 800dec6:	4611      	mov	r1, r2
 800dec8:	2200      	movs	r2, #0
 800deca:	4d05      	ldr	r5, [pc, #20]	; (800dee0 <_lseek_r+0x20>)
 800decc:	602a      	str	r2, [r5, #0]
 800dece:	461a      	mov	r2, r3
 800ded0:	f7f4 fc50 	bl	8002774 <_lseek>
 800ded4:	1c43      	adds	r3, r0, #1
 800ded6:	d102      	bne.n	800dede <_lseek_r+0x1e>
 800ded8:	682b      	ldr	r3, [r5, #0]
 800deda:	b103      	cbz	r3, 800dede <_lseek_r+0x1e>
 800dedc:	6023      	str	r3, [r4, #0]
 800dede:	bd38      	pop	{r3, r4, r5, pc}
 800dee0:	20000d70 	.word	0x20000d70

0800dee4 <_read_r>:
 800dee4:	b538      	push	{r3, r4, r5, lr}
 800dee6:	4604      	mov	r4, r0
 800dee8:	4608      	mov	r0, r1
 800deea:	4611      	mov	r1, r2
 800deec:	2200      	movs	r2, #0
 800deee:	4d05      	ldr	r5, [pc, #20]	; (800df04 <_read_r+0x20>)
 800def0:	602a      	str	r2, [r5, #0]
 800def2:	461a      	mov	r2, r3
 800def4:	f7f4 fbe1 	bl	80026ba <_read>
 800def8:	1c43      	adds	r3, r0, #1
 800defa:	d102      	bne.n	800df02 <_read_r+0x1e>
 800defc:	682b      	ldr	r3, [r5, #0]
 800defe:	b103      	cbz	r3, 800df02 <_read_r+0x1e>
 800df00:	6023      	str	r3, [r4, #0]
 800df02:	bd38      	pop	{r3, r4, r5, pc}
 800df04:	20000d70 	.word	0x20000d70

0800df08 <fmin>:
 800df08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df0a:	4604      	mov	r4, r0
 800df0c:	460d      	mov	r5, r1
 800df0e:	4616      	mov	r6, r2
 800df10:	461f      	mov	r7, r3
 800df12:	f000 f813 	bl	800df3c <__fpclassifyd>
 800df16:	b158      	cbz	r0, 800df30 <fmin+0x28>
 800df18:	4630      	mov	r0, r6
 800df1a:	4639      	mov	r1, r7
 800df1c:	f000 f80e 	bl	800df3c <__fpclassifyd>
 800df20:	b140      	cbz	r0, 800df34 <fmin+0x2c>
 800df22:	4632      	mov	r2, r6
 800df24:	463b      	mov	r3, r7
 800df26:	4620      	mov	r0, r4
 800df28:	4629      	mov	r1, r5
 800df2a:	f7f2 fdb3 	bl	8000a94 <__aeabi_dcmplt>
 800df2e:	b908      	cbnz	r0, 800df34 <fmin+0x2c>
 800df30:	4634      	mov	r4, r6
 800df32:	463d      	mov	r5, r7
 800df34:	4620      	mov	r0, r4
 800df36:	4629      	mov	r1, r5
 800df38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df3c <__fpclassifyd>:
 800df3c:	b510      	push	{r4, lr}
 800df3e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800df42:	460b      	mov	r3, r1
 800df44:	d019      	beq.n	800df7a <__fpclassifyd+0x3e>
 800df46:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 800df4a:	490e      	ldr	r1, [pc, #56]	; (800df84 <__fpclassifyd+0x48>)
 800df4c:	428a      	cmp	r2, r1
 800df4e:	d90e      	bls.n	800df6e <__fpclassifyd+0x32>
 800df50:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 800df54:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800df58:	428a      	cmp	r2, r1
 800df5a:	d908      	bls.n	800df6e <__fpclassifyd+0x32>
 800df5c:	4a0a      	ldr	r2, [pc, #40]	; (800df88 <__fpclassifyd+0x4c>)
 800df5e:	4213      	tst	r3, r2
 800df60:	d007      	beq.n	800df72 <__fpclassifyd+0x36>
 800df62:	4294      	cmp	r4, r2
 800df64:	d107      	bne.n	800df76 <__fpclassifyd+0x3a>
 800df66:	fab0 f080 	clz	r0, r0
 800df6a:	0940      	lsrs	r0, r0, #5
 800df6c:	bd10      	pop	{r4, pc}
 800df6e:	2004      	movs	r0, #4
 800df70:	e7fc      	b.n	800df6c <__fpclassifyd+0x30>
 800df72:	2003      	movs	r0, #3
 800df74:	e7fa      	b.n	800df6c <__fpclassifyd+0x30>
 800df76:	2000      	movs	r0, #0
 800df78:	e7f8      	b.n	800df6c <__fpclassifyd+0x30>
 800df7a:	2800      	cmp	r0, #0
 800df7c:	d1ee      	bne.n	800df5c <__fpclassifyd+0x20>
 800df7e:	2002      	movs	r0, #2
 800df80:	e7f4      	b.n	800df6c <__fpclassifyd+0x30>
 800df82:	bf00      	nop
 800df84:	7fdfffff 	.word	0x7fdfffff
 800df88:	7ff00000 	.word	0x7ff00000

0800df8c <sqrt>:
 800df8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df8e:	4606      	mov	r6, r0
 800df90:	460f      	mov	r7, r1
 800df92:	f000 f81f 	bl	800dfd4 <__ieee754_sqrt>
 800df96:	4632      	mov	r2, r6
 800df98:	4604      	mov	r4, r0
 800df9a:	460d      	mov	r5, r1
 800df9c:	463b      	mov	r3, r7
 800df9e:	4630      	mov	r0, r6
 800dfa0:	4639      	mov	r1, r7
 800dfa2:	f7f2 fd9f 	bl	8000ae4 <__aeabi_dcmpun>
 800dfa6:	b990      	cbnz	r0, 800dfce <sqrt+0x42>
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	2300      	movs	r3, #0
 800dfac:	4630      	mov	r0, r6
 800dfae:	4639      	mov	r1, r7
 800dfb0:	f7f2 fd70 	bl	8000a94 <__aeabi_dcmplt>
 800dfb4:	b158      	cbz	r0, 800dfce <sqrt+0x42>
 800dfb6:	f7fd f879 	bl	800b0ac <__errno>
 800dfba:	2321      	movs	r3, #33	; 0x21
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	6003      	str	r3, [r0, #0]
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	4610      	mov	r0, r2
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	f7f2 fc1d 	bl	8000804 <__aeabi_ddiv>
 800dfca:	4604      	mov	r4, r0
 800dfcc:	460d      	mov	r5, r1
 800dfce:	4620      	mov	r0, r4
 800dfd0:	4629      	mov	r1, r5
 800dfd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dfd4 <__ieee754_sqrt>:
 800dfd4:	f8df c158 	ldr.w	ip, [pc, #344]	; 800e130 <__ieee754_sqrt+0x15c>
 800dfd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfdc:	ea3c 0c01 	bics.w	ip, ip, r1
 800dfe0:	4606      	mov	r6, r0
 800dfe2:	460d      	mov	r5, r1
 800dfe4:	460c      	mov	r4, r1
 800dfe6:	460a      	mov	r2, r1
 800dfe8:	4607      	mov	r7, r0
 800dfea:	4603      	mov	r3, r0
 800dfec:	d10f      	bne.n	800e00e <__ieee754_sqrt+0x3a>
 800dfee:	4602      	mov	r2, r0
 800dff0:	460b      	mov	r3, r1
 800dff2:	f7f2 fadd 	bl	80005b0 <__aeabi_dmul>
 800dff6:	4602      	mov	r2, r0
 800dff8:	460b      	mov	r3, r1
 800dffa:	4630      	mov	r0, r6
 800dffc:	4629      	mov	r1, r5
 800dffe:	f7f2 f921 	bl	8000244 <__adddf3>
 800e002:	4606      	mov	r6, r0
 800e004:	460d      	mov	r5, r1
 800e006:	4630      	mov	r0, r6
 800e008:	4629      	mov	r1, r5
 800e00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e00e:	2900      	cmp	r1, #0
 800e010:	dc0e      	bgt.n	800e030 <__ieee754_sqrt+0x5c>
 800e012:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800e016:	ea5c 0707 	orrs.w	r7, ip, r7
 800e01a:	d0f4      	beq.n	800e006 <__ieee754_sqrt+0x32>
 800e01c:	b141      	cbz	r1, 800e030 <__ieee754_sqrt+0x5c>
 800e01e:	4602      	mov	r2, r0
 800e020:	460b      	mov	r3, r1
 800e022:	f7f2 f90d 	bl	8000240 <__aeabi_dsub>
 800e026:	4602      	mov	r2, r0
 800e028:	460b      	mov	r3, r1
 800e02a:	f7f2 fbeb 	bl	8000804 <__aeabi_ddiv>
 800e02e:	e7e8      	b.n	800e002 <__ieee754_sqrt+0x2e>
 800e030:	1521      	asrs	r1, r4, #20
 800e032:	d075      	beq.n	800e120 <__ieee754_sqrt+0x14c>
 800e034:	07cc      	lsls	r4, r1, #31
 800e036:	f04f 0400 	mov.w	r4, #0
 800e03a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e03e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800e042:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e046:	bf5e      	ittt	pl
 800e048:	0fd9      	lsrpl	r1, r3, #31
 800e04a:	005b      	lslpl	r3, r3, #1
 800e04c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800e050:	0fd9      	lsrs	r1, r3, #31
 800e052:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e056:	2516      	movs	r5, #22
 800e058:	4620      	mov	r0, r4
 800e05a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e05e:	107f      	asrs	r7, r7, #1
 800e060:	005b      	lsls	r3, r3, #1
 800e062:	1846      	adds	r6, r0, r1
 800e064:	4296      	cmp	r6, r2
 800e066:	bfde      	ittt	le
 800e068:	1b92      	suble	r2, r2, r6
 800e06a:	1870      	addle	r0, r6, r1
 800e06c:	1864      	addle	r4, r4, r1
 800e06e:	0052      	lsls	r2, r2, #1
 800e070:	3d01      	subs	r5, #1
 800e072:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800e076:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e07a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e07e:	d1f0      	bne.n	800e062 <__ieee754_sqrt+0x8e>
 800e080:	4629      	mov	r1, r5
 800e082:	f04f 0e20 	mov.w	lr, #32
 800e086:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e08a:	4282      	cmp	r2, r0
 800e08c:	eb06 0c05 	add.w	ip, r6, r5
 800e090:	dc02      	bgt.n	800e098 <__ieee754_sqrt+0xc4>
 800e092:	d113      	bne.n	800e0bc <__ieee754_sqrt+0xe8>
 800e094:	459c      	cmp	ip, r3
 800e096:	d811      	bhi.n	800e0bc <__ieee754_sqrt+0xe8>
 800e098:	f1bc 0f00 	cmp.w	ip, #0
 800e09c:	eb0c 0506 	add.w	r5, ip, r6
 800e0a0:	da43      	bge.n	800e12a <__ieee754_sqrt+0x156>
 800e0a2:	2d00      	cmp	r5, #0
 800e0a4:	db41      	blt.n	800e12a <__ieee754_sqrt+0x156>
 800e0a6:	f100 0801 	add.w	r8, r0, #1
 800e0aa:	1a12      	subs	r2, r2, r0
 800e0ac:	4640      	mov	r0, r8
 800e0ae:	459c      	cmp	ip, r3
 800e0b0:	bf88      	it	hi
 800e0b2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e0b6:	eba3 030c 	sub.w	r3, r3, ip
 800e0ba:	4431      	add	r1, r6
 800e0bc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e0c0:	f1be 0e01 	subs.w	lr, lr, #1
 800e0c4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800e0c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e0cc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e0d0:	d1db      	bne.n	800e08a <__ieee754_sqrt+0xb6>
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	d006      	beq.n	800e0e4 <__ieee754_sqrt+0x110>
 800e0d6:	1c48      	adds	r0, r1, #1
 800e0d8:	bf0b      	itete	eq
 800e0da:	4671      	moveq	r1, lr
 800e0dc:	3101      	addne	r1, #1
 800e0de:	3401      	addeq	r4, #1
 800e0e0:	f021 0101 	bicne.w	r1, r1, #1
 800e0e4:	1063      	asrs	r3, r4, #1
 800e0e6:	0849      	lsrs	r1, r1, #1
 800e0e8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e0ec:	07e2      	lsls	r2, r4, #31
 800e0ee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e0f2:	bf48      	it	mi
 800e0f4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800e0f8:	460e      	mov	r6, r1
 800e0fa:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e0fe:	e782      	b.n	800e006 <__ieee754_sqrt+0x32>
 800e100:	0ada      	lsrs	r2, r3, #11
 800e102:	3815      	subs	r0, #21
 800e104:	055b      	lsls	r3, r3, #21
 800e106:	2a00      	cmp	r2, #0
 800e108:	d0fa      	beq.n	800e100 <__ieee754_sqrt+0x12c>
 800e10a:	02d5      	lsls	r5, r2, #11
 800e10c:	d50a      	bpl.n	800e124 <__ieee754_sqrt+0x150>
 800e10e:	f1c1 0420 	rsb	r4, r1, #32
 800e112:	fa23 f404 	lsr.w	r4, r3, r4
 800e116:	1e4d      	subs	r5, r1, #1
 800e118:	408b      	lsls	r3, r1
 800e11a:	4322      	orrs	r2, r4
 800e11c:	1b41      	subs	r1, r0, r5
 800e11e:	e789      	b.n	800e034 <__ieee754_sqrt+0x60>
 800e120:	4608      	mov	r0, r1
 800e122:	e7f0      	b.n	800e106 <__ieee754_sqrt+0x132>
 800e124:	0052      	lsls	r2, r2, #1
 800e126:	3101      	adds	r1, #1
 800e128:	e7ef      	b.n	800e10a <__ieee754_sqrt+0x136>
 800e12a:	4680      	mov	r8, r0
 800e12c:	e7bd      	b.n	800e0aa <__ieee754_sqrt+0xd6>
 800e12e:	bf00      	nop
 800e130:	7ff00000 	.word	0x7ff00000

0800e134 <_init>:
 800e134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e136:	bf00      	nop
 800e138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e13a:	bc08      	pop	{r3}
 800e13c:	469e      	mov	lr, r3
 800e13e:	4770      	bx	lr

0800e140 <_fini>:
 800e140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e142:	bf00      	nop
 800e144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e146:	bc08      	pop	{r3}
 800e148:	469e      	mov	lr, r3
 800e14a:	4770      	bx	lr
